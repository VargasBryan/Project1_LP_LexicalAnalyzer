Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    AND
    BACKSLASH
    BOOLEAN
    BREAK
    CASE
    CLASS
    COMMENTS
    DEFAULT
    DIVIGUAL
    DOUBLE_QUOTES
    FLOAT
    FUNCTION
    INT
    LENGTH
    LINE_BREAK
    LONGCOMMENT
    MASIGUAL
    MENOSIGUAL
    MODIGUAL
    NOT
    NULL
    OR
    PORIGUAL
    POTIGUAL
    RETURN
    SINGLE_QUOTE
    STATIC
    SWITCH
    THEN
    TOSTRING
    TYPEOF
    UNDEFINED

Grammar

Rule 0     S' -> expression
Rule 1     expression -> variable
Rule 2     expression -> variable expression
Rule 3     expression -> dataStruct
Rule 4     expression -> dataStruct expression
Rule 5     expression -> controlStruct
Rule 6     expression -> controlStruct expression
Rule 7     expression -> methodsSet
Rule 8     variable -> type NAME IGUAL datatype SEMICOLON
Rule 9     variable -> type NAME IGUAL operations SEMICOLON
Rule 10    variable -> NAME IGUAL datatype SEMICOLON
Rule 11    controlStruct -> while
Rule 12    controlStruct -> for
Rule 13    dataStruct -> array
Rule 14    dataStruct -> set
Rule 15    while -> WHILE OPEN_PARENTHESIS controlArg CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE
Rule 16    while -> WHILE OPEN_PARENTHESIS bool CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE
Rule 17    if -> soloIf
Rule 18    if -> soloIf elseIf
Rule 19    if -> soloIf elseIf else
Rule 20    if -> soloIf else
Rule 21    soloIf -> IF OPEN_PARENTHESIS bool CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE
Rule 22    elseIf -> ELSEIF OPEN_PARENTHESIS bool CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE
Rule 23    elseIf -> ELSEIF OPEN_PARENTHESIS bool CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE soloIf
Rule 24    else -> ELSE OPEN_BRACE expression CLOSE_BRACE
Rule 25    comparacion -> IGUALIGUAL
Rule 26    comparacion -> DIFERENTE
Rule 27    comparacion -> MAYORQUE
Rule 28    comparacion -> MAYORIGUALQUE
Rule 29    comparacion -> MENORQUE
Rule 30    comparacion -> MENORIGUALQUE
Rule 31    controlArg -> argUnico comparacion argUnico
Rule 32    for -> FOR OPEN_PARENTHESIS inicialization SEMICOLON condition SEMICOLON operations CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE
Rule 33    inicialization -> type NAME IGUAL NUMBER
Rule 34    inicialization -> NAME IGUAL NUMBER
Rule 35    condition -> NAME clause value
Rule 36    operations -> NUMBER operand NUMBER
Rule 37    operations -> NAME SUMA SUMA
Rule 38    operations -> NAME RESTA RESTA
Rule 39    datatype -> NUMBER
Rule 40    datatype -> STRING
Rule 41    datatype -> CHAR
Rule 42    operand -> SUMA
Rule 43    operand -> RESTA
Rule 44    operand -> MULTIPLICACION
Rule 45    operand -> DIVISION
Rule 46    bool -> TRUE
Rule 47    bool -> FALSE
Rule 48    type -> CONST
Rule 49    type -> LET
Rule 50    type -> VAR
Rule 51    clause -> IGUALIGUAL
Rule 52    clause -> DIFERENTE
Rule 53    clause -> MAYORQUE
Rule 54    clause -> MAYORIGUALQUE
Rule 55    clause -> MENORQUE
Rule 56    clause -> MENORIGUALQUE
Rule 57    value -> NAME
Rule 58    value -> NUMBER
Rule 59    array -> type NAME IGUAL OPEN_BRACKET items CLOSE_BRACKET SEMICOLON
Rule 60    array -> type NAME IGUAL NEW ARRAY OPEN_PARENTHESIS items CLOSE_PARENTHESIS SEMICOLON
Rule 61    map -> iniciarMap
Rule 62    map -> escribirMap
Rule 63    map -> generarMap
Rule 64    iniciarMap -> variable IGUAL NEW MAP OPEN_PARENTHESIS CLOSE_PARENTHESIS SEMICOLON
Rule 65    escribirMap -> variable IGUAL OPEN_BRACE claveValor CLOSE_BRACE
Rule 66    claveValor -> clave COLON valor
Rule 67    claveValor -> clave COLON valor COMMA claveValor
Rule 68    clave -> datatype
Rule 69    valor -> datatype
Rule 70    valor -> dataStruct
Rule 71    generarMap -> variable IGUAL OPEN_BRACE tuplas CLOSE_BRACE
Rule 72    tuplas -> tupla
Rule 73    tuplas -> tupla tuplas
Rule 74    tupla -> OPEN_BRACKET datatype CLOSE_BRACKET
Rule 75    tupla -> OPEN_BRACKET datatype COMMA datatype CLOSE_BRACKET
Rule 76    arrayFn -> POINT POP OPEN_PARENTHESIS CLOSE_PARENTHESIS
Rule 77    arrayFn -> POINT PUSH OPEN_PARENTHESIS argUnico CLOSE_PARENTHESIS
Rule 78    arrayFn -> POINT UNSHIFT OPEN_PARENTHESIS argUnico CLOSE_PARENTHESIS
Rule 79    argUnico -> NUMBER
Rule 80    argUnico -> STRING
Rule 81    argUnico -> NAME
Rule 82    set -> type NAME IGUAL NEW SET OPEN_PARENTHESIS CLOSE_PARENTHESIS SEMICOLON
Rule 83    set -> type NAME IGUAL NEW SET OPEN_PARENTHESIS OPEN_BRACKET items CLOSE_BRACKET CLOSE_PARENTHESIS SEMICOLON
Rule 84    set -> type NAME IGUAL NEW SET OPEN_PARENTHESIS element CLOSE_PARENTHESIS SEMICOLON
Rule 85    set -> NAME IGUAL NEW SET OPEN_PARENTHESIS CLOSE_PARENTHESIS SEMICOLON
Rule 86    set -> NAME IGUAL NEW SET OPEN_PARENTHESIS OPEN_BRACKET items CLOSE_BRACKET CLOSE_PARENTHESIS SEMICOLON
Rule 87    set -> NAME IGUAL NEW SET OPEN_PARENTHESIS element CLOSE_PARENTHESIS SEMICOLON
Rule 88    methodsSet -> NAME POINT ADD OPEN_PARENTHESIS element CLOSE_PARENTHESIS SEMICOLON
Rule 89    methodsSet -> NAME POINT DELETE OPEN_PARENTHESIS element CLOSE_PARENTHESIS SEMICOLON
Rule 90    methodsSet -> NAME POINT CLEAR OPEN_PARENTHESIS CLOSE_PARENTHESIS SEMICOLON
Rule 91    items -> numeros
Rule 92    items -> cadena
Rule 93    numeros -> NUMBER
Rule 94    numeros -> NUMBER COMMA numeros
Rule 95    cadena -> STRING
Rule 96    cadena -> STRING COMMA cadena
Rule 97    element -> STRING
Rule 98    element -> NUMBER
Rule 99    element -> NAME

Terminals, with rules where they appear

ADD                  : 88
AND                  : 
ARRAY                : 60
BACKSLASH            : 
BOOLEAN              : 
BREAK                : 
CASE                 : 
CHAR                 : 41
CLASS                : 
CLEAR                : 90
CLOSE_BRACE          : 15 16 21 22 23 24 32 65 71
CLOSE_BRACKET        : 59 74 75 83 86
CLOSE_PARENTHESIS    : 15 16 21 22 23 32 60 64 76 77 78 82 83 84 85 86 87 88 89 90
COLON                : 66 67
COMMA                : 67 75 94 96
COMMENTS             : 
CONST                : 48
DEFAULT              : 
DELETE               : 89
DIFERENTE            : 26 52
DIVIGUAL             : 
DIVISION             : 45
DOUBLE_QUOTES        : 
ELSE                 : 24
ELSEIF               : 22 23
FALSE                : 47
FLOAT                : 
FOR                  : 32
FUNCTION             : 
IF                   : 21
IGUAL                : 8 9 10 33 34 59 60 64 65 71 82 83 84 85 86 87
IGUALIGUAL           : 25 51
INT                  : 
LENGTH               : 
LET                  : 49
LINE_BREAK           : 
LONGCOMMENT          : 
MAP                  : 64
MASIGUAL             : 
MAYORIGUALQUE        : 28 54
MAYORQUE             : 27 53
MENORIGUALQUE        : 30 56
MENORQUE             : 29 55
MENOSIGUAL           : 
MODIGUAL             : 
MULTIPLICACION       : 44
NAME                 : 8 9 10 33 34 35 37 38 57 59 60 81 82 83 84 85 86 87 88 89 90 99
NEW                  : 60 64 82 83 84 85 86 87
NOT                  : 
NULL                 : 
NUMBER               : 33 34 36 36 39 58 79 93 94 98
OPEN_BRACE           : 15 16 21 22 23 24 32 65 71
OPEN_BRACKET         : 59 74 75 83 86
OPEN_PARENTHESIS     : 15 16 21 22 23 32 60 64 76 77 78 82 83 84 85 86 87 88 89 90
OR                   : 
POINT                : 76 77 78 88 89 90
POP                  : 76
PORIGUAL             : 
POTIGUAL             : 
PUSH                 : 77
RESTA                : 38 38 43
RETURN               : 
SEMICOLON            : 8 9 10 32 32 59 60 64 82 83 84 85 86 87 88 89 90
SET                  : 82 83 84 85 86 87
SINGLE_QUOTE         : 
STATIC               : 
STRING               : 40 80 95 96 97
SUMA                 : 37 37 42
SWITCH               : 
THEN                 : 
TOSTRING             : 
TRUE                 : 46
TYPEOF               : 
UNDEFINED            : 
UNSHIFT              : 78
VAR                  : 50
WHILE                : 15 16
error                : 

Nonterminals, with rules where they appear

argUnico             : 31 31 77 78
array                : 13
arrayFn              : 
bool                 : 16 21 22 23
cadena               : 92 96
clause               : 35
clave                : 66 67
claveValor           : 65 67
comparacion          : 31
condition            : 32
controlArg           : 15
controlStruct        : 5 6
dataStruct           : 3 4 70
datatype             : 8 10 68 69 74 75 75
element              : 84 87 88 89
else                 : 19 20
elseIf               : 18 19
escribirMap          : 62
expression           : 2 4 6 15 16 21 22 23 24 32 0
for                  : 12
generarMap           : 63
if                   : 
inicialization       : 32
iniciarMap           : 61
items                : 59 60 83 86
map                  : 
methodsSet           : 7
numeros              : 91 94
operand              : 36
operations           : 9 32
set                  : 14
soloIf               : 17 18 19 20 23
tupla                : 72 73
tuplas               : 71 73
type                 : 8 9 33 59 60 82 83 84
valor                : 66 67
value                : 35
variable             : 1 2 64 65 71
while                : 11

Parsing method: LALR

state 0

    (0) S' -> . expression
    (1) expression -> . variable
    (2) expression -> . variable expression
    (3) expression -> . dataStruct
    (4) expression -> . dataStruct expression
    (5) expression -> . controlStruct
    (6) expression -> . controlStruct expression
    (7) expression -> . methodsSet
    (8) variable -> . type NAME IGUAL datatype SEMICOLON
    (9) variable -> . type NAME IGUAL operations SEMICOLON
    (10) variable -> . NAME IGUAL datatype SEMICOLON
    (13) dataStruct -> . array
    (14) dataStruct -> . set
    (11) controlStruct -> . while
    (12) controlStruct -> . for
    (88) methodsSet -> . NAME POINT ADD OPEN_PARENTHESIS element CLOSE_PARENTHESIS SEMICOLON
    (89) methodsSet -> . NAME POINT DELETE OPEN_PARENTHESIS element CLOSE_PARENTHESIS SEMICOLON
    (90) methodsSet -> . NAME POINT CLEAR OPEN_PARENTHESIS CLOSE_PARENTHESIS SEMICOLON
    (48) type -> . CONST
    (49) type -> . LET
    (50) type -> . VAR
    (59) array -> . type NAME IGUAL OPEN_BRACKET items CLOSE_BRACKET SEMICOLON
    (60) array -> . type NAME IGUAL NEW ARRAY OPEN_PARENTHESIS items CLOSE_PARENTHESIS SEMICOLON
    (82) set -> . type NAME IGUAL NEW SET OPEN_PARENTHESIS CLOSE_PARENTHESIS SEMICOLON
    (83) set -> . type NAME IGUAL NEW SET OPEN_PARENTHESIS OPEN_BRACKET items CLOSE_BRACKET CLOSE_PARENTHESIS SEMICOLON
    (84) set -> . type NAME IGUAL NEW SET OPEN_PARENTHESIS element CLOSE_PARENTHESIS SEMICOLON
    (85) set -> . NAME IGUAL NEW SET OPEN_PARENTHESIS CLOSE_PARENTHESIS SEMICOLON
    (86) set -> . NAME IGUAL NEW SET OPEN_PARENTHESIS OPEN_BRACKET items CLOSE_BRACKET CLOSE_PARENTHESIS SEMICOLON
    (87) set -> . NAME IGUAL NEW SET OPEN_PARENTHESIS element CLOSE_PARENTHESIS SEMICOLON
    (15) while -> . WHILE OPEN_PARENTHESIS controlArg CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE
    (16) while -> . WHILE OPEN_PARENTHESIS bool CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE
    (32) for -> . FOR OPEN_PARENTHESIS inicialization SEMICOLON condition SEMICOLON operations CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE

    NAME            shift and go to state 7
    CONST           shift and go to state 12
    LET             shift and go to state 13
    VAR             shift and go to state 14
    WHILE           shift and go to state 15
    FOR             shift and go to state 16

    expression                     shift and go to state 1
    variable                       shift and go to state 2
    dataStruct                     shift and go to state 3
    controlStruct                  shift and go to state 4
    methodsSet                     shift and go to state 5
    type                           shift and go to state 6
    array                          shift and go to state 8
    set                            shift and go to state 9
    while                          shift and go to state 10
    for                            shift and go to state 11

state 1

    (0) S' -> expression .



state 2

    (1) expression -> variable .
    (2) expression -> variable . expression
    (1) expression -> . variable
    (2) expression -> . variable expression
    (3) expression -> . dataStruct
    (4) expression -> . dataStruct expression
    (5) expression -> . controlStruct
    (6) expression -> . controlStruct expression
    (7) expression -> . methodsSet
    (8) variable -> . type NAME IGUAL datatype SEMICOLON
    (9) variable -> . type NAME IGUAL operations SEMICOLON
    (10) variable -> . NAME IGUAL datatype SEMICOLON
    (13) dataStruct -> . array
    (14) dataStruct -> . set
    (11) controlStruct -> . while
    (12) controlStruct -> . for
    (88) methodsSet -> . NAME POINT ADD OPEN_PARENTHESIS element CLOSE_PARENTHESIS SEMICOLON
    (89) methodsSet -> . NAME POINT DELETE OPEN_PARENTHESIS element CLOSE_PARENTHESIS SEMICOLON
    (90) methodsSet -> . NAME POINT CLEAR OPEN_PARENTHESIS CLOSE_PARENTHESIS SEMICOLON
    (48) type -> . CONST
    (49) type -> . LET
    (50) type -> . VAR
    (59) array -> . type NAME IGUAL OPEN_BRACKET items CLOSE_BRACKET SEMICOLON
    (60) array -> . type NAME IGUAL NEW ARRAY OPEN_PARENTHESIS items CLOSE_PARENTHESIS SEMICOLON
    (82) set -> . type NAME IGUAL NEW SET OPEN_PARENTHESIS CLOSE_PARENTHESIS SEMICOLON
    (83) set -> . type NAME IGUAL NEW SET OPEN_PARENTHESIS OPEN_BRACKET items CLOSE_BRACKET CLOSE_PARENTHESIS SEMICOLON
    (84) set -> . type NAME IGUAL NEW SET OPEN_PARENTHESIS element CLOSE_PARENTHESIS SEMICOLON
    (85) set -> . NAME IGUAL NEW SET OPEN_PARENTHESIS CLOSE_PARENTHESIS SEMICOLON
    (86) set -> . NAME IGUAL NEW SET OPEN_PARENTHESIS OPEN_BRACKET items CLOSE_BRACKET CLOSE_PARENTHESIS SEMICOLON
    (87) set -> . NAME IGUAL NEW SET OPEN_PARENTHESIS element CLOSE_PARENTHESIS SEMICOLON
    (15) while -> . WHILE OPEN_PARENTHESIS controlArg CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE
    (16) while -> . WHILE OPEN_PARENTHESIS bool CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE
    (32) for -> . FOR OPEN_PARENTHESIS inicialization SEMICOLON condition SEMICOLON operations CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE

    $end            reduce using rule 1 (expression -> variable .)
    CLOSE_BRACE     reduce using rule 1 (expression -> variable .)
    NAME            shift and go to state 7
    CONST           shift and go to state 12
    LET             shift and go to state 13
    VAR             shift and go to state 14
    WHILE           shift and go to state 15
    FOR             shift and go to state 16

    variable                       shift and go to state 2
    expression                     shift and go to state 17
    dataStruct                     shift and go to state 3
    controlStruct                  shift and go to state 4
    methodsSet                     shift and go to state 5
    type                           shift and go to state 6
    array                          shift and go to state 8
    set                            shift and go to state 9
    while                          shift and go to state 10
    for                            shift and go to state 11

state 3

    (3) expression -> dataStruct .
    (4) expression -> dataStruct . expression
    (1) expression -> . variable
    (2) expression -> . variable expression
    (3) expression -> . dataStruct
    (4) expression -> . dataStruct expression
    (5) expression -> . controlStruct
    (6) expression -> . controlStruct expression
    (7) expression -> . methodsSet
    (8) variable -> . type NAME IGUAL datatype SEMICOLON
    (9) variable -> . type NAME IGUAL operations SEMICOLON
    (10) variable -> . NAME IGUAL datatype SEMICOLON
    (13) dataStruct -> . array
    (14) dataStruct -> . set
    (11) controlStruct -> . while
    (12) controlStruct -> . for
    (88) methodsSet -> . NAME POINT ADD OPEN_PARENTHESIS element CLOSE_PARENTHESIS SEMICOLON
    (89) methodsSet -> . NAME POINT DELETE OPEN_PARENTHESIS element CLOSE_PARENTHESIS SEMICOLON
    (90) methodsSet -> . NAME POINT CLEAR OPEN_PARENTHESIS CLOSE_PARENTHESIS SEMICOLON
    (48) type -> . CONST
    (49) type -> . LET
    (50) type -> . VAR
    (59) array -> . type NAME IGUAL OPEN_BRACKET items CLOSE_BRACKET SEMICOLON
    (60) array -> . type NAME IGUAL NEW ARRAY OPEN_PARENTHESIS items CLOSE_PARENTHESIS SEMICOLON
    (82) set -> . type NAME IGUAL NEW SET OPEN_PARENTHESIS CLOSE_PARENTHESIS SEMICOLON
    (83) set -> . type NAME IGUAL NEW SET OPEN_PARENTHESIS OPEN_BRACKET items CLOSE_BRACKET CLOSE_PARENTHESIS SEMICOLON
    (84) set -> . type NAME IGUAL NEW SET OPEN_PARENTHESIS element CLOSE_PARENTHESIS SEMICOLON
    (85) set -> . NAME IGUAL NEW SET OPEN_PARENTHESIS CLOSE_PARENTHESIS SEMICOLON
    (86) set -> . NAME IGUAL NEW SET OPEN_PARENTHESIS OPEN_BRACKET items CLOSE_BRACKET CLOSE_PARENTHESIS SEMICOLON
    (87) set -> . NAME IGUAL NEW SET OPEN_PARENTHESIS element CLOSE_PARENTHESIS SEMICOLON
    (15) while -> . WHILE OPEN_PARENTHESIS controlArg CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE
    (16) while -> . WHILE OPEN_PARENTHESIS bool CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE
    (32) for -> . FOR OPEN_PARENTHESIS inicialization SEMICOLON condition SEMICOLON operations CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE

    $end            reduce using rule 3 (expression -> dataStruct .)
    CLOSE_BRACE     reduce using rule 3 (expression -> dataStruct .)
    NAME            shift and go to state 7
    CONST           shift and go to state 12
    LET             shift and go to state 13
    VAR             shift and go to state 14
    WHILE           shift and go to state 15
    FOR             shift and go to state 16

    dataStruct                     shift and go to state 3
    expression                     shift and go to state 18
    variable                       shift and go to state 2
    controlStruct                  shift and go to state 4
    methodsSet                     shift and go to state 5
    type                           shift and go to state 6
    array                          shift and go to state 8
    set                            shift and go to state 9
    while                          shift and go to state 10
    for                            shift and go to state 11

state 4

    (5) expression -> controlStruct .
    (6) expression -> controlStruct . expression
    (1) expression -> . variable
    (2) expression -> . variable expression
    (3) expression -> . dataStruct
    (4) expression -> . dataStruct expression
    (5) expression -> . controlStruct
    (6) expression -> . controlStruct expression
    (7) expression -> . methodsSet
    (8) variable -> . type NAME IGUAL datatype SEMICOLON
    (9) variable -> . type NAME IGUAL operations SEMICOLON
    (10) variable -> . NAME IGUAL datatype SEMICOLON
    (13) dataStruct -> . array
    (14) dataStruct -> . set
    (11) controlStruct -> . while
    (12) controlStruct -> . for
    (88) methodsSet -> . NAME POINT ADD OPEN_PARENTHESIS element CLOSE_PARENTHESIS SEMICOLON
    (89) methodsSet -> . NAME POINT DELETE OPEN_PARENTHESIS element CLOSE_PARENTHESIS SEMICOLON
    (90) methodsSet -> . NAME POINT CLEAR OPEN_PARENTHESIS CLOSE_PARENTHESIS SEMICOLON
    (48) type -> . CONST
    (49) type -> . LET
    (50) type -> . VAR
    (59) array -> . type NAME IGUAL OPEN_BRACKET items CLOSE_BRACKET SEMICOLON
    (60) array -> . type NAME IGUAL NEW ARRAY OPEN_PARENTHESIS items CLOSE_PARENTHESIS SEMICOLON
    (82) set -> . type NAME IGUAL NEW SET OPEN_PARENTHESIS CLOSE_PARENTHESIS SEMICOLON
    (83) set -> . type NAME IGUAL NEW SET OPEN_PARENTHESIS OPEN_BRACKET items CLOSE_BRACKET CLOSE_PARENTHESIS SEMICOLON
    (84) set -> . type NAME IGUAL NEW SET OPEN_PARENTHESIS element CLOSE_PARENTHESIS SEMICOLON
    (85) set -> . NAME IGUAL NEW SET OPEN_PARENTHESIS CLOSE_PARENTHESIS SEMICOLON
    (86) set -> . NAME IGUAL NEW SET OPEN_PARENTHESIS OPEN_BRACKET items CLOSE_BRACKET CLOSE_PARENTHESIS SEMICOLON
    (87) set -> . NAME IGUAL NEW SET OPEN_PARENTHESIS element CLOSE_PARENTHESIS SEMICOLON
    (15) while -> . WHILE OPEN_PARENTHESIS controlArg CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE
    (16) while -> . WHILE OPEN_PARENTHESIS bool CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE
    (32) for -> . FOR OPEN_PARENTHESIS inicialization SEMICOLON condition SEMICOLON operations CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE

    $end            reduce using rule 5 (expression -> controlStruct .)
    CLOSE_BRACE     reduce using rule 5 (expression -> controlStruct .)
    NAME            shift and go to state 7
    CONST           shift and go to state 12
    LET             shift and go to state 13
    VAR             shift and go to state 14
    WHILE           shift and go to state 15
    FOR             shift and go to state 16

    controlStruct                  shift and go to state 4
    expression                     shift and go to state 19
    variable                       shift and go to state 2
    dataStruct                     shift and go to state 3
    methodsSet                     shift and go to state 5
    type                           shift and go to state 6
    array                          shift and go to state 8
    set                            shift and go to state 9
    while                          shift and go to state 10
    for                            shift and go to state 11

state 5

    (7) expression -> methodsSet .

    $end            reduce using rule 7 (expression -> methodsSet .)
    CLOSE_BRACE     reduce using rule 7 (expression -> methodsSet .)


state 6

    (8) variable -> type . NAME IGUAL datatype SEMICOLON
    (9) variable -> type . NAME IGUAL operations SEMICOLON
    (59) array -> type . NAME IGUAL OPEN_BRACKET items CLOSE_BRACKET SEMICOLON
    (60) array -> type . NAME IGUAL NEW ARRAY OPEN_PARENTHESIS items CLOSE_PARENTHESIS SEMICOLON
    (82) set -> type . NAME IGUAL NEW SET OPEN_PARENTHESIS CLOSE_PARENTHESIS SEMICOLON
    (83) set -> type . NAME IGUAL NEW SET OPEN_PARENTHESIS OPEN_BRACKET items CLOSE_BRACKET CLOSE_PARENTHESIS SEMICOLON
    (84) set -> type . NAME IGUAL NEW SET OPEN_PARENTHESIS element CLOSE_PARENTHESIS SEMICOLON

    NAME            shift and go to state 20


state 7

    (10) variable -> NAME . IGUAL datatype SEMICOLON
    (88) methodsSet -> NAME . POINT ADD OPEN_PARENTHESIS element CLOSE_PARENTHESIS SEMICOLON
    (89) methodsSet -> NAME . POINT DELETE OPEN_PARENTHESIS element CLOSE_PARENTHESIS SEMICOLON
    (90) methodsSet -> NAME . POINT CLEAR OPEN_PARENTHESIS CLOSE_PARENTHESIS SEMICOLON
    (85) set -> NAME . IGUAL NEW SET OPEN_PARENTHESIS CLOSE_PARENTHESIS SEMICOLON
    (86) set -> NAME . IGUAL NEW SET OPEN_PARENTHESIS OPEN_BRACKET items CLOSE_BRACKET CLOSE_PARENTHESIS SEMICOLON
    (87) set -> NAME . IGUAL NEW SET OPEN_PARENTHESIS element CLOSE_PARENTHESIS SEMICOLON

    IGUAL           shift and go to state 21
    POINT           shift and go to state 22


state 8

    (13) dataStruct -> array .

    NAME            reduce using rule 13 (dataStruct -> array .)
    CONST           reduce using rule 13 (dataStruct -> array .)
    LET             reduce using rule 13 (dataStruct -> array .)
    VAR             reduce using rule 13 (dataStruct -> array .)
    WHILE           reduce using rule 13 (dataStruct -> array .)
    FOR             reduce using rule 13 (dataStruct -> array .)
    $end            reduce using rule 13 (dataStruct -> array .)
    CLOSE_BRACE     reduce using rule 13 (dataStruct -> array .)


state 9

    (14) dataStruct -> set .

    NAME            reduce using rule 14 (dataStruct -> set .)
    CONST           reduce using rule 14 (dataStruct -> set .)
    LET             reduce using rule 14 (dataStruct -> set .)
    VAR             reduce using rule 14 (dataStruct -> set .)
    WHILE           reduce using rule 14 (dataStruct -> set .)
    FOR             reduce using rule 14 (dataStruct -> set .)
    $end            reduce using rule 14 (dataStruct -> set .)
    CLOSE_BRACE     reduce using rule 14 (dataStruct -> set .)


state 10

    (11) controlStruct -> while .

    NAME            reduce using rule 11 (controlStruct -> while .)
    CONST           reduce using rule 11 (controlStruct -> while .)
    LET             reduce using rule 11 (controlStruct -> while .)
    VAR             reduce using rule 11 (controlStruct -> while .)
    WHILE           reduce using rule 11 (controlStruct -> while .)
    FOR             reduce using rule 11 (controlStruct -> while .)
    $end            reduce using rule 11 (controlStruct -> while .)
    CLOSE_BRACE     reduce using rule 11 (controlStruct -> while .)


state 11

    (12) controlStruct -> for .

    NAME            reduce using rule 12 (controlStruct -> for .)
    CONST           reduce using rule 12 (controlStruct -> for .)
    LET             reduce using rule 12 (controlStruct -> for .)
    VAR             reduce using rule 12 (controlStruct -> for .)
    WHILE           reduce using rule 12 (controlStruct -> for .)
    FOR             reduce using rule 12 (controlStruct -> for .)
    $end            reduce using rule 12 (controlStruct -> for .)
    CLOSE_BRACE     reduce using rule 12 (controlStruct -> for .)


state 12

    (48) type -> CONST .

    NAME            reduce using rule 48 (type -> CONST .)


state 13

    (49) type -> LET .

    NAME            reduce using rule 49 (type -> LET .)


state 14

    (50) type -> VAR .

    NAME            reduce using rule 50 (type -> VAR .)


state 15

    (15) while -> WHILE . OPEN_PARENTHESIS controlArg CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE
    (16) while -> WHILE . OPEN_PARENTHESIS bool CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE

    OPEN_PARENTHESIS shift and go to state 23


state 16

    (32) for -> FOR . OPEN_PARENTHESIS inicialization SEMICOLON condition SEMICOLON operations CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE

    OPEN_PARENTHESIS shift and go to state 24


state 17

    (2) expression -> variable expression .

    $end            reduce using rule 2 (expression -> variable expression .)
    CLOSE_BRACE     reduce using rule 2 (expression -> variable expression .)


state 18

    (4) expression -> dataStruct expression .

    $end            reduce using rule 4 (expression -> dataStruct expression .)
    CLOSE_BRACE     reduce using rule 4 (expression -> dataStruct expression .)


state 19

    (6) expression -> controlStruct expression .

    $end            reduce using rule 6 (expression -> controlStruct expression .)
    CLOSE_BRACE     reduce using rule 6 (expression -> controlStruct expression .)


state 20

    (8) variable -> type NAME . IGUAL datatype SEMICOLON
    (9) variable -> type NAME . IGUAL operations SEMICOLON
    (59) array -> type NAME . IGUAL OPEN_BRACKET items CLOSE_BRACKET SEMICOLON
    (60) array -> type NAME . IGUAL NEW ARRAY OPEN_PARENTHESIS items CLOSE_PARENTHESIS SEMICOLON
    (82) set -> type NAME . IGUAL NEW SET OPEN_PARENTHESIS CLOSE_PARENTHESIS SEMICOLON
    (83) set -> type NAME . IGUAL NEW SET OPEN_PARENTHESIS OPEN_BRACKET items CLOSE_BRACKET CLOSE_PARENTHESIS SEMICOLON
    (84) set -> type NAME . IGUAL NEW SET OPEN_PARENTHESIS element CLOSE_PARENTHESIS SEMICOLON

    IGUAL           shift and go to state 25


state 21

    (10) variable -> NAME IGUAL . datatype SEMICOLON
    (85) set -> NAME IGUAL . NEW SET OPEN_PARENTHESIS CLOSE_PARENTHESIS SEMICOLON
    (86) set -> NAME IGUAL . NEW SET OPEN_PARENTHESIS OPEN_BRACKET items CLOSE_BRACKET CLOSE_PARENTHESIS SEMICOLON
    (87) set -> NAME IGUAL . NEW SET OPEN_PARENTHESIS element CLOSE_PARENTHESIS SEMICOLON
    (39) datatype -> . NUMBER
    (40) datatype -> . STRING
    (41) datatype -> . CHAR

    NEW             shift and go to state 27
    NUMBER          shift and go to state 28
    STRING          shift and go to state 29
    CHAR            shift and go to state 30

    datatype                       shift and go to state 26

state 22

    (88) methodsSet -> NAME POINT . ADD OPEN_PARENTHESIS element CLOSE_PARENTHESIS SEMICOLON
    (89) methodsSet -> NAME POINT . DELETE OPEN_PARENTHESIS element CLOSE_PARENTHESIS SEMICOLON
    (90) methodsSet -> NAME POINT . CLEAR OPEN_PARENTHESIS CLOSE_PARENTHESIS SEMICOLON

    ADD             shift and go to state 31
    DELETE          shift and go to state 32
    CLEAR           shift and go to state 33


state 23

    (15) while -> WHILE OPEN_PARENTHESIS . controlArg CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE
    (16) while -> WHILE OPEN_PARENTHESIS . bool CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE
    (31) controlArg -> . argUnico comparacion argUnico
    (46) bool -> . TRUE
    (47) bool -> . FALSE
    (79) argUnico -> . NUMBER
    (80) argUnico -> . STRING
    (81) argUnico -> . NAME

    TRUE            shift and go to state 37
    FALSE           shift and go to state 38
    NUMBER          shift and go to state 39
    STRING          shift and go to state 40
    NAME            shift and go to state 41

    controlArg                     shift and go to state 34
    bool                           shift and go to state 35
    argUnico                       shift and go to state 36

state 24

    (32) for -> FOR OPEN_PARENTHESIS . inicialization SEMICOLON condition SEMICOLON operations CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE
    (33) inicialization -> . type NAME IGUAL NUMBER
    (34) inicialization -> . NAME IGUAL NUMBER
    (48) type -> . CONST
    (49) type -> . LET
    (50) type -> . VAR

    NAME            shift and go to state 44
    CONST           shift and go to state 12
    LET             shift and go to state 13
    VAR             shift and go to state 14

    inicialization                 shift and go to state 42
    type                           shift and go to state 43

state 25

    (8) variable -> type NAME IGUAL . datatype SEMICOLON
    (9) variable -> type NAME IGUAL . operations SEMICOLON
    (59) array -> type NAME IGUAL . OPEN_BRACKET items CLOSE_BRACKET SEMICOLON
    (60) array -> type NAME IGUAL . NEW ARRAY OPEN_PARENTHESIS items CLOSE_PARENTHESIS SEMICOLON
    (82) set -> type NAME IGUAL . NEW SET OPEN_PARENTHESIS CLOSE_PARENTHESIS SEMICOLON
    (83) set -> type NAME IGUAL . NEW SET OPEN_PARENTHESIS OPEN_BRACKET items CLOSE_BRACKET CLOSE_PARENTHESIS SEMICOLON
    (84) set -> type NAME IGUAL . NEW SET OPEN_PARENTHESIS element CLOSE_PARENTHESIS SEMICOLON
    (39) datatype -> . NUMBER
    (40) datatype -> . STRING
    (41) datatype -> . CHAR
    (36) operations -> . NUMBER operand NUMBER
    (37) operations -> . NAME SUMA SUMA
    (38) operations -> . NAME RESTA RESTA

    OPEN_BRACKET    shift and go to state 48
    NEW             shift and go to state 49
    NUMBER          shift and go to state 50
    STRING          shift and go to state 29
    CHAR            shift and go to state 30
    NAME            shift and go to state 45

    datatype                       shift and go to state 46
    operations                     shift and go to state 47

state 26

    (10) variable -> NAME IGUAL datatype . SEMICOLON

    SEMICOLON       shift and go to state 51


state 27

    (85) set -> NAME IGUAL NEW . SET OPEN_PARENTHESIS CLOSE_PARENTHESIS SEMICOLON
    (86) set -> NAME IGUAL NEW . SET OPEN_PARENTHESIS OPEN_BRACKET items CLOSE_BRACKET CLOSE_PARENTHESIS SEMICOLON
    (87) set -> NAME IGUAL NEW . SET OPEN_PARENTHESIS element CLOSE_PARENTHESIS SEMICOLON

    SET             shift and go to state 52


state 28

    (39) datatype -> NUMBER .

    SEMICOLON       reduce using rule 39 (datatype -> NUMBER .)


state 29

    (40) datatype -> STRING .

    SEMICOLON       reduce using rule 40 (datatype -> STRING .)


state 30

    (41) datatype -> CHAR .

    SEMICOLON       reduce using rule 41 (datatype -> CHAR .)


state 31

    (88) methodsSet -> NAME POINT ADD . OPEN_PARENTHESIS element CLOSE_PARENTHESIS SEMICOLON

    OPEN_PARENTHESIS shift and go to state 53


state 32

    (89) methodsSet -> NAME POINT DELETE . OPEN_PARENTHESIS element CLOSE_PARENTHESIS SEMICOLON

    OPEN_PARENTHESIS shift and go to state 54


state 33

    (90) methodsSet -> NAME POINT CLEAR . OPEN_PARENTHESIS CLOSE_PARENTHESIS SEMICOLON

    OPEN_PARENTHESIS shift and go to state 55


state 34

    (15) while -> WHILE OPEN_PARENTHESIS controlArg . CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE

    CLOSE_PARENTHESIS shift and go to state 56


state 35

    (16) while -> WHILE OPEN_PARENTHESIS bool . CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE

    CLOSE_PARENTHESIS shift and go to state 57


state 36

    (31) controlArg -> argUnico . comparacion argUnico
    (25) comparacion -> . IGUALIGUAL
    (26) comparacion -> . DIFERENTE
    (27) comparacion -> . MAYORQUE
    (28) comparacion -> . MAYORIGUALQUE
    (29) comparacion -> . MENORQUE
    (30) comparacion -> . MENORIGUALQUE

    IGUALIGUAL      shift and go to state 59
    DIFERENTE       shift and go to state 60
    MAYORQUE        shift and go to state 61
    MAYORIGUALQUE   shift and go to state 62
    MENORQUE        shift and go to state 63
    MENORIGUALQUE   shift and go to state 64

    comparacion                    shift and go to state 58

state 37

    (46) bool -> TRUE .

    CLOSE_PARENTHESIS reduce using rule 46 (bool -> TRUE .)


state 38

    (47) bool -> FALSE .

    CLOSE_PARENTHESIS reduce using rule 47 (bool -> FALSE .)


state 39

    (79) argUnico -> NUMBER .

    IGUALIGUAL      reduce using rule 79 (argUnico -> NUMBER .)
    DIFERENTE       reduce using rule 79 (argUnico -> NUMBER .)
    MAYORQUE        reduce using rule 79 (argUnico -> NUMBER .)
    MAYORIGUALQUE   reduce using rule 79 (argUnico -> NUMBER .)
    MENORQUE        reduce using rule 79 (argUnico -> NUMBER .)
    MENORIGUALQUE   reduce using rule 79 (argUnico -> NUMBER .)
    CLOSE_PARENTHESIS reduce using rule 79 (argUnico -> NUMBER .)


state 40

    (80) argUnico -> STRING .

    IGUALIGUAL      reduce using rule 80 (argUnico -> STRING .)
    DIFERENTE       reduce using rule 80 (argUnico -> STRING .)
    MAYORQUE        reduce using rule 80 (argUnico -> STRING .)
    MAYORIGUALQUE   reduce using rule 80 (argUnico -> STRING .)
    MENORQUE        reduce using rule 80 (argUnico -> STRING .)
    MENORIGUALQUE   reduce using rule 80 (argUnico -> STRING .)
    CLOSE_PARENTHESIS reduce using rule 80 (argUnico -> STRING .)


state 41

    (81) argUnico -> NAME .

    IGUALIGUAL      reduce using rule 81 (argUnico -> NAME .)
    DIFERENTE       reduce using rule 81 (argUnico -> NAME .)
    MAYORQUE        reduce using rule 81 (argUnico -> NAME .)
    MAYORIGUALQUE   reduce using rule 81 (argUnico -> NAME .)
    MENORQUE        reduce using rule 81 (argUnico -> NAME .)
    MENORIGUALQUE   reduce using rule 81 (argUnico -> NAME .)
    CLOSE_PARENTHESIS reduce using rule 81 (argUnico -> NAME .)


state 42

    (32) for -> FOR OPEN_PARENTHESIS inicialization . SEMICOLON condition SEMICOLON operations CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE

    SEMICOLON       shift and go to state 65


state 43

    (33) inicialization -> type . NAME IGUAL NUMBER

    NAME            shift and go to state 66


state 44

    (34) inicialization -> NAME . IGUAL NUMBER

    IGUAL           shift and go to state 67


state 45

    (37) operations -> NAME . SUMA SUMA
    (38) operations -> NAME . RESTA RESTA

    SUMA            shift and go to state 68
    RESTA           shift and go to state 69


state 46

    (8) variable -> type NAME IGUAL datatype . SEMICOLON

    SEMICOLON       shift and go to state 70


state 47

    (9) variable -> type NAME IGUAL operations . SEMICOLON

    SEMICOLON       shift and go to state 71


state 48

    (59) array -> type NAME IGUAL OPEN_BRACKET . items CLOSE_BRACKET SEMICOLON
    (91) items -> . numeros
    (92) items -> . cadena
    (93) numeros -> . NUMBER
    (94) numeros -> . NUMBER COMMA numeros
    (95) cadena -> . STRING
    (96) cadena -> . STRING COMMA cadena

    NUMBER          shift and go to state 75
    STRING          shift and go to state 76

    items                          shift and go to state 72
    numeros                        shift and go to state 73
    cadena                         shift and go to state 74

state 49

    (60) array -> type NAME IGUAL NEW . ARRAY OPEN_PARENTHESIS items CLOSE_PARENTHESIS SEMICOLON
    (82) set -> type NAME IGUAL NEW . SET OPEN_PARENTHESIS CLOSE_PARENTHESIS SEMICOLON
    (83) set -> type NAME IGUAL NEW . SET OPEN_PARENTHESIS OPEN_BRACKET items CLOSE_BRACKET CLOSE_PARENTHESIS SEMICOLON
    (84) set -> type NAME IGUAL NEW . SET OPEN_PARENTHESIS element CLOSE_PARENTHESIS SEMICOLON

    ARRAY           shift and go to state 77
    SET             shift and go to state 78


state 50

    (39) datatype -> NUMBER .
    (36) operations -> NUMBER . operand NUMBER
    (42) operand -> . SUMA
    (43) operand -> . RESTA
    (44) operand -> . MULTIPLICACION
    (45) operand -> . DIVISION

    SEMICOLON       reduce using rule 39 (datatype -> NUMBER .)
    SUMA            shift and go to state 80
    RESTA           shift and go to state 81
    MULTIPLICACION  shift and go to state 82
    DIVISION        shift and go to state 83

    operand                        shift and go to state 79

state 51

    (10) variable -> NAME IGUAL datatype SEMICOLON .

    NAME            reduce using rule 10 (variable -> NAME IGUAL datatype SEMICOLON .)
    CONST           reduce using rule 10 (variable -> NAME IGUAL datatype SEMICOLON .)
    LET             reduce using rule 10 (variable -> NAME IGUAL datatype SEMICOLON .)
    VAR             reduce using rule 10 (variable -> NAME IGUAL datatype SEMICOLON .)
    WHILE           reduce using rule 10 (variable -> NAME IGUAL datatype SEMICOLON .)
    FOR             reduce using rule 10 (variable -> NAME IGUAL datatype SEMICOLON .)
    $end            reduce using rule 10 (variable -> NAME IGUAL datatype SEMICOLON .)
    CLOSE_BRACE     reduce using rule 10 (variable -> NAME IGUAL datatype SEMICOLON .)


state 52

    (85) set -> NAME IGUAL NEW SET . OPEN_PARENTHESIS CLOSE_PARENTHESIS SEMICOLON
    (86) set -> NAME IGUAL NEW SET . OPEN_PARENTHESIS OPEN_BRACKET items CLOSE_BRACKET CLOSE_PARENTHESIS SEMICOLON
    (87) set -> NAME IGUAL NEW SET . OPEN_PARENTHESIS element CLOSE_PARENTHESIS SEMICOLON

    OPEN_PARENTHESIS shift and go to state 84


state 53

    (88) methodsSet -> NAME POINT ADD OPEN_PARENTHESIS . element CLOSE_PARENTHESIS SEMICOLON
    (97) element -> . STRING
    (98) element -> . NUMBER
    (99) element -> . NAME

    STRING          shift and go to state 87
    NUMBER          shift and go to state 88
    NAME            shift and go to state 85

    element                        shift and go to state 86

state 54

    (89) methodsSet -> NAME POINT DELETE OPEN_PARENTHESIS . element CLOSE_PARENTHESIS SEMICOLON
    (97) element -> . STRING
    (98) element -> . NUMBER
    (99) element -> . NAME

    STRING          shift and go to state 87
    NUMBER          shift and go to state 88
    NAME            shift and go to state 85

    element                        shift and go to state 89

state 55

    (90) methodsSet -> NAME POINT CLEAR OPEN_PARENTHESIS . CLOSE_PARENTHESIS SEMICOLON

    CLOSE_PARENTHESIS shift and go to state 90


state 56

    (15) while -> WHILE OPEN_PARENTHESIS controlArg CLOSE_PARENTHESIS . OPEN_BRACE expression CLOSE_BRACE

    OPEN_BRACE      shift and go to state 91


state 57

    (16) while -> WHILE OPEN_PARENTHESIS bool CLOSE_PARENTHESIS . OPEN_BRACE expression CLOSE_BRACE

    OPEN_BRACE      shift and go to state 92


state 58

    (31) controlArg -> argUnico comparacion . argUnico
    (79) argUnico -> . NUMBER
    (80) argUnico -> . STRING
    (81) argUnico -> . NAME

    NUMBER          shift and go to state 39
    STRING          shift and go to state 40
    NAME            shift and go to state 41

    argUnico                       shift and go to state 93

state 59

    (25) comparacion -> IGUALIGUAL .

    NUMBER          reduce using rule 25 (comparacion -> IGUALIGUAL .)
    STRING          reduce using rule 25 (comparacion -> IGUALIGUAL .)
    NAME            reduce using rule 25 (comparacion -> IGUALIGUAL .)


state 60

    (26) comparacion -> DIFERENTE .

    NUMBER          reduce using rule 26 (comparacion -> DIFERENTE .)
    STRING          reduce using rule 26 (comparacion -> DIFERENTE .)
    NAME            reduce using rule 26 (comparacion -> DIFERENTE .)


state 61

    (27) comparacion -> MAYORQUE .

    NUMBER          reduce using rule 27 (comparacion -> MAYORQUE .)
    STRING          reduce using rule 27 (comparacion -> MAYORQUE .)
    NAME            reduce using rule 27 (comparacion -> MAYORQUE .)


state 62

    (28) comparacion -> MAYORIGUALQUE .

    NUMBER          reduce using rule 28 (comparacion -> MAYORIGUALQUE .)
    STRING          reduce using rule 28 (comparacion -> MAYORIGUALQUE .)
    NAME            reduce using rule 28 (comparacion -> MAYORIGUALQUE .)


state 63

    (29) comparacion -> MENORQUE .

    NUMBER          reduce using rule 29 (comparacion -> MENORQUE .)
    STRING          reduce using rule 29 (comparacion -> MENORQUE .)
    NAME            reduce using rule 29 (comparacion -> MENORQUE .)


state 64

    (30) comparacion -> MENORIGUALQUE .

    NUMBER          reduce using rule 30 (comparacion -> MENORIGUALQUE .)
    STRING          reduce using rule 30 (comparacion -> MENORIGUALQUE .)
    NAME            reduce using rule 30 (comparacion -> MENORIGUALQUE .)


state 65

    (32) for -> FOR OPEN_PARENTHESIS inicialization SEMICOLON . condition SEMICOLON operations CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE
    (35) condition -> . NAME clause value

    NAME            shift and go to state 95

    condition                      shift and go to state 94

state 66

    (33) inicialization -> type NAME . IGUAL NUMBER

    IGUAL           shift and go to state 96


state 67

    (34) inicialization -> NAME IGUAL . NUMBER

    NUMBER          shift and go to state 97


state 68

    (37) operations -> NAME SUMA . SUMA

    SUMA            shift and go to state 98


state 69

    (38) operations -> NAME RESTA . RESTA

    RESTA           shift and go to state 99


state 70

    (8) variable -> type NAME IGUAL datatype SEMICOLON .

    NAME            reduce using rule 8 (variable -> type NAME IGUAL datatype SEMICOLON .)
    CONST           reduce using rule 8 (variable -> type NAME IGUAL datatype SEMICOLON .)
    LET             reduce using rule 8 (variable -> type NAME IGUAL datatype SEMICOLON .)
    VAR             reduce using rule 8 (variable -> type NAME IGUAL datatype SEMICOLON .)
    WHILE           reduce using rule 8 (variable -> type NAME IGUAL datatype SEMICOLON .)
    FOR             reduce using rule 8 (variable -> type NAME IGUAL datatype SEMICOLON .)
    $end            reduce using rule 8 (variable -> type NAME IGUAL datatype SEMICOLON .)
    CLOSE_BRACE     reduce using rule 8 (variable -> type NAME IGUAL datatype SEMICOLON .)


state 71

    (9) variable -> type NAME IGUAL operations SEMICOLON .

    NAME            reduce using rule 9 (variable -> type NAME IGUAL operations SEMICOLON .)
    CONST           reduce using rule 9 (variable -> type NAME IGUAL operations SEMICOLON .)
    LET             reduce using rule 9 (variable -> type NAME IGUAL operations SEMICOLON .)
    VAR             reduce using rule 9 (variable -> type NAME IGUAL operations SEMICOLON .)
    WHILE           reduce using rule 9 (variable -> type NAME IGUAL operations SEMICOLON .)
    FOR             reduce using rule 9 (variable -> type NAME IGUAL operations SEMICOLON .)
    $end            reduce using rule 9 (variable -> type NAME IGUAL operations SEMICOLON .)
    CLOSE_BRACE     reduce using rule 9 (variable -> type NAME IGUAL operations SEMICOLON .)


state 72

    (59) array -> type NAME IGUAL OPEN_BRACKET items . CLOSE_BRACKET SEMICOLON

    CLOSE_BRACKET   shift and go to state 100


state 73

    (91) items -> numeros .

    CLOSE_BRACKET   reduce using rule 91 (items -> numeros .)
    CLOSE_PARENTHESIS reduce using rule 91 (items -> numeros .)


state 74

    (92) items -> cadena .

    CLOSE_BRACKET   reduce using rule 92 (items -> cadena .)
    CLOSE_PARENTHESIS reduce using rule 92 (items -> cadena .)


state 75

    (93) numeros -> NUMBER .
    (94) numeros -> NUMBER . COMMA numeros

    CLOSE_BRACKET   reduce using rule 93 (numeros -> NUMBER .)
    CLOSE_PARENTHESIS reduce using rule 93 (numeros -> NUMBER .)
    COMMA           shift and go to state 101


state 76

    (95) cadena -> STRING .
    (96) cadena -> STRING . COMMA cadena

    CLOSE_BRACKET   reduce using rule 95 (cadena -> STRING .)
    CLOSE_PARENTHESIS reduce using rule 95 (cadena -> STRING .)
    COMMA           shift and go to state 102


state 77

    (60) array -> type NAME IGUAL NEW ARRAY . OPEN_PARENTHESIS items CLOSE_PARENTHESIS SEMICOLON

    OPEN_PARENTHESIS shift and go to state 103


state 78

    (82) set -> type NAME IGUAL NEW SET . OPEN_PARENTHESIS CLOSE_PARENTHESIS SEMICOLON
    (83) set -> type NAME IGUAL NEW SET . OPEN_PARENTHESIS OPEN_BRACKET items CLOSE_BRACKET CLOSE_PARENTHESIS SEMICOLON
    (84) set -> type NAME IGUAL NEW SET . OPEN_PARENTHESIS element CLOSE_PARENTHESIS SEMICOLON

    OPEN_PARENTHESIS shift and go to state 104


state 79

    (36) operations -> NUMBER operand . NUMBER

    NUMBER          shift and go to state 105


state 80

    (42) operand -> SUMA .

    NUMBER          reduce using rule 42 (operand -> SUMA .)


state 81

    (43) operand -> RESTA .

    NUMBER          reduce using rule 43 (operand -> RESTA .)


state 82

    (44) operand -> MULTIPLICACION .

    NUMBER          reduce using rule 44 (operand -> MULTIPLICACION .)


state 83

    (45) operand -> DIVISION .

    NUMBER          reduce using rule 45 (operand -> DIVISION .)


state 84

    (85) set -> NAME IGUAL NEW SET OPEN_PARENTHESIS . CLOSE_PARENTHESIS SEMICOLON
    (86) set -> NAME IGUAL NEW SET OPEN_PARENTHESIS . OPEN_BRACKET items CLOSE_BRACKET CLOSE_PARENTHESIS SEMICOLON
    (87) set -> NAME IGUAL NEW SET OPEN_PARENTHESIS . element CLOSE_PARENTHESIS SEMICOLON
    (97) element -> . STRING
    (98) element -> . NUMBER
    (99) element -> . NAME

    CLOSE_PARENTHESIS shift and go to state 106
    OPEN_BRACKET    shift and go to state 107
    STRING          shift and go to state 87
    NUMBER          shift and go to state 88
    NAME            shift and go to state 85

    element                        shift and go to state 108

state 85

    (99) element -> NAME .

    CLOSE_PARENTHESIS reduce using rule 99 (element -> NAME .)


state 86

    (88) methodsSet -> NAME POINT ADD OPEN_PARENTHESIS element . CLOSE_PARENTHESIS SEMICOLON

    CLOSE_PARENTHESIS shift and go to state 109


state 87

    (97) element -> STRING .

    CLOSE_PARENTHESIS reduce using rule 97 (element -> STRING .)


state 88

    (98) element -> NUMBER .

    CLOSE_PARENTHESIS reduce using rule 98 (element -> NUMBER .)


state 89

    (89) methodsSet -> NAME POINT DELETE OPEN_PARENTHESIS element . CLOSE_PARENTHESIS SEMICOLON

    CLOSE_PARENTHESIS shift and go to state 110


state 90

    (90) methodsSet -> NAME POINT CLEAR OPEN_PARENTHESIS CLOSE_PARENTHESIS . SEMICOLON

    SEMICOLON       shift and go to state 111


state 91

    (15) while -> WHILE OPEN_PARENTHESIS controlArg CLOSE_PARENTHESIS OPEN_BRACE . expression CLOSE_BRACE
    (1) expression -> . variable
    (2) expression -> . variable expression
    (3) expression -> . dataStruct
    (4) expression -> . dataStruct expression
    (5) expression -> . controlStruct
    (6) expression -> . controlStruct expression
    (7) expression -> . methodsSet
    (8) variable -> . type NAME IGUAL datatype SEMICOLON
    (9) variable -> . type NAME IGUAL operations SEMICOLON
    (10) variable -> . NAME IGUAL datatype SEMICOLON
    (13) dataStruct -> . array
    (14) dataStruct -> . set
    (11) controlStruct -> . while
    (12) controlStruct -> . for
    (88) methodsSet -> . NAME POINT ADD OPEN_PARENTHESIS element CLOSE_PARENTHESIS SEMICOLON
    (89) methodsSet -> . NAME POINT DELETE OPEN_PARENTHESIS element CLOSE_PARENTHESIS SEMICOLON
    (90) methodsSet -> . NAME POINT CLEAR OPEN_PARENTHESIS CLOSE_PARENTHESIS SEMICOLON
    (48) type -> . CONST
    (49) type -> . LET
    (50) type -> . VAR
    (59) array -> . type NAME IGUAL OPEN_BRACKET items CLOSE_BRACKET SEMICOLON
    (60) array -> . type NAME IGUAL NEW ARRAY OPEN_PARENTHESIS items CLOSE_PARENTHESIS SEMICOLON
    (82) set -> . type NAME IGUAL NEW SET OPEN_PARENTHESIS CLOSE_PARENTHESIS SEMICOLON
    (83) set -> . type NAME IGUAL NEW SET OPEN_PARENTHESIS OPEN_BRACKET items CLOSE_BRACKET CLOSE_PARENTHESIS SEMICOLON
    (84) set -> . type NAME IGUAL NEW SET OPEN_PARENTHESIS element CLOSE_PARENTHESIS SEMICOLON
    (85) set -> . NAME IGUAL NEW SET OPEN_PARENTHESIS CLOSE_PARENTHESIS SEMICOLON
    (86) set -> . NAME IGUAL NEW SET OPEN_PARENTHESIS OPEN_BRACKET items CLOSE_BRACKET CLOSE_PARENTHESIS SEMICOLON
    (87) set -> . NAME IGUAL NEW SET OPEN_PARENTHESIS element CLOSE_PARENTHESIS SEMICOLON
    (15) while -> . WHILE OPEN_PARENTHESIS controlArg CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE
    (16) while -> . WHILE OPEN_PARENTHESIS bool CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE
    (32) for -> . FOR OPEN_PARENTHESIS inicialization SEMICOLON condition SEMICOLON operations CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE

    NAME            shift and go to state 7
    CONST           shift and go to state 12
    LET             shift and go to state 13
    VAR             shift and go to state 14
    WHILE           shift and go to state 15
    FOR             shift and go to state 16

    expression                     shift and go to state 112
    variable                       shift and go to state 2
    dataStruct                     shift and go to state 3
    controlStruct                  shift and go to state 4
    methodsSet                     shift and go to state 5
    type                           shift and go to state 6
    array                          shift and go to state 8
    set                            shift and go to state 9
    while                          shift and go to state 10
    for                            shift and go to state 11

state 92

    (16) while -> WHILE OPEN_PARENTHESIS bool CLOSE_PARENTHESIS OPEN_BRACE . expression CLOSE_BRACE
    (1) expression -> . variable
    (2) expression -> . variable expression
    (3) expression -> . dataStruct
    (4) expression -> . dataStruct expression
    (5) expression -> . controlStruct
    (6) expression -> . controlStruct expression
    (7) expression -> . methodsSet
    (8) variable -> . type NAME IGUAL datatype SEMICOLON
    (9) variable -> . type NAME IGUAL operations SEMICOLON
    (10) variable -> . NAME IGUAL datatype SEMICOLON
    (13) dataStruct -> . array
    (14) dataStruct -> . set
    (11) controlStruct -> . while
    (12) controlStruct -> . for
    (88) methodsSet -> . NAME POINT ADD OPEN_PARENTHESIS element CLOSE_PARENTHESIS SEMICOLON
    (89) methodsSet -> . NAME POINT DELETE OPEN_PARENTHESIS element CLOSE_PARENTHESIS SEMICOLON
    (90) methodsSet -> . NAME POINT CLEAR OPEN_PARENTHESIS CLOSE_PARENTHESIS SEMICOLON
    (48) type -> . CONST
    (49) type -> . LET
    (50) type -> . VAR
    (59) array -> . type NAME IGUAL OPEN_BRACKET items CLOSE_BRACKET SEMICOLON
    (60) array -> . type NAME IGUAL NEW ARRAY OPEN_PARENTHESIS items CLOSE_PARENTHESIS SEMICOLON
    (82) set -> . type NAME IGUAL NEW SET OPEN_PARENTHESIS CLOSE_PARENTHESIS SEMICOLON
    (83) set -> . type NAME IGUAL NEW SET OPEN_PARENTHESIS OPEN_BRACKET items CLOSE_BRACKET CLOSE_PARENTHESIS SEMICOLON
    (84) set -> . type NAME IGUAL NEW SET OPEN_PARENTHESIS element CLOSE_PARENTHESIS SEMICOLON
    (85) set -> . NAME IGUAL NEW SET OPEN_PARENTHESIS CLOSE_PARENTHESIS SEMICOLON
    (86) set -> . NAME IGUAL NEW SET OPEN_PARENTHESIS OPEN_BRACKET items CLOSE_BRACKET CLOSE_PARENTHESIS SEMICOLON
    (87) set -> . NAME IGUAL NEW SET OPEN_PARENTHESIS element CLOSE_PARENTHESIS SEMICOLON
    (15) while -> . WHILE OPEN_PARENTHESIS controlArg CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE
    (16) while -> . WHILE OPEN_PARENTHESIS bool CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE
    (32) for -> . FOR OPEN_PARENTHESIS inicialization SEMICOLON condition SEMICOLON operations CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE

    NAME            shift and go to state 7
    CONST           shift and go to state 12
    LET             shift and go to state 13
    VAR             shift and go to state 14
    WHILE           shift and go to state 15
    FOR             shift and go to state 16

    expression                     shift and go to state 113
    variable                       shift and go to state 2
    dataStruct                     shift and go to state 3
    controlStruct                  shift and go to state 4
    methodsSet                     shift and go to state 5
    type                           shift and go to state 6
    array                          shift and go to state 8
    set                            shift and go to state 9
    while                          shift and go to state 10
    for                            shift and go to state 11

state 93

    (31) controlArg -> argUnico comparacion argUnico .

    CLOSE_PARENTHESIS reduce using rule 31 (controlArg -> argUnico comparacion argUnico .)


state 94

    (32) for -> FOR OPEN_PARENTHESIS inicialization SEMICOLON condition . SEMICOLON operations CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE

    SEMICOLON       shift and go to state 114


state 95

    (35) condition -> NAME . clause value
    (51) clause -> . IGUALIGUAL
    (52) clause -> . DIFERENTE
    (53) clause -> . MAYORQUE
    (54) clause -> . MAYORIGUALQUE
    (55) clause -> . MENORQUE
    (56) clause -> . MENORIGUALQUE

    IGUALIGUAL      shift and go to state 116
    DIFERENTE       shift and go to state 117
    MAYORQUE        shift and go to state 118
    MAYORIGUALQUE   shift and go to state 119
    MENORQUE        shift and go to state 120
    MENORIGUALQUE   shift and go to state 121

    clause                         shift and go to state 115

state 96

    (33) inicialization -> type NAME IGUAL . NUMBER

    NUMBER          shift and go to state 122


state 97

    (34) inicialization -> NAME IGUAL NUMBER .

    SEMICOLON       reduce using rule 34 (inicialization -> NAME IGUAL NUMBER .)


state 98

    (37) operations -> NAME SUMA SUMA .

    SEMICOLON       reduce using rule 37 (operations -> NAME SUMA SUMA .)
    CLOSE_PARENTHESIS reduce using rule 37 (operations -> NAME SUMA SUMA .)


state 99

    (38) operations -> NAME RESTA RESTA .

    SEMICOLON       reduce using rule 38 (operations -> NAME RESTA RESTA .)
    CLOSE_PARENTHESIS reduce using rule 38 (operations -> NAME RESTA RESTA .)


state 100

    (59) array -> type NAME IGUAL OPEN_BRACKET items CLOSE_BRACKET . SEMICOLON

    SEMICOLON       shift and go to state 123


state 101

    (94) numeros -> NUMBER COMMA . numeros
    (93) numeros -> . NUMBER
    (94) numeros -> . NUMBER COMMA numeros

    NUMBER          shift and go to state 75

    numeros                        shift and go to state 124

state 102

    (96) cadena -> STRING COMMA . cadena
    (95) cadena -> . STRING
    (96) cadena -> . STRING COMMA cadena

    STRING          shift and go to state 76

    cadena                         shift and go to state 125

state 103

    (60) array -> type NAME IGUAL NEW ARRAY OPEN_PARENTHESIS . items CLOSE_PARENTHESIS SEMICOLON
    (91) items -> . numeros
    (92) items -> . cadena
    (93) numeros -> . NUMBER
    (94) numeros -> . NUMBER COMMA numeros
    (95) cadena -> . STRING
    (96) cadena -> . STRING COMMA cadena

    NUMBER          shift and go to state 75
    STRING          shift and go to state 76

    items                          shift and go to state 126
    numeros                        shift and go to state 73
    cadena                         shift and go to state 74

state 104

    (82) set -> type NAME IGUAL NEW SET OPEN_PARENTHESIS . CLOSE_PARENTHESIS SEMICOLON
    (83) set -> type NAME IGUAL NEW SET OPEN_PARENTHESIS . OPEN_BRACKET items CLOSE_BRACKET CLOSE_PARENTHESIS SEMICOLON
    (84) set -> type NAME IGUAL NEW SET OPEN_PARENTHESIS . element CLOSE_PARENTHESIS SEMICOLON
    (97) element -> . STRING
    (98) element -> . NUMBER
    (99) element -> . NAME

    CLOSE_PARENTHESIS shift and go to state 127
    OPEN_BRACKET    shift and go to state 128
    STRING          shift and go to state 87
    NUMBER          shift and go to state 88
    NAME            shift and go to state 85

    element                        shift and go to state 129

state 105

    (36) operations -> NUMBER operand NUMBER .

    SEMICOLON       reduce using rule 36 (operations -> NUMBER operand NUMBER .)
    CLOSE_PARENTHESIS reduce using rule 36 (operations -> NUMBER operand NUMBER .)


state 106

    (85) set -> NAME IGUAL NEW SET OPEN_PARENTHESIS CLOSE_PARENTHESIS . SEMICOLON

    SEMICOLON       shift and go to state 130


state 107

    (86) set -> NAME IGUAL NEW SET OPEN_PARENTHESIS OPEN_BRACKET . items CLOSE_BRACKET CLOSE_PARENTHESIS SEMICOLON
    (91) items -> . numeros
    (92) items -> . cadena
    (93) numeros -> . NUMBER
    (94) numeros -> . NUMBER COMMA numeros
    (95) cadena -> . STRING
    (96) cadena -> . STRING COMMA cadena

    NUMBER          shift and go to state 75
    STRING          shift and go to state 76

    items                          shift and go to state 131
    numeros                        shift and go to state 73
    cadena                         shift and go to state 74

state 108

    (87) set -> NAME IGUAL NEW SET OPEN_PARENTHESIS element . CLOSE_PARENTHESIS SEMICOLON

    CLOSE_PARENTHESIS shift and go to state 132


state 109

    (88) methodsSet -> NAME POINT ADD OPEN_PARENTHESIS element CLOSE_PARENTHESIS . SEMICOLON

    SEMICOLON       shift and go to state 133


state 110

    (89) methodsSet -> NAME POINT DELETE OPEN_PARENTHESIS element CLOSE_PARENTHESIS . SEMICOLON

    SEMICOLON       shift and go to state 134


state 111

    (90) methodsSet -> NAME POINT CLEAR OPEN_PARENTHESIS CLOSE_PARENTHESIS SEMICOLON .

    $end            reduce using rule 90 (methodsSet -> NAME POINT CLEAR OPEN_PARENTHESIS CLOSE_PARENTHESIS SEMICOLON .)
    CLOSE_BRACE     reduce using rule 90 (methodsSet -> NAME POINT CLEAR OPEN_PARENTHESIS CLOSE_PARENTHESIS SEMICOLON .)


state 112

    (15) while -> WHILE OPEN_PARENTHESIS controlArg CLOSE_PARENTHESIS OPEN_BRACE expression . CLOSE_BRACE

    CLOSE_BRACE     shift and go to state 135


state 113

    (16) while -> WHILE OPEN_PARENTHESIS bool CLOSE_PARENTHESIS OPEN_BRACE expression . CLOSE_BRACE

    CLOSE_BRACE     shift and go to state 136


state 114

    (32) for -> FOR OPEN_PARENTHESIS inicialization SEMICOLON condition SEMICOLON . operations CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE
    (36) operations -> . NUMBER operand NUMBER
    (37) operations -> . NAME SUMA SUMA
    (38) operations -> . NAME RESTA RESTA

    NUMBER          shift and go to state 138
    NAME            shift and go to state 45

    operations                     shift and go to state 137

state 115

    (35) condition -> NAME clause . value
    (57) value -> . NAME
    (58) value -> . NUMBER

    NAME            shift and go to state 139
    NUMBER          shift and go to state 141

    value                          shift and go to state 140

state 116

    (51) clause -> IGUALIGUAL .

    NAME            reduce using rule 51 (clause -> IGUALIGUAL .)
    NUMBER          reduce using rule 51 (clause -> IGUALIGUAL .)


state 117

    (52) clause -> DIFERENTE .

    NAME            reduce using rule 52 (clause -> DIFERENTE .)
    NUMBER          reduce using rule 52 (clause -> DIFERENTE .)


state 118

    (53) clause -> MAYORQUE .

    NAME            reduce using rule 53 (clause -> MAYORQUE .)
    NUMBER          reduce using rule 53 (clause -> MAYORQUE .)


state 119

    (54) clause -> MAYORIGUALQUE .

    NAME            reduce using rule 54 (clause -> MAYORIGUALQUE .)
    NUMBER          reduce using rule 54 (clause -> MAYORIGUALQUE .)


state 120

    (55) clause -> MENORQUE .

    NAME            reduce using rule 55 (clause -> MENORQUE .)
    NUMBER          reduce using rule 55 (clause -> MENORQUE .)


state 121

    (56) clause -> MENORIGUALQUE .

    NAME            reduce using rule 56 (clause -> MENORIGUALQUE .)
    NUMBER          reduce using rule 56 (clause -> MENORIGUALQUE .)


state 122

    (33) inicialization -> type NAME IGUAL NUMBER .

    SEMICOLON       reduce using rule 33 (inicialization -> type NAME IGUAL NUMBER .)


state 123

    (59) array -> type NAME IGUAL OPEN_BRACKET items CLOSE_BRACKET SEMICOLON .

    NAME            reduce using rule 59 (array -> type NAME IGUAL OPEN_BRACKET items CLOSE_BRACKET SEMICOLON .)
    CONST           reduce using rule 59 (array -> type NAME IGUAL OPEN_BRACKET items CLOSE_BRACKET SEMICOLON .)
    LET             reduce using rule 59 (array -> type NAME IGUAL OPEN_BRACKET items CLOSE_BRACKET SEMICOLON .)
    VAR             reduce using rule 59 (array -> type NAME IGUAL OPEN_BRACKET items CLOSE_BRACKET SEMICOLON .)
    WHILE           reduce using rule 59 (array -> type NAME IGUAL OPEN_BRACKET items CLOSE_BRACKET SEMICOLON .)
    FOR             reduce using rule 59 (array -> type NAME IGUAL OPEN_BRACKET items CLOSE_BRACKET SEMICOLON .)
    $end            reduce using rule 59 (array -> type NAME IGUAL OPEN_BRACKET items CLOSE_BRACKET SEMICOLON .)
    CLOSE_BRACE     reduce using rule 59 (array -> type NAME IGUAL OPEN_BRACKET items CLOSE_BRACKET SEMICOLON .)


state 124

    (94) numeros -> NUMBER COMMA numeros .

    CLOSE_BRACKET   reduce using rule 94 (numeros -> NUMBER COMMA numeros .)
    CLOSE_PARENTHESIS reduce using rule 94 (numeros -> NUMBER COMMA numeros .)


state 125

    (96) cadena -> STRING COMMA cadena .

    CLOSE_BRACKET   reduce using rule 96 (cadena -> STRING COMMA cadena .)
    CLOSE_PARENTHESIS reduce using rule 96 (cadena -> STRING COMMA cadena .)


state 126

    (60) array -> type NAME IGUAL NEW ARRAY OPEN_PARENTHESIS items . CLOSE_PARENTHESIS SEMICOLON

    CLOSE_PARENTHESIS shift and go to state 142


state 127

    (82) set -> type NAME IGUAL NEW SET OPEN_PARENTHESIS CLOSE_PARENTHESIS . SEMICOLON

    SEMICOLON       shift and go to state 143


state 128

    (83) set -> type NAME IGUAL NEW SET OPEN_PARENTHESIS OPEN_BRACKET . items CLOSE_BRACKET CLOSE_PARENTHESIS SEMICOLON
    (91) items -> . numeros
    (92) items -> . cadena
    (93) numeros -> . NUMBER
    (94) numeros -> . NUMBER COMMA numeros
    (95) cadena -> . STRING
    (96) cadena -> . STRING COMMA cadena

    NUMBER          shift and go to state 75
    STRING          shift and go to state 76

    items                          shift and go to state 144
    numeros                        shift and go to state 73
    cadena                         shift and go to state 74

state 129

    (84) set -> type NAME IGUAL NEW SET OPEN_PARENTHESIS element . CLOSE_PARENTHESIS SEMICOLON

    CLOSE_PARENTHESIS shift and go to state 145


state 130

    (85) set -> NAME IGUAL NEW SET OPEN_PARENTHESIS CLOSE_PARENTHESIS SEMICOLON .

    NAME            reduce using rule 85 (set -> NAME IGUAL NEW SET OPEN_PARENTHESIS CLOSE_PARENTHESIS SEMICOLON .)
    CONST           reduce using rule 85 (set -> NAME IGUAL NEW SET OPEN_PARENTHESIS CLOSE_PARENTHESIS SEMICOLON .)
    LET             reduce using rule 85 (set -> NAME IGUAL NEW SET OPEN_PARENTHESIS CLOSE_PARENTHESIS SEMICOLON .)
    VAR             reduce using rule 85 (set -> NAME IGUAL NEW SET OPEN_PARENTHESIS CLOSE_PARENTHESIS SEMICOLON .)
    WHILE           reduce using rule 85 (set -> NAME IGUAL NEW SET OPEN_PARENTHESIS CLOSE_PARENTHESIS SEMICOLON .)
    FOR             reduce using rule 85 (set -> NAME IGUAL NEW SET OPEN_PARENTHESIS CLOSE_PARENTHESIS SEMICOLON .)
    $end            reduce using rule 85 (set -> NAME IGUAL NEW SET OPEN_PARENTHESIS CLOSE_PARENTHESIS SEMICOLON .)
    CLOSE_BRACE     reduce using rule 85 (set -> NAME IGUAL NEW SET OPEN_PARENTHESIS CLOSE_PARENTHESIS SEMICOLON .)


state 131

    (86) set -> NAME IGUAL NEW SET OPEN_PARENTHESIS OPEN_BRACKET items . CLOSE_BRACKET CLOSE_PARENTHESIS SEMICOLON

    CLOSE_BRACKET   shift and go to state 146


state 132

    (87) set -> NAME IGUAL NEW SET OPEN_PARENTHESIS element CLOSE_PARENTHESIS . SEMICOLON

    SEMICOLON       shift and go to state 147


state 133

    (88) methodsSet -> NAME POINT ADD OPEN_PARENTHESIS element CLOSE_PARENTHESIS SEMICOLON .

    $end            reduce using rule 88 (methodsSet -> NAME POINT ADD OPEN_PARENTHESIS element CLOSE_PARENTHESIS SEMICOLON .)
    CLOSE_BRACE     reduce using rule 88 (methodsSet -> NAME POINT ADD OPEN_PARENTHESIS element CLOSE_PARENTHESIS SEMICOLON .)


state 134

    (89) methodsSet -> NAME POINT DELETE OPEN_PARENTHESIS element CLOSE_PARENTHESIS SEMICOLON .

    $end            reduce using rule 89 (methodsSet -> NAME POINT DELETE OPEN_PARENTHESIS element CLOSE_PARENTHESIS SEMICOLON .)
    CLOSE_BRACE     reduce using rule 89 (methodsSet -> NAME POINT DELETE OPEN_PARENTHESIS element CLOSE_PARENTHESIS SEMICOLON .)


state 135

    (15) while -> WHILE OPEN_PARENTHESIS controlArg CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE .

    NAME            reduce using rule 15 (while -> WHILE OPEN_PARENTHESIS controlArg CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE .)
    CONST           reduce using rule 15 (while -> WHILE OPEN_PARENTHESIS controlArg CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE .)
    LET             reduce using rule 15 (while -> WHILE OPEN_PARENTHESIS controlArg CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE .)
    VAR             reduce using rule 15 (while -> WHILE OPEN_PARENTHESIS controlArg CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE .)
    WHILE           reduce using rule 15 (while -> WHILE OPEN_PARENTHESIS controlArg CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE .)
    FOR             reduce using rule 15 (while -> WHILE OPEN_PARENTHESIS controlArg CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE .)
    $end            reduce using rule 15 (while -> WHILE OPEN_PARENTHESIS controlArg CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE .)
    CLOSE_BRACE     reduce using rule 15 (while -> WHILE OPEN_PARENTHESIS controlArg CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE .)


state 136

    (16) while -> WHILE OPEN_PARENTHESIS bool CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE .

    NAME            reduce using rule 16 (while -> WHILE OPEN_PARENTHESIS bool CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE .)
    CONST           reduce using rule 16 (while -> WHILE OPEN_PARENTHESIS bool CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE .)
    LET             reduce using rule 16 (while -> WHILE OPEN_PARENTHESIS bool CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE .)
    VAR             reduce using rule 16 (while -> WHILE OPEN_PARENTHESIS bool CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE .)
    WHILE           reduce using rule 16 (while -> WHILE OPEN_PARENTHESIS bool CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE .)
    FOR             reduce using rule 16 (while -> WHILE OPEN_PARENTHESIS bool CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE .)
    $end            reduce using rule 16 (while -> WHILE OPEN_PARENTHESIS bool CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE .)
    CLOSE_BRACE     reduce using rule 16 (while -> WHILE OPEN_PARENTHESIS bool CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE .)


state 137

    (32) for -> FOR OPEN_PARENTHESIS inicialization SEMICOLON condition SEMICOLON operations . CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE

    CLOSE_PARENTHESIS shift and go to state 148


state 138

    (36) operations -> NUMBER . operand NUMBER
    (42) operand -> . SUMA
    (43) operand -> . RESTA
    (44) operand -> . MULTIPLICACION
    (45) operand -> . DIVISION

    SUMA            shift and go to state 80
    RESTA           shift and go to state 81
    MULTIPLICACION  shift and go to state 82
    DIVISION        shift and go to state 83

    operand                        shift and go to state 79

state 139

    (57) value -> NAME .

    SEMICOLON       reduce using rule 57 (value -> NAME .)


state 140

    (35) condition -> NAME clause value .

    SEMICOLON       reduce using rule 35 (condition -> NAME clause value .)


state 141

    (58) value -> NUMBER .

    SEMICOLON       reduce using rule 58 (value -> NUMBER .)


state 142

    (60) array -> type NAME IGUAL NEW ARRAY OPEN_PARENTHESIS items CLOSE_PARENTHESIS . SEMICOLON

    SEMICOLON       shift and go to state 149


state 143

    (82) set -> type NAME IGUAL NEW SET OPEN_PARENTHESIS CLOSE_PARENTHESIS SEMICOLON .

    NAME            reduce using rule 82 (set -> type NAME IGUAL NEW SET OPEN_PARENTHESIS CLOSE_PARENTHESIS SEMICOLON .)
    CONST           reduce using rule 82 (set -> type NAME IGUAL NEW SET OPEN_PARENTHESIS CLOSE_PARENTHESIS SEMICOLON .)
    LET             reduce using rule 82 (set -> type NAME IGUAL NEW SET OPEN_PARENTHESIS CLOSE_PARENTHESIS SEMICOLON .)
    VAR             reduce using rule 82 (set -> type NAME IGUAL NEW SET OPEN_PARENTHESIS CLOSE_PARENTHESIS SEMICOLON .)
    WHILE           reduce using rule 82 (set -> type NAME IGUAL NEW SET OPEN_PARENTHESIS CLOSE_PARENTHESIS SEMICOLON .)
    FOR             reduce using rule 82 (set -> type NAME IGUAL NEW SET OPEN_PARENTHESIS CLOSE_PARENTHESIS SEMICOLON .)
    $end            reduce using rule 82 (set -> type NAME IGUAL NEW SET OPEN_PARENTHESIS CLOSE_PARENTHESIS SEMICOLON .)
    CLOSE_BRACE     reduce using rule 82 (set -> type NAME IGUAL NEW SET OPEN_PARENTHESIS CLOSE_PARENTHESIS SEMICOLON .)


state 144

    (83) set -> type NAME IGUAL NEW SET OPEN_PARENTHESIS OPEN_BRACKET items . CLOSE_BRACKET CLOSE_PARENTHESIS SEMICOLON

    CLOSE_BRACKET   shift and go to state 150


state 145

    (84) set -> type NAME IGUAL NEW SET OPEN_PARENTHESIS element CLOSE_PARENTHESIS . SEMICOLON

    SEMICOLON       shift and go to state 151


state 146

    (86) set -> NAME IGUAL NEW SET OPEN_PARENTHESIS OPEN_BRACKET items CLOSE_BRACKET . CLOSE_PARENTHESIS SEMICOLON

    CLOSE_PARENTHESIS shift and go to state 152


state 147

    (87) set -> NAME IGUAL NEW SET OPEN_PARENTHESIS element CLOSE_PARENTHESIS SEMICOLON .

    NAME            reduce using rule 87 (set -> NAME IGUAL NEW SET OPEN_PARENTHESIS element CLOSE_PARENTHESIS SEMICOLON .)
    CONST           reduce using rule 87 (set -> NAME IGUAL NEW SET OPEN_PARENTHESIS element CLOSE_PARENTHESIS SEMICOLON .)
    LET             reduce using rule 87 (set -> NAME IGUAL NEW SET OPEN_PARENTHESIS element CLOSE_PARENTHESIS SEMICOLON .)
    VAR             reduce using rule 87 (set -> NAME IGUAL NEW SET OPEN_PARENTHESIS element CLOSE_PARENTHESIS SEMICOLON .)
    WHILE           reduce using rule 87 (set -> NAME IGUAL NEW SET OPEN_PARENTHESIS element CLOSE_PARENTHESIS SEMICOLON .)
    FOR             reduce using rule 87 (set -> NAME IGUAL NEW SET OPEN_PARENTHESIS element CLOSE_PARENTHESIS SEMICOLON .)
    $end            reduce using rule 87 (set -> NAME IGUAL NEW SET OPEN_PARENTHESIS element CLOSE_PARENTHESIS SEMICOLON .)
    CLOSE_BRACE     reduce using rule 87 (set -> NAME IGUAL NEW SET OPEN_PARENTHESIS element CLOSE_PARENTHESIS SEMICOLON .)


state 148

    (32) for -> FOR OPEN_PARENTHESIS inicialization SEMICOLON condition SEMICOLON operations CLOSE_PARENTHESIS . OPEN_BRACE expression CLOSE_BRACE

    OPEN_BRACE      shift and go to state 153


state 149

    (60) array -> type NAME IGUAL NEW ARRAY OPEN_PARENTHESIS items CLOSE_PARENTHESIS SEMICOLON .

    NAME            reduce using rule 60 (array -> type NAME IGUAL NEW ARRAY OPEN_PARENTHESIS items CLOSE_PARENTHESIS SEMICOLON .)
    CONST           reduce using rule 60 (array -> type NAME IGUAL NEW ARRAY OPEN_PARENTHESIS items CLOSE_PARENTHESIS SEMICOLON .)
    LET             reduce using rule 60 (array -> type NAME IGUAL NEW ARRAY OPEN_PARENTHESIS items CLOSE_PARENTHESIS SEMICOLON .)
    VAR             reduce using rule 60 (array -> type NAME IGUAL NEW ARRAY OPEN_PARENTHESIS items CLOSE_PARENTHESIS SEMICOLON .)
    WHILE           reduce using rule 60 (array -> type NAME IGUAL NEW ARRAY OPEN_PARENTHESIS items CLOSE_PARENTHESIS SEMICOLON .)
    FOR             reduce using rule 60 (array -> type NAME IGUAL NEW ARRAY OPEN_PARENTHESIS items CLOSE_PARENTHESIS SEMICOLON .)
    $end            reduce using rule 60 (array -> type NAME IGUAL NEW ARRAY OPEN_PARENTHESIS items CLOSE_PARENTHESIS SEMICOLON .)
    CLOSE_BRACE     reduce using rule 60 (array -> type NAME IGUAL NEW ARRAY OPEN_PARENTHESIS items CLOSE_PARENTHESIS SEMICOLON .)


state 150

    (83) set -> type NAME IGUAL NEW SET OPEN_PARENTHESIS OPEN_BRACKET items CLOSE_BRACKET . CLOSE_PARENTHESIS SEMICOLON

    CLOSE_PARENTHESIS shift and go to state 154


state 151

    (84) set -> type NAME IGUAL NEW SET OPEN_PARENTHESIS element CLOSE_PARENTHESIS SEMICOLON .

    NAME            reduce using rule 84 (set -> type NAME IGUAL NEW SET OPEN_PARENTHESIS element CLOSE_PARENTHESIS SEMICOLON .)
    CONST           reduce using rule 84 (set -> type NAME IGUAL NEW SET OPEN_PARENTHESIS element CLOSE_PARENTHESIS SEMICOLON .)
    LET             reduce using rule 84 (set -> type NAME IGUAL NEW SET OPEN_PARENTHESIS element CLOSE_PARENTHESIS SEMICOLON .)
    VAR             reduce using rule 84 (set -> type NAME IGUAL NEW SET OPEN_PARENTHESIS element CLOSE_PARENTHESIS SEMICOLON .)
    WHILE           reduce using rule 84 (set -> type NAME IGUAL NEW SET OPEN_PARENTHESIS element CLOSE_PARENTHESIS SEMICOLON .)
    FOR             reduce using rule 84 (set -> type NAME IGUAL NEW SET OPEN_PARENTHESIS element CLOSE_PARENTHESIS SEMICOLON .)
    $end            reduce using rule 84 (set -> type NAME IGUAL NEW SET OPEN_PARENTHESIS element CLOSE_PARENTHESIS SEMICOLON .)
    CLOSE_BRACE     reduce using rule 84 (set -> type NAME IGUAL NEW SET OPEN_PARENTHESIS element CLOSE_PARENTHESIS SEMICOLON .)


state 152

    (86) set -> NAME IGUAL NEW SET OPEN_PARENTHESIS OPEN_BRACKET items CLOSE_BRACKET CLOSE_PARENTHESIS . SEMICOLON

    SEMICOLON       shift and go to state 155


state 153

    (32) for -> FOR OPEN_PARENTHESIS inicialization SEMICOLON condition SEMICOLON operations CLOSE_PARENTHESIS OPEN_BRACE . expression CLOSE_BRACE
    (1) expression -> . variable
    (2) expression -> . variable expression
    (3) expression -> . dataStruct
    (4) expression -> . dataStruct expression
    (5) expression -> . controlStruct
    (6) expression -> . controlStruct expression
    (7) expression -> . methodsSet
    (8) variable -> . type NAME IGUAL datatype SEMICOLON
    (9) variable -> . type NAME IGUAL operations SEMICOLON
    (10) variable -> . NAME IGUAL datatype SEMICOLON
    (13) dataStruct -> . array
    (14) dataStruct -> . set
    (11) controlStruct -> . while
    (12) controlStruct -> . for
    (88) methodsSet -> . NAME POINT ADD OPEN_PARENTHESIS element CLOSE_PARENTHESIS SEMICOLON
    (89) methodsSet -> . NAME POINT DELETE OPEN_PARENTHESIS element CLOSE_PARENTHESIS SEMICOLON
    (90) methodsSet -> . NAME POINT CLEAR OPEN_PARENTHESIS CLOSE_PARENTHESIS SEMICOLON
    (48) type -> . CONST
    (49) type -> . LET
    (50) type -> . VAR
    (59) array -> . type NAME IGUAL OPEN_BRACKET items CLOSE_BRACKET SEMICOLON
    (60) array -> . type NAME IGUAL NEW ARRAY OPEN_PARENTHESIS items CLOSE_PARENTHESIS SEMICOLON
    (82) set -> . type NAME IGUAL NEW SET OPEN_PARENTHESIS CLOSE_PARENTHESIS SEMICOLON
    (83) set -> . type NAME IGUAL NEW SET OPEN_PARENTHESIS OPEN_BRACKET items CLOSE_BRACKET CLOSE_PARENTHESIS SEMICOLON
    (84) set -> . type NAME IGUAL NEW SET OPEN_PARENTHESIS element CLOSE_PARENTHESIS SEMICOLON
    (85) set -> . NAME IGUAL NEW SET OPEN_PARENTHESIS CLOSE_PARENTHESIS SEMICOLON
    (86) set -> . NAME IGUAL NEW SET OPEN_PARENTHESIS OPEN_BRACKET items CLOSE_BRACKET CLOSE_PARENTHESIS SEMICOLON
    (87) set -> . NAME IGUAL NEW SET OPEN_PARENTHESIS element CLOSE_PARENTHESIS SEMICOLON
    (15) while -> . WHILE OPEN_PARENTHESIS controlArg CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE
    (16) while -> . WHILE OPEN_PARENTHESIS bool CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE
    (32) for -> . FOR OPEN_PARENTHESIS inicialization SEMICOLON condition SEMICOLON operations CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE

    NAME            shift and go to state 7
    CONST           shift and go to state 12
    LET             shift and go to state 13
    VAR             shift and go to state 14
    WHILE           shift and go to state 15
    FOR             shift and go to state 16

    expression                     shift and go to state 156
    variable                       shift and go to state 2
    dataStruct                     shift and go to state 3
    controlStruct                  shift and go to state 4
    methodsSet                     shift and go to state 5
    type                           shift and go to state 6
    array                          shift and go to state 8
    set                            shift and go to state 9
    while                          shift and go to state 10
    for                            shift and go to state 11

state 154

    (83) set -> type NAME IGUAL NEW SET OPEN_PARENTHESIS OPEN_BRACKET items CLOSE_BRACKET CLOSE_PARENTHESIS . SEMICOLON

    SEMICOLON       shift and go to state 157


state 155

    (86) set -> NAME IGUAL NEW SET OPEN_PARENTHESIS OPEN_BRACKET items CLOSE_BRACKET CLOSE_PARENTHESIS SEMICOLON .

    NAME            reduce using rule 86 (set -> NAME IGUAL NEW SET OPEN_PARENTHESIS OPEN_BRACKET items CLOSE_BRACKET CLOSE_PARENTHESIS SEMICOLON .)
    CONST           reduce using rule 86 (set -> NAME IGUAL NEW SET OPEN_PARENTHESIS OPEN_BRACKET items CLOSE_BRACKET CLOSE_PARENTHESIS SEMICOLON .)
    LET             reduce using rule 86 (set -> NAME IGUAL NEW SET OPEN_PARENTHESIS OPEN_BRACKET items CLOSE_BRACKET CLOSE_PARENTHESIS SEMICOLON .)
    VAR             reduce using rule 86 (set -> NAME IGUAL NEW SET OPEN_PARENTHESIS OPEN_BRACKET items CLOSE_BRACKET CLOSE_PARENTHESIS SEMICOLON .)
    WHILE           reduce using rule 86 (set -> NAME IGUAL NEW SET OPEN_PARENTHESIS OPEN_BRACKET items CLOSE_BRACKET CLOSE_PARENTHESIS SEMICOLON .)
    FOR             reduce using rule 86 (set -> NAME IGUAL NEW SET OPEN_PARENTHESIS OPEN_BRACKET items CLOSE_BRACKET CLOSE_PARENTHESIS SEMICOLON .)
    $end            reduce using rule 86 (set -> NAME IGUAL NEW SET OPEN_PARENTHESIS OPEN_BRACKET items CLOSE_BRACKET CLOSE_PARENTHESIS SEMICOLON .)
    CLOSE_BRACE     reduce using rule 86 (set -> NAME IGUAL NEW SET OPEN_PARENTHESIS OPEN_BRACKET items CLOSE_BRACKET CLOSE_PARENTHESIS SEMICOLON .)


state 156

    (32) for -> FOR OPEN_PARENTHESIS inicialization SEMICOLON condition SEMICOLON operations CLOSE_PARENTHESIS OPEN_BRACE expression . CLOSE_BRACE

    CLOSE_BRACE     shift and go to state 158


state 157

    (83) set -> type NAME IGUAL NEW SET OPEN_PARENTHESIS OPEN_BRACKET items CLOSE_BRACKET CLOSE_PARENTHESIS SEMICOLON .

    NAME            reduce using rule 83 (set -> type NAME IGUAL NEW SET OPEN_PARENTHESIS OPEN_BRACKET items CLOSE_BRACKET CLOSE_PARENTHESIS SEMICOLON .)
    CONST           reduce using rule 83 (set -> type NAME IGUAL NEW SET OPEN_PARENTHESIS OPEN_BRACKET items CLOSE_BRACKET CLOSE_PARENTHESIS SEMICOLON .)
    LET             reduce using rule 83 (set -> type NAME IGUAL NEW SET OPEN_PARENTHESIS OPEN_BRACKET items CLOSE_BRACKET CLOSE_PARENTHESIS SEMICOLON .)
    VAR             reduce using rule 83 (set -> type NAME IGUAL NEW SET OPEN_PARENTHESIS OPEN_BRACKET items CLOSE_BRACKET CLOSE_PARENTHESIS SEMICOLON .)
    WHILE           reduce using rule 83 (set -> type NAME IGUAL NEW SET OPEN_PARENTHESIS OPEN_BRACKET items CLOSE_BRACKET CLOSE_PARENTHESIS SEMICOLON .)
    FOR             reduce using rule 83 (set -> type NAME IGUAL NEW SET OPEN_PARENTHESIS OPEN_BRACKET items CLOSE_BRACKET CLOSE_PARENTHESIS SEMICOLON .)
    $end            reduce using rule 83 (set -> type NAME IGUAL NEW SET OPEN_PARENTHESIS OPEN_BRACKET items CLOSE_BRACKET CLOSE_PARENTHESIS SEMICOLON .)
    CLOSE_BRACE     reduce using rule 83 (set -> type NAME IGUAL NEW SET OPEN_PARENTHESIS OPEN_BRACKET items CLOSE_BRACKET CLOSE_PARENTHESIS SEMICOLON .)


state 158

    (32) for -> FOR OPEN_PARENTHESIS inicialization SEMICOLON condition SEMICOLON operations CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE .

    NAME            reduce using rule 32 (for -> FOR OPEN_PARENTHESIS inicialization SEMICOLON condition SEMICOLON operations CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE .)
    CONST           reduce using rule 32 (for -> FOR OPEN_PARENTHESIS inicialization SEMICOLON condition SEMICOLON operations CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE .)
    LET             reduce using rule 32 (for -> FOR OPEN_PARENTHESIS inicialization SEMICOLON condition SEMICOLON operations CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE .)
    VAR             reduce using rule 32 (for -> FOR OPEN_PARENTHESIS inicialization SEMICOLON condition SEMICOLON operations CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE .)
    WHILE           reduce using rule 32 (for -> FOR OPEN_PARENTHESIS inicialization SEMICOLON condition SEMICOLON operations CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE .)
    FOR             reduce using rule 32 (for -> FOR OPEN_PARENTHESIS inicialization SEMICOLON condition SEMICOLON operations CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE .)
    $end            reduce using rule 32 (for -> FOR OPEN_PARENTHESIS inicialization SEMICOLON condition SEMICOLON operations CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE .)
    CLOSE_BRACE     reduce using rule 32 (for -> FOR OPEN_PARENTHESIS inicialization SEMICOLON condition SEMICOLON operations CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE .)


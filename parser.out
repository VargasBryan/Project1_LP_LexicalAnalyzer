Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    DOUBLE_QUOTES
    INT
    LINE_BREAK
    LONGCOMMENT
    NULL
    SINGLE_QUOTE

Grammar

Rule 0     S' -> expression
Rule 1     expression -> semiExpression
Rule 2     expression -> semiExpression expression
Rule 3     semiExpression -> variable
Rule 4     semiExpression -> dataStruct
Rule 5     semiExpression -> controlStruct
Rule 6     semiExpression -> methodsSet
Rule 7     semiExpression -> mapFunctions
Rule 8     semiExpression -> arrayFn
Rule 9     semiExpression -> declaration
Rule 10    semiExpression -> print
Rule 11    semiExpression -> return
Rule 12    semiExpression -> function
Rule 13    semiExpression -> COMMENTS
Rule 14    semiExpression -> asigOp
Rule 15    number -> INTEGER
Rule 16    number -> FLOAT
Rule 17    number -> OPEN_PARENTHESIS RESTA INTEGER CLOSE_PARENTHESIS
Rule 18    number -> OPEN_PARENTHESIS RESTA FLOAT CLOSE_PARENTHESIS
Rule 19    variable -> type NAME IGUAL datatype SEMICOLON
Rule 20    variable -> NAME IGUAL datatype SEMICOLON
Rule 21    controlStruct -> while
Rule 22    controlStruct -> for
Rule 23    controlStruct -> if
Rule 24    dataStruct -> array
Rule 25    dataStruct -> set
Rule 26    dataStruct -> map
Rule 27    while -> WHILE OPEN_PARENTHESIS controlArg CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE
Rule 28    while -> WHILE OPEN_PARENTHESIS bool CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE
Rule 29    if -> soloIf
Rule 30    if -> soloIf elseIf
Rule 31    if -> soloIf elseIf else
Rule 32    if -> soloIf else
Rule 33    soloIf -> IF OPEN_PARENTHESIS controlArg CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE
Rule 34    elseIf -> ELSEIF OPEN_PARENTHESIS controlArg CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE
Rule 35    elseIf -> ELSEIF OPEN_PARENTHESIS controlArg CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE soloIf
Rule 36    else -> ELSE OPEN_BRACE expression CLOSE_BRACE
Rule 37    controlArg -> element clause element
Rule 38    for -> FOR OPEN_PARENTHESIS inicialization SEMICOLON expBoolean SEMICOLON operations CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE
Rule 39    inicialization -> type NAME IGUAL number
Rule 40    inicialization -> NAME IGUAL number
Rule 41    operations -> number operand number
Rule 42    operations -> NAME
Rule 43    operations -> number
Rule 44    operations -> number operand NAME operations
Rule 45    operations -> NAME operand number operations
Rule 46    operations -> number operand NAME
Rule 47    operations -> NAME operand number
Rule 48    operations -> NAME operand NAME operations
Rule 49    operations -> number operand number operand operations
Rule 50    operations -> NAME SUMA SUMA
Rule 51    operations -> NAME RESTA RESTA
Rule 52    datatype -> number
Rule 53    datatype -> STRING
Rule 54    datatype -> CHAR
Rule 55    datatype -> operations
Rule 56    datatype -> dataStruct
Rule 57    operand -> SUMA
Rule 58    operand -> RESTA
Rule 59    operand -> MULTIPLICACION
Rule 60    operand -> DIVISION
Rule 61    operadorAsig -> MASIGUAL
Rule 62    operadorAsig -> MENOSIGUAL
Rule 63    operadorAsig -> PORIGUAL
Rule 64    operadorAsig -> DIVIGUAL
Rule 65    operadorAsig -> MODIGUAL
Rule 66    operadorAsig -> POTIGUAL
Rule 67    asigOp -> NAME operadorAsig number SEMICOLON
Rule 68    bool -> TRUE
Rule 69    bool -> FALSE
Rule 70    type -> CONST
Rule 71    type -> LET
Rule 72    type -> VAR
Rule 73    clause -> IGUALIGUAL
Rule 74    clause -> DIFERENTE
Rule 75    clause -> MAYORQUE
Rule 76    clause -> MAYORIGUALQUE
Rule 77    clause -> MENORQUE
Rule 78    clause -> MENORIGUALQUE
Rule 79    array -> OPEN_BRACKET items CLOSE_BRACKET SEMICOLON
Rule 80    array -> NEW ARRAY OPEN_PARENTHESIS items CLOSE_PARENTHESIS SEMICOLON
Rule 81    map -> iniciarMap
Rule 82    map -> escribirMap
Rule 83    map -> generarMap
Rule 84    iniciarMap -> NEW MAP OPEN_PARENTHESIS CLOSE_PARENTHESIS SEMICOLON
Rule 85    escribirMap -> OPEN_BRACE claveValor CLOSE_BRACE
Rule 86    claveValor -> clave COLON datatype
Rule 87    claveValor -> clave COLON datatype COMMA claveValor
Rule 88    clave -> datatype
Rule 89    generarMap -> OPEN_BRACE tuplas CLOSE_BRACE
Rule 90    tuplas -> tupla
Rule 91    tuplas -> tupla COMMA tuplas
Rule 92    tupla -> OPEN_BRACKET datatype CLOSE_BRACKET SEMICOLON
Rule 93    tupla -> OPEN_BRACKET datatype COMMA datatype CLOSE_BRACKET SEMICOLON
Rule 94    mapFunctions -> NAME POINT CLEAR OPEN_PARENTHESIS CLOSE_PARENTHESIS SEMICOLON
Rule 95    mapFunctions -> NAME POINT GET OPEN_PARENTHESIS clave CLOSE_PARENTHESIS SEMICOLON
Rule 96    mapFunctions -> NAME POINT HAS OPEN_PARENTHESIS clave CLOSE_PARENTHESIS SEMICOLON
Rule 97    arrayFn -> NAME POINT POP OPEN_PARENTHESIS CLOSE_PARENTHESIS SEMICOLON
Rule 98    arrayFn -> NAME POINT PUSH OPEN_PARENTHESIS element CLOSE_PARENTHESIS SEMICOLON
Rule 99    arrayFn -> NAME POINT UNSHIFT OPEN_PARENTHESIS element CLOSE_PARENTHESIS SEMICOLON
Rule 100   set -> NEW SET OPEN_PARENTHESIS CLOSE_PARENTHESIS SEMICOLON
Rule 101   set -> NEW SET OPEN_PARENTHESIS OPEN_BRACKET items CLOSE_BRACKET CLOSE_PARENTHESIS SEMICOLON
Rule 102   set -> NEW SET OPEN_PARENTHESIS element CLOSE_PARENTHESIS SEMICOLON
Rule 103   methodsSet -> NAME POINT ADD OPEN_PARENTHESIS element CLOSE_PARENTHESIS SEMICOLON
Rule 104   methodsSet -> NAME POINT DELETE OPEN_PARENTHESIS element CLOSE_PARENTHESIS SEMICOLON
Rule 105   methodsSet -> NAME POINT CLEAR OPEN_PARENTHESIS CLOSE_PARENTHESIS SEMICOLON
Rule 106   items -> item
Rule 107   items -> item COMMA items
Rule 108   item -> number
Rule 109   item -> STRING
Rule 110   item -> expBoolean
Rule 111   item -> NAME
Rule 112   item -> datatype
Rule 113   cadena -> STRING
Rule 114   cadena -> STRING COMMA cadena
Rule 115   element -> STRING
Rule 116   element -> number
Rule 117   element -> NAME
Rule 118   declaration -> NAME IGUAL element SEMICOLON
Rule 119   logicalOperator -> AND
Rule 120   logicalOperator -> OR
Rule 121   expBoolean -> controlArg
Rule 122   expBoolean -> bool
Rule 123   expBoolean -> NOT expBoolean
Rule 124   expBoolean -> expBoolean logicalOperator expBoolean
Rule 125   function -> FUNCTION NAME OPEN_PARENTHESIS CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE
Rule 126   function -> FUNCTION NAME OPEN_PARENTHESIS parameter CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE
Rule 127   parameter -> element
Rule 128   parameter -> element parameter
Rule 129   return -> RETURN element SEMICOLON
Rule 130   print -> PRINT OPEN_PARENTHESIS CLOSE_PARENTHESIS SEMICOLON

Terminals, with rules where they appear

ADD                  : 103
AND                  : 119
ARRAY                : 80
CHAR                 : 54
CLEAR                : 94 105
CLOSE_BRACE          : 27 28 33 34 35 36 38 85 89 125 126
CLOSE_BRACKET        : 79 92 93 101
CLOSE_PARENTHESIS    : 17 18 27 28 33 34 35 38 80 84 94 95 96 97 98 99 100 101 102 103 104 105 125 126 130
COLON                : 86 87
COMMA                : 87 91 93 107 114
COMMENTS             : 13
CONST                : 70
DELETE               : 104
DIFERENTE            : 74
DIVIGUAL             : 64
DIVISION             : 60
DOUBLE_QUOTES        : 
ELSE                 : 36
ELSEIF               : 34 35
FALSE                : 69
FLOAT                : 16 18
FOR                  : 38
FUNCTION             : 125 126
GET                  : 95
HAS                  : 96
IF                   : 33
IGUAL                : 19 20 39 40 118
IGUALIGUAL           : 73
INT                  : 
INTEGER              : 15 17
LET                  : 71
LINE_BREAK           : 
LONGCOMMENT          : 
MAP                  : 84
MASIGUAL             : 61
MAYORIGUALQUE        : 76
MAYORQUE             : 75
MENORIGUALQUE        : 78
MENORQUE             : 77
MENOSIGUAL           : 62
MODIGUAL             : 65
MULTIPLICACION       : 59
NAME                 : 19 20 39 40 42 44 45 46 47 48 48 50 51 67 94 95 96 97 98 99 103 104 105 111 117 118 125 126
NEW                  : 80 84 100 101 102
NOT                  : 123
NULL                 : 
OPEN_BRACE           : 27 28 33 34 35 36 38 85 89 125 126
OPEN_BRACKET         : 79 92 93 101
OPEN_PARENTHESIS     : 17 18 27 28 33 34 35 38 80 84 94 95 96 97 98 99 100 101 102 103 104 105 125 126 130
OR                   : 120
POINT                : 94 95 96 97 98 99 103 104 105
POP                  : 97
PORIGUAL             : 63
POTIGUAL             : 66
PRINT                : 130
PUSH                 : 98
RESTA                : 17 18 51 51 58
RETURN               : 129
SEMICOLON            : 19 20 38 38 67 79 80 84 92 93 94 95 96 97 98 99 100 101 102 103 104 105 118 129 130
SET                  : 100 101 102
SINGLE_QUOTE         : 
STRING               : 53 109 113 114 115
SUMA                 : 50 50 57
TRUE                 : 68
UNSHIFT              : 99
VAR                  : 72
WHILE                : 27 28
error                : 

Nonterminals, with rules where they appear

array                : 24
arrayFn              : 8
asigOp               : 14
bool                 : 28 122
cadena               : 114
clause               : 37
clave                : 86 87 95 96
claveValor           : 85 87
controlArg           : 27 33 34 35 121
controlStruct        : 5
dataStruct           : 4 56
datatype             : 19 20 86 87 88 92 93 93 112
declaration          : 9
element              : 37 37 98 99 102 103 104 118 127 128 129
else                 : 31 32
elseIf               : 30 31
escribirMap          : 82
expBoolean           : 38 110 123 124 124
expression           : 2 27 28 33 34 35 36 38 125 126 0
for                  : 22
function             : 12
generarMap           : 83
if                   : 23
inicialization       : 38
iniciarMap           : 81
item                 : 106 107
items                : 79 80 101 107
logicalOperator      : 124
map                  : 26
mapFunctions         : 7
methodsSet           : 6
number               : 39 40 41 41 43 44 45 46 47 49 49 52 67 108 116
operadorAsig         : 67
operand              : 41 44 45 46 47 48 49 49
operations           : 38 44 45 48 49 55
parameter            : 126 128
print                : 10
return               : 11
semiExpression       : 1 2
set                  : 25
soloIf               : 29 30 31 32 35
tupla                : 90 91
tuplas               : 89 91
type                 : 19 39
variable             : 3
while                : 21

Parsing method: LALR

state 0

    (0) S' -> . expression
    (1) expression -> . semiExpression
    (2) expression -> . semiExpression expression
    (3) semiExpression -> . variable
    (4) semiExpression -> . dataStruct
    (5) semiExpression -> . controlStruct
    (6) semiExpression -> . methodsSet
    (7) semiExpression -> . mapFunctions
    (8) semiExpression -> . arrayFn
    (9) semiExpression -> . declaration
    (10) semiExpression -> . print
    (11) semiExpression -> . return
    (12) semiExpression -> . function
    (13) semiExpression -> . COMMENTS
    (14) semiExpression -> . asigOp
    (19) variable -> . type NAME IGUAL datatype SEMICOLON
    (20) variable -> . NAME IGUAL datatype SEMICOLON
    (24) dataStruct -> . array
    (25) dataStruct -> . set
    (26) dataStruct -> . map
    (21) controlStruct -> . while
    (22) controlStruct -> . for
    (23) controlStruct -> . if
    (103) methodsSet -> . NAME POINT ADD OPEN_PARENTHESIS element CLOSE_PARENTHESIS SEMICOLON
    (104) methodsSet -> . NAME POINT DELETE OPEN_PARENTHESIS element CLOSE_PARENTHESIS SEMICOLON
    (105) methodsSet -> . NAME POINT CLEAR OPEN_PARENTHESIS CLOSE_PARENTHESIS SEMICOLON
    (94) mapFunctions -> . NAME POINT CLEAR OPEN_PARENTHESIS CLOSE_PARENTHESIS SEMICOLON
    (95) mapFunctions -> . NAME POINT GET OPEN_PARENTHESIS clave CLOSE_PARENTHESIS SEMICOLON
    (96) mapFunctions -> . NAME POINT HAS OPEN_PARENTHESIS clave CLOSE_PARENTHESIS SEMICOLON
    (97) arrayFn -> . NAME POINT POP OPEN_PARENTHESIS CLOSE_PARENTHESIS SEMICOLON
    (98) arrayFn -> . NAME POINT PUSH OPEN_PARENTHESIS element CLOSE_PARENTHESIS SEMICOLON
    (99) arrayFn -> . NAME POINT UNSHIFT OPEN_PARENTHESIS element CLOSE_PARENTHESIS SEMICOLON
    (118) declaration -> . NAME IGUAL element SEMICOLON
    (130) print -> . PRINT OPEN_PARENTHESIS CLOSE_PARENTHESIS SEMICOLON
    (129) return -> . RETURN element SEMICOLON
    (125) function -> . FUNCTION NAME OPEN_PARENTHESIS CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE
    (126) function -> . FUNCTION NAME OPEN_PARENTHESIS parameter CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE
    (67) asigOp -> . NAME operadorAsig number SEMICOLON
    (70) type -> . CONST
    (71) type -> . LET
    (72) type -> . VAR
    (79) array -> . OPEN_BRACKET items CLOSE_BRACKET SEMICOLON
    (80) array -> . NEW ARRAY OPEN_PARENTHESIS items CLOSE_PARENTHESIS SEMICOLON
    (100) set -> . NEW SET OPEN_PARENTHESIS CLOSE_PARENTHESIS SEMICOLON
    (101) set -> . NEW SET OPEN_PARENTHESIS OPEN_BRACKET items CLOSE_BRACKET CLOSE_PARENTHESIS SEMICOLON
    (102) set -> . NEW SET OPEN_PARENTHESIS element CLOSE_PARENTHESIS SEMICOLON
    (81) map -> . iniciarMap
    (82) map -> . escribirMap
    (83) map -> . generarMap
    (27) while -> . WHILE OPEN_PARENTHESIS controlArg CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE
    (28) while -> . WHILE OPEN_PARENTHESIS bool CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE
    (38) for -> . FOR OPEN_PARENTHESIS inicialization SEMICOLON expBoolean SEMICOLON operations CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE
    (29) if -> . soloIf
    (30) if -> . soloIf elseIf
    (31) if -> . soloIf elseIf else
    (32) if -> . soloIf else
    (84) iniciarMap -> . NEW MAP OPEN_PARENTHESIS CLOSE_PARENTHESIS SEMICOLON
    (85) escribirMap -> . OPEN_BRACE claveValor CLOSE_BRACE
    (89) generarMap -> . OPEN_BRACE tuplas CLOSE_BRACE
    (33) soloIf -> . IF OPEN_PARENTHESIS controlArg CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE

    COMMENTS        shift and go to state 13
    NAME            shift and go to state 16
    PRINT           shift and go to state 23
    RETURN          shift and go to state 24
    FUNCTION        shift and go to state 25
    CONST           shift and go to state 27
    LET             shift and go to state 28
    VAR             shift and go to state 29
    OPEN_BRACKET    shift and go to state 30
    NEW             shift and go to state 31
    WHILE           shift and go to state 35
    FOR             shift and go to state 36
    OPEN_BRACE      shift and go to state 26
    IF              shift and go to state 38

    expression                     shift and go to state 1
    semiExpression                 shift and go to state 2
    variable                       shift and go to state 3
    dataStruct                     shift and go to state 4
    controlStruct                  shift and go to state 5
    methodsSet                     shift and go to state 6
    mapFunctions                   shift and go to state 7
    arrayFn                        shift and go to state 8
    declaration                    shift and go to state 9
    print                          shift and go to state 10
    return                         shift and go to state 11
    function                       shift and go to state 12
    asigOp                         shift and go to state 14
    type                           shift and go to state 15
    array                          shift and go to state 17
    set                            shift and go to state 18
    map                            shift and go to state 19
    while                          shift and go to state 20
    for                            shift and go to state 21
    if                             shift and go to state 22
    iniciarMap                     shift and go to state 32
    escribirMap                    shift and go to state 33
    generarMap                     shift and go to state 34
    soloIf                         shift and go to state 37

state 1

    (0) S' -> expression .



state 2

    (1) expression -> semiExpression .
    (2) expression -> semiExpression . expression
    (1) expression -> . semiExpression
    (2) expression -> . semiExpression expression
    (3) semiExpression -> . variable
    (4) semiExpression -> . dataStruct
    (5) semiExpression -> . controlStruct
    (6) semiExpression -> . methodsSet
    (7) semiExpression -> . mapFunctions
    (8) semiExpression -> . arrayFn
    (9) semiExpression -> . declaration
    (10) semiExpression -> . print
    (11) semiExpression -> . return
    (12) semiExpression -> . function
    (13) semiExpression -> . COMMENTS
    (14) semiExpression -> . asigOp
    (19) variable -> . type NAME IGUAL datatype SEMICOLON
    (20) variable -> . NAME IGUAL datatype SEMICOLON
    (24) dataStruct -> . array
    (25) dataStruct -> . set
    (26) dataStruct -> . map
    (21) controlStruct -> . while
    (22) controlStruct -> . for
    (23) controlStruct -> . if
    (103) methodsSet -> . NAME POINT ADD OPEN_PARENTHESIS element CLOSE_PARENTHESIS SEMICOLON
    (104) methodsSet -> . NAME POINT DELETE OPEN_PARENTHESIS element CLOSE_PARENTHESIS SEMICOLON
    (105) methodsSet -> . NAME POINT CLEAR OPEN_PARENTHESIS CLOSE_PARENTHESIS SEMICOLON
    (94) mapFunctions -> . NAME POINT CLEAR OPEN_PARENTHESIS CLOSE_PARENTHESIS SEMICOLON
    (95) mapFunctions -> . NAME POINT GET OPEN_PARENTHESIS clave CLOSE_PARENTHESIS SEMICOLON
    (96) mapFunctions -> . NAME POINT HAS OPEN_PARENTHESIS clave CLOSE_PARENTHESIS SEMICOLON
    (97) arrayFn -> . NAME POINT POP OPEN_PARENTHESIS CLOSE_PARENTHESIS SEMICOLON
    (98) arrayFn -> . NAME POINT PUSH OPEN_PARENTHESIS element CLOSE_PARENTHESIS SEMICOLON
    (99) arrayFn -> . NAME POINT UNSHIFT OPEN_PARENTHESIS element CLOSE_PARENTHESIS SEMICOLON
    (118) declaration -> . NAME IGUAL element SEMICOLON
    (130) print -> . PRINT OPEN_PARENTHESIS CLOSE_PARENTHESIS SEMICOLON
    (129) return -> . RETURN element SEMICOLON
    (125) function -> . FUNCTION NAME OPEN_PARENTHESIS CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE
    (126) function -> . FUNCTION NAME OPEN_PARENTHESIS parameter CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE
    (67) asigOp -> . NAME operadorAsig number SEMICOLON
    (70) type -> . CONST
    (71) type -> . LET
    (72) type -> . VAR
    (79) array -> . OPEN_BRACKET items CLOSE_BRACKET SEMICOLON
    (80) array -> . NEW ARRAY OPEN_PARENTHESIS items CLOSE_PARENTHESIS SEMICOLON
    (100) set -> . NEW SET OPEN_PARENTHESIS CLOSE_PARENTHESIS SEMICOLON
    (101) set -> . NEW SET OPEN_PARENTHESIS OPEN_BRACKET items CLOSE_BRACKET CLOSE_PARENTHESIS SEMICOLON
    (102) set -> . NEW SET OPEN_PARENTHESIS element CLOSE_PARENTHESIS SEMICOLON
    (81) map -> . iniciarMap
    (82) map -> . escribirMap
    (83) map -> . generarMap
    (27) while -> . WHILE OPEN_PARENTHESIS controlArg CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE
    (28) while -> . WHILE OPEN_PARENTHESIS bool CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE
    (38) for -> . FOR OPEN_PARENTHESIS inicialization SEMICOLON expBoolean SEMICOLON operations CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE
    (29) if -> . soloIf
    (30) if -> . soloIf elseIf
    (31) if -> . soloIf elseIf else
    (32) if -> . soloIf else
    (84) iniciarMap -> . NEW MAP OPEN_PARENTHESIS CLOSE_PARENTHESIS SEMICOLON
    (85) escribirMap -> . OPEN_BRACE claveValor CLOSE_BRACE
    (89) generarMap -> . OPEN_BRACE tuplas CLOSE_BRACE
    (33) soloIf -> . IF OPEN_PARENTHESIS controlArg CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE

    $end            reduce using rule 1 (expression -> semiExpression .)
    CLOSE_BRACE     reduce using rule 1 (expression -> semiExpression .)
    COMMENTS        shift and go to state 13
    NAME            shift and go to state 16
    PRINT           shift and go to state 23
    RETURN          shift and go to state 24
    FUNCTION        shift and go to state 25
    CONST           shift and go to state 27
    LET             shift and go to state 28
    VAR             shift and go to state 29
    OPEN_BRACKET    shift and go to state 30
    NEW             shift and go to state 31
    WHILE           shift and go to state 35
    FOR             shift and go to state 36
    OPEN_BRACE      shift and go to state 26
    IF              shift and go to state 38

    semiExpression                 shift and go to state 2
    expression                     shift and go to state 39
    variable                       shift and go to state 3
    dataStruct                     shift and go to state 4
    controlStruct                  shift and go to state 5
    methodsSet                     shift and go to state 6
    mapFunctions                   shift and go to state 7
    arrayFn                        shift and go to state 8
    declaration                    shift and go to state 9
    print                          shift and go to state 10
    return                         shift and go to state 11
    function                       shift and go to state 12
    asigOp                         shift and go to state 14
    type                           shift and go to state 15
    array                          shift and go to state 17
    set                            shift and go to state 18
    map                            shift and go to state 19
    while                          shift and go to state 20
    for                            shift and go to state 21
    if                             shift and go to state 22
    iniciarMap                     shift and go to state 32
    escribirMap                    shift and go to state 33
    generarMap                     shift and go to state 34
    soloIf                         shift and go to state 37

state 3

    (3) semiExpression -> variable .

    COMMENTS        reduce using rule 3 (semiExpression -> variable .)
    NAME            reduce using rule 3 (semiExpression -> variable .)
    PRINT           reduce using rule 3 (semiExpression -> variable .)
    RETURN          reduce using rule 3 (semiExpression -> variable .)
    FUNCTION        reduce using rule 3 (semiExpression -> variable .)
    CONST           reduce using rule 3 (semiExpression -> variable .)
    LET             reduce using rule 3 (semiExpression -> variable .)
    VAR             reduce using rule 3 (semiExpression -> variable .)
    OPEN_BRACKET    reduce using rule 3 (semiExpression -> variable .)
    NEW             reduce using rule 3 (semiExpression -> variable .)
    WHILE           reduce using rule 3 (semiExpression -> variable .)
    FOR             reduce using rule 3 (semiExpression -> variable .)
    OPEN_BRACE      reduce using rule 3 (semiExpression -> variable .)
    IF              reduce using rule 3 (semiExpression -> variable .)
    $end            reduce using rule 3 (semiExpression -> variable .)
    CLOSE_BRACE     reduce using rule 3 (semiExpression -> variable .)


state 4

    (4) semiExpression -> dataStruct .

    COMMENTS        reduce using rule 4 (semiExpression -> dataStruct .)
    NAME            reduce using rule 4 (semiExpression -> dataStruct .)
    PRINT           reduce using rule 4 (semiExpression -> dataStruct .)
    RETURN          reduce using rule 4 (semiExpression -> dataStruct .)
    FUNCTION        reduce using rule 4 (semiExpression -> dataStruct .)
    CONST           reduce using rule 4 (semiExpression -> dataStruct .)
    LET             reduce using rule 4 (semiExpression -> dataStruct .)
    VAR             reduce using rule 4 (semiExpression -> dataStruct .)
    OPEN_BRACKET    reduce using rule 4 (semiExpression -> dataStruct .)
    NEW             reduce using rule 4 (semiExpression -> dataStruct .)
    WHILE           reduce using rule 4 (semiExpression -> dataStruct .)
    FOR             reduce using rule 4 (semiExpression -> dataStruct .)
    OPEN_BRACE      reduce using rule 4 (semiExpression -> dataStruct .)
    IF              reduce using rule 4 (semiExpression -> dataStruct .)
    $end            reduce using rule 4 (semiExpression -> dataStruct .)
    CLOSE_BRACE     reduce using rule 4 (semiExpression -> dataStruct .)


state 5

    (5) semiExpression -> controlStruct .

    COMMENTS        reduce using rule 5 (semiExpression -> controlStruct .)
    NAME            reduce using rule 5 (semiExpression -> controlStruct .)
    PRINT           reduce using rule 5 (semiExpression -> controlStruct .)
    RETURN          reduce using rule 5 (semiExpression -> controlStruct .)
    FUNCTION        reduce using rule 5 (semiExpression -> controlStruct .)
    CONST           reduce using rule 5 (semiExpression -> controlStruct .)
    LET             reduce using rule 5 (semiExpression -> controlStruct .)
    VAR             reduce using rule 5 (semiExpression -> controlStruct .)
    OPEN_BRACKET    reduce using rule 5 (semiExpression -> controlStruct .)
    NEW             reduce using rule 5 (semiExpression -> controlStruct .)
    WHILE           reduce using rule 5 (semiExpression -> controlStruct .)
    FOR             reduce using rule 5 (semiExpression -> controlStruct .)
    OPEN_BRACE      reduce using rule 5 (semiExpression -> controlStruct .)
    IF              reduce using rule 5 (semiExpression -> controlStruct .)
    $end            reduce using rule 5 (semiExpression -> controlStruct .)
    CLOSE_BRACE     reduce using rule 5 (semiExpression -> controlStruct .)


state 6

    (6) semiExpression -> methodsSet .

    COMMENTS        reduce using rule 6 (semiExpression -> methodsSet .)
    NAME            reduce using rule 6 (semiExpression -> methodsSet .)
    PRINT           reduce using rule 6 (semiExpression -> methodsSet .)
    RETURN          reduce using rule 6 (semiExpression -> methodsSet .)
    FUNCTION        reduce using rule 6 (semiExpression -> methodsSet .)
    CONST           reduce using rule 6 (semiExpression -> methodsSet .)
    LET             reduce using rule 6 (semiExpression -> methodsSet .)
    VAR             reduce using rule 6 (semiExpression -> methodsSet .)
    OPEN_BRACKET    reduce using rule 6 (semiExpression -> methodsSet .)
    NEW             reduce using rule 6 (semiExpression -> methodsSet .)
    WHILE           reduce using rule 6 (semiExpression -> methodsSet .)
    FOR             reduce using rule 6 (semiExpression -> methodsSet .)
    OPEN_BRACE      reduce using rule 6 (semiExpression -> methodsSet .)
    IF              reduce using rule 6 (semiExpression -> methodsSet .)
    $end            reduce using rule 6 (semiExpression -> methodsSet .)
    CLOSE_BRACE     reduce using rule 6 (semiExpression -> methodsSet .)


state 7

    (7) semiExpression -> mapFunctions .

    COMMENTS        reduce using rule 7 (semiExpression -> mapFunctions .)
    NAME            reduce using rule 7 (semiExpression -> mapFunctions .)
    PRINT           reduce using rule 7 (semiExpression -> mapFunctions .)
    RETURN          reduce using rule 7 (semiExpression -> mapFunctions .)
    FUNCTION        reduce using rule 7 (semiExpression -> mapFunctions .)
    CONST           reduce using rule 7 (semiExpression -> mapFunctions .)
    LET             reduce using rule 7 (semiExpression -> mapFunctions .)
    VAR             reduce using rule 7 (semiExpression -> mapFunctions .)
    OPEN_BRACKET    reduce using rule 7 (semiExpression -> mapFunctions .)
    NEW             reduce using rule 7 (semiExpression -> mapFunctions .)
    WHILE           reduce using rule 7 (semiExpression -> mapFunctions .)
    FOR             reduce using rule 7 (semiExpression -> mapFunctions .)
    OPEN_BRACE      reduce using rule 7 (semiExpression -> mapFunctions .)
    IF              reduce using rule 7 (semiExpression -> mapFunctions .)
    $end            reduce using rule 7 (semiExpression -> mapFunctions .)
    CLOSE_BRACE     reduce using rule 7 (semiExpression -> mapFunctions .)


state 8

    (8) semiExpression -> arrayFn .

    COMMENTS        reduce using rule 8 (semiExpression -> arrayFn .)
    NAME            reduce using rule 8 (semiExpression -> arrayFn .)
    PRINT           reduce using rule 8 (semiExpression -> arrayFn .)
    RETURN          reduce using rule 8 (semiExpression -> arrayFn .)
    FUNCTION        reduce using rule 8 (semiExpression -> arrayFn .)
    CONST           reduce using rule 8 (semiExpression -> arrayFn .)
    LET             reduce using rule 8 (semiExpression -> arrayFn .)
    VAR             reduce using rule 8 (semiExpression -> arrayFn .)
    OPEN_BRACKET    reduce using rule 8 (semiExpression -> arrayFn .)
    NEW             reduce using rule 8 (semiExpression -> arrayFn .)
    WHILE           reduce using rule 8 (semiExpression -> arrayFn .)
    FOR             reduce using rule 8 (semiExpression -> arrayFn .)
    OPEN_BRACE      reduce using rule 8 (semiExpression -> arrayFn .)
    IF              reduce using rule 8 (semiExpression -> arrayFn .)
    $end            reduce using rule 8 (semiExpression -> arrayFn .)
    CLOSE_BRACE     reduce using rule 8 (semiExpression -> arrayFn .)


state 9

    (9) semiExpression -> declaration .

    COMMENTS        reduce using rule 9 (semiExpression -> declaration .)
    NAME            reduce using rule 9 (semiExpression -> declaration .)
    PRINT           reduce using rule 9 (semiExpression -> declaration .)
    RETURN          reduce using rule 9 (semiExpression -> declaration .)
    FUNCTION        reduce using rule 9 (semiExpression -> declaration .)
    CONST           reduce using rule 9 (semiExpression -> declaration .)
    LET             reduce using rule 9 (semiExpression -> declaration .)
    VAR             reduce using rule 9 (semiExpression -> declaration .)
    OPEN_BRACKET    reduce using rule 9 (semiExpression -> declaration .)
    NEW             reduce using rule 9 (semiExpression -> declaration .)
    WHILE           reduce using rule 9 (semiExpression -> declaration .)
    FOR             reduce using rule 9 (semiExpression -> declaration .)
    OPEN_BRACE      reduce using rule 9 (semiExpression -> declaration .)
    IF              reduce using rule 9 (semiExpression -> declaration .)
    $end            reduce using rule 9 (semiExpression -> declaration .)
    CLOSE_BRACE     reduce using rule 9 (semiExpression -> declaration .)


state 10

    (10) semiExpression -> print .

    COMMENTS        reduce using rule 10 (semiExpression -> print .)
    NAME            reduce using rule 10 (semiExpression -> print .)
    PRINT           reduce using rule 10 (semiExpression -> print .)
    RETURN          reduce using rule 10 (semiExpression -> print .)
    FUNCTION        reduce using rule 10 (semiExpression -> print .)
    CONST           reduce using rule 10 (semiExpression -> print .)
    LET             reduce using rule 10 (semiExpression -> print .)
    VAR             reduce using rule 10 (semiExpression -> print .)
    OPEN_BRACKET    reduce using rule 10 (semiExpression -> print .)
    NEW             reduce using rule 10 (semiExpression -> print .)
    WHILE           reduce using rule 10 (semiExpression -> print .)
    FOR             reduce using rule 10 (semiExpression -> print .)
    OPEN_BRACE      reduce using rule 10 (semiExpression -> print .)
    IF              reduce using rule 10 (semiExpression -> print .)
    $end            reduce using rule 10 (semiExpression -> print .)
    CLOSE_BRACE     reduce using rule 10 (semiExpression -> print .)


state 11

    (11) semiExpression -> return .

    COMMENTS        reduce using rule 11 (semiExpression -> return .)
    NAME            reduce using rule 11 (semiExpression -> return .)
    PRINT           reduce using rule 11 (semiExpression -> return .)
    RETURN          reduce using rule 11 (semiExpression -> return .)
    FUNCTION        reduce using rule 11 (semiExpression -> return .)
    CONST           reduce using rule 11 (semiExpression -> return .)
    LET             reduce using rule 11 (semiExpression -> return .)
    VAR             reduce using rule 11 (semiExpression -> return .)
    OPEN_BRACKET    reduce using rule 11 (semiExpression -> return .)
    NEW             reduce using rule 11 (semiExpression -> return .)
    WHILE           reduce using rule 11 (semiExpression -> return .)
    FOR             reduce using rule 11 (semiExpression -> return .)
    OPEN_BRACE      reduce using rule 11 (semiExpression -> return .)
    IF              reduce using rule 11 (semiExpression -> return .)
    $end            reduce using rule 11 (semiExpression -> return .)
    CLOSE_BRACE     reduce using rule 11 (semiExpression -> return .)


state 12

    (12) semiExpression -> function .

    COMMENTS        reduce using rule 12 (semiExpression -> function .)
    NAME            reduce using rule 12 (semiExpression -> function .)
    PRINT           reduce using rule 12 (semiExpression -> function .)
    RETURN          reduce using rule 12 (semiExpression -> function .)
    FUNCTION        reduce using rule 12 (semiExpression -> function .)
    CONST           reduce using rule 12 (semiExpression -> function .)
    LET             reduce using rule 12 (semiExpression -> function .)
    VAR             reduce using rule 12 (semiExpression -> function .)
    OPEN_BRACKET    reduce using rule 12 (semiExpression -> function .)
    NEW             reduce using rule 12 (semiExpression -> function .)
    WHILE           reduce using rule 12 (semiExpression -> function .)
    FOR             reduce using rule 12 (semiExpression -> function .)
    OPEN_BRACE      reduce using rule 12 (semiExpression -> function .)
    IF              reduce using rule 12 (semiExpression -> function .)
    $end            reduce using rule 12 (semiExpression -> function .)
    CLOSE_BRACE     reduce using rule 12 (semiExpression -> function .)


state 13

    (13) semiExpression -> COMMENTS .

    COMMENTS        reduce using rule 13 (semiExpression -> COMMENTS .)
    NAME            reduce using rule 13 (semiExpression -> COMMENTS .)
    PRINT           reduce using rule 13 (semiExpression -> COMMENTS .)
    RETURN          reduce using rule 13 (semiExpression -> COMMENTS .)
    FUNCTION        reduce using rule 13 (semiExpression -> COMMENTS .)
    CONST           reduce using rule 13 (semiExpression -> COMMENTS .)
    LET             reduce using rule 13 (semiExpression -> COMMENTS .)
    VAR             reduce using rule 13 (semiExpression -> COMMENTS .)
    OPEN_BRACKET    reduce using rule 13 (semiExpression -> COMMENTS .)
    NEW             reduce using rule 13 (semiExpression -> COMMENTS .)
    WHILE           reduce using rule 13 (semiExpression -> COMMENTS .)
    FOR             reduce using rule 13 (semiExpression -> COMMENTS .)
    OPEN_BRACE      reduce using rule 13 (semiExpression -> COMMENTS .)
    IF              reduce using rule 13 (semiExpression -> COMMENTS .)
    $end            reduce using rule 13 (semiExpression -> COMMENTS .)
    CLOSE_BRACE     reduce using rule 13 (semiExpression -> COMMENTS .)


state 14

    (14) semiExpression -> asigOp .

    COMMENTS        reduce using rule 14 (semiExpression -> asigOp .)
    NAME            reduce using rule 14 (semiExpression -> asigOp .)
    PRINT           reduce using rule 14 (semiExpression -> asigOp .)
    RETURN          reduce using rule 14 (semiExpression -> asigOp .)
    FUNCTION        reduce using rule 14 (semiExpression -> asigOp .)
    CONST           reduce using rule 14 (semiExpression -> asigOp .)
    LET             reduce using rule 14 (semiExpression -> asigOp .)
    VAR             reduce using rule 14 (semiExpression -> asigOp .)
    OPEN_BRACKET    reduce using rule 14 (semiExpression -> asigOp .)
    NEW             reduce using rule 14 (semiExpression -> asigOp .)
    WHILE           reduce using rule 14 (semiExpression -> asigOp .)
    FOR             reduce using rule 14 (semiExpression -> asigOp .)
    OPEN_BRACE      reduce using rule 14 (semiExpression -> asigOp .)
    IF              reduce using rule 14 (semiExpression -> asigOp .)
    $end            reduce using rule 14 (semiExpression -> asigOp .)
    CLOSE_BRACE     reduce using rule 14 (semiExpression -> asigOp .)


state 15

    (19) variable -> type . NAME IGUAL datatype SEMICOLON

    NAME            shift and go to state 40


state 16

    (20) variable -> NAME . IGUAL datatype SEMICOLON
    (103) methodsSet -> NAME . POINT ADD OPEN_PARENTHESIS element CLOSE_PARENTHESIS SEMICOLON
    (104) methodsSet -> NAME . POINT DELETE OPEN_PARENTHESIS element CLOSE_PARENTHESIS SEMICOLON
    (105) methodsSet -> NAME . POINT CLEAR OPEN_PARENTHESIS CLOSE_PARENTHESIS SEMICOLON
    (94) mapFunctions -> NAME . POINT CLEAR OPEN_PARENTHESIS CLOSE_PARENTHESIS SEMICOLON
    (95) mapFunctions -> NAME . POINT GET OPEN_PARENTHESIS clave CLOSE_PARENTHESIS SEMICOLON
    (96) mapFunctions -> NAME . POINT HAS OPEN_PARENTHESIS clave CLOSE_PARENTHESIS SEMICOLON
    (97) arrayFn -> NAME . POINT POP OPEN_PARENTHESIS CLOSE_PARENTHESIS SEMICOLON
    (98) arrayFn -> NAME . POINT PUSH OPEN_PARENTHESIS element CLOSE_PARENTHESIS SEMICOLON
    (99) arrayFn -> NAME . POINT UNSHIFT OPEN_PARENTHESIS element CLOSE_PARENTHESIS SEMICOLON
    (118) declaration -> NAME . IGUAL element SEMICOLON
    (67) asigOp -> NAME . operadorAsig number SEMICOLON
    (61) operadorAsig -> . MASIGUAL
    (62) operadorAsig -> . MENOSIGUAL
    (63) operadorAsig -> . PORIGUAL
    (64) operadorAsig -> . DIVIGUAL
    (65) operadorAsig -> . MODIGUAL
    (66) operadorAsig -> . POTIGUAL

    IGUAL           shift and go to state 41
    POINT           shift and go to state 42
    MASIGUAL        shift and go to state 44
    MENOSIGUAL      shift and go to state 45
    PORIGUAL        shift and go to state 46
    DIVIGUAL        shift and go to state 47
    MODIGUAL        shift and go to state 48
    POTIGUAL        shift and go to state 49

    operadorAsig                   shift and go to state 43

state 17

    (24) dataStruct -> array .

    COMMENTS        reduce using rule 24 (dataStruct -> array .)
    NAME            reduce using rule 24 (dataStruct -> array .)
    PRINT           reduce using rule 24 (dataStruct -> array .)
    RETURN          reduce using rule 24 (dataStruct -> array .)
    FUNCTION        reduce using rule 24 (dataStruct -> array .)
    CONST           reduce using rule 24 (dataStruct -> array .)
    LET             reduce using rule 24 (dataStruct -> array .)
    VAR             reduce using rule 24 (dataStruct -> array .)
    OPEN_BRACKET    reduce using rule 24 (dataStruct -> array .)
    NEW             reduce using rule 24 (dataStruct -> array .)
    WHILE           reduce using rule 24 (dataStruct -> array .)
    FOR             reduce using rule 24 (dataStruct -> array .)
    OPEN_BRACE      reduce using rule 24 (dataStruct -> array .)
    IF              reduce using rule 24 (dataStruct -> array .)
    $end            reduce using rule 24 (dataStruct -> array .)
    CLOSE_BRACE     reduce using rule 24 (dataStruct -> array .)
    COLON           reduce using rule 24 (dataStruct -> array .)
    COMMA           reduce using rule 24 (dataStruct -> array .)
    CLOSE_BRACKET   reduce using rule 24 (dataStruct -> array .)
    SEMICOLON       reduce using rule 24 (dataStruct -> array .)
    CLOSE_PARENTHESIS reduce using rule 24 (dataStruct -> array .)


state 18

    (25) dataStruct -> set .

    COMMENTS        reduce using rule 25 (dataStruct -> set .)
    NAME            reduce using rule 25 (dataStruct -> set .)
    PRINT           reduce using rule 25 (dataStruct -> set .)
    RETURN          reduce using rule 25 (dataStruct -> set .)
    FUNCTION        reduce using rule 25 (dataStruct -> set .)
    CONST           reduce using rule 25 (dataStruct -> set .)
    LET             reduce using rule 25 (dataStruct -> set .)
    VAR             reduce using rule 25 (dataStruct -> set .)
    OPEN_BRACKET    reduce using rule 25 (dataStruct -> set .)
    NEW             reduce using rule 25 (dataStruct -> set .)
    WHILE           reduce using rule 25 (dataStruct -> set .)
    FOR             reduce using rule 25 (dataStruct -> set .)
    OPEN_BRACE      reduce using rule 25 (dataStruct -> set .)
    IF              reduce using rule 25 (dataStruct -> set .)
    $end            reduce using rule 25 (dataStruct -> set .)
    CLOSE_BRACE     reduce using rule 25 (dataStruct -> set .)
    COLON           reduce using rule 25 (dataStruct -> set .)
    COMMA           reduce using rule 25 (dataStruct -> set .)
    CLOSE_BRACKET   reduce using rule 25 (dataStruct -> set .)
    SEMICOLON       reduce using rule 25 (dataStruct -> set .)
    CLOSE_PARENTHESIS reduce using rule 25 (dataStruct -> set .)


state 19

    (26) dataStruct -> map .

    COMMENTS        reduce using rule 26 (dataStruct -> map .)
    NAME            reduce using rule 26 (dataStruct -> map .)
    PRINT           reduce using rule 26 (dataStruct -> map .)
    RETURN          reduce using rule 26 (dataStruct -> map .)
    FUNCTION        reduce using rule 26 (dataStruct -> map .)
    CONST           reduce using rule 26 (dataStruct -> map .)
    LET             reduce using rule 26 (dataStruct -> map .)
    VAR             reduce using rule 26 (dataStruct -> map .)
    OPEN_BRACKET    reduce using rule 26 (dataStruct -> map .)
    NEW             reduce using rule 26 (dataStruct -> map .)
    WHILE           reduce using rule 26 (dataStruct -> map .)
    FOR             reduce using rule 26 (dataStruct -> map .)
    OPEN_BRACE      reduce using rule 26 (dataStruct -> map .)
    IF              reduce using rule 26 (dataStruct -> map .)
    $end            reduce using rule 26 (dataStruct -> map .)
    CLOSE_BRACE     reduce using rule 26 (dataStruct -> map .)
    COLON           reduce using rule 26 (dataStruct -> map .)
    COMMA           reduce using rule 26 (dataStruct -> map .)
    CLOSE_BRACKET   reduce using rule 26 (dataStruct -> map .)
    SEMICOLON       reduce using rule 26 (dataStruct -> map .)
    CLOSE_PARENTHESIS reduce using rule 26 (dataStruct -> map .)


state 20

    (21) controlStruct -> while .

    COMMENTS        reduce using rule 21 (controlStruct -> while .)
    NAME            reduce using rule 21 (controlStruct -> while .)
    PRINT           reduce using rule 21 (controlStruct -> while .)
    RETURN          reduce using rule 21 (controlStruct -> while .)
    FUNCTION        reduce using rule 21 (controlStruct -> while .)
    CONST           reduce using rule 21 (controlStruct -> while .)
    LET             reduce using rule 21 (controlStruct -> while .)
    VAR             reduce using rule 21 (controlStruct -> while .)
    OPEN_BRACKET    reduce using rule 21 (controlStruct -> while .)
    NEW             reduce using rule 21 (controlStruct -> while .)
    WHILE           reduce using rule 21 (controlStruct -> while .)
    FOR             reduce using rule 21 (controlStruct -> while .)
    OPEN_BRACE      reduce using rule 21 (controlStruct -> while .)
    IF              reduce using rule 21 (controlStruct -> while .)
    $end            reduce using rule 21 (controlStruct -> while .)
    CLOSE_BRACE     reduce using rule 21 (controlStruct -> while .)


state 21

    (22) controlStruct -> for .

    COMMENTS        reduce using rule 22 (controlStruct -> for .)
    NAME            reduce using rule 22 (controlStruct -> for .)
    PRINT           reduce using rule 22 (controlStruct -> for .)
    RETURN          reduce using rule 22 (controlStruct -> for .)
    FUNCTION        reduce using rule 22 (controlStruct -> for .)
    CONST           reduce using rule 22 (controlStruct -> for .)
    LET             reduce using rule 22 (controlStruct -> for .)
    VAR             reduce using rule 22 (controlStruct -> for .)
    OPEN_BRACKET    reduce using rule 22 (controlStruct -> for .)
    NEW             reduce using rule 22 (controlStruct -> for .)
    WHILE           reduce using rule 22 (controlStruct -> for .)
    FOR             reduce using rule 22 (controlStruct -> for .)
    OPEN_BRACE      reduce using rule 22 (controlStruct -> for .)
    IF              reduce using rule 22 (controlStruct -> for .)
    $end            reduce using rule 22 (controlStruct -> for .)
    CLOSE_BRACE     reduce using rule 22 (controlStruct -> for .)


state 22

    (23) controlStruct -> if .

    COMMENTS        reduce using rule 23 (controlStruct -> if .)
    NAME            reduce using rule 23 (controlStruct -> if .)
    PRINT           reduce using rule 23 (controlStruct -> if .)
    RETURN          reduce using rule 23 (controlStruct -> if .)
    FUNCTION        reduce using rule 23 (controlStruct -> if .)
    CONST           reduce using rule 23 (controlStruct -> if .)
    LET             reduce using rule 23 (controlStruct -> if .)
    VAR             reduce using rule 23 (controlStruct -> if .)
    OPEN_BRACKET    reduce using rule 23 (controlStruct -> if .)
    NEW             reduce using rule 23 (controlStruct -> if .)
    WHILE           reduce using rule 23 (controlStruct -> if .)
    FOR             reduce using rule 23 (controlStruct -> if .)
    OPEN_BRACE      reduce using rule 23 (controlStruct -> if .)
    IF              reduce using rule 23 (controlStruct -> if .)
    $end            reduce using rule 23 (controlStruct -> if .)
    CLOSE_BRACE     reduce using rule 23 (controlStruct -> if .)


state 23

    (130) print -> PRINT . OPEN_PARENTHESIS CLOSE_PARENTHESIS SEMICOLON

    OPEN_PARENTHESIS shift and go to state 50


state 24

    (129) return -> RETURN . element SEMICOLON
    (115) element -> . STRING
    (116) element -> . number
    (117) element -> . NAME
    (15) number -> . INTEGER
    (16) number -> . FLOAT
    (17) number -> . OPEN_PARENTHESIS RESTA INTEGER CLOSE_PARENTHESIS
    (18) number -> . OPEN_PARENTHESIS RESTA FLOAT CLOSE_PARENTHESIS

    STRING          shift and go to state 52
    NAME            shift and go to state 54
    INTEGER         shift and go to state 55
    FLOAT           shift and go to state 56
    OPEN_PARENTHESIS shift and go to state 57

    element                        shift and go to state 51
    number                         shift and go to state 53

state 25

    (125) function -> FUNCTION . NAME OPEN_PARENTHESIS CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE
    (126) function -> FUNCTION . NAME OPEN_PARENTHESIS parameter CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE

    NAME            shift and go to state 58


state 26

    (85) escribirMap -> OPEN_BRACE . claveValor CLOSE_BRACE
    (89) generarMap -> OPEN_BRACE . tuplas CLOSE_BRACE
    (86) claveValor -> . clave COLON datatype
    (87) claveValor -> . clave COLON datatype COMMA claveValor
    (90) tuplas -> . tupla
    (91) tuplas -> . tupla COMMA tuplas
    (88) clave -> . datatype
    (92) tupla -> . OPEN_BRACKET datatype CLOSE_BRACKET SEMICOLON
    (93) tupla -> . OPEN_BRACKET datatype COMMA datatype CLOSE_BRACKET SEMICOLON
    (52) datatype -> . number
    (53) datatype -> . STRING
    (54) datatype -> . CHAR
    (55) datatype -> . operations
    (56) datatype -> . dataStruct
    (15) number -> . INTEGER
    (16) number -> . FLOAT
    (17) number -> . OPEN_PARENTHESIS RESTA INTEGER CLOSE_PARENTHESIS
    (18) number -> . OPEN_PARENTHESIS RESTA FLOAT CLOSE_PARENTHESIS
    (41) operations -> . number operand number
    (42) operations -> . NAME
    (43) operations -> . number
    (44) operations -> . number operand NAME operations
    (45) operations -> . NAME operand number operations
    (46) operations -> . number operand NAME
    (47) operations -> . NAME operand number
    (48) operations -> . NAME operand NAME operations
    (49) operations -> . number operand number operand operations
    (50) operations -> . NAME SUMA SUMA
    (51) operations -> . NAME RESTA RESTA
    (24) dataStruct -> . array
    (25) dataStruct -> . set
    (26) dataStruct -> . map
    (79) array -> . OPEN_BRACKET items CLOSE_BRACKET SEMICOLON
    (80) array -> . NEW ARRAY OPEN_PARENTHESIS items CLOSE_PARENTHESIS SEMICOLON
    (100) set -> . NEW SET OPEN_PARENTHESIS CLOSE_PARENTHESIS SEMICOLON
    (101) set -> . NEW SET OPEN_PARENTHESIS OPEN_BRACKET items CLOSE_BRACKET CLOSE_PARENTHESIS SEMICOLON
    (102) set -> . NEW SET OPEN_PARENTHESIS element CLOSE_PARENTHESIS SEMICOLON
    (81) map -> . iniciarMap
    (82) map -> . escribirMap
    (83) map -> . generarMap
    (84) iniciarMap -> . NEW MAP OPEN_PARENTHESIS CLOSE_PARENTHESIS SEMICOLON
    (85) escribirMap -> . OPEN_BRACE claveValor CLOSE_BRACE
    (89) generarMap -> . OPEN_BRACE tuplas CLOSE_BRACE

    OPEN_BRACKET    shift and go to state 64
    STRING          shift and go to state 66
    CHAR            shift and go to state 67
    INTEGER         shift and go to state 55
    FLOAT           shift and go to state 56
    OPEN_PARENTHESIS shift and go to state 57
    NAME            shift and go to state 70
    NEW             shift and go to state 31
    OPEN_BRACE      shift and go to state 26

    claveValor                     shift and go to state 59
    tuplas                         shift and go to state 60
    clave                          shift and go to state 61
    datatype                       shift and go to state 62
    tupla                          shift and go to state 63
    number                         shift and go to state 65
    operations                     shift and go to state 68
    dataStruct                     shift and go to state 69
    array                          shift and go to state 17
    set                            shift and go to state 18
    map                            shift and go to state 19
    iniciarMap                     shift and go to state 32
    escribirMap                    shift and go to state 33
    generarMap                     shift and go to state 34

state 27

    (70) type -> CONST .

    NAME            reduce using rule 70 (type -> CONST .)


state 28

    (71) type -> LET .

    NAME            reduce using rule 71 (type -> LET .)


state 29

    (72) type -> VAR .

    NAME            reduce using rule 72 (type -> VAR .)


state 30

    (79) array -> OPEN_BRACKET . items CLOSE_BRACKET SEMICOLON
    (106) items -> . item
    (107) items -> . item COMMA items
    (108) item -> . number
    (109) item -> . STRING
    (110) item -> . expBoolean
    (111) item -> . NAME
    (112) item -> . datatype
    (15) number -> . INTEGER
    (16) number -> . FLOAT
    (17) number -> . OPEN_PARENTHESIS RESTA INTEGER CLOSE_PARENTHESIS
    (18) number -> . OPEN_PARENTHESIS RESTA FLOAT CLOSE_PARENTHESIS
    (121) expBoolean -> . controlArg
    (122) expBoolean -> . bool
    (123) expBoolean -> . NOT expBoolean
    (124) expBoolean -> . expBoolean logicalOperator expBoolean
    (52) datatype -> . number
    (53) datatype -> . STRING
    (54) datatype -> . CHAR
    (55) datatype -> . operations
    (56) datatype -> . dataStruct
    (37) controlArg -> . element clause element
    (68) bool -> . TRUE
    (69) bool -> . FALSE
    (41) operations -> . number operand number
    (42) operations -> . NAME
    (43) operations -> . number
    (44) operations -> . number operand NAME operations
    (45) operations -> . NAME operand number operations
    (46) operations -> . number operand NAME
    (47) operations -> . NAME operand number
    (48) operations -> . NAME operand NAME operations
    (49) operations -> . number operand number operand operations
    (50) operations -> . NAME SUMA SUMA
    (51) operations -> . NAME RESTA RESTA
    (24) dataStruct -> . array
    (25) dataStruct -> . set
    (26) dataStruct -> . map
    (115) element -> . STRING
    (116) element -> . number
    (117) element -> . NAME
    (79) array -> . OPEN_BRACKET items CLOSE_BRACKET SEMICOLON
    (80) array -> . NEW ARRAY OPEN_PARENTHESIS items CLOSE_PARENTHESIS SEMICOLON
    (100) set -> . NEW SET OPEN_PARENTHESIS CLOSE_PARENTHESIS SEMICOLON
    (101) set -> . NEW SET OPEN_PARENTHESIS OPEN_BRACKET items CLOSE_BRACKET CLOSE_PARENTHESIS SEMICOLON
    (102) set -> . NEW SET OPEN_PARENTHESIS element CLOSE_PARENTHESIS SEMICOLON
    (81) map -> . iniciarMap
    (82) map -> . escribirMap
    (83) map -> . generarMap
    (84) iniciarMap -> . NEW MAP OPEN_PARENTHESIS CLOSE_PARENTHESIS SEMICOLON
    (85) escribirMap -> . OPEN_BRACE claveValor CLOSE_BRACE
    (89) generarMap -> . OPEN_BRACE tuplas CLOSE_BRACE

    STRING          shift and go to state 74
    NAME            shift and go to state 76
    INTEGER         shift and go to state 55
    FLOAT           shift and go to state 56
    OPEN_PARENTHESIS shift and go to state 57
    NOT             shift and go to state 80
    CHAR            shift and go to state 67
    TRUE            shift and go to state 82
    FALSE           shift and go to state 83
    OPEN_BRACKET    shift and go to state 30
    NEW             shift and go to state 31
    OPEN_BRACE      shift and go to state 26

    items                          shift and go to state 71
    item                           shift and go to state 72
    number                         shift and go to state 73
    expBoolean                     shift and go to state 75
    datatype                       shift and go to state 77
    controlArg                     shift and go to state 78
    bool                           shift and go to state 79
    operations                     shift and go to state 68
    dataStruct                     shift and go to state 69
    element                        shift and go to state 81
    array                          shift and go to state 17
    set                            shift and go to state 18
    map                            shift and go to state 19
    iniciarMap                     shift and go to state 32
    escribirMap                    shift and go to state 33
    generarMap                     shift and go to state 34

state 31

    (80) array -> NEW . ARRAY OPEN_PARENTHESIS items CLOSE_PARENTHESIS SEMICOLON
    (100) set -> NEW . SET OPEN_PARENTHESIS CLOSE_PARENTHESIS SEMICOLON
    (101) set -> NEW . SET OPEN_PARENTHESIS OPEN_BRACKET items CLOSE_BRACKET CLOSE_PARENTHESIS SEMICOLON
    (102) set -> NEW . SET OPEN_PARENTHESIS element CLOSE_PARENTHESIS SEMICOLON
    (84) iniciarMap -> NEW . MAP OPEN_PARENTHESIS CLOSE_PARENTHESIS SEMICOLON

    ARRAY           shift and go to state 84
    SET             shift and go to state 85
    MAP             shift and go to state 86


state 32

    (81) map -> iniciarMap .

    COMMENTS        reduce using rule 81 (map -> iniciarMap .)
    NAME            reduce using rule 81 (map -> iniciarMap .)
    PRINT           reduce using rule 81 (map -> iniciarMap .)
    RETURN          reduce using rule 81 (map -> iniciarMap .)
    FUNCTION        reduce using rule 81 (map -> iniciarMap .)
    CONST           reduce using rule 81 (map -> iniciarMap .)
    LET             reduce using rule 81 (map -> iniciarMap .)
    VAR             reduce using rule 81 (map -> iniciarMap .)
    OPEN_BRACKET    reduce using rule 81 (map -> iniciarMap .)
    NEW             reduce using rule 81 (map -> iniciarMap .)
    WHILE           reduce using rule 81 (map -> iniciarMap .)
    FOR             reduce using rule 81 (map -> iniciarMap .)
    OPEN_BRACE      reduce using rule 81 (map -> iniciarMap .)
    IF              reduce using rule 81 (map -> iniciarMap .)
    $end            reduce using rule 81 (map -> iniciarMap .)
    CLOSE_BRACE     reduce using rule 81 (map -> iniciarMap .)
    COLON           reduce using rule 81 (map -> iniciarMap .)
    COMMA           reduce using rule 81 (map -> iniciarMap .)
    CLOSE_BRACKET   reduce using rule 81 (map -> iniciarMap .)
    SEMICOLON       reduce using rule 81 (map -> iniciarMap .)
    CLOSE_PARENTHESIS reduce using rule 81 (map -> iniciarMap .)


state 33

    (82) map -> escribirMap .

    COMMENTS        reduce using rule 82 (map -> escribirMap .)
    NAME            reduce using rule 82 (map -> escribirMap .)
    PRINT           reduce using rule 82 (map -> escribirMap .)
    RETURN          reduce using rule 82 (map -> escribirMap .)
    FUNCTION        reduce using rule 82 (map -> escribirMap .)
    CONST           reduce using rule 82 (map -> escribirMap .)
    LET             reduce using rule 82 (map -> escribirMap .)
    VAR             reduce using rule 82 (map -> escribirMap .)
    OPEN_BRACKET    reduce using rule 82 (map -> escribirMap .)
    NEW             reduce using rule 82 (map -> escribirMap .)
    WHILE           reduce using rule 82 (map -> escribirMap .)
    FOR             reduce using rule 82 (map -> escribirMap .)
    OPEN_BRACE      reduce using rule 82 (map -> escribirMap .)
    IF              reduce using rule 82 (map -> escribirMap .)
    $end            reduce using rule 82 (map -> escribirMap .)
    CLOSE_BRACE     reduce using rule 82 (map -> escribirMap .)
    COLON           reduce using rule 82 (map -> escribirMap .)
    COMMA           reduce using rule 82 (map -> escribirMap .)
    CLOSE_BRACKET   reduce using rule 82 (map -> escribirMap .)
    SEMICOLON       reduce using rule 82 (map -> escribirMap .)
    CLOSE_PARENTHESIS reduce using rule 82 (map -> escribirMap .)


state 34

    (83) map -> generarMap .

    COMMENTS        reduce using rule 83 (map -> generarMap .)
    NAME            reduce using rule 83 (map -> generarMap .)
    PRINT           reduce using rule 83 (map -> generarMap .)
    RETURN          reduce using rule 83 (map -> generarMap .)
    FUNCTION        reduce using rule 83 (map -> generarMap .)
    CONST           reduce using rule 83 (map -> generarMap .)
    LET             reduce using rule 83 (map -> generarMap .)
    VAR             reduce using rule 83 (map -> generarMap .)
    OPEN_BRACKET    reduce using rule 83 (map -> generarMap .)
    NEW             reduce using rule 83 (map -> generarMap .)
    WHILE           reduce using rule 83 (map -> generarMap .)
    FOR             reduce using rule 83 (map -> generarMap .)
    OPEN_BRACE      reduce using rule 83 (map -> generarMap .)
    IF              reduce using rule 83 (map -> generarMap .)
    $end            reduce using rule 83 (map -> generarMap .)
    CLOSE_BRACE     reduce using rule 83 (map -> generarMap .)
    COLON           reduce using rule 83 (map -> generarMap .)
    COMMA           reduce using rule 83 (map -> generarMap .)
    CLOSE_BRACKET   reduce using rule 83 (map -> generarMap .)
    SEMICOLON       reduce using rule 83 (map -> generarMap .)
    CLOSE_PARENTHESIS reduce using rule 83 (map -> generarMap .)


state 35

    (27) while -> WHILE . OPEN_PARENTHESIS controlArg CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE
    (28) while -> WHILE . OPEN_PARENTHESIS bool CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE

    OPEN_PARENTHESIS shift and go to state 87


state 36

    (38) for -> FOR . OPEN_PARENTHESIS inicialization SEMICOLON expBoolean SEMICOLON operations CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE

    OPEN_PARENTHESIS shift and go to state 88


state 37

    (29) if -> soloIf .
    (30) if -> soloIf . elseIf
    (31) if -> soloIf . elseIf else
    (32) if -> soloIf . else
    (34) elseIf -> . ELSEIF OPEN_PARENTHESIS controlArg CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE
    (35) elseIf -> . ELSEIF OPEN_PARENTHESIS controlArg CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE soloIf
    (36) else -> . ELSE OPEN_BRACE expression CLOSE_BRACE

    COMMENTS        reduce using rule 29 (if -> soloIf .)
    NAME            reduce using rule 29 (if -> soloIf .)
    PRINT           reduce using rule 29 (if -> soloIf .)
    RETURN          reduce using rule 29 (if -> soloIf .)
    FUNCTION        reduce using rule 29 (if -> soloIf .)
    CONST           reduce using rule 29 (if -> soloIf .)
    LET             reduce using rule 29 (if -> soloIf .)
    VAR             reduce using rule 29 (if -> soloIf .)
    OPEN_BRACKET    reduce using rule 29 (if -> soloIf .)
    NEW             reduce using rule 29 (if -> soloIf .)
    WHILE           reduce using rule 29 (if -> soloIf .)
    FOR             reduce using rule 29 (if -> soloIf .)
    OPEN_BRACE      reduce using rule 29 (if -> soloIf .)
    IF              reduce using rule 29 (if -> soloIf .)
    $end            reduce using rule 29 (if -> soloIf .)
    CLOSE_BRACE     reduce using rule 29 (if -> soloIf .)
    ELSEIF          shift and go to state 91
    ELSE            shift and go to state 92

    elseIf                         shift and go to state 89
    else                           shift and go to state 90

state 38

    (33) soloIf -> IF . OPEN_PARENTHESIS controlArg CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE

    OPEN_PARENTHESIS shift and go to state 93


state 39

    (2) expression -> semiExpression expression .

    $end            reduce using rule 2 (expression -> semiExpression expression .)
    CLOSE_BRACE     reduce using rule 2 (expression -> semiExpression expression .)


state 40

    (19) variable -> type NAME . IGUAL datatype SEMICOLON

    IGUAL           shift and go to state 94


state 41

    (20) variable -> NAME IGUAL . datatype SEMICOLON
    (118) declaration -> NAME IGUAL . element SEMICOLON
    (52) datatype -> . number
    (53) datatype -> . STRING
    (54) datatype -> . CHAR
    (55) datatype -> . operations
    (56) datatype -> . dataStruct
    (115) element -> . STRING
    (116) element -> . number
    (117) element -> . NAME
    (15) number -> . INTEGER
    (16) number -> . FLOAT
    (17) number -> . OPEN_PARENTHESIS RESTA INTEGER CLOSE_PARENTHESIS
    (18) number -> . OPEN_PARENTHESIS RESTA FLOAT CLOSE_PARENTHESIS
    (41) operations -> . number operand number
    (42) operations -> . NAME
    (43) operations -> . number
    (44) operations -> . number operand NAME operations
    (45) operations -> . NAME operand number operations
    (46) operations -> . number operand NAME
    (47) operations -> . NAME operand number
    (48) operations -> . NAME operand NAME operations
    (49) operations -> . number operand number operand operations
    (50) operations -> . NAME SUMA SUMA
    (51) operations -> . NAME RESTA RESTA
    (24) dataStruct -> . array
    (25) dataStruct -> . set
    (26) dataStruct -> . map
    (79) array -> . OPEN_BRACKET items CLOSE_BRACKET SEMICOLON
    (80) array -> . NEW ARRAY OPEN_PARENTHESIS items CLOSE_PARENTHESIS SEMICOLON
    (100) set -> . NEW SET OPEN_PARENTHESIS CLOSE_PARENTHESIS SEMICOLON
    (101) set -> . NEW SET OPEN_PARENTHESIS OPEN_BRACKET items CLOSE_BRACKET CLOSE_PARENTHESIS SEMICOLON
    (102) set -> . NEW SET OPEN_PARENTHESIS element CLOSE_PARENTHESIS SEMICOLON
    (81) map -> . iniciarMap
    (82) map -> . escribirMap
    (83) map -> . generarMap
    (84) iniciarMap -> . NEW MAP OPEN_PARENTHESIS CLOSE_PARENTHESIS SEMICOLON
    (85) escribirMap -> . OPEN_BRACE claveValor CLOSE_BRACE
    (89) generarMap -> . OPEN_BRACE tuplas CLOSE_BRACE

    STRING          shift and go to state 99
    CHAR            shift and go to state 67
    NAME            shift and go to state 95
    INTEGER         shift and go to state 55
    FLOAT           shift and go to state 56
    OPEN_PARENTHESIS shift and go to state 57
    OPEN_BRACKET    shift and go to state 30
    NEW             shift and go to state 31
    OPEN_BRACE      shift and go to state 26

    datatype                       shift and go to state 96
    element                        shift and go to state 97
    number                         shift and go to state 98
    operations                     shift and go to state 68
    dataStruct                     shift and go to state 69
    array                          shift and go to state 17
    set                            shift and go to state 18
    map                            shift and go to state 19
    iniciarMap                     shift and go to state 32
    escribirMap                    shift and go to state 33
    generarMap                     shift and go to state 34

state 42

    (103) methodsSet -> NAME POINT . ADD OPEN_PARENTHESIS element CLOSE_PARENTHESIS SEMICOLON
    (104) methodsSet -> NAME POINT . DELETE OPEN_PARENTHESIS element CLOSE_PARENTHESIS SEMICOLON
    (105) methodsSet -> NAME POINT . CLEAR OPEN_PARENTHESIS CLOSE_PARENTHESIS SEMICOLON
    (94) mapFunctions -> NAME POINT . CLEAR OPEN_PARENTHESIS CLOSE_PARENTHESIS SEMICOLON
    (95) mapFunctions -> NAME POINT . GET OPEN_PARENTHESIS clave CLOSE_PARENTHESIS SEMICOLON
    (96) mapFunctions -> NAME POINT . HAS OPEN_PARENTHESIS clave CLOSE_PARENTHESIS SEMICOLON
    (97) arrayFn -> NAME POINT . POP OPEN_PARENTHESIS CLOSE_PARENTHESIS SEMICOLON
    (98) arrayFn -> NAME POINT . PUSH OPEN_PARENTHESIS element CLOSE_PARENTHESIS SEMICOLON
    (99) arrayFn -> NAME POINT . UNSHIFT OPEN_PARENTHESIS element CLOSE_PARENTHESIS SEMICOLON

    ADD             shift and go to state 100
    DELETE          shift and go to state 101
    CLEAR           shift and go to state 102
    GET             shift and go to state 103
    HAS             shift and go to state 104
    POP             shift and go to state 105
    PUSH            shift and go to state 106
    UNSHIFT         shift and go to state 107


state 43

    (67) asigOp -> NAME operadorAsig . number SEMICOLON
    (15) number -> . INTEGER
    (16) number -> . FLOAT
    (17) number -> . OPEN_PARENTHESIS RESTA INTEGER CLOSE_PARENTHESIS
    (18) number -> . OPEN_PARENTHESIS RESTA FLOAT CLOSE_PARENTHESIS

    INTEGER         shift and go to state 55
    FLOAT           shift and go to state 56
    OPEN_PARENTHESIS shift and go to state 57

    number                         shift and go to state 108

state 44

    (61) operadorAsig -> MASIGUAL .

    INTEGER         reduce using rule 61 (operadorAsig -> MASIGUAL .)
    FLOAT           reduce using rule 61 (operadorAsig -> MASIGUAL .)
    OPEN_PARENTHESIS reduce using rule 61 (operadorAsig -> MASIGUAL .)


state 45

    (62) operadorAsig -> MENOSIGUAL .

    INTEGER         reduce using rule 62 (operadorAsig -> MENOSIGUAL .)
    FLOAT           reduce using rule 62 (operadorAsig -> MENOSIGUAL .)
    OPEN_PARENTHESIS reduce using rule 62 (operadorAsig -> MENOSIGUAL .)


state 46

    (63) operadorAsig -> PORIGUAL .

    INTEGER         reduce using rule 63 (operadorAsig -> PORIGUAL .)
    FLOAT           reduce using rule 63 (operadorAsig -> PORIGUAL .)
    OPEN_PARENTHESIS reduce using rule 63 (operadorAsig -> PORIGUAL .)


state 47

    (64) operadorAsig -> DIVIGUAL .

    INTEGER         reduce using rule 64 (operadorAsig -> DIVIGUAL .)
    FLOAT           reduce using rule 64 (operadorAsig -> DIVIGUAL .)
    OPEN_PARENTHESIS reduce using rule 64 (operadorAsig -> DIVIGUAL .)


state 48

    (65) operadorAsig -> MODIGUAL .

    INTEGER         reduce using rule 65 (operadorAsig -> MODIGUAL .)
    FLOAT           reduce using rule 65 (operadorAsig -> MODIGUAL .)
    OPEN_PARENTHESIS reduce using rule 65 (operadorAsig -> MODIGUAL .)


state 49

    (66) operadorAsig -> POTIGUAL .

    INTEGER         reduce using rule 66 (operadorAsig -> POTIGUAL .)
    FLOAT           reduce using rule 66 (operadorAsig -> POTIGUAL .)
    OPEN_PARENTHESIS reduce using rule 66 (operadorAsig -> POTIGUAL .)


state 50

    (130) print -> PRINT OPEN_PARENTHESIS . CLOSE_PARENTHESIS SEMICOLON

    CLOSE_PARENTHESIS shift and go to state 109


state 51

    (129) return -> RETURN element . SEMICOLON

    SEMICOLON       shift and go to state 110


state 52

    (115) element -> STRING .

    SEMICOLON       reduce using rule 115 (element -> STRING .)
    IGUALIGUAL      reduce using rule 115 (element -> STRING .)
    DIFERENTE       reduce using rule 115 (element -> STRING .)
    MAYORQUE        reduce using rule 115 (element -> STRING .)
    MAYORIGUALQUE   reduce using rule 115 (element -> STRING .)
    MENORQUE        reduce using rule 115 (element -> STRING .)
    MENORIGUALQUE   reduce using rule 115 (element -> STRING .)
    STRING          reduce using rule 115 (element -> STRING .)
    NAME            reduce using rule 115 (element -> STRING .)
    INTEGER         reduce using rule 115 (element -> STRING .)
    FLOAT           reduce using rule 115 (element -> STRING .)
    OPEN_PARENTHESIS reduce using rule 115 (element -> STRING .)
    CLOSE_PARENTHESIS reduce using rule 115 (element -> STRING .)
    AND             reduce using rule 115 (element -> STRING .)
    OR              reduce using rule 115 (element -> STRING .)
    COMMA           reduce using rule 115 (element -> STRING .)
    CLOSE_BRACKET   reduce using rule 115 (element -> STRING .)


state 53

    (116) element -> number .

    SEMICOLON       reduce using rule 116 (element -> number .)
    IGUALIGUAL      reduce using rule 116 (element -> number .)
    DIFERENTE       reduce using rule 116 (element -> number .)
    MAYORQUE        reduce using rule 116 (element -> number .)
    MAYORIGUALQUE   reduce using rule 116 (element -> number .)
    MENORQUE        reduce using rule 116 (element -> number .)
    MENORIGUALQUE   reduce using rule 116 (element -> number .)
    STRING          reduce using rule 116 (element -> number .)
    NAME            reduce using rule 116 (element -> number .)
    INTEGER         reduce using rule 116 (element -> number .)
    FLOAT           reduce using rule 116 (element -> number .)
    OPEN_PARENTHESIS reduce using rule 116 (element -> number .)
    CLOSE_PARENTHESIS reduce using rule 116 (element -> number .)
    AND             reduce using rule 116 (element -> number .)
    OR              reduce using rule 116 (element -> number .)
    COMMA           reduce using rule 116 (element -> number .)
    CLOSE_BRACKET   reduce using rule 116 (element -> number .)


state 54

    (117) element -> NAME .

    SEMICOLON       reduce using rule 117 (element -> NAME .)
    IGUALIGUAL      reduce using rule 117 (element -> NAME .)
    DIFERENTE       reduce using rule 117 (element -> NAME .)
    MAYORQUE        reduce using rule 117 (element -> NAME .)
    MAYORIGUALQUE   reduce using rule 117 (element -> NAME .)
    MENORQUE        reduce using rule 117 (element -> NAME .)
    MENORIGUALQUE   reduce using rule 117 (element -> NAME .)
    STRING          reduce using rule 117 (element -> NAME .)
    NAME            reduce using rule 117 (element -> NAME .)
    INTEGER         reduce using rule 117 (element -> NAME .)
    FLOAT           reduce using rule 117 (element -> NAME .)
    OPEN_PARENTHESIS reduce using rule 117 (element -> NAME .)
    CLOSE_PARENTHESIS reduce using rule 117 (element -> NAME .)
    AND             reduce using rule 117 (element -> NAME .)
    OR              reduce using rule 117 (element -> NAME .)
    COMMA           reduce using rule 117 (element -> NAME .)
    CLOSE_BRACKET   reduce using rule 117 (element -> NAME .)


state 55

    (15) number -> INTEGER .

    SEMICOLON       reduce using rule 15 (number -> INTEGER .)
    SUMA            reduce using rule 15 (number -> INTEGER .)
    RESTA           reduce using rule 15 (number -> INTEGER .)
    MULTIPLICACION  reduce using rule 15 (number -> INTEGER .)
    DIVISION        reduce using rule 15 (number -> INTEGER .)
    COLON           reduce using rule 15 (number -> INTEGER .)
    COMMA           reduce using rule 15 (number -> INTEGER .)
    CLOSE_BRACKET   reduce using rule 15 (number -> INTEGER .)
    IGUALIGUAL      reduce using rule 15 (number -> INTEGER .)
    DIFERENTE       reduce using rule 15 (number -> INTEGER .)
    MAYORQUE        reduce using rule 15 (number -> INTEGER .)
    MAYORIGUALQUE   reduce using rule 15 (number -> INTEGER .)
    MENORQUE        reduce using rule 15 (number -> INTEGER .)
    MENORIGUALQUE   reduce using rule 15 (number -> INTEGER .)
    STRING          reduce using rule 15 (number -> INTEGER .)
    NAME            reduce using rule 15 (number -> INTEGER .)
    INTEGER         reduce using rule 15 (number -> INTEGER .)
    FLOAT           reduce using rule 15 (number -> INTEGER .)
    OPEN_PARENTHESIS reduce using rule 15 (number -> INTEGER .)
    CLOSE_PARENTHESIS reduce using rule 15 (number -> INTEGER .)
    CLOSE_BRACE     reduce using rule 15 (number -> INTEGER .)
    AND             reduce using rule 15 (number -> INTEGER .)
    OR              reduce using rule 15 (number -> INTEGER .)


state 56

    (16) number -> FLOAT .

    SEMICOLON       reduce using rule 16 (number -> FLOAT .)
    SUMA            reduce using rule 16 (number -> FLOAT .)
    RESTA           reduce using rule 16 (number -> FLOAT .)
    MULTIPLICACION  reduce using rule 16 (number -> FLOAT .)
    DIVISION        reduce using rule 16 (number -> FLOAT .)
    COLON           reduce using rule 16 (number -> FLOAT .)
    COMMA           reduce using rule 16 (number -> FLOAT .)
    CLOSE_BRACKET   reduce using rule 16 (number -> FLOAT .)
    IGUALIGUAL      reduce using rule 16 (number -> FLOAT .)
    DIFERENTE       reduce using rule 16 (number -> FLOAT .)
    MAYORQUE        reduce using rule 16 (number -> FLOAT .)
    MAYORIGUALQUE   reduce using rule 16 (number -> FLOAT .)
    MENORQUE        reduce using rule 16 (number -> FLOAT .)
    MENORIGUALQUE   reduce using rule 16 (number -> FLOAT .)
    STRING          reduce using rule 16 (number -> FLOAT .)
    NAME            reduce using rule 16 (number -> FLOAT .)
    INTEGER         reduce using rule 16 (number -> FLOAT .)
    FLOAT           reduce using rule 16 (number -> FLOAT .)
    OPEN_PARENTHESIS reduce using rule 16 (number -> FLOAT .)
    CLOSE_PARENTHESIS reduce using rule 16 (number -> FLOAT .)
    CLOSE_BRACE     reduce using rule 16 (number -> FLOAT .)
    AND             reduce using rule 16 (number -> FLOAT .)
    OR              reduce using rule 16 (number -> FLOAT .)


state 57

    (17) number -> OPEN_PARENTHESIS . RESTA INTEGER CLOSE_PARENTHESIS
    (18) number -> OPEN_PARENTHESIS . RESTA FLOAT CLOSE_PARENTHESIS

    RESTA           shift and go to state 111


state 58

    (125) function -> FUNCTION NAME . OPEN_PARENTHESIS CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE
    (126) function -> FUNCTION NAME . OPEN_PARENTHESIS parameter CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE

    OPEN_PARENTHESIS shift and go to state 112


state 59

    (85) escribirMap -> OPEN_BRACE claveValor . CLOSE_BRACE

    CLOSE_BRACE     shift and go to state 113


state 60

    (89) generarMap -> OPEN_BRACE tuplas . CLOSE_BRACE

    CLOSE_BRACE     shift and go to state 114


state 61

    (86) claveValor -> clave . COLON datatype
    (87) claveValor -> clave . COLON datatype COMMA claveValor

    COLON           shift and go to state 115


state 62

    (88) clave -> datatype .

    COLON           reduce using rule 88 (clave -> datatype .)
    CLOSE_PARENTHESIS reduce using rule 88 (clave -> datatype .)


state 63

    (90) tuplas -> tupla .
    (91) tuplas -> tupla . COMMA tuplas

    CLOSE_BRACE     reduce using rule 90 (tuplas -> tupla .)
    COMMA           shift and go to state 116


state 64

    (92) tupla -> OPEN_BRACKET . datatype CLOSE_BRACKET SEMICOLON
    (93) tupla -> OPEN_BRACKET . datatype COMMA datatype CLOSE_BRACKET SEMICOLON
    (79) array -> OPEN_BRACKET . items CLOSE_BRACKET SEMICOLON
    (52) datatype -> . number
    (53) datatype -> . STRING
    (54) datatype -> . CHAR
    (55) datatype -> . operations
    (56) datatype -> . dataStruct
    (106) items -> . item
    (107) items -> . item COMMA items
    (15) number -> . INTEGER
    (16) number -> . FLOAT
    (17) number -> . OPEN_PARENTHESIS RESTA INTEGER CLOSE_PARENTHESIS
    (18) number -> . OPEN_PARENTHESIS RESTA FLOAT CLOSE_PARENTHESIS
    (41) operations -> . number operand number
    (42) operations -> . NAME
    (43) operations -> . number
    (44) operations -> . number operand NAME operations
    (45) operations -> . NAME operand number operations
    (46) operations -> . number operand NAME
    (47) operations -> . NAME operand number
    (48) operations -> . NAME operand NAME operations
    (49) operations -> . number operand number operand operations
    (50) operations -> . NAME SUMA SUMA
    (51) operations -> . NAME RESTA RESTA
    (24) dataStruct -> . array
    (25) dataStruct -> . set
    (26) dataStruct -> . map
    (108) item -> . number
    (109) item -> . STRING
    (110) item -> . expBoolean
    (111) item -> . NAME
    (112) item -> . datatype
    (79) array -> . OPEN_BRACKET items CLOSE_BRACKET SEMICOLON
    (80) array -> . NEW ARRAY OPEN_PARENTHESIS items CLOSE_PARENTHESIS SEMICOLON
    (100) set -> . NEW SET OPEN_PARENTHESIS CLOSE_PARENTHESIS SEMICOLON
    (101) set -> . NEW SET OPEN_PARENTHESIS OPEN_BRACKET items CLOSE_BRACKET CLOSE_PARENTHESIS SEMICOLON
    (102) set -> . NEW SET OPEN_PARENTHESIS element CLOSE_PARENTHESIS SEMICOLON
    (81) map -> . iniciarMap
    (82) map -> . escribirMap
    (83) map -> . generarMap
    (121) expBoolean -> . controlArg
    (122) expBoolean -> . bool
    (123) expBoolean -> . NOT expBoolean
    (124) expBoolean -> . expBoolean logicalOperator expBoolean
    (84) iniciarMap -> . NEW MAP OPEN_PARENTHESIS CLOSE_PARENTHESIS SEMICOLON
    (85) escribirMap -> . OPEN_BRACE claveValor CLOSE_BRACE
    (89) generarMap -> . OPEN_BRACE tuplas CLOSE_BRACE
    (37) controlArg -> . element clause element
    (68) bool -> . TRUE
    (69) bool -> . FALSE
    (115) element -> . STRING
    (116) element -> . number
    (117) element -> . NAME

    STRING          shift and go to state 119
    CHAR            shift and go to state 67
    INTEGER         shift and go to state 55
    FLOAT           shift and go to state 56
    OPEN_PARENTHESIS shift and go to state 57
    NAME            shift and go to state 120
    OPEN_BRACKET    shift and go to state 30
    NEW             shift and go to state 31
    NOT             shift and go to state 80
    OPEN_BRACE      shift and go to state 26
    TRUE            shift and go to state 82
    FALSE           shift and go to state 83

    datatype                       shift and go to state 117
    items                          shift and go to state 71
    number                         shift and go to state 118
    operations                     shift and go to state 68
    dataStruct                     shift and go to state 69
    item                           shift and go to state 72
    array                          shift and go to state 17
    set                            shift and go to state 18
    map                            shift and go to state 19
    expBoolean                     shift and go to state 75
    element                        shift and go to state 81
    iniciarMap                     shift and go to state 32
    escribirMap                    shift and go to state 33
    generarMap                     shift and go to state 34
    controlArg                     shift and go to state 78
    bool                           shift and go to state 79

state 65

    (52) datatype -> number .
    (41) operations -> number . operand number
    (43) operations -> number .
    (44) operations -> number . operand NAME operations
    (46) operations -> number . operand NAME
    (49) operations -> number . operand number operand operations
    (57) operand -> . SUMA
    (58) operand -> . RESTA
    (59) operand -> . MULTIPLICACION
    (60) operand -> . DIVISION

  ! reduce/reduce conflict for COLON resolved using rule 43 (operations -> number .)
  ! reduce/reduce conflict for SEMICOLON resolved using rule 43 (operations -> number .)
  ! reduce/reduce conflict for COMMA resolved using rule 43 (operations -> number .)
  ! reduce/reduce conflict for CLOSE_BRACE resolved using rule 43 (operations -> number .)
  ! reduce/reduce conflict for CLOSE_PARENTHESIS resolved using rule 43 (operations -> number .)
  ! reduce/reduce conflict for CLOSE_BRACKET resolved using rule 43 (operations -> number .)
    COLON           reduce using rule 43 (operations -> number .)
    SEMICOLON       reduce using rule 43 (operations -> number .)
    COMMA           reduce using rule 43 (operations -> number .)
    CLOSE_BRACE     reduce using rule 43 (operations -> number .)
    CLOSE_PARENTHESIS reduce using rule 43 (operations -> number .)
    CLOSE_BRACKET   reduce using rule 43 (operations -> number .)
    SUMA            shift and go to state 122
    RESTA           shift and go to state 123
    MULTIPLICACION  shift and go to state 124
    DIVISION        shift and go to state 125

  ! COLON           [ reduce using rule 52 (datatype -> number .) ]
  ! SEMICOLON       [ reduce using rule 52 (datatype -> number .) ]
  ! COMMA           [ reduce using rule 52 (datatype -> number .) ]
  ! CLOSE_BRACE     [ reduce using rule 52 (datatype -> number .) ]
  ! CLOSE_PARENTHESIS [ reduce using rule 52 (datatype -> number .) ]
  ! CLOSE_BRACKET   [ reduce using rule 52 (datatype -> number .) ]

    operand                        shift and go to state 121

state 66

    (53) datatype -> STRING .

    COLON           reduce using rule 53 (datatype -> STRING .)
    SEMICOLON       reduce using rule 53 (datatype -> STRING .)
    COMMA           reduce using rule 53 (datatype -> STRING .)
    CLOSE_BRACE     reduce using rule 53 (datatype -> STRING .)
    CLOSE_PARENTHESIS reduce using rule 53 (datatype -> STRING .)
    CLOSE_BRACKET   reduce using rule 53 (datatype -> STRING .)


state 67

    (54) datatype -> CHAR .

    COLON           reduce using rule 54 (datatype -> CHAR .)
    COMMA           reduce using rule 54 (datatype -> CHAR .)
    CLOSE_BRACKET   reduce using rule 54 (datatype -> CHAR .)
    SEMICOLON       reduce using rule 54 (datatype -> CHAR .)
    CLOSE_BRACE     reduce using rule 54 (datatype -> CHAR .)
    CLOSE_PARENTHESIS reduce using rule 54 (datatype -> CHAR .)


state 68

    (55) datatype -> operations .

    COLON           reduce using rule 55 (datatype -> operations .)
    COMMA           reduce using rule 55 (datatype -> operations .)
    CLOSE_BRACKET   reduce using rule 55 (datatype -> operations .)
    SEMICOLON       reduce using rule 55 (datatype -> operations .)
    CLOSE_BRACE     reduce using rule 55 (datatype -> operations .)
    CLOSE_PARENTHESIS reduce using rule 55 (datatype -> operations .)


state 69

    (56) datatype -> dataStruct .

    COLON           reduce using rule 56 (datatype -> dataStruct .)
    COMMA           reduce using rule 56 (datatype -> dataStruct .)
    CLOSE_BRACKET   reduce using rule 56 (datatype -> dataStruct .)
    SEMICOLON       reduce using rule 56 (datatype -> dataStruct .)
    CLOSE_BRACE     reduce using rule 56 (datatype -> dataStruct .)
    CLOSE_PARENTHESIS reduce using rule 56 (datatype -> dataStruct .)


state 70

    (42) operations -> NAME .
    (45) operations -> NAME . operand number operations
    (47) operations -> NAME . operand number
    (48) operations -> NAME . operand NAME operations
    (50) operations -> NAME . SUMA SUMA
    (51) operations -> NAME . RESTA RESTA
    (57) operand -> . SUMA
    (58) operand -> . RESTA
    (59) operand -> . MULTIPLICACION
    (60) operand -> . DIVISION

    COLON           reduce using rule 42 (operations -> NAME .)
    SEMICOLON       reduce using rule 42 (operations -> NAME .)
    COMMA           reduce using rule 42 (operations -> NAME .)
    CLOSE_BRACE     reduce using rule 42 (operations -> NAME .)
    CLOSE_PARENTHESIS reduce using rule 42 (operations -> NAME .)
    CLOSE_BRACKET   reduce using rule 42 (operations -> NAME .)
    SUMA            shift and go to state 127
    RESTA           shift and go to state 128
    MULTIPLICACION  shift and go to state 124
    DIVISION        shift and go to state 125

    operand                        shift and go to state 126

state 71

    (79) array -> OPEN_BRACKET items . CLOSE_BRACKET SEMICOLON

    CLOSE_BRACKET   shift and go to state 129


state 72

    (106) items -> item .
    (107) items -> item . COMMA items

    CLOSE_BRACKET   reduce using rule 106 (items -> item .)
    CLOSE_PARENTHESIS reduce using rule 106 (items -> item .)
    COMMA           shift and go to state 130


state 73

    (108) item -> number .
    (52) datatype -> number .
    (41) operations -> number . operand number
    (43) operations -> number .
    (44) operations -> number . operand NAME operations
    (46) operations -> number . operand NAME
    (49) operations -> number . operand number operand operations
    (116) element -> number .
    (57) operand -> . SUMA
    (58) operand -> . RESTA
    (59) operand -> . MULTIPLICACION
    (60) operand -> . DIVISION

  ! reduce/reduce conflict for COMMA resolved using rule 52 (datatype -> number .)
  ! reduce/reduce conflict for CLOSE_BRACKET resolved using rule 52 (datatype -> number .)
  ! reduce/reduce conflict for CLOSE_PARENTHESIS resolved using rule 52 (datatype -> number .)
  ! reduce/reduce conflict for COMMA resolved using rule 43 (operations -> number .)
  ! reduce/reduce conflict for CLOSE_BRACKET resolved using rule 43 (operations -> number .)
  ! reduce/reduce conflict for CLOSE_PARENTHESIS resolved using rule 43 (operations -> number .)
    COMMA           reduce using rule 43 (operations -> number .)
    CLOSE_BRACKET   reduce using rule 43 (operations -> number .)
    CLOSE_PARENTHESIS reduce using rule 43 (operations -> number .)
    IGUALIGUAL      reduce using rule 116 (element -> number .)
    DIFERENTE       reduce using rule 116 (element -> number .)
    MAYORQUE        reduce using rule 116 (element -> number .)
    MAYORIGUALQUE   reduce using rule 116 (element -> number .)
    MENORQUE        reduce using rule 116 (element -> number .)
    MENORIGUALQUE   reduce using rule 116 (element -> number .)
    SUMA            shift and go to state 122
    RESTA           shift and go to state 123
    MULTIPLICACION  shift and go to state 124
    DIVISION        shift and go to state 125

  ! COMMA           [ reduce using rule 108 (item -> number .) ]
  ! CLOSE_BRACKET   [ reduce using rule 108 (item -> number .) ]
  ! CLOSE_PARENTHESIS [ reduce using rule 108 (item -> number .) ]
  ! COMMA           [ reduce using rule 52 (datatype -> number .) ]
  ! CLOSE_BRACKET   [ reduce using rule 52 (datatype -> number .) ]
  ! CLOSE_PARENTHESIS [ reduce using rule 52 (datatype -> number .) ]

    operand                        shift and go to state 121

state 74

    (109) item -> STRING .
    (53) datatype -> STRING .
    (115) element -> STRING .

  ! reduce/reduce conflict for COMMA resolved using rule 53 (datatype -> STRING .)
  ! reduce/reduce conflict for CLOSE_BRACKET resolved using rule 53 (datatype -> STRING .)
  ! reduce/reduce conflict for CLOSE_PARENTHESIS resolved using rule 53 (datatype -> STRING .)
    COMMA           reduce using rule 53 (datatype -> STRING .)
    CLOSE_BRACKET   reduce using rule 53 (datatype -> STRING .)
    CLOSE_PARENTHESIS reduce using rule 53 (datatype -> STRING .)
    IGUALIGUAL      reduce using rule 115 (element -> STRING .)
    DIFERENTE       reduce using rule 115 (element -> STRING .)
    MAYORQUE        reduce using rule 115 (element -> STRING .)
    MAYORIGUALQUE   reduce using rule 115 (element -> STRING .)
    MENORQUE        reduce using rule 115 (element -> STRING .)
    MENORIGUALQUE   reduce using rule 115 (element -> STRING .)

  ! COMMA           [ reduce using rule 109 (item -> STRING .) ]
  ! CLOSE_BRACKET   [ reduce using rule 109 (item -> STRING .) ]
  ! CLOSE_PARENTHESIS [ reduce using rule 109 (item -> STRING .) ]


state 75

    (110) item -> expBoolean .
    (124) expBoolean -> expBoolean . logicalOperator expBoolean
    (119) logicalOperator -> . AND
    (120) logicalOperator -> . OR

    COMMA           reduce using rule 110 (item -> expBoolean .)
    CLOSE_BRACKET   reduce using rule 110 (item -> expBoolean .)
    CLOSE_PARENTHESIS reduce using rule 110 (item -> expBoolean .)
    AND             shift and go to state 132
    OR              shift and go to state 133

    logicalOperator                shift and go to state 131

state 76

    (111) item -> NAME .
    (42) operations -> NAME .
    (45) operations -> NAME . operand number operations
    (47) operations -> NAME . operand number
    (48) operations -> NAME . operand NAME operations
    (50) operations -> NAME . SUMA SUMA
    (51) operations -> NAME . RESTA RESTA
    (117) element -> NAME .
    (57) operand -> . SUMA
    (58) operand -> . RESTA
    (59) operand -> . MULTIPLICACION
    (60) operand -> . DIVISION

  ! reduce/reduce conflict for COMMA resolved using rule 42 (operations -> NAME .)
  ! reduce/reduce conflict for CLOSE_BRACKET resolved using rule 42 (operations -> NAME .)
  ! reduce/reduce conflict for CLOSE_PARENTHESIS resolved using rule 42 (operations -> NAME .)
    COMMA           reduce using rule 42 (operations -> NAME .)
    CLOSE_BRACKET   reduce using rule 42 (operations -> NAME .)
    CLOSE_PARENTHESIS reduce using rule 42 (operations -> NAME .)
    SUMA            shift and go to state 127
    RESTA           shift and go to state 128
    IGUALIGUAL      reduce using rule 117 (element -> NAME .)
    DIFERENTE       reduce using rule 117 (element -> NAME .)
    MAYORQUE        reduce using rule 117 (element -> NAME .)
    MAYORIGUALQUE   reduce using rule 117 (element -> NAME .)
    MENORQUE        reduce using rule 117 (element -> NAME .)
    MENORIGUALQUE   reduce using rule 117 (element -> NAME .)
    MULTIPLICACION  shift and go to state 124
    DIVISION        shift and go to state 125

  ! COMMA           [ reduce using rule 111 (item -> NAME .) ]
  ! CLOSE_BRACKET   [ reduce using rule 111 (item -> NAME .) ]
  ! CLOSE_PARENTHESIS [ reduce using rule 111 (item -> NAME .) ]

    operand                        shift and go to state 126

state 77

    (112) item -> datatype .

    COMMA           reduce using rule 112 (item -> datatype .)
    CLOSE_BRACKET   reduce using rule 112 (item -> datatype .)
    CLOSE_PARENTHESIS reduce using rule 112 (item -> datatype .)


state 78

    (121) expBoolean -> controlArg .

    AND             reduce using rule 121 (expBoolean -> controlArg .)
    OR              reduce using rule 121 (expBoolean -> controlArg .)
    COMMA           reduce using rule 121 (expBoolean -> controlArg .)
    CLOSE_BRACKET   reduce using rule 121 (expBoolean -> controlArg .)
    CLOSE_PARENTHESIS reduce using rule 121 (expBoolean -> controlArg .)
    SEMICOLON       reduce using rule 121 (expBoolean -> controlArg .)


state 79

    (122) expBoolean -> bool .

    AND             reduce using rule 122 (expBoolean -> bool .)
    OR              reduce using rule 122 (expBoolean -> bool .)
    COMMA           reduce using rule 122 (expBoolean -> bool .)
    CLOSE_BRACKET   reduce using rule 122 (expBoolean -> bool .)
    CLOSE_PARENTHESIS reduce using rule 122 (expBoolean -> bool .)
    SEMICOLON       reduce using rule 122 (expBoolean -> bool .)


state 80

    (123) expBoolean -> NOT . expBoolean
    (121) expBoolean -> . controlArg
    (122) expBoolean -> . bool
    (123) expBoolean -> . NOT expBoolean
    (124) expBoolean -> . expBoolean logicalOperator expBoolean
    (37) controlArg -> . element clause element
    (68) bool -> . TRUE
    (69) bool -> . FALSE
    (115) element -> . STRING
    (116) element -> . number
    (117) element -> . NAME
    (15) number -> . INTEGER
    (16) number -> . FLOAT
    (17) number -> . OPEN_PARENTHESIS RESTA INTEGER CLOSE_PARENTHESIS
    (18) number -> . OPEN_PARENTHESIS RESTA FLOAT CLOSE_PARENTHESIS

    NOT             shift and go to state 80
    TRUE            shift and go to state 82
    FALSE           shift and go to state 83
    STRING          shift and go to state 52
    NAME            shift and go to state 54
    INTEGER         shift and go to state 55
    FLOAT           shift and go to state 56
    OPEN_PARENTHESIS shift and go to state 57

    expBoolean                     shift and go to state 134
    controlArg                     shift and go to state 78
    bool                           shift and go to state 79
    element                        shift and go to state 81
    number                         shift and go to state 53

state 81

    (37) controlArg -> element . clause element
    (73) clause -> . IGUALIGUAL
    (74) clause -> . DIFERENTE
    (75) clause -> . MAYORQUE
    (76) clause -> . MAYORIGUALQUE
    (77) clause -> . MENORQUE
    (78) clause -> . MENORIGUALQUE

    IGUALIGUAL      shift and go to state 136
    DIFERENTE       shift and go to state 137
    MAYORQUE        shift and go to state 138
    MAYORIGUALQUE   shift and go to state 139
    MENORQUE        shift and go to state 140
    MENORIGUALQUE   shift and go to state 141

    clause                         shift and go to state 135

state 82

    (68) bool -> TRUE .

    AND             reduce using rule 68 (bool -> TRUE .)
    OR              reduce using rule 68 (bool -> TRUE .)
    COMMA           reduce using rule 68 (bool -> TRUE .)
    CLOSE_BRACKET   reduce using rule 68 (bool -> TRUE .)
    CLOSE_PARENTHESIS reduce using rule 68 (bool -> TRUE .)
    SEMICOLON       reduce using rule 68 (bool -> TRUE .)


state 83

    (69) bool -> FALSE .

    AND             reduce using rule 69 (bool -> FALSE .)
    OR              reduce using rule 69 (bool -> FALSE .)
    COMMA           reduce using rule 69 (bool -> FALSE .)
    CLOSE_BRACKET   reduce using rule 69 (bool -> FALSE .)
    CLOSE_PARENTHESIS reduce using rule 69 (bool -> FALSE .)
    SEMICOLON       reduce using rule 69 (bool -> FALSE .)


state 84

    (80) array -> NEW ARRAY . OPEN_PARENTHESIS items CLOSE_PARENTHESIS SEMICOLON

    OPEN_PARENTHESIS shift and go to state 142


state 85

    (100) set -> NEW SET . OPEN_PARENTHESIS CLOSE_PARENTHESIS SEMICOLON
    (101) set -> NEW SET . OPEN_PARENTHESIS OPEN_BRACKET items CLOSE_BRACKET CLOSE_PARENTHESIS SEMICOLON
    (102) set -> NEW SET . OPEN_PARENTHESIS element CLOSE_PARENTHESIS SEMICOLON

    OPEN_PARENTHESIS shift and go to state 143


state 86

    (84) iniciarMap -> NEW MAP . OPEN_PARENTHESIS CLOSE_PARENTHESIS SEMICOLON

    OPEN_PARENTHESIS shift and go to state 144


state 87

    (27) while -> WHILE OPEN_PARENTHESIS . controlArg CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE
    (28) while -> WHILE OPEN_PARENTHESIS . bool CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE
    (37) controlArg -> . element clause element
    (68) bool -> . TRUE
    (69) bool -> . FALSE
    (115) element -> . STRING
    (116) element -> . number
    (117) element -> . NAME
    (15) number -> . INTEGER
    (16) number -> . FLOAT
    (17) number -> . OPEN_PARENTHESIS RESTA INTEGER CLOSE_PARENTHESIS
    (18) number -> . OPEN_PARENTHESIS RESTA FLOAT CLOSE_PARENTHESIS

    TRUE            shift and go to state 82
    FALSE           shift and go to state 83
    STRING          shift and go to state 52
    NAME            shift and go to state 54
    INTEGER         shift and go to state 55
    FLOAT           shift and go to state 56
    OPEN_PARENTHESIS shift and go to state 57

    controlArg                     shift and go to state 145
    bool                           shift and go to state 146
    element                        shift and go to state 81
    number                         shift and go to state 53

state 88

    (38) for -> FOR OPEN_PARENTHESIS . inicialization SEMICOLON expBoolean SEMICOLON operations CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE
    (39) inicialization -> . type NAME IGUAL number
    (40) inicialization -> . NAME IGUAL number
    (70) type -> . CONST
    (71) type -> . LET
    (72) type -> . VAR

    NAME            shift and go to state 149
    CONST           shift and go to state 27
    LET             shift and go to state 28
    VAR             shift and go to state 29

    inicialization                 shift and go to state 147
    type                           shift and go to state 148

state 89

    (30) if -> soloIf elseIf .
    (31) if -> soloIf elseIf . else
    (36) else -> . ELSE OPEN_BRACE expression CLOSE_BRACE

    COMMENTS        reduce using rule 30 (if -> soloIf elseIf .)
    NAME            reduce using rule 30 (if -> soloIf elseIf .)
    PRINT           reduce using rule 30 (if -> soloIf elseIf .)
    RETURN          reduce using rule 30 (if -> soloIf elseIf .)
    FUNCTION        reduce using rule 30 (if -> soloIf elseIf .)
    CONST           reduce using rule 30 (if -> soloIf elseIf .)
    LET             reduce using rule 30 (if -> soloIf elseIf .)
    VAR             reduce using rule 30 (if -> soloIf elseIf .)
    OPEN_BRACKET    reduce using rule 30 (if -> soloIf elseIf .)
    NEW             reduce using rule 30 (if -> soloIf elseIf .)
    WHILE           reduce using rule 30 (if -> soloIf elseIf .)
    FOR             reduce using rule 30 (if -> soloIf elseIf .)
    OPEN_BRACE      reduce using rule 30 (if -> soloIf elseIf .)
    IF              reduce using rule 30 (if -> soloIf elseIf .)
    $end            reduce using rule 30 (if -> soloIf elseIf .)
    CLOSE_BRACE     reduce using rule 30 (if -> soloIf elseIf .)
    ELSE            shift and go to state 92

    else                           shift and go to state 150

state 90

    (32) if -> soloIf else .

    COMMENTS        reduce using rule 32 (if -> soloIf else .)
    NAME            reduce using rule 32 (if -> soloIf else .)
    PRINT           reduce using rule 32 (if -> soloIf else .)
    RETURN          reduce using rule 32 (if -> soloIf else .)
    FUNCTION        reduce using rule 32 (if -> soloIf else .)
    CONST           reduce using rule 32 (if -> soloIf else .)
    LET             reduce using rule 32 (if -> soloIf else .)
    VAR             reduce using rule 32 (if -> soloIf else .)
    OPEN_BRACKET    reduce using rule 32 (if -> soloIf else .)
    NEW             reduce using rule 32 (if -> soloIf else .)
    WHILE           reduce using rule 32 (if -> soloIf else .)
    FOR             reduce using rule 32 (if -> soloIf else .)
    OPEN_BRACE      reduce using rule 32 (if -> soloIf else .)
    IF              reduce using rule 32 (if -> soloIf else .)
    $end            reduce using rule 32 (if -> soloIf else .)
    CLOSE_BRACE     reduce using rule 32 (if -> soloIf else .)


state 91

    (34) elseIf -> ELSEIF . OPEN_PARENTHESIS controlArg CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE
    (35) elseIf -> ELSEIF . OPEN_PARENTHESIS controlArg CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE soloIf

    OPEN_PARENTHESIS shift and go to state 151


state 92

    (36) else -> ELSE . OPEN_BRACE expression CLOSE_BRACE

    OPEN_BRACE      shift and go to state 152


state 93

    (33) soloIf -> IF OPEN_PARENTHESIS . controlArg CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE
    (37) controlArg -> . element clause element
    (115) element -> . STRING
    (116) element -> . number
    (117) element -> . NAME
    (15) number -> . INTEGER
    (16) number -> . FLOAT
    (17) number -> . OPEN_PARENTHESIS RESTA INTEGER CLOSE_PARENTHESIS
    (18) number -> . OPEN_PARENTHESIS RESTA FLOAT CLOSE_PARENTHESIS

    STRING          shift and go to state 52
    NAME            shift and go to state 54
    INTEGER         shift and go to state 55
    FLOAT           shift and go to state 56
    OPEN_PARENTHESIS shift and go to state 57

    controlArg                     shift and go to state 153
    element                        shift and go to state 81
    number                         shift and go to state 53

state 94

    (19) variable -> type NAME IGUAL . datatype SEMICOLON
    (52) datatype -> . number
    (53) datatype -> . STRING
    (54) datatype -> . CHAR
    (55) datatype -> . operations
    (56) datatype -> . dataStruct
    (15) number -> . INTEGER
    (16) number -> . FLOAT
    (17) number -> . OPEN_PARENTHESIS RESTA INTEGER CLOSE_PARENTHESIS
    (18) number -> . OPEN_PARENTHESIS RESTA FLOAT CLOSE_PARENTHESIS
    (41) operations -> . number operand number
    (42) operations -> . NAME
    (43) operations -> . number
    (44) operations -> . number operand NAME operations
    (45) operations -> . NAME operand number operations
    (46) operations -> . number operand NAME
    (47) operations -> . NAME operand number
    (48) operations -> . NAME operand NAME operations
    (49) operations -> . number operand number operand operations
    (50) operations -> . NAME SUMA SUMA
    (51) operations -> . NAME RESTA RESTA
    (24) dataStruct -> . array
    (25) dataStruct -> . set
    (26) dataStruct -> . map
    (79) array -> . OPEN_BRACKET items CLOSE_BRACKET SEMICOLON
    (80) array -> . NEW ARRAY OPEN_PARENTHESIS items CLOSE_PARENTHESIS SEMICOLON
    (100) set -> . NEW SET OPEN_PARENTHESIS CLOSE_PARENTHESIS SEMICOLON
    (101) set -> . NEW SET OPEN_PARENTHESIS OPEN_BRACKET items CLOSE_BRACKET CLOSE_PARENTHESIS SEMICOLON
    (102) set -> . NEW SET OPEN_PARENTHESIS element CLOSE_PARENTHESIS SEMICOLON
    (81) map -> . iniciarMap
    (82) map -> . escribirMap
    (83) map -> . generarMap
    (84) iniciarMap -> . NEW MAP OPEN_PARENTHESIS CLOSE_PARENTHESIS SEMICOLON
    (85) escribirMap -> . OPEN_BRACE claveValor CLOSE_BRACE
    (89) generarMap -> . OPEN_BRACE tuplas CLOSE_BRACE

    STRING          shift and go to state 66
    CHAR            shift and go to state 67
    INTEGER         shift and go to state 55
    FLOAT           shift and go to state 56
    OPEN_PARENTHESIS shift and go to state 57
    NAME            shift and go to state 70
    OPEN_BRACKET    shift and go to state 30
    NEW             shift and go to state 31
    OPEN_BRACE      shift and go to state 26

    datatype                       shift and go to state 154
    number                         shift and go to state 65
    operations                     shift and go to state 68
    dataStruct                     shift and go to state 69
    array                          shift and go to state 17
    set                            shift and go to state 18
    map                            shift and go to state 19
    iniciarMap                     shift and go to state 32
    escribirMap                    shift and go to state 33
    generarMap                     shift and go to state 34

state 95

    (117) element -> NAME .
    (42) operations -> NAME .
    (45) operations -> NAME . operand number operations
    (47) operations -> NAME . operand number
    (48) operations -> NAME . operand NAME operations
    (50) operations -> NAME . SUMA SUMA
    (51) operations -> NAME . RESTA RESTA
    (57) operand -> . SUMA
    (58) operand -> . RESTA
    (59) operand -> . MULTIPLICACION
    (60) operand -> . DIVISION

  ! reduce/reduce conflict for SEMICOLON resolved using rule 42 (operations -> NAME .)
    SEMICOLON       reduce using rule 42 (operations -> NAME .)
    SUMA            shift and go to state 127
    RESTA           shift and go to state 128
    MULTIPLICACION  shift and go to state 124
    DIVISION        shift and go to state 125

  ! SEMICOLON       [ reduce using rule 117 (element -> NAME .) ]

    operand                        shift and go to state 126

state 96

    (20) variable -> NAME IGUAL datatype . SEMICOLON

    SEMICOLON       shift and go to state 155


state 97

    (118) declaration -> NAME IGUAL element . SEMICOLON

    SEMICOLON       shift and go to state 156


state 98

    (52) datatype -> number .
    (116) element -> number .
    (41) operations -> number . operand number
    (43) operations -> number .
    (44) operations -> number . operand NAME operations
    (46) operations -> number . operand NAME
    (49) operations -> number . operand number operand operations
    (57) operand -> . SUMA
    (58) operand -> . RESTA
    (59) operand -> . MULTIPLICACION
    (60) operand -> . DIVISION

  ! reduce/reduce conflict for SEMICOLON resolved using rule 52 (datatype -> number .)
  ! reduce/reduce conflict for SEMICOLON resolved using rule 43 (operations -> number .)
    SEMICOLON       reduce using rule 43 (operations -> number .)
    SUMA            shift and go to state 122
    RESTA           shift and go to state 123
    MULTIPLICACION  shift and go to state 124
    DIVISION        shift and go to state 125

  ! SEMICOLON       [ reduce using rule 52 (datatype -> number .) ]
  ! SEMICOLON       [ reduce using rule 116 (element -> number .) ]

    operand                        shift and go to state 121

state 99

    (53) datatype -> STRING .
    (115) element -> STRING .

  ! reduce/reduce conflict for SEMICOLON resolved using rule 53 (datatype -> STRING .)
    SEMICOLON       reduce using rule 53 (datatype -> STRING .)

  ! SEMICOLON       [ reduce using rule 115 (element -> STRING .) ]


state 100

    (103) methodsSet -> NAME POINT ADD . OPEN_PARENTHESIS element CLOSE_PARENTHESIS SEMICOLON

    OPEN_PARENTHESIS shift and go to state 157


state 101

    (104) methodsSet -> NAME POINT DELETE . OPEN_PARENTHESIS element CLOSE_PARENTHESIS SEMICOLON

    OPEN_PARENTHESIS shift and go to state 158


state 102

    (105) methodsSet -> NAME POINT CLEAR . OPEN_PARENTHESIS CLOSE_PARENTHESIS SEMICOLON
    (94) mapFunctions -> NAME POINT CLEAR . OPEN_PARENTHESIS CLOSE_PARENTHESIS SEMICOLON

    OPEN_PARENTHESIS shift and go to state 159


state 103

    (95) mapFunctions -> NAME POINT GET . OPEN_PARENTHESIS clave CLOSE_PARENTHESIS SEMICOLON

    OPEN_PARENTHESIS shift and go to state 160


state 104

    (96) mapFunctions -> NAME POINT HAS . OPEN_PARENTHESIS clave CLOSE_PARENTHESIS SEMICOLON

    OPEN_PARENTHESIS shift and go to state 161


state 105

    (97) arrayFn -> NAME POINT POP . OPEN_PARENTHESIS CLOSE_PARENTHESIS SEMICOLON

    OPEN_PARENTHESIS shift and go to state 162


state 106

    (98) arrayFn -> NAME POINT PUSH . OPEN_PARENTHESIS element CLOSE_PARENTHESIS SEMICOLON

    OPEN_PARENTHESIS shift and go to state 163


state 107

    (99) arrayFn -> NAME POINT UNSHIFT . OPEN_PARENTHESIS element CLOSE_PARENTHESIS SEMICOLON

    OPEN_PARENTHESIS shift and go to state 164


state 108

    (67) asigOp -> NAME operadorAsig number . SEMICOLON

    SEMICOLON       shift and go to state 165


state 109

    (130) print -> PRINT OPEN_PARENTHESIS CLOSE_PARENTHESIS . SEMICOLON

    SEMICOLON       shift and go to state 166


state 110

    (129) return -> RETURN element SEMICOLON .

    COMMENTS        reduce using rule 129 (return -> RETURN element SEMICOLON .)
    NAME            reduce using rule 129 (return -> RETURN element SEMICOLON .)
    PRINT           reduce using rule 129 (return -> RETURN element SEMICOLON .)
    RETURN          reduce using rule 129 (return -> RETURN element SEMICOLON .)
    FUNCTION        reduce using rule 129 (return -> RETURN element SEMICOLON .)
    CONST           reduce using rule 129 (return -> RETURN element SEMICOLON .)
    LET             reduce using rule 129 (return -> RETURN element SEMICOLON .)
    VAR             reduce using rule 129 (return -> RETURN element SEMICOLON .)
    OPEN_BRACKET    reduce using rule 129 (return -> RETURN element SEMICOLON .)
    NEW             reduce using rule 129 (return -> RETURN element SEMICOLON .)
    WHILE           reduce using rule 129 (return -> RETURN element SEMICOLON .)
    FOR             reduce using rule 129 (return -> RETURN element SEMICOLON .)
    OPEN_BRACE      reduce using rule 129 (return -> RETURN element SEMICOLON .)
    IF              reduce using rule 129 (return -> RETURN element SEMICOLON .)
    $end            reduce using rule 129 (return -> RETURN element SEMICOLON .)
    CLOSE_BRACE     reduce using rule 129 (return -> RETURN element SEMICOLON .)


state 111

    (17) number -> OPEN_PARENTHESIS RESTA . INTEGER CLOSE_PARENTHESIS
    (18) number -> OPEN_PARENTHESIS RESTA . FLOAT CLOSE_PARENTHESIS

    INTEGER         shift and go to state 167
    FLOAT           shift and go to state 168


state 112

    (125) function -> FUNCTION NAME OPEN_PARENTHESIS . CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE
    (126) function -> FUNCTION NAME OPEN_PARENTHESIS . parameter CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE
    (127) parameter -> . element
    (128) parameter -> . element parameter
    (115) element -> . STRING
    (116) element -> . number
    (117) element -> . NAME
    (15) number -> . INTEGER
    (16) number -> . FLOAT
    (17) number -> . OPEN_PARENTHESIS RESTA INTEGER CLOSE_PARENTHESIS
    (18) number -> . OPEN_PARENTHESIS RESTA FLOAT CLOSE_PARENTHESIS

    CLOSE_PARENTHESIS shift and go to state 169
    STRING          shift and go to state 52
    NAME            shift and go to state 54
    INTEGER         shift and go to state 55
    FLOAT           shift and go to state 56
    OPEN_PARENTHESIS shift and go to state 57

    parameter                      shift and go to state 170
    element                        shift and go to state 171
    number                         shift and go to state 53

state 113

    (85) escribirMap -> OPEN_BRACE claveValor CLOSE_BRACE .

    COMMENTS        reduce using rule 85 (escribirMap -> OPEN_BRACE claveValor CLOSE_BRACE .)
    NAME            reduce using rule 85 (escribirMap -> OPEN_BRACE claveValor CLOSE_BRACE .)
    PRINT           reduce using rule 85 (escribirMap -> OPEN_BRACE claveValor CLOSE_BRACE .)
    RETURN          reduce using rule 85 (escribirMap -> OPEN_BRACE claveValor CLOSE_BRACE .)
    FUNCTION        reduce using rule 85 (escribirMap -> OPEN_BRACE claveValor CLOSE_BRACE .)
    CONST           reduce using rule 85 (escribirMap -> OPEN_BRACE claveValor CLOSE_BRACE .)
    LET             reduce using rule 85 (escribirMap -> OPEN_BRACE claveValor CLOSE_BRACE .)
    VAR             reduce using rule 85 (escribirMap -> OPEN_BRACE claveValor CLOSE_BRACE .)
    OPEN_BRACKET    reduce using rule 85 (escribirMap -> OPEN_BRACE claveValor CLOSE_BRACE .)
    NEW             reduce using rule 85 (escribirMap -> OPEN_BRACE claveValor CLOSE_BRACE .)
    WHILE           reduce using rule 85 (escribirMap -> OPEN_BRACE claveValor CLOSE_BRACE .)
    FOR             reduce using rule 85 (escribirMap -> OPEN_BRACE claveValor CLOSE_BRACE .)
    OPEN_BRACE      reduce using rule 85 (escribirMap -> OPEN_BRACE claveValor CLOSE_BRACE .)
    IF              reduce using rule 85 (escribirMap -> OPEN_BRACE claveValor CLOSE_BRACE .)
    $end            reduce using rule 85 (escribirMap -> OPEN_BRACE claveValor CLOSE_BRACE .)
    CLOSE_BRACE     reduce using rule 85 (escribirMap -> OPEN_BRACE claveValor CLOSE_BRACE .)
    COLON           reduce using rule 85 (escribirMap -> OPEN_BRACE claveValor CLOSE_BRACE .)
    COMMA           reduce using rule 85 (escribirMap -> OPEN_BRACE claveValor CLOSE_BRACE .)
    CLOSE_BRACKET   reduce using rule 85 (escribirMap -> OPEN_BRACE claveValor CLOSE_BRACE .)
    SEMICOLON       reduce using rule 85 (escribirMap -> OPEN_BRACE claveValor CLOSE_BRACE .)
    CLOSE_PARENTHESIS reduce using rule 85 (escribirMap -> OPEN_BRACE claveValor CLOSE_BRACE .)


state 114

    (89) generarMap -> OPEN_BRACE tuplas CLOSE_BRACE .

    COMMENTS        reduce using rule 89 (generarMap -> OPEN_BRACE tuplas CLOSE_BRACE .)
    NAME            reduce using rule 89 (generarMap -> OPEN_BRACE tuplas CLOSE_BRACE .)
    PRINT           reduce using rule 89 (generarMap -> OPEN_BRACE tuplas CLOSE_BRACE .)
    RETURN          reduce using rule 89 (generarMap -> OPEN_BRACE tuplas CLOSE_BRACE .)
    FUNCTION        reduce using rule 89 (generarMap -> OPEN_BRACE tuplas CLOSE_BRACE .)
    CONST           reduce using rule 89 (generarMap -> OPEN_BRACE tuplas CLOSE_BRACE .)
    LET             reduce using rule 89 (generarMap -> OPEN_BRACE tuplas CLOSE_BRACE .)
    VAR             reduce using rule 89 (generarMap -> OPEN_BRACE tuplas CLOSE_BRACE .)
    OPEN_BRACKET    reduce using rule 89 (generarMap -> OPEN_BRACE tuplas CLOSE_BRACE .)
    NEW             reduce using rule 89 (generarMap -> OPEN_BRACE tuplas CLOSE_BRACE .)
    WHILE           reduce using rule 89 (generarMap -> OPEN_BRACE tuplas CLOSE_BRACE .)
    FOR             reduce using rule 89 (generarMap -> OPEN_BRACE tuplas CLOSE_BRACE .)
    OPEN_BRACE      reduce using rule 89 (generarMap -> OPEN_BRACE tuplas CLOSE_BRACE .)
    IF              reduce using rule 89 (generarMap -> OPEN_BRACE tuplas CLOSE_BRACE .)
    $end            reduce using rule 89 (generarMap -> OPEN_BRACE tuplas CLOSE_BRACE .)
    CLOSE_BRACE     reduce using rule 89 (generarMap -> OPEN_BRACE tuplas CLOSE_BRACE .)
    COLON           reduce using rule 89 (generarMap -> OPEN_BRACE tuplas CLOSE_BRACE .)
    COMMA           reduce using rule 89 (generarMap -> OPEN_BRACE tuplas CLOSE_BRACE .)
    CLOSE_BRACKET   reduce using rule 89 (generarMap -> OPEN_BRACE tuplas CLOSE_BRACE .)
    SEMICOLON       reduce using rule 89 (generarMap -> OPEN_BRACE tuplas CLOSE_BRACE .)
    CLOSE_PARENTHESIS reduce using rule 89 (generarMap -> OPEN_BRACE tuplas CLOSE_BRACE .)


state 115

    (86) claveValor -> clave COLON . datatype
    (87) claveValor -> clave COLON . datatype COMMA claveValor
    (52) datatype -> . number
    (53) datatype -> . STRING
    (54) datatype -> . CHAR
    (55) datatype -> . operations
    (56) datatype -> . dataStruct
    (15) number -> . INTEGER
    (16) number -> . FLOAT
    (17) number -> . OPEN_PARENTHESIS RESTA INTEGER CLOSE_PARENTHESIS
    (18) number -> . OPEN_PARENTHESIS RESTA FLOAT CLOSE_PARENTHESIS
    (41) operations -> . number operand number
    (42) operations -> . NAME
    (43) operations -> . number
    (44) operations -> . number operand NAME operations
    (45) operations -> . NAME operand number operations
    (46) operations -> . number operand NAME
    (47) operations -> . NAME operand number
    (48) operations -> . NAME operand NAME operations
    (49) operations -> . number operand number operand operations
    (50) operations -> . NAME SUMA SUMA
    (51) operations -> . NAME RESTA RESTA
    (24) dataStruct -> . array
    (25) dataStruct -> . set
    (26) dataStruct -> . map
    (79) array -> . OPEN_BRACKET items CLOSE_BRACKET SEMICOLON
    (80) array -> . NEW ARRAY OPEN_PARENTHESIS items CLOSE_PARENTHESIS SEMICOLON
    (100) set -> . NEW SET OPEN_PARENTHESIS CLOSE_PARENTHESIS SEMICOLON
    (101) set -> . NEW SET OPEN_PARENTHESIS OPEN_BRACKET items CLOSE_BRACKET CLOSE_PARENTHESIS SEMICOLON
    (102) set -> . NEW SET OPEN_PARENTHESIS element CLOSE_PARENTHESIS SEMICOLON
    (81) map -> . iniciarMap
    (82) map -> . escribirMap
    (83) map -> . generarMap
    (84) iniciarMap -> . NEW MAP OPEN_PARENTHESIS CLOSE_PARENTHESIS SEMICOLON
    (85) escribirMap -> . OPEN_BRACE claveValor CLOSE_BRACE
    (89) generarMap -> . OPEN_BRACE tuplas CLOSE_BRACE

    STRING          shift and go to state 66
    CHAR            shift and go to state 67
    INTEGER         shift and go to state 55
    FLOAT           shift and go to state 56
    OPEN_PARENTHESIS shift and go to state 57
    NAME            shift and go to state 70
    OPEN_BRACKET    shift and go to state 30
    NEW             shift and go to state 31
    OPEN_BRACE      shift and go to state 26

    datatype                       shift and go to state 172
    number                         shift and go to state 65
    operations                     shift and go to state 68
    dataStruct                     shift and go to state 69
    array                          shift and go to state 17
    set                            shift and go to state 18
    map                            shift and go to state 19
    iniciarMap                     shift and go to state 32
    escribirMap                    shift and go to state 33
    generarMap                     shift and go to state 34

state 116

    (91) tuplas -> tupla COMMA . tuplas
    (90) tuplas -> . tupla
    (91) tuplas -> . tupla COMMA tuplas
    (92) tupla -> . OPEN_BRACKET datatype CLOSE_BRACKET SEMICOLON
    (93) tupla -> . OPEN_BRACKET datatype COMMA datatype CLOSE_BRACKET SEMICOLON

    OPEN_BRACKET    shift and go to state 174

    tupla                          shift and go to state 63
    tuplas                         shift and go to state 173

state 117

    (92) tupla -> OPEN_BRACKET datatype . CLOSE_BRACKET SEMICOLON
    (93) tupla -> OPEN_BRACKET datatype . COMMA datatype CLOSE_BRACKET SEMICOLON
    (112) item -> datatype .

  ! shift/reduce conflict for COMMA resolved as shift
  ! shift/reduce conflict for CLOSE_BRACKET resolved as shift
    CLOSE_BRACKET   shift and go to state 175
    COMMA           shift and go to state 176

  ! COMMA           [ reduce using rule 112 (item -> datatype .) ]
  ! CLOSE_BRACKET   [ reduce using rule 112 (item -> datatype .) ]


state 118

    (52) datatype -> number .
    (41) operations -> number . operand number
    (43) operations -> number .
    (44) operations -> number . operand NAME operations
    (46) operations -> number . operand NAME
    (49) operations -> number . operand number operand operations
    (108) item -> number .
    (116) element -> number .
    (57) operand -> . SUMA
    (58) operand -> . RESTA
    (59) operand -> . MULTIPLICACION
    (60) operand -> . DIVISION

  ! reduce/reduce conflict for CLOSE_BRACKET resolved using rule 43 (operations -> number .)
  ! reduce/reduce conflict for COMMA resolved using rule 43 (operations -> number .)
  ! reduce/reduce conflict for COMMA resolved using rule 43 (operations -> number .)
  ! reduce/reduce conflict for CLOSE_BRACKET resolved using rule 43 (operations -> number .)
    CLOSE_BRACKET   reduce using rule 43 (operations -> number .)
    COMMA           reduce using rule 43 (operations -> number .)
    IGUALIGUAL      reduce using rule 116 (element -> number .)
    DIFERENTE       reduce using rule 116 (element -> number .)
    MAYORQUE        reduce using rule 116 (element -> number .)
    MAYORIGUALQUE   reduce using rule 116 (element -> number .)
    MENORQUE        reduce using rule 116 (element -> number .)
    MENORIGUALQUE   reduce using rule 116 (element -> number .)
    SUMA            shift and go to state 122
    RESTA           shift and go to state 123
    MULTIPLICACION  shift and go to state 124
    DIVISION        shift and go to state 125

  ! CLOSE_BRACKET   [ reduce using rule 52 (datatype -> number .) ]
  ! COMMA           [ reduce using rule 52 (datatype -> number .) ]
  ! COMMA           [ reduce using rule 108 (item -> number .) ]
  ! CLOSE_BRACKET   [ reduce using rule 108 (item -> number .) ]

    operand                        shift and go to state 121

state 119

    (53) datatype -> STRING .
    (109) item -> STRING .
    (115) element -> STRING .

  ! reduce/reduce conflict for COMMA resolved using rule 53 (datatype -> STRING .)
  ! reduce/reduce conflict for CLOSE_BRACKET resolved using rule 53 (datatype -> STRING .)
    CLOSE_BRACKET   reduce using rule 53 (datatype -> STRING .)
    COMMA           reduce using rule 53 (datatype -> STRING .)
    IGUALIGUAL      reduce using rule 115 (element -> STRING .)
    DIFERENTE       reduce using rule 115 (element -> STRING .)
    MAYORQUE        reduce using rule 115 (element -> STRING .)
    MAYORIGUALQUE   reduce using rule 115 (element -> STRING .)
    MENORQUE        reduce using rule 115 (element -> STRING .)
    MENORIGUALQUE   reduce using rule 115 (element -> STRING .)

  ! COMMA           [ reduce using rule 109 (item -> STRING .) ]
  ! CLOSE_BRACKET   [ reduce using rule 109 (item -> STRING .) ]


state 120

    (42) operations -> NAME .
    (45) operations -> NAME . operand number operations
    (47) operations -> NAME . operand number
    (48) operations -> NAME . operand NAME operations
    (50) operations -> NAME . SUMA SUMA
    (51) operations -> NAME . RESTA RESTA
    (111) item -> NAME .
    (117) element -> NAME .
    (57) operand -> . SUMA
    (58) operand -> . RESTA
    (59) operand -> . MULTIPLICACION
    (60) operand -> . DIVISION

  ! reduce/reduce conflict for COMMA resolved using rule 42 (operations -> NAME .)
  ! reduce/reduce conflict for CLOSE_BRACKET resolved using rule 42 (operations -> NAME .)
    CLOSE_BRACKET   reduce using rule 42 (operations -> NAME .)
    COMMA           reduce using rule 42 (operations -> NAME .)
    SUMA            shift and go to state 127
    RESTA           shift and go to state 128
    IGUALIGUAL      reduce using rule 117 (element -> NAME .)
    DIFERENTE       reduce using rule 117 (element -> NAME .)
    MAYORQUE        reduce using rule 117 (element -> NAME .)
    MAYORIGUALQUE   reduce using rule 117 (element -> NAME .)
    MENORQUE        reduce using rule 117 (element -> NAME .)
    MENORIGUALQUE   reduce using rule 117 (element -> NAME .)
    MULTIPLICACION  shift and go to state 124
    DIVISION        shift and go to state 125

  ! COMMA           [ reduce using rule 111 (item -> NAME .) ]
  ! CLOSE_BRACKET   [ reduce using rule 111 (item -> NAME .) ]

    operand                        shift and go to state 126

state 121

    (41) operations -> number operand . number
    (44) operations -> number operand . NAME operations
    (46) operations -> number operand . NAME
    (49) operations -> number operand . number operand operations
    (15) number -> . INTEGER
    (16) number -> . FLOAT
    (17) number -> . OPEN_PARENTHESIS RESTA INTEGER CLOSE_PARENTHESIS
    (18) number -> . OPEN_PARENTHESIS RESTA FLOAT CLOSE_PARENTHESIS

    NAME            shift and go to state 178
    INTEGER         shift and go to state 55
    FLOAT           shift and go to state 56
    OPEN_PARENTHESIS shift and go to state 57

    number                         shift and go to state 177

state 122

    (57) operand -> SUMA .

    NAME            reduce using rule 57 (operand -> SUMA .)
    INTEGER         reduce using rule 57 (operand -> SUMA .)
    FLOAT           reduce using rule 57 (operand -> SUMA .)
    OPEN_PARENTHESIS reduce using rule 57 (operand -> SUMA .)


state 123

    (58) operand -> RESTA .

    NAME            reduce using rule 58 (operand -> RESTA .)
    INTEGER         reduce using rule 58 (operand -> RESTA .)
    FLOAT           reduce using rule 58 (operand -> RESTA .)
    OPEN_PARENTHESIS reduce using rule 58 (operand -> RESTA .)


state 124

    (59) operand -> MULTIPLICACION .

    NAME            reduce using rule 59 (operand -> MULTIPLICACION .)
    INTEGER         reduce using rule 59 (operand -> MULTIPLICACION .)
    FLOAT           reduce using rule 59 (operand -> MULTIPLICACION .)
    OPEN_PARENTHESIS reduce using rule 59 (operand -> MULTIPLICACION .)


state 125

    (60) operand -> DIVISION .

    NAME            reduce using rule 60 (operand -> DIVISION .)
    INTEGER         reduce using rule 60 (operand -> DIVISION .)
    FLOAT           reduce using rule 60 (operand -> DIVISION .)
    OPEN_PARENTHESIS reduce using rule 60 (operand -> DIVISION .)


state 126

    (45) operations -> NAME operand . number operations
    (47) operations -> NAME operand . number
    (48) operations -> NAME operand . NAME operations
    (15) number -> . INTEGER
    (16) number -> . FLOAT
    (17) number -> . OPEN_PARENTHESIS RESTA INTEGER CLOSE_PARENTHESIS
    (18) number -> . OPEN_PARENTHESIS RESTA FLOAT CLOSE_PARENTHESIS

    NAME            shift and go to state 179
    INTEGER         shift and go to state 55
    FLOAT           shift and go to state 56
    OPEN_PARENTHESIS shift and go to state 57

    number                         shift and go to state 180

state 127

    (50) operations -> NAME SUMA . SUMA
    (57) operand -> SUMA .

    SUMA            shift and go to state 181
    NAME            reduce using rule 57 (operand -> SUMA .)
    INTEGER         reduce using rule 57 (operand -> SUMA .)
    FLOAT           reduce using rule 57 (operand -> SUMA .)
    OPEN_PARENTHESIS reduce using rule 57 (operand -> SUMA .)


state 128

    (51) operations -> NAME RESTA . RESTA
    (58) operand -> RESTA .

    RESTA           shift and go to state 182
    NAME            reduce using rule 58 (operand -> RESTA .)
    INTEGER         reduce using rule 58 (operand -> RESTA .)
    FLOAT           reduce using rule 58 (operand -> RESTA .)
    OPEN_PARENTHESIS reduce using rule 58 (operand -> RESTA .)


state 129

    (79) array -> OPEN_BRACKET items CLOSE_BRACKET . SEMICOLON

    SEMICOLON       shift and go to state 183


state 130

    (107) items -> item COMMA . items
    (106) items -> . item
    (107) items -> . item COMMA items
    (108) item -> . number
    (109) item -> . STRING
    (110) item -> . expBoolean
    (111) item -> . NAME
    (112) item -> . datatype
    (15) number -> . INTEGER
    (16) number -> . FLOAT
    (17) number -> . OPEN_PARENTHESIS RESTA INTEGER CLOSE_PARENTHESIS
    (18) number -> . OPEN_PARENTHESIS RESTA FLOAT CLOSE_PARENTHESIS
    (121) expBoolean -> . controlArg
    (122) expBoolean -> . bool
    (123) expBoolean -> . NOT expBoolean
    (124) expBoolean -> . expBoolean logicalOperator expBoolean
    (52) datatype -> . number
    (53) datatype -> . STRING
    (54) datatype -> . CHAR
    (55) datatype -> . operations
    (56) datatype -> . dataStruct
    (37) controlArg -> . element clause element
    (68) bool -> . TRUE
    (69) bool -> . FALSE
    (41) operations -> . number operand number
    (42) operations -> . NAME
    (43) operations -> . number
    (44) operations -> . number operand NAME operations
    (45) operations -> . NAME operand number operations
    (46) operations -> . number operand NAME
    (47) operations -> . NAME operand number
    (48) operations -> . NAME operand NAME operations
    (49) operations -> . number operand number operand operations
    (50) operations -> . NAME SUMA SUMA
    (51) operations -> . NAME RESTA RESTA
    (24) dataStruct -> . array
    (25) dataStruct -> . set
    (26) dataStruct -> . map
    (115) element -> . STRING
    (116) element -> . number
    (117) element -> . NAME
    (79) array -> . OPEN_BRACKET items CLOSE_BRACKET SEMICOLON
    (80) array -> . NEW ARRAY OPEN_PARENTHESIS items CLOSE_PARENTHESIS SEMICOLON
    (100) set -> . NEW SET OPEN_PARENTHESIS CLOSE_PARENTHESIS SEMICOLON
    (101) set -> . NEW SET OPEN_PARENTHESIS OPEN_BRACKET items CLOSE_BRACKET CLOSE_PARENTHESIS SEMICOLON
    (102) set -> . NEW SET OPEN_PARENTHESIS element CLOSE_PARENTHESIS SEMICOLON
    (81) map -> . iniciarMap
    (82) map -> . escribirMap
    (83) map -> . generarMap
    (84) iniciarMap -> . NEW MAP OPEN_PARENTHESIS CLOSE_PARENTHESIS SEMICOLON
    (85) escribirMap -> . OPEN_BRACE claveValor CLOSE_BRACE
    (89) generarMap -> . OPEN_BRACE tuplas CLOSE_BRACE

    STRING          shift and go to state 74
    NAME            shift and go to state 76
    INTEGER         shift and go to state 55
    FLOAT           shift and go to state 56
    OPEN_PARENTHESIS shift and go to state 57
    NOT             shift and go to state 80
    CHAR            shift and go to state 67
    TRUE            shift and go to state 82
    FALSE           shift and go to state 83
    OPEN_BRACKET    shift and go to state 30
    NEW             shift and go to state 31
    OPEN_BRACE      shift and go to state 26

    item                           shift and go to state 72
    items                          shift and go to state 184
    number                         shift and go to state 73
    expBoolean                     shift and go to state 75
    datatype                       shift and go to state 77
    controlArg                     shift and go to state 78
    bool                           shift and go to state 79
    operations                     shift and go to state 68
    dataStruct                     shift and go to state 69
    element                        shift and go to state 81
    array                          shift and go to state 17
    set                            shift and go to state 18
    map                            shift and go to state 19
    iniciarMap                     shift and go to state 32
    escribirMap                    shift and go to state 33
    generarMap                     shift and go to state 34

state 131

    (124) expBoolean -> expBoolean logicalOperator . expBoolean
    (121) expBoolean -> . controlArg
    (122) expBoolean -> . bool
    (123) expBoolean -> . NOT expBoolean
    (124) expBoolean -> . expBoolean logicalOperator expBoolean
    (37) controlArg -> . element clause element
    (68) bool -> . TRUE
    (69) bool -> . FALSE
    (115) element -> . STRING
    (116) element -> . number
    (117) element -> . NAME
    (15) number -> . INTEGER
    (16) number -> . FLOAT
    (17) number -> . OPEN_PARENTHESIS RESTA INTEGER CLOSE_PARENTHESIS
    (18) number -> . OPEN_PARENTHESIS RESTA FLOAT CLOSE_PARENTHESIS

    NOT             shift and go to state 80
    TRUE            shift and go to state 82
    FALSE           shift and go to state 83
    STRING          shift and go to state 52
    NAME            shift and go to state 54
    INTEGER         shift and go to state 55
    FLOAT           shift and go to state 56
    OPEN_PARENTHESIS shift and go to state 57

    expBoolean                     shift and go to state 185
    controlArg                     shift and go to state 78
    bool                           shift and go to state 79
    element                        shift and go to state 81
    number                         shift and go to state 53

state 132

    (119) logicalOperator -> AND .

    NOT             reduce using rule 119 (logicalOperator -> AND .)
    TRUE            reduce using rule 119 (logicalOperator -> AND .)
    FALSE           reduce using rule 119 (logicalOperator -> AND .)
    STRING          reduce using rule 119 (logicalOperator -> AND .)
    NAME            reduce using rule 119 (logicalOperator -> AND .)
    INTEGER         reduce using rule 119 (logicalOperator -> AND .)
    FLOAT           reduce using rule 119 (logicalOperator -> AND .)
    OPEN_PARENTHESIS reduce using rule 119 (logicalOperator -> AND .)


state 133

    (120) logicalOperator -> OR .

    NOT             reduce using rule 120 (logicalOperator -> OR .)
    TRUE            reduce using rule 120 (logicalOperator -> OR .)
    FALSE           reduce using rule 120 (logicalOperator -> OR .)
    STRING          reduce using rule 120 (logicalOperator -> OR .)
    NAME            reduce using rule 120 (logicalOperator -> OR .)
    INTEGER         reduce using rule 120 (logicalOperator -> OR .)
    FLOAT           reduce using rule 120 (logicalOperator -> OR .)
    OPEN_PARENTHESIS reduce using rule 120 (logicalOperator -> OR .)


state 134

    (123) expBoolean -> NOT expBoolean .
    (124) expBoolean -> expBoolean . logicalOperator expBoolean
    (119) logicalOperator -> . AND
    (120) logicalOperator -> . OR

  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
    COMMA           reduce using rule 123 (expBoolean -> NOT expBoolean .)
    CLOSE_BRACKET   reduce using rule 123 (expBoolean -> NOT expBoolean .)
    CLOSE_PARENTHESIS reduce using rule 123 (expBoolean -> NOT expBoolean .)
    SEMICOLON       reduce using rule 123 (expBoolean -> NOT expBoolean .)
    AND             shift and go to state 132
    OR              shift and go to state 133

  ! AND             [ reduce using rule 123 (expBoolean -> NOT expBoolean .) ]
  ! OR              [ reduce using rule 123 (expBoolean -> NOT expBoolean .) ]

    logicalOperator                shift and go to state 131

state 135

    (37) controlArg -> element clause . element
    (115) element -> . STRING
    (116) element -> . number
    (117) element -> . NAME
    (15) number -> . INTEGER
    (16) number -> . FLOAT
    (17) number -> . OPEN_PARENTHESIS RESTA INTEGER CLOSE_PARENTHESIS
    (18) number -> . OPEN_PARENTHESIS RESTA FLOAT CLOSE_PARENTHESIS

    STRING          shift and go to state 52
    NAME            shift and go to state 54
    INTEGER         shift and go to state 55
    FLOAT           shift and go to state 56
    OPEN_PARENTHESIS shift and go to state 57

    element                        shift and go to state 186
    number                         shift and go to state 53

state 136

    (73) clause -> IGUALIGUAL .

    STRING          reduce using rule 73 (clause -> IGUALIGUAL .)
    NAME            reduce using rule 73 (clause -> IGUALIGUAL .)
    INTEGER         reduce using rule 73 (clause -> IGUALIGUAL .)
    FLOAT           reduce using rule 73 (clause -> IGUALIGUAL .)
    OPEN_PARENTHESIS reduce using rule 73 (clause -> IGUALIGUAL .)


state 137

    (74) clause -> DIFERENTE .

    STRING          reduce using rule 74 (clause -> DIFERENTE .)
    NAME            reduce using rule 74 (clause -> DIFERENTE .)
    INTEGER         reduce using rule 74 (clause -> DIFERENTE .)
    FLOAT           reduce using rule 74 (clause -> DIFERENTE .)
    OPEN_PARENTHESIS reduce using rule 74 (clause -> DIFERENTE .)


state 138

    (75) clause -> MAYORQUE .

    STRING          reduce using rule 75 (clause -> MAYORQUE .)
    NAME            reduce using rule 75 (clause -> MAYORQUE .)
    INTEGER         reduce using rule 75 (clause -> MAYORQUE .)
    FLOAT           reduce using rule 75 (clause -> MAYORQUE .)
    OPEN_PARENTHESIS reduce using rule 75 (clause -> MAYORQUE .)


state 139

    (76) clause -> MAYORIGUALQUE .

    STRING          reduce using rule 76 (clause -> MAYORIGUALQUE .)
    NAME            reduce using rule 76 (clause -> MAYORIGUALQUE .)
    INTEGER         reduce using rule 76 (clause -> MAYORIGUALQUE .)
    FLOAT           reduce using rule 76 (clause -> MAYORIGUALQUE .)
    OPEN_PARENTHESIS reduce using rule 76 (clause -> MAYORIGUALQUE .)


state 140

    (77) clause -> MENORQUE .

    STRING          reduce using rule 77 (clause -> MENORQUE .)
    NAME            reduce using rule 77 (clause -> MENORQUE .)
    INTEGER         reduce using rule 77 (clause -> MENORQUE .)
    FLOAT           reduce using rule 77 (clause -> MENORQUE .)
    OPEN_PARENTHESIS reduce using rule 77 (clause -> MENORQUE .)


state 141

    (78) clause -> MENORIGUALQUE .

    STRING          reduce using rule 78 (clause -> MENORIGUALQUE .)
    NAME            reduce using rule 78 (clause -> MENORIGUALQUE .)
    INTEGER         reduce using rule 78 (clause -> MENORIGUALQUE .)
    FLOAT           reduce using rule 78 (clause -> MENORIGUALQUE .)
    OPEN_PARENTHESIS reduce using rule 78 (clause -> MENORIGUALQUE .)


state 142

    (80) array -> NEW ARRAY OPEN_PARENTHESIS . items CLOSE_PARENTHESIS SEMICOLON
    (106) items -> . item
    (107) items -> . item COMMA items
    (108) item -> . number
    (109) item -> . STRING
    (110) item -> . expBoolean
    (111) item -> . NAME
    (112) item -> . datatype
    (15) number -> . INTEGER
    (16) number -> . FLOAT
    (17) number -> . OPEN_PARENTHESIS RESTA INTEGER CLOSE_PARENTHESIS
    (18) number -> . OPEN_PARENTHESIS RESTA FLOAT CLOSE_PARENTHESIS
    (121) expBoolean -> . controlArg
    (122) expBoolean -> . bool
    (123) expBoolean -> . NOT expBoolean
    (124) expBoolean -> . expBoolean logicalOperator expBoolean
    (52) datatype -> . number
    (53) datatype -> . STRING
    (54) datatype -> . CHAR
    (55) datatype -> . operations
    (56) datatype -> . dataStruct
    (37) controlArg -> . element clause element
    (68) bool -> . TRUE
    (69) bool -> . FALSE
    (41) operations -> . number operand number
    (42) operations -> . NAME
    (43) operations -> . number
    (44) operations -> . number operand NAME operations
    (45) operations -> . NAME operand number operations
    (46) operations -> . number operand NAME
    (47) operations -> . NAME operand number
    (48) operations -> . NAME operand NAME operations
    (49) operations -> . number operand number operand operations
    (50) operations -> . NAME SUMA SUMA
    (51) operations -> . NAME RESTA RESTA
    (24) dataStruct -> . array
    (25) dataStruct -> . set
    (26) dataStruct -> . map
    (115) element -> . STRING
    (116) element -> . number
    (117) element -> . NAME
    (79) array -> . OPEN_BRACKET items CLOSE_BRACKET SEMICOLON
    (80) array -> . NEW ARRAY OPEN_PARENTHESIS items CLOSE_PARENTHESIS SEMICOLON
    (100) set -> . NEW SET OPEN_PARENTHESIS CLOSE_PARENTHESIS SEMICOLON
    (101) set -> . NEW SET OPEN_PARENTHESIS OPEN_BRACKET items CLOSE_BRACKET CLOSE_PARENTHESIS SEMICOLON
    (102) set -> . NEW SET OPEN_PARENTHESIS element CLOSE_PARENTHESIS SEMICOLON
    (81) map -> . iniciarMap
    (82) map -> . escribirMap
    (83) map -> . generarMap
    (84) iniciarMap -> . NEW MAP OPEN_PARENTHESIS CLOSE_PARENTHESIS SEMICOLON
    (85) escribirMap -> . OPEN_BRACE claveValor CLOSE_BRACE
    (89) generarMap -> . OPEN_BRACE tuplas CLOSE_BRACE

    STRING          shift and go to state 74
    NAME            shift and go to state 76
    INTEGER         shift and go to state 55
    FLOAT           shift and go to state 56
    OPEN_PARENTHESIS shift and go to state 57
    NOT             shift and go to state 80
    CHAR            shift and go to state 67
    TRUE            shift and go to state 82
    FALSE           shift and go to state 83
    OPEN_BRACKET    shift and go to state 30
    NEW             shift and go to state 31
    OPEN_BRACE      shift and go to state 26

    items                          shift and go to state 187
    item                           shift and go to state 72
    number                         shift and go to state 73
    expBoolean                     shift and go to state 75
    datatype                       shift and go to state 77
    controlArg                     shift and go to state 78
    bool                           shift and go to state 79
    operations                     shift and go to state 68
    dataStruct                     shift and go to state 69
    element                        shift and go to state 81
    array                          shift and go to state 17
    set                            shift and go to state 18
    map                            shift and go to state 19
    iniciarMap                     shift and go to state 32
    escribirMap                    shift and go to state 33
    generarMap                     shift and go to state 34

state 143

    (100) set -> NEW SET OPEN_PARENTHESIS . CLOSE_PARENTHESIS SEMICOLON
    (101) set -> NEW SET OPEN_PARENTHESIS . OPEN_BRACKET items CLOSE_BRACKET CLOSE_PARENTHESIS SEMICOLON
    (102) set -> NEW SET OPEN_PARENTHESIS . element CLOSE_PARENTHESIS SEMICOLON
    (115) element -> . STRING
    (116) element -> . number
    (117) element -> . NAME
    (15) number -> . INTEGER
    (16) number -> . FLOAT
    (17) number -> . OPEN_PARENTHESIS RESTA INTEGER CLOSE_PARENTHESIS
    (18) number -> . OPEN_PARENTHESIS RESTA FLOAT CLOSE_PARENTHESIS

    CLOSE_PARENTHESIS shift and go to state 188
    OPEN_BRACKET    shift and go to state 189
    STRING          shift and go to state 52
    NAME            shift and go to state 54
    INTEGER         shift and go to state 55
    FLOAT           shift and go to state 56
    OPEN_PARENTHESIS shift and go to state 57

    element                        shift and go to state 190
    number                         shift and go to state 53

state 144

    (84) iniciarMap -> NEW MAP OPEN_PARENTHESIS . CLOSE_PARENTHESIS SEMICOLON

    CLOSE_PARENTHESIS shift and go to state 191


state 145

    (27) while -> WHILE OPEN_PARENTHESIS controlArg . CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE

    CLOSE_PARENTHESIS shift and go to state 192


state 146

    (28) while -> WHILE OPEN_PARENTHESIS bool . CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE

    CLOSE_PARENTHESIS shift and go to state 193


state 147

    (38) for -> FOR OPEN_PARENTHESIS inicialization . SEMICOLON expBoolean SEMICOLON operations CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE

    SEMICOLON       shift and go to state 194


state 148

    (39) inicialization -> type . NAME IGUAL number

    NAME            shift and go to state 195


state 149

    (40) inicialization -> NAME . IGUAL number

    IGUAL           shift and go to state 196


state 150

    (31) if -> soloIf elseIf else .

    COMMENTS        reduce using rule 31 (if -> soloIf elseIf else .)
    NAME            reduce using rule 31 (if -> soloIf elseIf else .)
    PRINT           reduce using rule 31 (if -> soloIf elseIf else .)
    RETURN          reduce using rule 31 (if -> soloIf elseIf else .)
    FUNCTION        reduce using rule 31 (if -> soloIf elseIf else .)
    CONST           reduce using rule 31 (if -> soloIf elseIf else .)
    LET             reduce using rule 31 (if -> soloIf elseIf else .)
    VAR             reduce using rule 31 (if -> soloIf elseIf else .)
    OPEN_BRACKET    reduce using rule 31 (if -> soloIf elseIf else .)
    NEW             reduce using rule 31 (if -> soloIf elseIf else .)
    WHILE           reduce using rule 31 (if -> soloIf elseIf else .)
    FOR             reduce using rule 31 (if -> soloIf elseIf else .)
    OPEN_BRACE      reduce using rule 31 (if -> soloIf elseIf else .)
    IF              reduce using rule 31 (if -> soloIf elseIf else .)
    $end            reduce using rule 31 (if -> soloIf elseIf else .)
    CLOSE_BRACE     reduce using rule 31 (if -> soloIf elseIf else .)


state 151

    (34) elseIf -> ELSEIF OPEN_PARENTHESIS . controlArg CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE
    (35) elseIf -> ELSEIF OPEN_PARENTHESIS . controlArg CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE soloIf
    (37) controlArg -> . element clause element
    (115) element -> . STRING
    (116) element -> . number
    (117) element -> . NAME
    (15) number -> . INTEGER
    (16) number -> . FLOAT
    (17) number -> . OPEN_PARENTHESIS RESTA INTEGER CLOSE_PARENTHESIS
    (18) number -> . OPEN_PARENTHESIS RESTA FLOAT CLOSE_PARENTHESIS

    STRING          shift and go to state 52
    NAME            shift and go to state 54
    INTEGER         shift and go to state 55
    FLOAT           shift and go to state 56
    OPEN_PARENTHESIS shift and go to state 57

    controlArg                     shift and go to state 197
    element                        shift and go to state 81
    number                         shift and go to state 53

state 152

    (36) else -> ELSE OPEN_BRACE . expression CLOSE_BRACE
    (1) expression -> . semiExpression
    (2) expression -> . semiExpression expression
    (3) semiExpression -> . variable
    (4) semiExpression -> . dataStruct
    (5) semiExpression -> . controlStruct
    (6) semiExpression -> . methodsSet
    (7) semiExpression -> . mapFunctions
    (8) semiExpression -> . arrayFn
    (9) semiExpression -> . declaration
    (10) semiExpression -> . print
    (11) semiExpression -> . return
    (12) semiExpression -> . function
    (13) semiExpression -> . COMMENTS
    (14) semiExpression -> . asigOp
    (19) variable -> . type NAME IGUAL datatype SEMICOLON
    (20) variable -> . NAME IGUAL datatype SEMICOLON
    (24) dataStruct -> . array
    (25) dataStruct -> . set
    (26) dataStruct -> . map
    (21) controlStruct -> . while
    (22) controlStruct -> . for
    (23) controlStruct -> . if
    (103) methodsSet -> . NAME POINT ADD OPEN_PARENTHESIS element CLOSE_PARENTHESIS SEMICOLON
    (104) methodsSet -> . NAME POINT DELETE OPEN_PARENTHESIS element CLOSE_PARENTHESIS SEMICOLON
    (105) methodsSet -> . NAME POINT CLEAR OPEN_PARENTHESIS CLOSE_PARENTHESIS SEMICOLON
    (94) mapFunctions -> . NAME POINT CLEAR OPEN_PARENTHESIS CLOSE_PARENTHESIS SEMICOLON
    (95) mapFunctions -> . NAME POINT GET OPEN_PARENTHESIS clave CLOSE_PARENTHESIS SEMICOLON
    (96) mapFunctions -> . NAME POINT HAS OPEN_PARENTHESIS clave CLOSE_PARENTHESIS SEMICOLON
    (97) arrayFn -> . NAME POINT POP OPEN_PARENTHESIS CLOSE_PARENTHESIS SEMICOLON
    (98) arrayFn -> . NAME POINT PUSH OPEN_PARENTHESIS element CLOSE_PARENTHESIS SEMICOLON
    (99) arrayFn -> . NAME POINT UNSHIFT OPEN_PARENTHESIS element CLOSE_PARENTHESIS SEMICOLON
    (118) declaration -> . NAME IGUAL element SEMICOLON
    (130) print -> . PRINT OPEN_PARENTHESIS CLOSE_PARENTHESIS SEMICOLON
    (129) return -> . RETURN element SEMICOLON
    (125) function -> . FUNCTION NAME OPEN_PARENTHESIS CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE
    (126) function -> . FUNCTION NAME OPEN_PARENTHESIS parameter CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE
    (67) asigOp -> . NAME operadorAsig number SEMICOLON
    (70) type -> . CONST
    (71) type -> . LET
    (72) type -> . VAR
    (79) array -> . OPEN_BRACKET items CLOSE_BRACKET SEMICOLON
    (80) array -> . NEW ARRAY OPEN_PARENTHESIS items CLOSE_PARENTHESIS SEMICOLON
    (100) set -> . NEW SET OPEN_PARENTHESIS CLOSE_PARENTHESIS SEMICOLON
    (101) set -> . NEW SET OPEN_PARENTHESIS OPEN_BRACKET items CLOSE_BRACKET CLOSE_PARENTHESIS SEMICOLON
    (102) set -> . NEW SET OPEN_PARENTHESIS element CLOSE_PARENTHESIS SEMICOLON
    (81) map -> . iniciarMap
    (82) map -> . escribirMap
    (83) map -> . generarMap
    (27) while -> . WHILE OPEN_PARENTHESIS controlArg CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE
    (28) while -> . WHILE OPEN_PARENTHESIS bool CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE
    (38) for -> . FOR OPEN_PARENTHESIS inicialization SEMICOLON expBoolean SEMICOLON operations CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE
    (29) if -> . soloIf
    (30) if -> . soloIf elseIf
    (31) if -> . soloIf elseIf else
    (32) if -> . soloIf else
    (84) iniciarMap -> . NEW MAP OPEN_PARENTHESIS CLOSE_PARENTHESIS SEMICOLON
    (85) escribirMap -> . OPEN_BRACE claveValor CLOSE_BRACE
    (89) generarMap -> . OPEN_BRACE tuplas CLOSE_BRACE
    (33) soloIf -> . IF OPEN_PARENTHESIS controlArg CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE

    COMMENTS        shift and go to state 13
    NAME            shift and go to state 16
    PRINT           shift and go to state 23
    RETURN          shift and go to state 24
    FUNCTION        shift and go to state 25
    CONST           shift and go to state 27
    LET             shift and go to state 28
    VAR             shift and go to state 29
    OPEN_BRACKET    shift and go to state 30
    NEW             shift and go to state 31
    WHILE           shift and go to state 35
    FOR             shift and go to state 36
    OPEN_BRACE      shift and go to state 26
    IF              shift and go to state 38

    expression                     shift and go to state 198
    semiExpression                 shift and go to state 2
    variable                       shift and go to state 3
    dataStruct                     shift and go to state 4
    controlStruct                  shift and go to state 5
    methodsSet                     shift and go to state 6
    mapFunctions                   shift and go to state 7
    arrayFn                        shift and go to state 8
    declaration                    shift and go to state 9
    print                          shift and go to state 10
    return                         shift and go to state 11
    function                       shift and go to state 12
    asigOp                         shift and go to state 14
    type                           shift and go to state 15
    array                          shift and go to state 17
    set                            shift and go to state 18
    map                            shift and go to state 19
    while                          shift and go to state 20
    for                            shift and go to state 21
    if                             shift and go to state 22
    iniciarMap                     shift and go to state 32
    escribirMap                    shift and go to state 33
    generarMap                     shift and go to state 34
    soloIf                         shift and go to state 37

state 153

    (33) soloIf -> IF OPEN_PARENTHESIS controlArg . CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE

    CLOSE_PARENTHESIS shift and go to state 199


state 154

    (19) variable -> type NAME IGUAL datatype . SEMICOLON

    SEMICOLON       shift and go to state 200


state 155

    (20) variable -> NAME IGUAL datatype SEMICOLON .

    COMMENTS        reduce using rule 20 (variable -> NAME IGUAL datatype SEMICOLON .)
    NAME            reduce using rule 20 (variable -> NAME IGUAL datatype SEMICOLON .)
    PRINT           reduce using rule 20 (variable -> NAME IGUAL datatype SEMICOLON .)
    RETURN          reduce using rule 20 (variable -> NAME IGUAL datatype SEMICOLON .)
    FUNCTION        reduce using rule 20 (variable -> NAME IGUAL datatype SEMICOLON .)
    CONST           reduce using rule 20 (variable -> NAME IGUAL datatype SEMICOLON .)
    LET             reduce using rule 20 (variable -> NAME IGUAL datatype SEMICOLON .)
    VAR             reduce using rule 20 (variable -> NAME IGUAL datatype SEMICOLON .)
    OPEN_BRACKET    reduce using rule 20 (variable -> NAME IGUAL datatype SEMICOLON .)
    NEW             reduce using rule 20 (variable -> NAME IGUAL datatype SEMICOLON .)
    WHILE           reduce using rule 20 (variable -> NAME IGUAL datatype SEMICOLON .)
    FOR             reduce using rule 20 (variable -> NAME IGUAL datatype SEMICOLON .)
    OPEN_BRACE      reduce using rule 20 (variable -> NAME IGUAL datatype SEMICOLON .)
    IF              reduce using rule 20 (variable -> NAME IGUAL datatype SEMICOLON .)
    $end            reduce using rule 20 (variable -> NAME IGUAL datatype SEMICOLON .)
    CLOSE_BRACE     reduce using rule 20 (variable -> NAME IGUAL datatype SEMICOLON .)


state 156

    (118) declaration -> NAME IGUAL element SEMICOLON .

    COMMENTS        reduce using rule 118 (declaration -> NAME IGUAL element SEMICOLON .)
    NAME            reduce using rule 118 (declaration -> NAME IGUAL element SEMICOLON .)
    PRINT           reduce using rule 118 (declaration -> NAME IGUAL element SEMICOLON .)
    RETURN          reduce using rule 118 (declaration -> NAME IGUAL element SEMICOLON .)
    FUNCTION        reduce using rule 118 (declaration -> NAME IGUAL element SEMICOLON .)
    CONST           reduce using rule 118 (declaration -> NAME IGUAL element SEMICOLON .)
    LET             reduce using rule 118 (declaration -> NAME IGUAL element SEMICOLON .)
    VAR             reduce using rule 118 (declaration -> NAME IGUAL element SEMICOLON .)
    OPEN_BRACKET    reduce using rule 118 (declaration -> NAME IGUAL element SEMICOLON .)
    NEW             reduce using rule 118 (declaration -> NAME IGUAL element SEMICOLON .)
    WHILE           reduce using rule 118 (declaration -> NAME IGUAL element SEMICOLON .)
    FOR             reduce using rule 118 (declaration -> NAME IGUAL element SEMICOLON .)
    OPEN_BRACE      reduce using rule 118 (declaration -> NAME IGUAL element SEMICOLON .)
    IF              reduce using rule 118 (declaration -> NAME IGUAL element SEMICOLON .)
    $end            reduce using rule 118 (declaration -> NAME IGUAL element SEMICOLON .)
    CLOSE_BRACE     reduce using rule 118 (declaration -> NAME IGUAL element SEMICOLON .)


state 157

    (103) methodsSet -> NAME POINT ADD OPEN_PARENTHESIS . element CLOSE_PARENTHESIS SEMICOLON
    (115) element -> . STRING
    (116) element -> . number
    (117) element -> . NAME
    (15) number -> . INTEGER
    (16) number -> . FLOAT
    (17) number -> . OPEN_PARENTHESIS RESTA INTEGER CLOSE_PARENTHESIS
    (18) number -> . OPEN_PARENTHESIS RESTA FLOAT CLOSE_PARENTHESIS

    STRING          shift and go to state 52
    NAME            shift and go to state 54
    INTEGER         shift and go to state 55
    FLOAT           shift and go to state 56
    OPEN_PARENTHESIS shift and go to state 57

    element                        shift and go to state 201
    number                         shift and go to state 53

state 158

    (104) methodsSet -> NAME POINT DELETE OPEN_PARENTHESIS . element CLOSE_PARENTHESIS SEMICOLON
    (115) element -> . STRING
    (116) element -> . number
    (117) element -> . NAME
    (15) number -> . INTEGER
    (16) number -> . FLOAT
    (17) number -> . OPEN_PARENTHESIS RESTA INTEGER CLOSE_PARENTHESIS
    (18) number -> . OPEN_PARENTHESIS RESTA FLOAT CLOSE_PARENTHESIS

    STRING          shift and go to state 52
    NAME            shift and go to state 54
    INTEGER         shift and go to state 55
    FLOAT           shift and go to state 56
    OPEN_PARENTHESIS shift and go to state 57

    element                        shift and go to state 202
    number                         shift and go to state 53

state 159

    (105) methodsSet -> NAME POINT CLEAR OPEN_PARENTHESIS . CLOSE_PARENTHESIS SEMICOLON
    (94) mapFunctions -> NAME POINT CLEAR OPEN_PARENTHESIS . CLOSE_PARENTHESIS SEMICOLON

    CLOSE_PARENTHESIS shift and go to state 203


state 160

    (95) mapFunctions -> NAME POINT GET OPEN_PARENTHESIS . clave CLOSE_PARENTHESIS SEMICOLON
    (88) clave -> . datatype
    (52) datatype -> . number
    (53) datatype -> . STRING
    (54) datatype -> . CHAR
    (55) datatype -> . operations
    (56) datatype -> . dataStruct
    (15) number -> . INTEGER
    (16) number -> . FLOAT
    (17) number -> . OPEN_PARENTHESIS RESTA INTEGER CLOSE_PARENTHESIS
    (18) number -> . OPEN_PARENTHESIS RESTA FLOAT CLOSE_PARENTHESIS
    (41) operations -> . number operand number
    (42) operations -> . NAME
    (43) operations -> . number
    (44) operations -> . number operand NAME operations
    (45) operations -> . NAME operand number operations
    (46) operations -> . number operand NAME
    (47) operations -> . NAME operand number
    (48) operations -> . NAME operand NAME operations
    (49) operations -> . number operand number operand operations
    (50) operations -> . NAME SUMA SUMA
    (51) operations -> . NAME RESTA RESTA
    (24) dataStruct -> . array
    (25) dataStruct -> . set
    (26) dataStruct -> . map
    (79) array -> . OPEN_BRACKET items CLOSE_BRACKET SEMICOLON
    (80) array -> . NEW ARRAY OPEN_PARENTHESIS items CLOSE_PARENTHESIS SEMICOLON
    (100) set -> . NEW SET OPEN_PARENTHESIS CLOSE_PARENTHESIS SEMICOLON
    (101) set -> . NEW SET OPEN_PARENTHESIS OPEN_BRACKET items CLOSE_BRACKET CLOSE_PARENTHESIS SEMICOLON
    (102) set -> . NEW SET OPEN_PARENTHESIS element CLOSE_PARENTHESIS SEMICOLON
    (81) map -> . iniciarMap
    (82) map -> . escribirMap
    (83) map -> . generarMap
    (84) iniciarMap -> . NEW MAP OPEN_PARENTHESIS CLOSE_PARENTHESIS SEMICOLON
    (85) escribirMap -> . OPEN_BRACE claveValor CLOSE_BRACE
    (89) generarMap -> . OPEN_BRACE tuplas CLOSE_BRACE

    STRING          shift and go to state 66
    CHAR            shift and go to state 67
    INTEGER         shift and go to state 55
    FLOAT           shift and go to state 56
    OPEN_PARENTHESIS shift and go to state 57
    NAME            shift and go to state 70
    OPEN_BRACKET    shift and go to state 30
    NEW             shift and go to state 31
    OPEN_BRACE      shift and go to state 26

    clave                          shift and go to state 204
    datatype                       shift and go to state 62
    number                         shift and go to state 65
    operations                     shift and go to state 68
    dataStruct                     shift and go to state 69
    array                          shift and go to state 17
    set                            shift and go to state 18
    map                            shift and go to state 19
    iniciarMap                     shift and go to state 32
    escribirMap                    shift and go to state 33
    generarMap                     shift and go to state 34

state 161

    (96) mapFunctions -> NAME POINT HAS OPEN_PARENTHESIS . clave CLOSE_PARENTHESIS SEMICOLON
    (88) clave -> . datatype
    (52) datatype -> . number
    (53) datatype -> . STRING
    (54) datatype -> . CHAR
    (55) datatype -> . operations
    (56) datatype -> . dataStruct
    (15) number -> . INTEGER
    (16) number -> . FLOAT
    (17) number -> . OPEN_PARENTHESIS RESTA INTEGER CLOSE_PARENTHESIS
    (18) number -> . OPEN_PARENTHESIS RESTA FLOAT CLOSE_PARENTHESIS
    (41) operations -> . number operand number
    (42) operations -> . NAME
    (43) operations -> . number
    (44) operations -> . number operand NAME operations
    (45) operations -> . NAME operand number operations
    (46) operations -> . number operand NAME
    (47) operations -> . NAME operand number
    (48) operations -> . NAME operand NAME operations
    (49) operations -> . number operand number operand operations
    (50) operations -> . NAME SUMA SUMA
    (51) operations -> . NAME RESTA RESTA
    (24) dataStruct -> . array
    (25) dataStruct -> . set
    (26) dataStruct -> . map
    (79) array -> . OPEN_BRACKET items CLOSE_BRACKET SEMICOLON
    (80) array -> . NEW ARRAY OPEN_PARENTHESIS items CLOSE_PARENTHESIS SEMICOLON
    (100) set -> . NEW SET OPEN_PARENTHESIS CLOSE_PARENTHESIS SEMICOLON
    (101) set -> . NEW SET OPEN_PARENTHESIS OPEN_BRACKET items CLOSE_BRACKET CLOSE_PARENTHESIS SEMICOLON
    (102) set -> . NEW SET OPEN_PARENTHESIS element CLOSE_PARENTHESIS SEMICOLON
    (81) map -> . iniciarMap
    (82) map -> . escribirMap
    (83) map -> . generarMap
    (84) iniciarMap -> . NEW MAP OPEN_PARENTHESIS CLOSE_PARENTHESIS SEMICOLON
    (85) escribirMap -> . OPEN_BRACE claveValor CLOSE_BRACE
    (89) generarMap -> . OPEN_BRACE tuplas CLOSE_BRACE

    STRING          shift and go to state 66
    CHAR            shift and go to state 67
    INTEGER         shift and go to state 55
    FLOAT           shift and go to state 56
    OPEN_PARENTHESIS shift and go to state 57
    NAME            shift and go to state 70
    OPEN_BRACKET    shift and go to state 30
    NEW             shift and go to state 31
    OPEN_BRACE      shift and go to state 26

    clave                          shift and go to state 205
    datatype                       shift and go to state 62
    number                         shift and go to state 65
    operations                     shift and go to state 68
    dataStruct                     shift and go to state 69
    array                          shift and go to state 17
    set                            shift and go to state 18
    map                            shift and go to state 19
    iniciarMap                     shift and go to state 32
    escribirMap                    shift and go to state 33
    generarMap                     shift and go to state 34

state 162

    (97) arrayFn -> NAME POINT POP OPEN_PARENTHESIS . CLOSE_PARENTHESIS SEMICOLON

    CLOSE_PARENTHESIS shift and go to state 206


state 163

    (98) arrayFn -> NAME POINT PUSH OPEN_PARENTHESIS . element CLOSE_PARENTHESIS SEMICOLON
    (115) element -> . STRING
    (116) element -> . number
    (117) element -> . NAME
    (15) number -> . INTEGER
    (16) number -> . FLOAT
    (17) number -> . OPEN_PARENTHESIS RESTA INTEGER CLOSE_PARENTHESIS
    (18) number -> . OPEN_PARENTHESIS RESTA FLOAT CLOSE_PARENTHESIS

    STRING          shift and go to state 52
    NAME            shift and go to state 54
    INTEGER         shift and go to state 55
    FLOAT           shift and go to state 56
    OPEN_PARENTHESIS shift and go to state 57

    element                        shift and go to state 207
    number                         shift and go to state 53

state 164

    (99) arrayFn -> NAME POINT UNSHIFT OPEN_PARENTHESIS . element CLOSE_PARENTHESIS SEMICOLON
    (115) element -> . STRING
    (116) element -> . number
    (117) element -> . NAME
    (15) number -> . INTEGER
    (16) number -> . FLOAT
    (17) number -> . OPEN_PARENTHESIS RESTA INTEGER CLOSE_PARENTHESIS
    (18) number -> . OPEN_PARENTHESIS RESTA FLOAT CLOSE_PARENTHESIS

    STRING          shift and go to state 52
    NAME            shift and go to state 54
    INTEGER         shift and go to state 55
    FLOAT           shift and go to state 56
    OPEN_PARENTHESIS shift and go to state 57

    element                        shift and go to state 208
    number                         shift and go to state 53

state 165

    (67) asigOp -> NAME operadorAsig number SEMICOLON .

    COMMENTS        reduce using rule 67 (asigOp -> NAME operadorAsig number SEMICOLON .)
    NAME            reduce using rule 67 (asigOp -> NAME operadorAsig number SEMICOLON .)
    PRINT           reduce using rule 67 (asigOp -> NAME operadorAsig number SEMICOLON .)
    RETURN          reduce using rule 67 (asigOp -> NAME operadorAsig number SEMICOLON .)
    FUNCTION        reduce using rule 67 (asigOp -> NAME operadorAsig number SEMICOLON .)
    CONST           reduce using rule 67 (asigOp -> NAME operadorAsig number SEMICOLON .)
    LET             reduce using rule 67 (asigOp -> NAME operadorAsig number SEMICOLON .)
    VAR             reduce using rule 67 (asigOp -> NAME operadorAsig number SEMICOLON .)
    OPEN_BRACKET    reduce using rule 67 (asigOp -> NAME operadorAsig number SEMICOLON .)
    NEW             reduce using rule 67 (asigOp -> NAME operadorAsig number SEMICOLON .)
    WHILE           reduce using rule 67 (asigOp -> NAME operadorAsig number SEMICOLON .)
    FOR             reduce using rule 67 (asigOp -> NAME operadorAsig number SEMICOLON .)
    OPEN_BRACE      reduce using rule 67 (asigOp -> NAME operadorAsig number SEMICOLON .)
    IF              reduce using rule 67 (asigOp -> NAME operadorAsig number SEMICOLON .)
    $end            reduce using rule 67 (asigOp -> NAME operadorAsig number SEMICOLON .)
    CLOSE_BRACE     reduce using rule 67 (asigOp -> NAME operadorAsig number SEMICOLON .)


state 166

    (130) print -> PRINT OPEN_PARENTHESIS CLOSE_PARENTHESIS SEMICOLON .

    COMMENTS        reduce using rule 130 (print -> PRINT OPEN_PARENTHESIS CLOSE_PARENTHESIS SEMICOLON .)
    NAME            reduce using rule 130 (print -> PRINT OPEN_PARENTHESIS CLOSE_PARENTHESIS SEMICOLON .)
    PRINT           reduce using rule 130 (print -> PRINT OPEN_PARENTHESIS CLOSE_PARENTHESIS SEMICOLON .)
    RETURN          reduce using rule 130 (print -> PRINT OPEN_PARENTHESIS CLOSE_PARENTHESIS SEMICOLON .)
    FUNCTION        reduce using rule 130 (print -> PRINT OPEN_PARENTHESIS CLOSE_PARENTHESIS SEMICOLON .)
    CONST           reduce using rule 130 (print -> PRINT OPEN_PARENTHESIS CLOSE_PARENTHESIS SEMICOLON .)
    LET             reduce using rule 130 (print -> PRINT OPEN_PARENTHESIS CLOSE_PARENTHESIS SEMICOLON .)
    VAR             reduce using rule 130 (print -> PRINT OPEN_PARENTHESIS CLOSE_PARENTHESIS SEMICOLON .)
    OPEN_BRACKET    reduce using rule 130 (print -> PRINT OPEN_PARENTHESIS CLOSE_PARENTHESIS SEMICOLON .)
    NEW             reduce using rule 130 (print -> PRINT OPEN_PARENTHESIS CLOSE_PARENTHESIS SEMICOLON .)
    WHILE           reduce using rule 130 (print -> PRINT OPEN_PARENTHESIS CLOSE_PARENTHESIS SEMICOLON .)
    FOR             reduce using rule 130 (print -> PRINT OPEN_PARENTHESIS CLOSE_PARENTHESIS SEMICOLON .)
    OPEN_BRACE      reduce using rule 130 (print -> PRINT OPEN_PARENTHESIS CLOSE_PARENTHESIS SEMICOLON .)
    IF              reduce using rule 130 (print -> PRINT OPEN_PARENTHESIS CLOSE_PARENTHESIS SEMICOLON .)
    $end            reduce using rule 130 (print -> PRINT OPEN_PARENTHESIS CLOSE_PARENTHESIS SEMICOLON .)
    CLOSE_BRACE     reduce using rule 130 (print -> PRINT OPEN_PARENTHESIS CLOSE_PARENTHESIS SEMICOLON .)


state 167

    (17) number -> OPEN_PARENTHESIS RESTA INTEGER . CLOSE_PARENTHESIS

    CLOSE_PARENTHESIS shift and go to state 209


state 168

    (18) number -> OPEN_PARENTHESIS RESTA FLOAT . CLOSE_PARENTHESIS

    CLOSE_PARENTHESIS shift and go to state 210


state 169

    (125) function -> FUNCTION NAME OPEN_PARENTHESIS CLOSE_PARENTHESIS . OPEN_BRACE expression CLOSE_BRACE

    OPEN_BRACE      shift and go to state 211


state 170

    (126) function -> FUNCTION NAME OPEN_PARENTHESIS parameter . CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE

    CLOSE_PARENTHESIS shift and go to state 212


state 171

    (127) parameter -> element .
    (128) parameter -> element . parameter
    (127) parameter -> . element
    (128) parameter -> . element parameter
    (115) element -> . STRING
    (116) element -> . number
    (117) element -> . NAME
    (15) number -> . INTEGER
    (16) number -> . FLOAT
    (17) number -> . OPEN_PARENTHESIS RESTA INTEGER CLOSE_PARENTHESIS
    (18) number -> . OPEN_PARENTHESIS RESTA FLOAT CLOSE_PARENTHESIS

    CLOSE_PARENTHESIS reduce using rule 127 (parameter -> element .)
    STRING          shift and go to state 52
    NAME            shift and go to state 54
    INTEGER         shift and go to state 55
    FLOAT           shift and go to state 56
    OPEN_PARENTHESIS shift and go to state 57

    element                        shift and go to state 171
    parameter                      shift and go to state 213
    number                         shift and go to state 53

state 172

    (86) claveValor -> clave COLON datatype .
    (87) claveValor -> clave COLON datatype . COMMA claveValor

    CLOSE_BRACE     reduce using rule 86 (claveValor -> clave COLON datatype .)
    COMMA           shift and go to state 214


state 173

    (91) tuplas -> tupla COMMA tuplas .

    CLOSE_BRACE     reduce using rule 91 (tuplas -> tupla COMMA tuplas .)


state 174

    (92) tupla -> OPEN_BRACKET . datatype CLOSE_BRACKET SEMICOLON
    (93) tupla -> OPEN_BRACKET . datatype COMMA datatype CLOSE_BRACKET SEMICOLON
    (52) datatype -> . number
    (53) datatype -> . STRING
    (54) datatype -> . CHAR
    (55) datatype -> . operations
    (56) datatype -> . dataStruct
    (15) number -> . INTEGER
    (16) number -> . FLOAT
    (17) number -> . OPEN_PARENTHESIS RESTA INTEGER CLOSE_PARENTHESIS
    (18) number -> . OPEN_PARENTHESIS RESTA FLOAT CLOSE_PARENTHESIS
    (41) operations -> . number operand number
    (42) operations -> . NAME
    (43) operations -> . number
    (44) operations -> . number operand NAME operations
    (45) operations -> . NAME operand number operations
    (46) operations -> . number operand NAME
    (47) operations -> . NAME operand number
    (48) operations -> . NAME operand NAME operations
    (49) operations -> . number operand number operand operations
    (50) operations -> . NAME SUMA SUMA
    (51) operations -> . NAME RESTA RESTA
    (24) dataStruct -> . array
    (25) dataStruct -> . set
    (26) dataStruct -> . map
    (79) array -> . OPEN_BRACKET items CLOSE_BRACKET SEMICOLON
    (80) array -> . NEW ARRAY OPEN_PARENTHESIS items CLOSE_PARENTHESIS SEMICOLON
    (100) set -> . NEW SET OPEN_PARENTHESIS CLOSE_PARENTHESIS SEMICOLON
    (101) set -> . NEW SET OPEN_PARENTHESIS OPEN_BRACKET items CLOSE_BRACKET CLOSE_PARENTHESIS SEMICOLON
    (102) set -> . NEW SET OPEN_PARENTHESIS element CLOSE_PARENTHESIS SEMICOLON
    (81) map -> . iniciarMap
    (82) map -> . escribirMap
    (83) map -> . generarMap
    (84) iniciarMap -> . NEW MAP OPEN_PARENTHESIS CLOSE_PARENTHESIS SEMICOLON
    (85) escribirMap -> . OPEN_BRACE claveValor CLOSE_BRACE
    (89) generarMap -> . OPEN_BRACE tuplas CLOSE_BRACE

    STRING          shift and go to state 66
    CHAR            shift and go to state 67
    INTEGER         shift and go to state 55
    FLOAT           shift and go to state 56
    OPEN_PARENTHESIS shift and go to state 57
    NAME            shift and go to state 70
    OPEN_BRACKET    shift and go to state 30
    NEW             shift and go to state 31
    OPEN_BRACE      shift and go to state 26

    datatype                       shift and go to state 215
    number                         shift and go to state 65
    operations                     shift and go to state 68
    dataStruct                     shift and go to state 69
    array                          shift and go to state 17
    set                            shift and go to state 18
    map                            shift and go to state 19
    iniciarMap                     shift and go to state 32
    escribirMap                    shift and go to state 33
    generarMap                     shift and go to state 34

state 175

    (92) tupla -> OPEN_BRACKET datatype CLOSE_BRACKET . SEMICOLON

    SEMICOLON       shift and go to state 216


state 176

    (93) tupla -> OPEN_BRACKET datatype COMMA . datatype CLOSE_BRACKET SEMICOLON
    (52) datatype -> . number
    (53) datatype -> . STRING
    (54) datatype -> . CHAR
    (55) datatype -> . operations
    (56) datatype -> . dataStruct
    (15) number -> . INTEGER
    (16) number -> . FLOAT
    (17) number -> . OPEN_PARENTHESIS RESTA INTEGER CLOSE_PARENTHESIS
    (18) number -> . OPEN_PARENTHESIS RESTA FLOAT CLOSE_PARENTHESIS
    (41) operations -> . number operand number
    (42) operations -> . NAME
    (43) operations -> . number
    (44) operations -> . number operand NAME operations
    (45) operations -> . NAME operand number operations
    (46) operations -> . number operand NAME
    (47) operations -> . NAME operand number
    (48) operations -> . NAME operand NAME operations
    (49) operations -> . number operand number operand operations
    (50) operations -> . NAME SUMA SUMA
    (51) operations -> . NAME RESTA RESTA
    (24) dataStruct -> . array
    (25) dataStruct -> . set
    (26) dataStruct -> . map
    (79) array -> . OPEN_BRACKET items CLOSE_BRACKET SEMICOLON
    (80) array -> . NEW ARRAY OPEN_PARENTHESIS items CLOSE_PARENTHESIS SEMICOLON
    (100) set -> . NEW SET OPEN_PARENTHESIS CLOSE_PARENTHESIS SEMICOLON
    (101) set -> . NEW SET OPEN_PARENTHESIS OPEN_BRACKET items CLOSE_BRACKET CLOSE_PARENTHESIS SEMICOLON
    (102) set -> . NEW SET OPEN_PARENTHESIS element CLOSE_PARENTHESIS SEMICOLON
    (81) map -> . iniciarMap
    (82) map -> . escribirMap
    (83) map -> . generarMap
    (84) iniciarMap -> . NEW MAP OPEN_PARENTHESIS CLOSE_PARENTHESIS SEMICOLON
    (85) escribirMap -> . OPEN_BRACE claveValor CLOSE_BRACE
    (89) generarMap -> . OPEN_BRACE tuplas CLOSE_BRACE

    STRING          shift and go to state 66
    CHAR            shift and go to state 67
    INTEGER         shift and go to state 55
    FLOAT           shift and go to state 56
    OPEN_PARENTHESIS shift and go to state 57
    NAME            shift and go to state 70
    OPEN_BRACKET    shift and go to state 30
    NEW             shift and go to state 31
    OPEN_BRACE      shift and go to state 26

    datatype                       shift and go to state 217
    number                         shift and go to state 65
    operations                     shift and go to state 68
    dataStruct                     shift and go to state 69
    array                          shift and go to state 17
    set                            shift and go to state 18
    map                            shift and go to state 19
    iniciarMap                     shift and go to state 32
    escribirMap                    shift and go to state 33
    generarMap                     shift and go to state 34

state 177

    (41) operations -> number operand number .
    (49) operations -> number operand number . operand operations
    (57) operand -> . SUMA
    (58) operand -> . RESTA
    (59) operand -> . MULTIPLICACION
    (60) operand -> . DIVISION

    COLON           reduce using rule 41 (operations -> number operand number .)
    COMMA           reduce using rule 41 (operations -> number operand number .)
    CLOSE_BRACKET   reduce using rule 41 (operations -> number operand number .)
    SEMICOLON       reduce using rule 41 (operations -> number operand number .)
    CLOSE_BRACE     reduce using rule 41 (operations -> number operand number .)
    CLOSE_PARENTHESIS reduce using rule 41 (operations -> number operand number .)
    SUMA            shift and go to state 122
    RESTA           shift and go to state 123
    MULTIPLICACION  shift and go to state 124
    DIVISION        shift and go to state 125

    operand                        shift and go to state 218

state 178

    (44) operations -> number operand NAME . operations
    (46) operations -> number operand NAME .
    (41) operations -> . number operand number
    (42) operations -> . NAME
    (43) operations -> . number
    (44) operations -> . number operand NAME operations
    (45) operations -> . NAME operand number operations
    (46) operations -> . number operand NAME
    (47) operations -> . NAME operand number
    (48) operations -> . NAME operand NAME operations
    (49) operations -> . number operand number operand operations
    (50) operations -> . NAME SUMA SUMA
    (51) operations -> . NAME RESTA RESTA
    (15) number -> . INTEGER
    (16) number -> . FLOAT
    (17) number -> . OPEN_PARENTHESIS RESTA INTEGER CLOSE_PARENTHESIS
    (18) number -> . OPEN_PARENTHESIS RESTA FLOAT CLOSE_PARENTHESIS

    COLON           reduce using rule 46 (operations -> number operand NAME .)
    COMMA           reduce using rule 46 (operations -> number operand NAME .)
    CLOSE_BRACKET   reduce using rule 46 (operations -> number operand NAME .)
    SEMICOLON       reduce using rule 46 (operations -> number operand NAME .)
    CLOSE_BRACE     reduce using rule 46 (operations -> number operand NAME .)
    CLOSE_PARENTHESIS reduce using rule 46 (operations -> number operand NAME .)
    NAME            shift and go to state 70
    INTEGER         shift and go to state 55
    FLOAT           shift and go to state 56
    OPEN_PARENTHESIS shift and go to state 57

    number                         shift and go to state 219
    operations                     shift and go to state 220

state 179

    (48) operations -> NAME operand NAME . operations
    (41) operations -> . number operand number
    (42) operations -> . NAME
    (43) operations -> . number
    (44) operations -> . number operand NAME operations
    (45) operations -> . NAME operand number operations
    (46) operations -> . number operand NAME
    (47) operations -> . NAME operand number
    (48) operations -> . NAME operand NAME operations
    (49) operations -> . number operand number operand operations
    (50) operations -> . NAME SUMA SUMA
    (51) operations -> . NAME RESTA RESTA
    (15) number -> . INTEGER
    (16) number -> . FLOAT
    (17) number -> . OPEN_PARENTHESIS RESTA INTEGER CLOSE_PARENTHESIS
    (18) number -> . OPEN_PARENTHESIS RESTA FLOAT CLOSE_PARENTHESIS

    NAME            shift and go to state 70
    INTEGER         shift and go to state 55
    FLOAT           shift and go to state 56
    OPEN_PARENTHESIS shift and go to state 57

    operations                     shift and go to state 221
    number                         shift and go to state 219

state 180

    (45) operations -> NAME operand number . operations
    (47) operations -> NAME operand number .
    (41) operations -> . number operand number
    (42) operations -> . NAME
    (43) operations -> . number
    (44) operations -> . number operand NAME operations
    (45) operations -> . NAME operand number operations
    (46) operations -> . number operand NAME
    (47) operations -> . NAME operand number
    (48) operations -> . NAME operand NAME operations
    (49) operations -> . number operand number operand operations
    (50) operations -> . NAME SUMA SUMA
    (51) operations -> . NAME RESTA RESTA
    (15) number -> . INTEGER
    (16) number -> . FLOAT
    (17) number -> . OPEN_PARENTHESIS RESTA INTEGER CLOSE_PARENTHESIS
    (18) number -> . OPEN_PARENTHESIS RESTA FLOAT CLOSE_PARENTHESIS

    COLON           reduce using rule 47 (operations -> NAME operand number .)
    COMMA           reduce using rule 47 (operations -> NAME operand number .)
    CLOSE_BRACKET   reduce using rule 47 (operations -> NAME operand number .)
    SEMICOLON       reduce using rule 47 (operations -> NAME operand number .)
    CLOSE_BRACE     reduce using rule 47 (operations -> NAME operand number .)
    CLOSE_PARENTHESIS reduce using rule 47 (operations -> NAME operand number .)
    NAME            shift and go to state 70
    INTEGER         shift and go to state 55
    FLOAT           shift and go to state 56
    OPEN_PARENTHESIS shift and go to state 57

    number                         shift and go to state 219
    operations                     shift and go to state 222

state 181

    (50) operations -> NAME SUMA SUMA .

    COLON           reduce using rule 50 (operations -> NAME SUMA SUMA .)
    COMMA           reduce using rule 50 (operations -> NAME SUMA SUMA .)
    CLOSE_BRACKET   reduce using rule 50 (operations -> NAME SUMA SUMA .)
    SEMICOLON       reduce using rule 50 (operations -> NAME SUMA SUMA .)
    CLOSE_BRACE     reduce using rule 50 (operations -> NAME SUMA SUMA .)
    CLOSE_PARENTHESIS reduce using rule 50 (operations -> NAME SUMA SUMA .)


state 182

    (51) operations -> NAME RESTA RESTA .

    COLON           reduce using rule 51 (operations -> NAME RESTA RESTA .)
    COMMA           reduce using rule 51 (operations -> NAME RESTA RESTA .)
    CLOSE_BRACKET   reduce using rule 51 (operations -> NAME RESTA RESTA .)
    SEMICOLON       reduce using rule 51 (operations -> NAME RESTA RESTA .)
    CLOSE_BRACE     reduce using rule 51 (operations -> NAME RESTA RESTA .)
    CLOSE_PARENTHESIS reduce using rule 51 (operations -> NAME RESTA RESTA .)


state 183

    (79) array -> OPEN_BRACKET items CLOSE_BRACKET SEMICOLON .

    COMMENTS        reduce using rule 79 (array -> OPEN_BRACKET items CLOSE_BRACKET SEMICOLON .)
    NAME            reduce using rule 79 (array -> OPEN_BRACKET items CLOSE_BRACKET SEMICOLON .)
    PRINT           reduce using rule 79 (array -> OPEN_BRACKET items CLOSE_BRACKET SEMICOLON .)
    RETURN          reduce using rule 79 (array -> OPEN_BRACKET items CLOSE_BRACKET SEMICOLON .)
    FUNCTION        reduce using rule 79 (array -> OPEN_BRACKET items CLOSE_BRACKET SEMICOLON .)
    CONST           reduce using rule 79 (array -> OPEN_BRACKET items CLOSE_BRACKET SEMICOLON .)
    LET             reduce using rule 79 (array -> OPEN_BRACKET items CLOSE_BRACKET SEMICOLON .)
    VAR             reduce using rule 79 (array -> OPEN_BRACKET items CLOSE_BRACKET SEMICOLON .)
    OPEN_BRACKET    reduce using rule 79 (array -> OPEN_BRACKET items CLOSE_BRACKET SEMICOLON .)
    NEW             reduce using rule 79 (array -> OPEN_BRACKET items CLOSE_BRACKET SEMICOLON .)
    WHILE           reduce using rule 79 (array -> OPEN_BRACKET items CLOSE_BRACKET SEMICOLON .)
    FOR             reduce using rule 79 (array -> OPEN_BRACKET items CLOSE_BRACKET SEMICOLON .)
    OPEN_BRACE      reduce using rule 79 (array -> OPEN_BRACKET items CLOSE_BRACKET SEMICOLON .)
    IF              reduce using rule 79 (array -> OPEN_BRACKET items CLOSE_BRACKET SEMICOLON .)
    $end            reduce using rule 79 (array -> OPEN_BRACKET items CLOSE_BRACKET SEMICOLON .)
    CLOSE_BRACE     reduce using rule 79 (array -> OPEN_BRACKET items CLOSE_BRACKET SEMICOLON .)
    COLON           reduce using rule 79 (array -> OPEN_BRACKET items CLOSE_BRACKET SEMICOLON .)
    COMMA           reduce using rule 79 (array -> OPEN_BRACKET items CLOSE_BRACKET SEMICOLON .)
    CLOSE_BRACKET   reduce using rule 79 (array -> OPEN_BRACKET items CLOSE_BRACKET SEMICOLON .)
    SEMICOLON       reduce using rule 79 (array -> OPEN_BRACKET items CLOSE_BRACKET SEMICOLON .)
    CLOSE_PARENTHESIS reduce using rule 79 (array -> OPEN_BRACKET items CLOSE_BRACKET SEMICOLON .)


state 184

    (107) items -> item COMMA items .

    CLOSE_BRACKET   reduce using rule 107 (items -> item COMMA items .)
    CLOSE_PARENTHESIS reduce using rule 107 (items -> item COMMA items .)


state 185

    (124) expBoolean -> expBoolean logicalOperator expBoolean .
    (124) expBoolean -> expBoolean . logicalOperator expBoolean
    (119) logicalOperator -> . AND
    (120) logicalOperator -> . OR

  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
    COMMA           reduce using rule 124 (expBoolean -> expBoolean logicalOperator expBoolean .)
    CLOSE_BRACKET   reduce using rule 124 (expBoolean -> expBoolean logicalOperator expBoolean .)
    CLOSE_PARENTHESIS reduce using rule 124 (expBoolean -> expBoolean logicalOperator expBoolean .)
    SEMICOLON       reduce using rule 124 (expBoolean -> expBoolean logicalOperator expBoolean .)
    AND             shift and go to state 132
    OR              shift and go to state 133

  ! AND             [ reduce using rule 124 (expBoolean -> expBoolean logicalOperator expBoolean .) ]
  ! OR              [ reduce using rule 124 (expBoolean -> expBoolean logicalOperator expBoolean .) ]

    logicalOperator                shift and go to state 131

state 186

    (37) controlArg -> element clause element .

    AND             reduce using rule 37 (controlArg -> element clause element .)
    OR              reduce using rule 37 (controlArg -> element clause element .)
    COMMA           reduce using rule 37 (controlArg -> element clause element .)
    CLOSE_BRACKET   reduce using rule 37 (controlArg -> element clause element .)
    CLOSE_PARENTHESIS reduce using rule 37 (controlArg -> element clause element .)
    SEMICOLON       reduce using rule 37 (controlArg -> element clause element .)


state 187

    (80) array -> NEW ARRAY OPEN_PARENTHESIS items . CLOSE_PARENTHESIS SEMICOLON

    CLOSE_PARENTHESIS shift and go to state 223


state 188

    (100) set -> NEW SET OPEN_PARENTHESIS CLOSE_PARENTHESIS . SEMICOLON

    SEMICOLON       shift and go to state 224


state 189

    (101) set -> NEW SET OPEN_PARENTHESIS OPEN_BRACKET . items CLOSE_BRACKET CLOSE_PARENTHESIS SEMICOLON
    (106) items -> . item
    (107) items -> . item COMMA items
    (108) item -> . number
    (109) item -> . STRING
    (110) item -> . expBoolean
    (111) item -> . NAME
    (112) item -> . datatype
    (15) number -> . INTEGER
    (16) number -> . FLOAT
    (17) number -> . OPEN_PARENTHESIS RESTA INTEGER CLOSE_PARENTHESIS
    (18) number -> . OPEN_PARENTHESIS RESTA FLOAT CLOSE_PARENTHESIS
    (121) expBoolean -> . controlArg
    (122) expBoolean -> . bool
    (123) expBoolean -> . NOT expBoolean
    (124) expBoolean -> . expBoolean logicalOperator expBoolean
    (52) datatype -> . number
    (53) datatype -> . STRING
    (54) datatype -> . CHAR
    (55) datatype -> . operations
    (56) datatype -> . dataStruct
    (37) controlArg -> . element clause element
    (68) bool -> . TRUE
    (69) bool -> . FALSE
    (41) operations -> . number operand number
    (42) operations -> . NAME
    (43) operations -> . number
    (44) operations -> . number operand NAME operations
    (45) operations -> . NAME operand number operations
    (46) operations -> . number operand NAME
    (47) operations -> . NAME operand number
    (48) operations -> . NAME operand NAME operations
    (49) operations -> . number operand number operand operations
    (50) operations -> . NAME SUMA SUMA
    (51) operations -> . NAME RESTA RESTA
    (24) dataStruct -> . array
    (25) dataStruct -> . set
    (26) dataStruct -> . map
    (115) element -> . STRING
    (116) element -> . number
    (117) element -> . NAME
    (79) array -> . OPEN_BRACKET items CLOSE_BRACKET SEMICOLON
    (80) array -> . NEW ARRAY OPEN_PARENTHESIS items CLOSE_PARENTHESIS SEMICOLON
    (100) set -> . NEW SET OPEN_PARENTHESIS CLOSE_PARENTHESIS SEMICOLON
    (101) set -> . NEW SET OPEN_PARENTHESIS OPEN_BRACKET items CLOSE_BRACKET CLOSE_PARENTHESIS SEMICOLON
    (102) set -> . NEW SET OPEN_PARENTHESIS element CLOSE_PARENTHESIS SEMICOLON
    (81) map -> . iniciarMap
    (82) map -> . escribirMap
    (83) map -> . generarMap
    (84) iniciarMap -> . NEW MAP OPEN_PARENTHESIS CLOSE_PARENTHESIS SEMICOLON
    (85) escribirMap -> . OPEN_BRACE claveValor CLOSE_BRACE
    (89) generarMap -> . OPEN_BRACE tuplas CLOSE_BRACE

    STRING          shift and go to state 74
    NAME            shift and go to state 76
    INTEGER         shift and go to state 55
    FLOAT           shift and go to state 56
    OPEN_PARENTHESIS shift and go to state 57
    NOT             shift and go to state 80
    CHAR            shift and go to state 67
    TRUE            shift and go to state 82
    FALSE           shift and go to state 83
    OPEN_BRACKET    shift and go to state 30
    NEW             shift and go to state 31
    OPEN_BRACE      shift and go to state 26

    items                          shift and go to state 225
    item                           shift and go to state 72
    number                         shift and go to state 73
    expBoolean                     shift and go to state 75
    datatype                       shift and go to state 77
    controlArg                     shift and go to state 78
    bool                           shift and go to state 79
    operations                     shift and go to state 68
    dataStruct                     shift and go to state 69
    element                        shift and go to state 81
    array                          shift and go to state 17
    set                            shift and go to state 18
    map                            shift and go to state 19
    iniciarMap                     shift and go to state 32
    escribirMap                    shift and go to state 33
    generarMap                     shift and go to state 34

state 190

    (102) set -> NEW SET OPEN_PARENTHESIS element . CLOSE_PARENTHESIS SEMICOLON

    CLOSE_PARENTHESIS shift and go to state 226


state 191

    (84) iniciarMap -> NEW MAP OPEN_PARENTHESIS CLOSE_PARENTHESIS . SEMICOLON

    SEMICOLON       shift and go to state 227


state 192

    (27) while -> WHILE OPEN_PARENTHESIS controlArg CLOSE_PARENTHESIS . OPEN_BRACE expression CLOSE_BRACE

    OPEN_BRACE      shift and go to state 228


state 193

    (28) while -> WHILE OPEN_PARENTHESIS bool CLOSE_PARENTHESIS . OPEN_BRACE expression CLOSE_BRACE

    OPEN_BRACE      shift and go to state 229


state 194

    (38) for -> FOR OPEN_PARENTHESIS inicialization SEMICOLON . expBoolean SEMICOLON operations CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE
    (121) expBoolean -> . controlArg
    (122) expBoolean -> . bool
    (123) expBoolean -> . NOT expBoolean
    (124) expBoolean -> . expBoolean logicalOperator expBoolean
    (37) controlArg -> . element clause element
    (68) bool -> . TRUE
    (69) bool -> . FALSE
    (115) element -> . STRING
    (116) element -> . number
    (117) element -> . NAME
    (15) number -> . INTEGER
    (16) number -> . FLOAT
    (17) number -> . OPEN_PARENTHESIS RESTA INTEGER CLOSE_PARENTHESIS
    (18) number -> . OPEN_PARENTHESIS RESTA FLOAT CLOSE_PARENTHESIS

    NOT             shift and go to state 80
    TRUE            shift and go to state 82
    FALSE           shift and go to state 83
    STRING          shift and go to state 52
    NAME            shift and go to state 54
    INTEGER         shift and go to state 55
    FLOAT           shift and go to state 56
    OPEN_PARENTHESIS shift and go to state 57

    expBoolean                     shift and go to state 230
    controlArg                     shift and go to state 78
    bool                           shift and go to state 79
    element                        shift and go to state 81
    number                         shift and go to state 53

state 195

    (39) inicialization -> type NAME . IGUAL number

    IGUAL           shift and go to state 231


state 196

    (40) inicialization -> NAME IGUAL . number
    (15) number -> . INTEGER
    (16) number -> . FLOAT
    (17) number -> . OPEN_PARENTHESIS RESTA INTEGER CLOSE_PARENTHESIS
    (18) number -> . OPEN_PARENTHESIS RESTA FLOAT CLOSE_PARENTHESIS

    INTEGER         shift and go to state 55
    FLOAT           shift and go to state 56
    OPEN_PARENTHESIS shift and go to state 57

    number                         shift and go to state 232

state 197

    (34) elseIf -> ELSEIF OPEN_PARENTHESIS controlArg . CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE
    (35) elseIf -> ELSEIF OPEN_PARENTHESIS controlArg . CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE soloIf

    CLOSE_PARENTHESIS shift and go to state 233


state 198

    (36) else -> ELSE OPEN_BRACE expression . CLOSE_BRACE

    CLOSE_BRACE     shift and go to state 234


state 199

    (33) soloIf -> IF OPEN_PARENTHESIS controlArg CLOSE_PARENTHESIS . OPEN_BRACE expression CLOSE_BRACE

    OPEN_BRACE      shift and go to state 235


state 200

    (19) variable -> type NAME IGUAL datatype SEMICOLON .

    COMMENTS        reduce using rule 19 (variable -> type NAME IGUAL datatype SEMICOLON .)
    NAME            reduce using rule 19 (variable -> type NAME IGUAL datatype SEMICOLON .)
    PRINT           reduce using rule 19 (variable -> type NAME IGUAL datatype SEMICOLON .)
    RETURN          reduce using rule 19 (variable -> type NAME IGUAL datatype SEMICOLON .)
    FUNCTION        reduce using rule 19 (variable -> type NAME IGUAL datatype SEMICOLON .)
    CONST           reduce using rule 19 (variable -> type NAME IGUAL datatype SEMICOLON .)
    LET             reduce using rule 19 (variable -> type NAME IGUAL datatype SEMICOLON .)
    VAR             reduce using rule 19 (variable -> type NAME IGUAL datatype SEMICOLON .)
    OPEN_BRACKET    reduce using rule 19 (variable -> type NAME IGUAL datatype SEMICOLON .)
    NEW             reduce using rule 19 (variable -> type NAME IGUAL datatype SEMICOLON .)
    WHILE           reduce using rule 19 (variable -> type NAME IGUAL datatype SEMICOLON .)
    FOR             reduce using rule 19 (variable -> type NAME IGUAL datatype SEMICOLON .)
    OPEN_BRACE      reduce using rule 19 (variable -> type NAME IGUAL datatype SEMICOLON .)
    IF              reduce using rule 19 (variable -> type NAME IGUAL datatype SEMICOLON .)
    $end            reduce using rule 19 (variable -> type NAME IGUAL datatype SEMICOLON .)
    CLOSE_BRACE     reduce using rule 19 (variable -> type NAME IGUAL datatype SEMICOLON .)


state 201

    (103) methodsSet -> NAME POINT ADD OPEN_PARENTHESIS element . CLOSE_PARENTHESIS SEMICOLON

    CLOSE_PARENTHESIS shift and go to state 236


state 202

    (104) methodsSet -> NAME POINT DELETE OPEN_PARENTHESIS element . CLOSE_PARENTHESIS SEMICOLON

    CLOSE_PARENTHESIS shift and go to state 237


state 203

    (105) methodsSet -> NAME POINT CLEAR OPEN_PARENTHESIS CLOSE_PARENTHESIS . SEMICOLON
    (94) mapFunctions -> NAME POINT CLEAR OPEN_PARENTHESIS CLOSE_PARENTHESIS . SEMICOLON

    SEMICOLON       shift and go to state 238


state 204

    (95) mapFunctions -> NAME POINT GET OPEN_PARENTHESIS clave . CLOSE_PARENTHESIS SEMICOLON

    CLOSE_PARENTHESIS shift and go to state 239


state 205

    (96) mapFunctions -> NAME POINT HAS OPEN_PARENTHESIS clave . CLOSE_PARENTHESIS SEMICOLON

    CLOSE_PARENTHESIS shift and go to state 240


state 206

    (97) arrayFn -> NAME POINT POP OPEN_PARENTHESIS CLOSE_PARENTHESIS . SEMICOLON

    SEMICOLON       shift and go to state 241


state 207

    (98) arrayFn -> NAME POINT PUSH OPEN_PARENTHESIS element . CLOSE_PARENTHESIS SEMICOLON

    CLOSE_PARENTHESIS shift and go to state 242


state 208

    (99) arrayFn -> NAME POINT UNSHIFT OPEN_PARENTHESIS element . CLOSE_PARENTHESIS SEMICOLON

    CLOSE_PARENTHESIS shift and go to state 243


state 209

    (17) number -> OPEN_PARENTHESIS RESTA INTEGER CLOSE_PARENTHESIS .

    SEMICOLON       reduce using rule 17 (number -> OPEN_PARENTHESIS RESTA INTEGER CLOSE_PARENTHESIS .)
    SUMA            reduce using rule 17 (number -> OPEN_PARENTHESIS RESTA INTEGER CLOSE_PARENTHESIS .)
    RESTA           reduce using rule 17 (number -> OPEN_PARENTHESIS RESTA INTEGER CLOSE_PARENTHESIS .)
    MULTIPLICACION  reduce using rule 17 (number -> OPEN_PARENTHESIS RESTA INTEGER CLOSE_PARENTHESIS .)
    DIVISION        reduce using rule 17 (number -> OPEN_PARENTHESIS RESTA INTEGER CLOSE_PARENTHESIS .)
    COLON           reduce using rule 17 (number -> OPEN_PARENTHESIS RESTA INTEGER CLOSE_PARENTHESIS .)
    COMMA           reduce using rule 17 (number -> OPEN_PARENTHESIS RESTA INTEGER CLOSE_PARENTHESIS .)
    CLOSE_BRACKET   reduce using rule 17 (number -> OPEN_PARENTHESIS RESTA INTEGER CLOSE_PARENTHESIS .)
    IGUALIGUAL      reduce using rule 17 (number -> OPEN_PARENTHESIS RESTA INTEGER CLOSE_PARENTHESIS .)
    DIFERENTE       reduce using rule 17 (number -> OPEN_PARENTHESIS RESTA INTEGER CLOSE_PARENTHESIS .)
    MAYORQUE        reduce using rule 17 (number -> OPEN_PARENTHESIS RESTA INTEGER CLOSE_PARENTHESIS .)
    MAYORIGUALQUE   reduce using rule 17 (number -> OPEN_PARENTHESIS RESTA INTEGER CLOSE_PARENTHESIS .)
    MENORQUE        reduce using rule 17 (number -> OPEN_PARENTHESIS RESTA INTEGER CLOSE_PARENTHESIS .)
    MENORIGUALQUE   reduce using rule 17 (number -> OPEN_PARENTHESIS RESTA INTEGER CLOSE_PARENTHESIS .)
    STRING          reduce using rule 17 (number -> OPEN_PARENTHESIS RESTA INTEGER CLOSE_PARENTHESIS .)
    NAME            reduce using rule 17 (number -> OPEN_PARENTHESIS RESTA INTEGER CLOSE_PARENTHESIS .)
    INTEGER         reduce using rule 17 (number -> OPEN_PARENTHESIS RESTA INTEGER CLOSE_PARENTHESIS .)
    FLOAT           reduce using rule 17 (number -> OPEN_PARENTHESIS RESTA INTEGER CLOSE_PARENTHESIS .)
    OPEN_PARENTHESIS reduce using rule 17 (number -> OPEN_PARENTHESIS RESTA INTEGER CLOSE_PARENTHESIS .)
    CLOSE_PARENTHESIS reduce using rule 17 (number -> OPEN_PARENTHESIS RESTA INTEGER CLOSE_PARENTHESIS .)
    CLOSE_BRACE     reduce using rule 17 (number -> OPEN_PARENTHESIS RESTA INTEGER CLOSE_PARENTHESIS .)
    AND             reduce using rule 17 (number -> OPEN_PARENTHESIS RESTA INTEGER CLOSE_PARENTHESIS .)
    OR              reduce using rule 17 (number -> OPEN_PARENTHESIS RESTA INTEGER CLOSE_PARENTHESIS .)


state 210

    (18) number -> OPEN_PARENTHESIS RESTA FLOAT CLOSE_PARENTHESIS .

    SEMICOLON       reduce using rule 18 (number -> OPEN_PARENTHESIS RESTA FLOAT CLOSE_PARENTHESIS .)
    SUMA            reduce using rule 18 (number -> OPEN_PARENTHESIS RESTA FLOAT CLOSE_PARENTHESIS .)
    RESTA           reduce using rule 18 (number -> OPEN_PARENTHESIS RESTA FLOAT CLOSE_PARENTHESIS .)
    MULTIPLICACION  reduce using rule 18 (number -> OPEN_PARENTHESIS RESTA FLOAT CLOSE_PARENTHESIS .)
    DIVISION        reduce using rule 18 (number -> OPEN_PARENTHESIS RESTA FLOAT CLOSE_PARENTHESIS .)
    COLON           reduce using rule 18 (number -> OPEN_PARENTHESIS RESTA FLOAT CLOSE_PARENTHESIS .)
    COMMA           reduce using rule 18 (number -> OPEN_PARENTHESIS RESTA FLOAT CLOSE_PARENTHESIS .)
    CLOSE_BRACKET   reduce using rule 18 (number -> OPEN_PARENTHESIS RESTA FLOAT CLOSE_PARENTHESIS .)
    IGUALIGUAL      reduce using rule 18 (number -> OPEN_PARENTHESIS RESTA FLOAT CLOSE_PARENTHESIS .)
    DIFERENTE       reduce using rule 18 (number -> OPEN_PARENTHESIS RESTA FLOAT CLOSE_PARENTHESIS .)
    MAYORQUE        reduce using rule 18 (number -> OPEN_PARENTHESIS RESTA FLOAT CLOSE_PARENTHESIS .)
    MAYORIGUALQUE   reduce using rule 18 (number -> OPEN_PARENTHESIS RESTA FLOAT CLOSE_PARENTHESIS .)
    MENORQUE        reduce using rule 18 (number -> OPEN_PARENTHESIS RESTA FLOAT CLOSE_PARENTHESIS .)
    MENORIGUALQUE   reduce using rule 18 (number -> OPEN_PARENTHESIS RESTA FLOAT CLOSE_PARENTHESIS .)
    STRING          reduce using rule 18 (number -> OPEN_PARENTHESIS RESTA FLOAT CLOSE_PARENTHESIS .)
    NAME            reduce using rule 18 (number -> OPEN_PARENTHESIS RESTA FLOAT CLOSE_PARENTHESIS .)
    INTEGER         reduce using rule 18 (number -> OPEN_PARENTHESIS RESTA FLOAT CLOSE_PARENTHESIS .)
    FLOAT           reduce using rule 18 (number -> OPEN_PARENTHESIS RESTA FLOAT CLOSE_PARENTHESIS .)
    OPEN_PARENTHESIS reduce using rule 18 (number -> OPEN_PARENTHESIS RESTA FLOAT CLOSE_PARENTHESIS .)
    CLOSE_PARENTHESIS reduce using rule 18 (number -> OPEN_PARENTHESIS RESTA FLOAT CLOSE_PARENTHESIS .)
    CLOSE_BRACE     reduce using rule 18 (number -> OPEN_PARENTHESIS RESTA FLOAT CLOSE_PARENTHESIS .)
    AND             reduce using rule 18 (number -> OPEN_PARENTHESIS RESTA FLOAT CLOSE_PARENTHESIS .)
    OR              reduce using rule 18 (number -> OPEN_PARENTHESIS RESTA FLOAT CLOSE_PARENTHESIS .)


state 211

    (125) function -> FUNCTION NAME OPEN_PARENTHESIS CLOSE_PARENTHESIS OPEN_BRACE . expression CLOSE_BRACE
    (1) expression -> . semiExpression
    (2) expression -> . semiExpression expression
    (3) semiExpression -> . variable
    (4) semiExpression -> . dataStruct
    (5) semiExpression -> . controlStruct
    (6) semiExpression -> . methodsSet
    (7) semiExpression -> . mapFunctions
    (8) semiExpression -> . arrayFn
    (9) semiExpression -> . declaration
    (10) semiExpression -> . print
    (11) semiExpression -> . return
    (12) semiExpression -> . function
    (13) semiExpression -> . COMMENTS
    (14) semiExpression -> . asigOp
    (19) variable -> . type NAME IGUAL datatype SEMICOLON
    (20) variable -> . NAME IGUAL datatype SEMICOLON
    (24) dataStruct -> . array
    (25) dataStruct -> . set
    (26) dataStruct -> . map
    (21) controlStruct -> . while
    (22) controlStruct -> . for
    (23) controlStruct -> . if
    (103) methodsSet -> . NAME POINT ADD OPEN_PARENTHESIS element CLOSE_PARENTHESIS SEMICOLON
    (104) methodsSet -> . NAME POINT DELETE OPEN_PARENTHESIS element CLOSE_PARENTHESIS SEMICOLON
    (105) methodsSet -> . NAME POINT CLEAR OPEN_PARENTHESIS CLOSE_PARENTHESIS SEMICOLON
    (94) mapFunctions -> . NAME POINT CLEAR OPEN_PARENTHESIS CLOSE_PARENTHESIS SEMICOLON
    (95) mapFunctions -> . NAME POINT GET OPEN_PARENTHESIS clave CLOSE_PARENTHESIS SEMICOLON
    (96) mapFunctions -> . NAME POINT HAS OPEN_PARENTHESIS clave CLOSE_PARENTHESIS SEMICOLON
    (97) arrayFn -> . NAME POINT POP OPEN_PARENTHESIS CLOSE_PARENTHESIS SEMICOLON
    (98) arrayFn -> . NAME POINT PUSH OPEN_PARENTHESIS element CLOSE_PARENTHESIS SEMICOLON
    (99) arrayFn -> . NAME POINT UNSHIFT OPEN_PARENTHESIS element CLOSE_PARENTHESIS SEMICOLON
    (118) declaration -> . NAME IGUAL element SEMICOLON
    (130) print -> . PRINT OPEN_PARENTHESIS CLOSE_PARENTHESIS SEMICOLON
    (129) return -> . RETURN element SEMICOLON
    (125) function -> . FUNCTION NAME OPEN_PARENTHESIS CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE
    (126) function -> . FUNCTION NAME OPEN_PARENTHESIS parameter CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE
    (67) asigOp -> . NAME operadorAsig number SEMICOLON
    (70) type -> . CONST
    (71) type -> . LET
    (72) type -> . VAR
    (79) array -> . OPEN_BRACKET items CLOSE_BRACKET SEMICOLON
    (80) array -> . NEW ARRAY OPEN_PARENTHESIS items CLOSE_PARENTHESIS SEMICOLON
    (100) set -> . NEW SET OPEN_PARENTHESIS CLOSE_PARENTHESIS SEMICOLON
    (101) set -> . NEW SET OPEN_PARENTHESIS OPEN_BRACKET items CLOSE_BRACKET CLOSE_PARENTHESIS SEMICOLON
    (102) set -> . NEW SET OPEN_PARENTHESIS element CLOSE_PARENTHESIS SEMICOLON
    (81) map -> . iniciarMap
    (82) map -> . escribirMap
    (83) map -> . generarMap
    (27) while -> . WHILE OPEN_PARENTHESIS controlArg CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE
    (28) while -> . WHILE OPEN_PARENTHESIS bool CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE
    (38) for -> . FOR OPEN_PARENTHESIS inicialization SEMICOLON expBoolean SEMICOLON operations CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE
    (29) if -> . soloIf
    (30) if -> . soloIf elseIf
    (31) if -> . soloIf elseIf else
    (32) if -> . soloIf else
    (84) iniciarMap -> . NEW MAP OPEN_PARENTHESIS CLOSE_PARENTHESIS SEMICOLON
    (85) escribirMap -> . OPEN_BRACE claveValor CLOSE_BRACE
    (89) generarMap -> . OPEN_BRACE tuplas CLOSE_BRACE
    (33) soloIf -> . IF OPEN_PARENTHESIS controlArg CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE

    COMMENTS        shift and go to state 13
    NAME            shift and go to state 16
    PRINT           shift and go to state 23
    RETURN          shift and go to state 24
    FUNCTION        shift and go to state 25
    CONST           shift and go to state 27
    LET             shift and go to state 28
    VAR             shift and go to state 29
    OPEN_BRACKET    shift and go to state 30
    NEW             shift and go to state 31
    WHILE           shift and go to state 35
    FOR             shift and go to state 36
    OPEN_BRACE      shift and go to state 26
    IF              shift and go to state 38

    expression                     shift and go to state 244
    semiExpression                 shift and go to state 2
    variable                       shift and go to state 3
    dataStruct                     shift and go to state 4
    controlStruct                  shift and go to state 5
    methodsSet                     shift and go to state 6
    mapFunctions                   shift and go to state 7
    arrayFn                        shift and go to state 8
    declaration                    shift and go to state 9
    print                          shift and go to state 10
    return                         shift and go to state 11
    function                       shift and go to state 12
    asigOp                         shift and go to state 14
    type                           shift and go to state 15
    array                          shift and go to state 17
    set                            shift and go to state 18
    map                            shift and go to state 19
    while                          shift and go to state 20
    for                            shift and go to state 21
    if                             shift and go to state 22
    iniciarMap                     shift and go to state 32
    escribirMap                    shift and go to state 33
    generarMap                     shift and go to state 34
    soloIf                         shift and go to state 37

state 212

    (126) function -> FUNCTION NAME OPEN_PARENTHESIS parameter CLOSE_PARENTHESIS . OPEN_BRACE expression CLOSE_BRACE

    OPEN_BRACE      shift and go to state 245


state 213

    (128) parameter -> element parameter .

    CLOSE_PARENTHESIS reduce using rule 128 (parameter -> element parameter .)


state 214

    (87) claveValor -> clave COLON datatype COMMA . claveValor
    (86) claveValor -> . clave COLON datatype
    (87) claveValor -> . clave COLON datatype COMMA claveValor
    (88) clave -> . datatype
    (52) datatype -> . number
    (53) datatype -> . STRING
    (54) datatype -> . CHAR
    (55) datatype -> . operations
    (56) datatype -> . dataStruct
    (15) number -> . INTEGER
    (16) number -> . FLOAT
    (17) number -> . OPEN_PARENTHESIS RESTA INTEGER CLOSE_PARENTHESIS
    (18) number -> . OPEN_PARENTHESIS RESTA FLOAT CLOSE_PARENTHESIS
    (41) operations -> . number operand number
    (42) operations -> . NAME
    (43) operations -> . number
    (44) operations -> . number operand NAME operations
    (45) operations -> . NAME operand number operations
    (46) operations -> . number operand NAME
    (47) operations -> . NAME operand number
    (48) operations -> . NAME operand NAME operations
    (49) operations -> . number operand number operand operations
    (50) operations -> . NAME SUMA SUMA
    (51) operations -> . NAME RESTA RESTA
    (24) dataStruct -> . array
    (25) dataStruct -> . set
    (26) dataStruct -> . map
    (79) array -> . OPEN_BRACKET items CLOSE_BRACKET SEMICOLON
    (80) array -> . NEW ARRAY OPEN_PARENTHESIS items CLOSE_PARENTHESIS SEMICOLON
    (100) set -> . NEW SET OPEN_PARENTHESIS CLOSE_PARENTHESIS SEMICOLON
    (101) set -> . NEW SET OPEN_PARENTHESIS OPEN_BRACKET items CLOSE_BRACKET CLOSE_PARENTHESIS SEMICOLON
    (102) set -> . NEW SET OPEN_PARENTHESIS element CLOSE_PARENTHESIS SEMICOLON
    (81) map -> . iniciarMap
    (82) map -> . escribirMap
    (83) map -> . generarMap
    (84) iniciarMap -> . NEW MAP OPEN_PARENTHESIS CLOSE_PARENTHESIS SEMICOLON
    (85) escribirMap -> . OPEN_BRACE claveValor CLOSE_BRACE
    (89) generarMap -> . OPEN_BRACE tuplas CLOSE_BRACE

    STRING          shift and go to state 66
    CHAR            shift and go to state 67
    INTEGER         shift and go to state 55
    FLOAT           shift and go to state 56
    OPEN_PARENTHESIS shift and go to state 57
    NAME            shift and go to state 70
    OPEN_BRACKET    shift and go to state 30
    NEW             shift and go to state 31
    OPEN_BRACE      shift and go to state 26

    clave                          shift and go to state 61
    datatype                       shift and go to state 62
    claveValor                     shift and go to state 246
    number                         shift and go to state 65
    operations                     shift and go to state 68
    dataStruct                     shift and go to state 69
    array                          shift and go to state 17
    set                            shift and go to state 18
    map                            shift and go to state 19
    iniciarMap                     shift and go to state 32
    escribirMap                    shift and go to state 33
    generarMap                     shift and go to state 34

state 215

    (92) tupla -> OPEN_BRACKET datatype . CLOSE_BRACKET SEMICOLON
    (93) tupla -> OPEN_BRACKET datatype . COMMA datatype CLOSE_BRACKET SEMICOLON

    CLOSE_BRACKET   shift and go to state 175
    COMMA           shift and go to state 176


state 216

    (92) tupla -> OPEN_BRACKET datatype CLOSE_BRACKET SEMICOLON .

    COMMA           reduce using rule 92 (tupla -> OPEN_BRACKET datatype CLOSE_BRACKET SEMICOLON .)
    CLOSE_BRACE     reduce using rule 92 (tupla -> OPEN_BRACKET datatype CLOSE_BRACKET SEMICOLON .)


state 217

    (93) tupla -> OPEN_BRACKET datatype COMMA datatype . CLOSE_BRACKET SEMICOLON

    CLOSE_BRACKET   shift and go to state 247


state 218

    (49) operations -> number operand number operand . operations
    (41) operations -> . number operand number
    (42) operations -> . NAME
    (43) operations -> . number
    (44) operations -> . number operand NAME operations
    (45) operations -> . NAME operand number operations
    (46) operations -> . number operand NAME
    (47) operations -> . NAME operand number
    (48) operations -> . NAME operand NAME operations
    (49) operations -> . number operand number operand operations
    (50) operations -> . NAME SUMA SUMA
    (51) operations -> . NAME RESTA RESTA
    (15) number -> . INTEGER
    (16) number -> . FLOAT
    (17) number -> . OPEN_PARENTHESIS RESTA INTEGER CLOSE_PARENTHESIS
    (18) number -> . OPEN_PARENTHESIS RESTA FLOAT CLOSE_PARENTHESIS

    NAME            shift and go to state 70
    INTEGER         shift and go to state 55
    FLOAT           shift and go to state 56
    OPEN_PARENTHESIS shift and go to state 57

    number                         shift and go to state 219
    operations                     shift and go to state 248

state 219

    (41) operations -> number . operand number
    (43) operations -> number .
    (44) operations -> number . operand NAME operations
    (46) operations -> number . operand NAME
    (49) operations -> number . operand number operand operations
    (57) operand -> . SUMA
    (58) operand -> . RESTA
    (59) operand -> . MULTIPLICACION
    (60) operand -> . DIVISION

    COLON           reduce using rule 43 (operations -> number .)
    COMMA           reduce using rule 43 (operations -> number .)
    CLOSE_BRACKET   reduce using rule 43 (operations -> number .)
    SEMICOLON       reduce using rule 43 (operations -> number .)
    CLOSE_BRACE     reduce using rule 43 (operations -> number .)
    CLOSE_PARENTHESIS reduce using rule 43 (operations -> number .)
    SUMA            shift and go to state 122
    RESTA           shift and go to state 123
    MULTIPLICACION  shift and go to state 124
    DIVISION        shift and go to state 125

    operand                        shift and go to state 121

state 220

    (44) operations -> number operand NAME operations .

    COLON           reduce using rule 44 (operations -> number operand NAME operations .)
    COMMA           reduce using rule 44 (operations -> number operand NAME operations .)
    CLOSE_BRACKET   reduce using rule 44 (operations -> number operand NAME operations .)
    SEMICOLON       reduce using rule 44 (operations -> number operand NAME operations .)
    CLOSE_BRACE     reduce using rule 44 (operations -> number operand NAME operations .)
    CLOSE_PARENTHESIS reduce using rule 44 (operations -> number operand NAME operations .)


state 221

    (48) operations -> NAME operand NAME operations .

    COLON           reduce using rule 48 (operations -> NAME operand NAME operations .)
    COMMA           reduce using rule 48 (operations -> NAME operand NAME operations .)
    CLOSE_BRACKET   reduce using rule 48 (operations -> NAME operand NAME operations .)
    SEMICOLON       reduce using rule 48 (operations -> NAME operand NAME operations .)
    CLOSE_BRACE     reduce using rule 48 (operations -> NAME operand NAME operations .)
    CLOSE_PARENTHESIS reduce using rule 48 (operations -> NAME operand NAME operations .)


state 222

    (45) operations -> NAME operand number operations .

    COLON           reduce using rule 45 (operations -> NAME operand number operations .)
    COMMA           reduce using rule 45 (operations -> NAME operand number operations .)
    CLOSE_BRACKET   reduce using rule 45 (operations -> NAME operand number operations .)
    SEMICOLON       reduce using rule 45 (operations -> NAME operand number operations .)
    CLOSE_BRACE     reduce using rule 45 (operations -> NAME operand number operations .)
    CLOSE_PARENTHESIS reduce using rule 45 (operations -> NAME operand number operations .)


state 223

    (80) array -> NEW ARRAY OPEN_PARENTHESIS items CLOSE_PARENTHESIS . SEMICOLON

    SEMICOLON       shift and go to state 249


state 224

    (100) set -> NEW SET OPEN_PARENTHESIS CLOSE_PARENTHESIS SEMICOLON .

    COMMENTS        reduce using rule 100 (set -> NEW SET OPEN_PARENTHESIS CLOSE_PARENTHESIS SEMICOLON .)
    NAME            reduce using rule 100 (set -> NEW SET OPEN_PARENTHESIS CLOSE_PARENTHESIS SEMICOLON .)
    PRINT           reduce using rule 100 (set -> NEW SET OPEN_PARENTHESIS CLOSE_PARENTHESIS SEMICOLON .)
    RETURN          reduce using rule 100 (set -> NEW SET OPEN_PARENTHESIS CLOSE_PARENTHESIS SEMICOLON .)
    FUNCTION        reduce using rule 100 (set -> NEW SET OPEN_PARENTHESIS CLOSE_PARENTHESIS SEMICOLON .)
    CONST           reduce using rule 100 (set -> NEW SET OPEN_PARENTHESIS CLOSE_PARENTHESIS SEMICOLON .)
    LET             reduce using rule 100 (set -> NEW SET OPEN_PARENTHESIS CLOSE_PARENTHESIS SEMICOLON .)
    VAR             reduce using rule 100 (set -> NEW SET OPEN_PARENTHESIS CLOSE_PARENTHESIS SEMICOLON .)
    OPEN_BRACKET    reduce using rule 100 (set -> NEW SET OPEN_PARENTHESIS CLOSE_PARENTHESIS SEMICOLON .)
    NEW             reduce using rule 100 (set -> NEW SET OPEN_PARENTHESIS CLOSE_PARENTHESIS SEMICOLON .)
    WHILE           reduce using rule 100 (set -> NEW SET OPEN_PARENTHESIS CLOSE_PARENTHESIS SEMICOLON .)
    FOR             reduce using rule 100 (set -> NEW SET OPEN_PARENTHESIS CLOSE_PARENTHESIS SEMICOLON .)
    OPEN_BRACE      reduce using rule 100 (set -> NEW SET OPEN_PARENTHESIS CLOSE_PARENTHESIS SEMICOLON .)
    IF              reduce using rule 100 (set -> NEW SET OPEN_PARENTHESIS CLOSE_PARENTHESIS SEMICOLON .)
    $end            reduce using rule 100 (set -> NEW SET OPEN_PARENTHESIS CLOSE_PARENTHESIS SEMICOLON .)
    CLOSE_BRACE     reduce using rule 100 (set -> NEW SET OPEN_PARENTHESIS CLOSE_PARENTHESIS SEMICOLON .)
    COLON           reduce using rule 100 (set -> NEW SET OPEN_PARENTHESIS CLOSE_PARENTHESIS SEMICOLON .)
    COMMA           reduce using rule 100 (set -> NEW SET OPEN_PARENTHESIS CLOSE_PARENTHESIS SEMICOLON .)
    CLOSE_BRACKET   reduce using rule 100 (set -> NEW SET OPEN_PARENTHESIS CLOSE_PARENTHESIS SEMICOLON .)
    SEMICOLON       reduce using rule 100 (set -> NEW SET OPEN_PARENTHESIS CLOSE_PARENTHESIS SEMICOLON .)
    CLOSE_PARENTHESIS reduce using rule 100 (set -> NEW SET OPEN_PARENTHESIS CLOSE_PARENTHESIS SEMICOLON .)


state 225

    (101) set -> NEW SET OPEN_PARENTHESIS OPEN_BRACKET items . CLOSE_BRACKET CLOSE_PARENTHESIS SEMICOLON

    CLOSE_BRACKET   shift and go to state 250


state 226

    (102) set -> NEW SET OPEN_PARENTHESIS element CLOSE_PARENTHESIS . SEMICOLON

    SEMICOLON       shift and go to state 251


state 227

    (84) iniciarMap -> NEW MAP OPEN_PARENTHESIS CLOSE_PARENTHESIS SEMICOLON .

    COMMENTS        reduce using rule 84 (iniciarMap -> NEW MAP OPEN_PARENTHESIS CLOSE_PARENTHESIS SEMICOLON .)
    NAME            reduce using rule 84 (iniciarMap -> NEW MAP OPEN_PARENTHESIS CLOSE_PARENTHESIS SEMICOLON .)
    PRINT           reduce using rule 84 (iniciarMap -> NEW MAP OPEN_PARENTHESIS CLOSE_PARENTHESIS SEMICOLON .)
    RETURN          reduce using rule 84 (iniciarMap -> NEW MAP OPEN_PARENTHESIS CLOSE_PARENTHESIS SEMICOLON .)
    FUNCTION        reduce using rule 84 (iniciarMap -> NEW MAP OPEN_PARENTHESIS CLOSE_PARENTHESIS SEMICOLON .)
    CONST           reduce using rule 84 (iniciarMap -> NEW MAP OPEN_PARENTHESIS CLOSE_PARENTHESIS SEMICOLON .)
    LET             reduce using rule 84 (iniciarMap -> NEW MAP OPEN_PARENTHESIS CLOSE_PARENTHESIS SEMICOLON .)
    VAR             reduce using rule 84 (iniciarMap -> NEW MAP OPEN_PARENTHESIS CLOSE_PARENTHESIS SEMICOLON .)
    OPEN_BRACKET    reduce using rule 84 (iniciarMap -> NEW MAP OPEN_PARENTHESIS CLOSE_PARENTHESIS SEMICOLON .)
    NEW             reduce using rule 84 (iniciarMap -> NEW MAP OPEN_PARENTHESIS CLOSE_PARENTHESIS SEMICOLON .)
    WHILE           reduce using rule 84 (iniciarMap -> NEW MAP OPEN_PARENTHESIS CLOSE_PARENTHESIS SEMICOLON .)
    FOR             reduce using rule 84 (iniciarMap -> NEW MAP OPEN_PARENTHESIS CLOSE_PARENTHESIS SEMICOLON .)
    OPEN_BRACE      reduce using rule 84 (iniciarMap -> NEW MAP OPEN_PARENTHESIS CLOSE_PARENTHESIS SEMICOLON .)
    IF              reduce using rule 84 (iniciarMap -> NEW MAP OPEN_PARENTHESIS CLOSE_PARENTHESIS SEMICOLON .)
    $end            reduce using rule 84 (iniciarMap -> NEW MAP OPEN_PARENTHESIS CLOSE_PARENTHESIS SEMICOLON .)
    CLOSE_BRACE     reduce using rule 84 (iniciarMap -> NEW MAP OPEN_PARENTHESIS CLOSE_PARENTHESIS SEMICOLON .)
    COLON           reduce using rule 84 (iniciarMap -> NEW MAP OPEN_PARENTHESIS CLOSE_PARENTHESIS SEMICOLON .)
    COMMA           reduce using rule 84 (iniciarMap -> NEW MAP OPEN_PARENTHESIS CLOSE_PARENTHESIS SEMICOLON .)
    CLOSE_BRACKET   reduce using rule 84 (iniciarMap -> NEW MAP OPEN_PARENTHESIS CLOSE_PARENTHESIS SEMICOLON .)
    SEMICOLON       reduce using rule 84 (iniciarMap -> NEW MAP OPEN_PARENTHESIS CLOSE_PARENTHESIS SEMICOLON .)
    CLOSE_PARENTHESIS reduce using rule 84 (iniciarMap -> NEW MAP OPEN_PARENTHESIS CLOSE_PARENTHESIS SEMICOLON .)


state 228

    (27) while -> WHILE OPEN_PARENTHESIS controlArg CLOSE_PARENTHESIS OPEN_BRACE . expression CLOSE_BRACE
    (1) expression -> . semiExpression
    (2) expression -> . semiExpression expression
    (3) semiExpression -> . variable
    (4) semiExpression -> . dataStruct
    (5) semiExpression -> . controlStruct
    (6) semiExpression -> . methodsSet
    (7) semiExpression -> . mapFunctions
    (8) semiExpression -> . arrayFn
    (9) semiExpression -> . declaration
    (10) semiExpression -> . print
    (11) semiExpression -> . return
    (12) semiExpression -> . function
    (13) semiExpression -> . COMMENTS
    (14) semiExpression -> . asigOp
    (19) variable -> . type NAME IGUAL datatype SEMICOLON
    (20) variable -> . NAME IGUAL datatype SEMICOLON
    (24) dataStruct -> . array
    (25) dataStruct -> . set
    (26) dataStruct -> . map
    (21) controlStruct -> . while
    (22) controlStruct -> . for
    (23) controlStruct -> . if
    (103) methodsSet -> . NAME POINT ADD OPEN_PARENTHESIS element CLOSE_PARENTHESIS SEMICOLON
    (104) methodsSet -> . NAME POINT DELETE OPEN_PARENTHESIS element CLOSE_PARENTHESIS SEMICOLON
    (105) methodsSet -> . NAME POINT CLEAR OPEN_PARENTHESIS CLOSE_PARENTHESIS SEMICOLON
    (94) mapFunctions -> . NAME POINT CLEAR OPEN_PARENTHESIS CLOSE_PARENTHESIS SEMICOLON
    (95) mapFunctions -> . NAME POINT GET OPEN_PARENTHESIS clave CLOSE_PARENTHESIS SEMICOLON
    (96) mapFunctions -> . NAME POINT HAS OPEN_PARENTHESIS clave CLOSE_PARENTHESIS SEMICOLON
    (97) arrayFn -> . NAME POINT POP OPEN_PARENTHESIS CLOSE_PARENTHESIS SEMICOLON
    (98) arrayFn -> . NAME POINT PUSH OPEN_PARENTHESIS element CLOSE_PARENTHESIS SEMICOLON
    (99) arrayFn -> . NAME POINT UNSHIFT OPEN_PARENTHESIS element CLOSE_PARENTHESIS SEMICOLON
    (118) declaration -> . NAME IGUAL element SEMICOLON
    (130) print -> . PRINT OPEN_PARENTHESIS CLOSE_PARENTHESIS SEMICOLON
    (129) return -> . RETURN element SEMICOLON
    (125) function -> . FUNCTION NAME OPEN_PARENTHESIS CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE
    (126) function -> . FUNCTION NAME OPEN_PARENTHESIS parameter CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE
    (67) asigOp -> . NAME operadorAsig number SEMICOLON
    (70) type -> . CONST
    (71) type -> . LET
    (72) type -> . VAR
    (79) array -> . OPEN_BRACKET items CLOSE_BRACKET SEMICOLON
    (80) array -> . NEW ARRAY OPEN_PARENTHESIS items CLOSE_PARENTHESIS SEMICOLON
    (100) set -> . NEW SET OPEN_PARENTHESIS CLOSE_PARENTHESIS SEMICOLON
    (101) set -> . NEW SET OPEN_PARENTHESIS OPEN_BRACKET items CLOSE_BRACKET CLOSE_PARENTHESIS SEMICOLON
    (102) set -> . NEW SET OPEN_PARENTHESIS element CLOSE_PARENTHESIS SEMICOLON
    (81) map -> . iniciarMap
    (82) map -> . escribirMap
    (83) map -> . generarMap
    (27) while -> . WHILE OPEN_PARENTHESIS controlArg CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE
    (28) while -> . WHILE OPEN_PARENTHESIS bool CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE
    (38) for -> . FOR OPEN_PARENTHESIS inicialization SEMICOLON expBoolean SEMICOLON operations CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE
    (29) if -> . soloIf
    (30) if -> . soloIf elseIf
    (31) if -> . soloIf elseIf else
    (32) if -> . soloIf else
    (84) iniciarMap -> . NEW MAP OPEN_PARENTHESIS CLOSE_PARENTHESIS SEMICOLON
    (85) escribirMap -> . OPEN_BRACE claveValor CLOSE_BRACE
    (89) generarMap -> . OPEN_BRACE tuplas CLOSE_BRACE
    (33) soloIf -> . IF OPEN_PARENTHESIS controlArg CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE

    COMMENTS        shift and go to state 13
    NAME            shift and go to state 16
    PRINT           shift and go to state 23
    RETURN          shift and go to state 24
    FUNCTION        shift and go to state 25
    CONST           shift and go to state 27
    LET             shift and go to state 28
    VAR             shift and go to state 29
    OPEN_BRACKET    shift and go to state 30
    NEW             shift and go to state 31
    WHILE           shift and go to state 35
    FOR             shift and go to state 36
    OPEN_BRACE      shift and go to state 26
    IF              shift and go to state 38

    expression                     shift and go to state 252
    semiExpression                 shift and go to state 2
    variable                       shift and go to state 3
    dataStruct                     shift and go to state 4
    controlStruct                  shift and go to state 5
    methodsSet                     shift and go to state 6
    mapFunctions                   shift and go to state 7
    arrayFn                        shift and go to state 8
    declaration                    shift and go to state 9
    print                          shift and go to state 10
    return                         shift and go to state 11
    function                       shift and go to state 12
    asigOp                         shift and go to state 14
    type                           shift and go to state 15
    array                          shift and go to state 17
    set                            shift and go to state 18
    map                            shift and go to state 19
    while                          shift and go to state 20
    for                            shift and go to state 21
    if                             shift and go to state 22
    iniciarMap                     shift and go to state 32
    escribirMap                    shift and go to state 33
    generarMap                     shift and go to state 34
    soloIf                         shift and go to state 37

state 229

    (28) while -> WHILE OPEN_PARENTHESIS bool CLOSE_PARENTHESIS OPEN_BRACE . expression CLOSE_BRACE
    (1) expression -> . semiExpression
    (2) expression -> . semiExpression expression
    (3) semiExpression -> . variable
    (4) semiExpression -> . dataStruct
    (5) semiExpression -> . controlStruct
    (6) semiExpression -> . methodsSet
    (7) semiExpression -> . mapFunctions
    (8) semiExpression -> . arrayFn
    (9) semiExpression -> . declaration
    (10) semiExpression -> . print
    (11) semiExpression -> . return
    (12) semiExpression -> . function
    (13) semiExpression -> . COMMENTS
    (14) semiExpression -> . asigOp
    (19) variable -> . type NAME IGUAL datatype SEMICOLON
    (20) variable -> . NAME IGUAL datatype SEMICOLON
    (24) dataStruct -> . array
    (25) dataStruct -> . set
    (26) dataStruct -> . map
    (21) controlStruct -> . while
    (22) controlStruct -> . for
    (23) controlStruct -> . if
    (103) methodsSet -> . NAME POINT ADD OPEN_PARENTHESIS element CLOSE_PARENTHESIS SEMICOLON
    (104) methodsSet -> . NAME POINT DELETE OPEN_PARENTHESIS element CLOSE_PARENTHESIS SEMICOLON
    (105) methodsSet -> . NAME POINT CLEAR OPEN_PARENTHESIS CLOSE_PARENTHESIS SEMICOLON
    (94) mapFunctions -> . NAME POINT CLEAR OPEN_PARENTHESIS CLOSE_PARENTHESIS SEMICOLON
    (95) mapFunctions -> . NAME POINT GET OPEN_PARENTHESIS clave CLOSE_PARENTHESIS SEMICOLON
    (96) mapFunctions -> . NAME POINT HAS OPEN_PARENTHESIS clave CLOSE_PARENTHESIS SEMICOLON
    (97) arrayFn -> . NAME POINT POP OPEN_PARENTHESIS CLOSE_PARENTHESIS SEMICOLON
    (98) arrayFn -> . NAME POINT PUSH OPEN_PARENTHESIS element CLOSE_PARENTHESIS SEMICOLON
    (99) arrayFn -> . NAME POINT UNSHIFT OPEN_PARENTHESIS element CLOSE_PARENTHESIS SEMICOLON
    (118) declaration -> . NAME IGUAL element SEMICOLON
    (130) print -> . PRINT OPEN_PARENTHESIS CLOSE_PARENTHESIS SEMICOLON
    (129) return -> . RETURN element SEMICOLON
    (125) function -> . FUNCTION NAME OPEN_PARENTHESIS CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE
    (126) function -> . FUNCTION NAME OPEN_PARENTHESIS parameter CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE
    (67) asigOp -> . NAME operadorAsig number SEMICOLON
    (70) type -> . CONST
    (71) type -> . LET
    (72) type -> . VAR
    (79) array -> . OPEN_BRACKET items CLOSE_BRACKET SEMICOLON
    (80) array -> . NEW ARRAY OPEN_PARENTHESIS items CLOSE_PARENTHESIS SEMICOLON
    (100) set -> . NEW SET OPEN_PARENTHESIS CLOSE_PARENTHESIS SEMICOLON
    (101) set -> . NEW SET OPEN_PARENTHESIS OPEN_BRACKET items CLOSE_BRACKET CLOSE_PARENTHESIS SEMICOLON
    (102) set -> . NEW SET OPEN_PARENTHESIS element CLOSE_PARENTHESIS SEMICOLON
    (81) map -> . iniciarMap
    (82) map -> . escribirMap
    (83) map -> . generarMap
    (27) while -> . WHILE OPEN_PARENTHESIS controlArg CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE
    (28) while -> . WHILE OPEN_PARENTHESIS bool CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE
    (38) for -> . FOR OPEN_PARENTHESIS inicialization SEMICOLON expBoolean SEMICOLON operations CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE
    (29) if -> . soloIf
    (30) if -> . soloIf elseIf
    (31) if -> . soloIf elseIf else
    (32) if -> . soloIf else
    (84) iniciarMap -> . NEW MAP OPEN_PARENTHESIS CLOSE_PARENTHESIS SEMICOLON
    (85) escribirMap -> . OPEN_BRACE claveValor CLOSE_BRACE
    (89) generarMap -> . OPEN_BRACE tuplas CLOSE_BRACE
    (33) soloIf -> . IF OPEN_PARENTHESIS controlArg CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE

    COMMENTS        shift and go to state 13
    NAME            shift and go to state 16
    PRINT           shift and go to state 23
    RETURN          shift and go to state 24
    FUNCTION        shift and go to state 25
    CONST           shift and go to state 27
    LET             shift and go to state 28
    VAR             shift and go to state 29
    OPEN_BRACKET    shift and go to state 30
    NEW             shift and go to state 31
    WHILE           shift and go to state 35
    FOR             shift and go to state 36
    OPEN_BRACE      shift and go to state 26
    IF              shift and go to state 38

    expression                     shift and go to state 253
    semiExpression                 shift and go to state 2
    variable                       shift and go to state 3
    dataStruct                     shift and go to state 4
    controlStruct                  shift and go to state 5
    methodsSet                     shift and go to state 6
    mapFunctions                   shift and go to state 7
    arrayFn                        shift and go to state 8
    declaration                    shift and go to state 9
    print                          shift and go to state 10
    return                         shift and go to state 11
    function                       shift and go to state 12
    asigOp                         shift and go to state 14
    type                           shift and go to state 15
    array                          shift and go to state 17
    set                            shift and go to state 18
    map                            shift and go to state 19
    while                          shift and go to state 20
    for                            shift and go to state 21
    if                             shift and go to state 22
    iniciarMap                     shift and go to state 32
    escribirMap                    shift and go to state 33
    generarMap                     shift and go to state 34
    soloIf                         shift and go to state 37

state 230

    (38) for -> FOR OPEN_PARENTHESIS inicialization SEMICOLON expBoolean . SEMICOLON operations CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE
    (124) expBoolean -> expBoolean . logicalOperator expBoolean
    (119) logicalOperator -> . AND
    (120) logicalOperator -> . OR

    SEMICOLON       shift and go to state 254
    AND             shift and go to state 132
    OR              shift and go to state 133

    logicalOperator                shift and go to state 131

state 231

    (39) inicialization -> type NAME IGUAL . number
    (15) number -> . INTEGER
    (16) number -> . FLOAT
    (17) number -> . OPEN_PARENTHESIS RESTA INTEGER CLOSE_PARENTHESIS
    (18) number -> . OPEN_PARENTHESIS RESTA FLOAT CLOSE_PARENTHESIS

    INTEGER         shift and go to state 55
    FLOAT           shift and go to state 56
    OPEN_PARENTHESIS shift and go to state 57

    number                         shift and go to state 255

state 232

    (40) inicialization -> NAME IGUAL number .

    SEMICOLON       reduce using rule 40 (inicialization -> NAME IGUAL number .)


state 233

    (34) elseIf -> ELSEIF OPEN_PARENTHESIS controlArg CLOSE_PARENTHESIS . OPEN_BRACE expression CLOSE_BRACE
    (35) elseIf -> ELSEIF OPEN_PARENTHESIS controlArg CLOSE_PARENTHESIS . OPEN_BRACE expression CLOSE_BRACE soloIf

    OPEN_BRACE      shift and go to state 256


state 234

    (36) else -> ELSE OPEN_BRACE expression CLOSE_BRACE .

    COMMENTS        reduce using rule 36 (else -> ELSE OPEN_BRACE expression CLOSE_BRACE .)
    NAME            reduce using rule 36 (else -> ELSE OPEN_BRACE expression CLOSE_BRACE .)
    PRINT           reduce using rule 36 (else -> ELSE OPEN_BRACE expression CLOSE_BRACE .)
    RETURN          reduce using rule 36 (else -> ELSE OPEN_BRACE expression CLOSE_BRACE .)
    FUNCTION        reduce using rule 36 (else -> ELSE OPEN_BRACE expression CLOSE_BRACE .)
    CONST           reduce using rule 36 (else -> ELSE OPEN_BRACE expression CLOSE_BRACE .)
    LET             reduce using rule 36 (else -> ELSE OPEN_BRACE expression CLOSE_BRACE .)
    VAR             reduce using rule 36 (else -> ELSE OPEN_BRACE expression CLOSE_BRACE .)
    OPEN_BRACKET    reduce using rule 36 (else -> ELSE OPEN_BRACE expression CLOSE_BRACE .)
    NEW             reduce using rule 36 (else -> ELSE OPEN_BRACE expression CLOSE_BRACE .)
    WHILE           reduce using rule 36 (else -> ELSE OPEN_BRACE expression CLOSE_BRACE .)
    FOR             reduce using rule 36 (else -> ELSE OPEN_BRACE expression CLOSE_BRACE .)
    OPEN_BRACE      reduce using rule 36 (else -> ELSE OPEN_BRACE expression CLOSE_BRACE .)
    IF              reduce using rule 36 (else -> ELSE OPEN_BRACE expression CLOSE_BRACE .)
    $end            reduce using rule 36 (else -> ELSE OPEN_BRACE expression CLOSE_BRACE .)
    CLOSE_BRACE     reduce using rule 36 (else -> ELSE OPEN_BRACE expression CLOSE_BRACE .)


state 235

    (33) soloIf -> IF OPEN_PARENTHESIS controlArg CLOSE_PARENTHESIS OPEN_BRACE . expression CLOSE_BRACE
    (1) expression -> . semiExpression
    (2) expression -> . semiExpression expression
    (3) semiExpression -> . variable
    (4) semiExpression -> . dataStruct
    (5) semiExpression -> . controlStruct
    (6) semiExpression -> . methodsSet
    (7) semiExpression -> . mapFunctions
    (8) semiExpression -> . arrayFn
    (9) semiExpression -> . declaration
    (10) semiExpression -> . print
    (11) semiExpression -> . return
    (12) semiExpression -> . function
    (13) semiExpression -> . COMMENTS
    (14) semiExpression -> . asigOp
    (19) variable -> . type NAME IGUAL datatype SEMICOLON
    (20) variable -> . NAME IGUAL datatype SEMICOLON
    (24) dataStruct -> . array
    (25) dataStruct -> . set
    (26) dataStruct -> . map
    (21) controlStruct -> . while
    (22) controlStruct -> . for
    (23) controlStruct -> . if
    (103) methodsSet -> . NAME POINT ADD OPEN_PARENTHESIS element CLOSE_PARENTHESIS SEMICOLON
    (104) methodsSet -> . NAME POINT DELETE OPEN_PARENTHESIS element CLOSE_PARENTHESIS SEMICOLON
    (105) methodsSet -> . NAME POINT CLEAR OPEN_PARENTHESIS CLOSE_PARENTHESIS SEMICOLON
    (94) mapFunctions -> . NAME POINT CLEAR OPEN_PARENTHESIS CLOSE_PARENTHESIS SEMICOLON
    (95) mapFunctions -> . NAME POINT GET OPEN_PARENTHESIS clave CLOSE_PARENTHESIS SEMICOLON
    (96) mapFunctions -> . NAME POINT HAS OPEN_PARENTHESIS clave CLOSE_PARENTHESIS SEMICOLON
    (97) arrayFn -> . NAME POINT POP OPEN_PARENTHESIS CLOSE_PARENTHESIS SEMICOLON
    (98) arrayFn -> . NAME POINT PUSH OPEN_PARENTHESIS element CLOSE_PARENTHESIS SEMICOLON
    (99) arrayFn -> . NAME POINT UNSHIFT OPEN_PARENTHESIS element CLOSE_PARENTHESIS SEMICOLON
    (118) declaration -> . NAME IGUAL element SEMICOLON
    (130) print -> . PRINT OPEN_PARENTHESIS CLOSE_PARENTHESIS SEMICOLON
    (129) return -> . RETURN element SEMICOLON
    (125) function -> . FUNCTION NAME OPEN_PARENTHESIS CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE
    (126) function -> . FUNCTION NAME OPEN_PARENTHESIS parameter CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE
    (67) asigOp -> . NAME operadorAsig number SEMICOLON
    (70) type -> . CONST
    (71) type -> . LET
    (72) type -> . VAR
    (79) array -> . OPEN_BRACKET items CLOSE_BRACKET SEMICOLON
    (80) array -> . NEW ARRAY OPEN_PARENTHESIS items CLOSE_PARENTHESIS SEMICOLON
    (100) set -> . NEW SET OPEN_PARENTHESIS CLOSE_PARENTHESIS SEMICOLON
    (101) set -> . NEW SET OPEN_PARENTHESIS OPEN_BRACKET items CLOSE_BRACKET CLOSE_PARENTHESIS SEMICOLON
    (102) set -> . NEW SET OPEN_PARENTHESIS element CLOSE_PARENTHESIS SEMICOLON
    (81) map -> . iniciarMap
    (82) map -> . escribirMap
    (83) map -> . generarMap
    (27) while -> . WHILE OPEN_PARENTHESIS controlArg CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE
    (28) while -> . WHILE OPEN_PARENTHESIS bool CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE
    (38) for -> . FOR OPEN_PARENTHESIS inicialization SEMICOLON expBoolean SEMICOLON operations CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE
    (29) if -> . soloIf
    (30) if -> . soloIf elseIf
    (31) if -> . soloIf elseIf else
    (32) if -> . soloIf else
    (84) iniciarMap -> . NEW MAP OPEN_PARENTHESIS CLOSE_PARENTHESIS SEMICOLON
    (85) escribirMap -> . OPEN_BRACE claveValor CLOSE_BRACE
    (89) generarMap -> . OPEN_BRACE tuplas CLOSE_BRACE
    (33) soloIf -> . IF OPEN_PARENTHESIS controlArg CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE

    COMMENTS        shift and go to state 13
    NAME            shift and go to state 16
    PRINT           shift and go to state 23
    RETURN          shift and go to state 24
    FUNCTION        shift and go to state 25
    CONST           shift and go to state 27
    LET             shift and go to state 28
    VAR             shift and go to state 29
    OPEN_BRACKET    shift and go to state 30
    NEW             shift and go to state 31
    WHILE           shift and go to state 35
    FOR             shift and go to state 36
    OPEN_BRACE      shift and go to state 26
    IF              shift and go to state 38

    expression                     shift and go to state 257
    semiExpression                 shift and go to state 2
    variable                       shift and go to state 3
    dataStruct                     shift and go to state 4
    controlStruct                  shift and go to state 5
    methodsSet                     shift and go to state 6
    mapFunctions                   shift and go to state 7
    arrayFn                        shift and go to state 8
    declaration                    shift and go to state 9
    print                          shift and go to state 10
    return                         shift and go to state 11
    function                       shift and go to state 12
    asigOp                         shift and go to state 14
    type                           shift and go to state 15
    array                          shift and go to state 17
    set                            shift and go to state 18
    map                            shift and go to state 19
    while                          shift and go to state 20
    for                            shift and go to state 21
    if                             shift and go to state 22
    iniciarMap                     shift and go to state 32
    escribirMap                    shift and go to state 33
    generarMap                     shift and go to state 34
    soloIf                         shift and go to state 37

state 236

    (103) methodsSet -> NAME POINT ADD OPEN_PARENTHESIS element CLOSE_PARENTHESIS . SEMICOLON

    SEMICOLON       shift and go to state 258


state 237

    (104) methodsSet -> NAME POINT DELETE OPEN_PARENTHESIS element CLOSE_PARENTHESIS . SEMICOLON

    SEMICOLON       shift and go to state 259


state 238

    (105) methodsSet -> NAME POINT CLEAR OPEN_PARENTHESIS CLOSE_PARENTHESIS SEMICOLON .
    (94) mapFunctions -> NAME POINT CLEAR OPEN_PARENTHESIS CLOSE_PARENTHESIS SEMICOLON .

  ! reduce/reduce conflict for COMMENTS resolved using rule 94 (mapFunctions -> NAME POINT CLEAR OPEN_PARENTHESIS CLOSE_PARENTHESIS SEMICOLON .)
  ! reduce/reduce conflict for NAME resolved using rule 94 (mapFunctions -> NAME POINT CLEAR OPEN_PARENTHESIS CLOSE_PARENTHESIS SEMICOLON .)
  ! reduce/reduce conflict for PRINT resolved using rule 94 (mapFunctions -> NAME POINT CLEAR OPEN_PARENTHESIS CLOSE_PARENTHESIS SEMICOLON .)
  ! reduce/reduce conflict for RETURN resolved using rule 94 (mapFunctions -> NAME POINT CLEAR OPEN_PARENTHESIS CLOSE_PARENTHESIS SEMICOLON .)
  ! reduce/reduce conflict for FUNCTION resolved using rule 94 (mapFunctions -> NAME POINT CLEAR OPEN_PARENTHESIS CLOSE_PARENTHESIS SEMICOLON .)
  ! reduce/reduce conflict for CONST resolved using rule 94 (mapFunctions -> NAME POINT CLEAR OPEN_PARENTHESIS CLOSE_PARENTHESIS SEMICOLON .)
  ! reduce/reduce conflict for LET resolved using rule 94 (mapFunctions -> NAME POINT CLEAR OPEN_PARENTHESIS CLOSE_PARENTHESIS SEMICOLON .)
  ! reduce/reduce conflict for VAR resolved using rule 94 (mapFunctions -> NAME POINT CLEAR OPEN_PARENTHESIS CLOSE_PARENTHESIS SEMICOLON .)
  ! reduce/reduce conflict for OPEN_BRACKET resolved using rule 94 (mapFunctions -> NAME POINT CLEAR OPEN_PARENTHESIS CLOSE_PARENTHESIS SEMICOLON .)
  ! reduce/reduce conflict for NEW resolved using rule 94 (mapFunctions -> NAME POINT CLEAR OPEN_PARENTHESIS CLOSE_PARENTHESIS SEMICOLON .)
  ! reduce/reduce conflict for WHILE resolved using rule 94 (mapFunctions -> NAME POINT CLEAR OPEN_PARENTHESIS CLOSE_PARENTHESIS SEMICOLON .)
  ! reduce/reduce conflict for FOR resolved using rule 94 (mapFunctions -> NAME POINT CLEAR OPEN_PARENTHESIS CLOSE_PARENTHESIS SEMICOLON .)
  ! reduce/reduce conflict for OPEN_BRACE resolved using rule 94 (mapFunctions -> NAME POINT CLEAR OPEN_PARENTHESIS CLOSE_PARENTHESIS SEMICOLON .)
  ! reduce/reduce conflict for IF resolved using rule 94 (mapFunctions -> NAME POINT CLEAR OPEN_PARENTHESIS CLOSE_PARENTHESIS SEMICOLON .)
  ! reduce/reduce conflict for $end resolved using rule 94 (mapFunctions -> NAME POINT CLEAR OPEN_PARENTHESIS CLOSE_PARENTHESIS SEMICOLON .)
  ! reduce/reduce conflict for CLOSE_BRACE resolved using rule 94 (mapFunctions -> NAME POINT CLEAR OPEN_PARENTHESIS CLOSE_PARENTHESIS SEMICOLON .)
    COMMENTS        reduce using rule 94 (mapFunctions -> NAME POINT CLEAR OPEN_PARENTHESIS CLOSE_PARENTHESIS SEMICOLON .)
    NAME            reduce using rule 94 (mapFunctions -> NAME POINT CLEAR OPEN_PARENTHESIS CLOSE_PARENTHESIS SEMICOLON .)
    PRINT           reduce using rule 94 (mapFunctions -> NAME POINT CLEAR OPEN_PARENTHESIS CLOSE_PARENTHESIS SEMICOLON .)
    RETURN          reduce using rule 94 (mapFunctions -> NAME POINT CLEAR OPEN_PARENTHESIS CLOSE_PARENTHESIS SEMICOLON .)
    FUNCTION        reduce using rule 94 (mapFunctions -> NAME POINT CLEAR OPEN_PARENTHESIS CLOSE_PARENTHESIS SEMICOLON .)
    CONST           reduce using rule 94 (mapFunctions -> NAME POINT CLEAR OPEN_PARENTHESIS CLOSE_PARENTHESIS SEMICOLON .)
    LET             reduce using rule 94 (mapFunctions -> NAME POINT CLEAR OPEN_PARENTHESIS CLOSE_PARENTHESIS SEMICOLON .)
    VAR             reduce using rule 94 (mapFunctions -> NAME POINT CLEAR OPEN_PARENTHESIS CLOSE_PARENTHESIS SEMICOLON .)
    OPEN_BRACKET    reduce using rule 94 (mapFunctions -> NAME POINT CLEAR OPEN_PARENTHESIS CLOSE_PARENTHESIS SEMICOLON .)
    NEW             reduce using rule 94 (mapFunctions -> NAME POINT CLEAR OPEN_PARENTHESIS CLOSE_PARENTHESIS SEMICOLON .)
    WHILE           reduce using rule 94 (mapFunctions -> NAME POINT CLEAR OPEN_PARENTHESIS CLOSE_PARENTHESIS SEMICOLON .)
    FOR             reduce using rule 94 (mapFunctions -> NAME POINT CLEAR OPEN_PARENTHESIS CLOSE_PARENTHESIS SEMICOLON .)
    OPEN_BRACE      reduce using rule 94 (mapFunctions -> NAME POINT CLEAR OPEN_PARENTHESIS CLOSE_PARENTHESIS SEMICOLON .)
    IF              reduce using rule 94 (mapFunctions -> NAME POINT CLEAR OPEN_PARENTHESIS CLOSE_PARENTHESIS SEMICOLON .)
    $end            reduce using rule 94 (mapFunctions -> NAME POINT CLEAR OPEN_PARENTHESIS CLOSE_PARENTHESIS SEMICOLON .)
    CLOSE_BRACE     reduce using rule 94 (mapFunctions -> NAME POINT CLEAR OPEN_PARENTHESIS CLOSE_PARENTHESIS SEMICOLON .)

  ! COMMENTS        [ reduce using rule 105 (methodsSet -> NAME POINT CLEAR OPEN_PARENTHESIS CLOSE_PARENTHESIS SEMICOLON .) ]
  ! NAME            [ reduce using rule 105 (methodsSet -> NAME POINT CLEAR OPEN_PARENTHESIS CLOSE_PARENTHESIS SEMICOLON .) ]
  ! PRINT           [ reduce using rule 105 (methodsSet -> NAME POINT CLEAR OPEN_PARENTHESIS CLOSE_PARENTHESIS SEMICOLON .) ]
  ! RETURN          [ reduce using rule 105 (methodsSet -> NAME POINT CLEAR OPEN_PARENTHESIS CLOSE_PARENTHESIS SEMICOLON .) ]
  ! FUNCTION        [ reduce using rule 105 (methodsSet -> NAME POINT CLEAR OPEN_PARENTHESIS CLOSE_PARENTHESIS SEMICOLON .) ]
  ! CONST           [ reduce using rule 105 (methodsSet -> NAME POINT CLEAR OPEN_PARENTHESIS CLOSE_PARENTHESIS SEMICOLON .) ]
  ! LET             [ reduce using rule 105 (methodsSet -> NAME POINT CLEAR OPEN_PARENTHESIS CLOSE_PARENTHESIS SEMICOLON .) ]
  ! VAR             [ reduce using rule 105 (methodsSet -> NAME POINT CLEAR OPEN_PARENTHESIS CLOSE_PARENTHESIS SEMICOLON .) ]
  ! OPEN_BRACKET    [ reduce using rule 105 (methodsSet -> NAME POINT CLEAR OPEN_PARENTHESIS CLOSE_PARENTHESIS SEMICOLON .) ]
  ! NEW             [ reduce using rule 105 (methodsSet -> NAME POINT CLEAR OPEN_PARENTHESIS CLOSE_PARENTHESIS SEMICOLON .) ]
  ! WHILE           [ reduce using rule 105 (methodsSet -> NAME POINT CLEAR OPEN_PARENTHESIS CLOSE_PARENTHESIS SEMICOLON .) ]
  ! FOR             [ reduce using rule 105 (methodsSet -> NAME POINT CLEAR OPEN_PARENTHESIS CLOSE_PARENTHESIS SEMICOLON .) ]
  ! OPEN_BRACE      [ reduce using rule 105 (methodsSet -> NAME POINT CLEAR OPEN_PARENTHESIS CLOSE_PARENTHESIS SEMICOLON .) ]
  ! IF              [ reduce using rule 105 (methodsSet -> NAME POINT CLEAR OPEN_PARENTHESIS CLOSE_PARENTHESIS SEMICOLON .) ]
  ! $end            [ reduce using rule 105 (methodsSet -> NAME POINT CLEAR OPEN_PARENTHESIS CLOSE_PARENTHESIS SEMICOLON .) ]
  ! CLOSE_BRACE     [ reduce using rule 105 (methodsSet -> NAME POINT CLEAR OPEN_PARENTHESIS CLOSE_PARENTHESIS SEMICOLON .) ]


state 239

    (95) mapFunctions -> NAME POINT GET OPEN_PARENTHESIS clave CLOSE_PARENTHESIS . SEMICOLON

    SEMICOLON       shift and go to state 260


state 240

    (96) mapFunctions -> NAME POINT HAS OPEN_PARENTHESIS clave CLOSE_PARENTHESIS . SEMICOLON

    SEMICOLON       shift and go to state 261


state 241

    (97) arrayFn -> NAME POINT POP OPEN_PARENTHESIS CLOSE_PARENTHESIS SEMICOLON .

    COMMENTS        reduce using rule 97 (arrayFn -> NAME POINT POP OPEN_PARENTHESIS CLOSE_PARENTHESIS SEMICOLON .)
    NAME            reduce using rule 97 (arrayFn -> NAME POINT POP OPEN_PARENTHESIS CLOSE_PARENTHESIS SEMICOLON .)
    PRINT           reduce using rule 97 (arrayFn -> NAME POINT POP OPEN_PARENTHESIS CLOSE_PARENTHESIS SEMICOLON .)
    RETURN          reduce using rule 97 (arrayFn -> NAME POINT POP OPEN_PARENTHESIS CLOSE_PARENTHESIS SEMICOLON .)
    FUNCTION        reduce using rule 97 (arrayFn -> NAME POINT POP OPEN_PARENTHESIS CLOSE_PARENTHESIS SEMICOLON .)
    CONST           reduce using rule 97 (arrayFn -> NAME POINT POP OPEN_PARENTHESIS CLOSE_PARENTHESIS SEMICOLON .)
    LET             reduce using rule 97 (arrayFn -> NAME POINT POP OPEN_PARENTHESIS CLOSE_PARENTHESIS SEMICOLON .)
    VAR             reduce using rule 97 (arrayFn -> NAME POINT POP OPEN_PARENTHESIS CLOSE_PARENTHESIS SEMICOLON .)
    OPEN_BRACKET    reduce using rule 97 (arrayFn -> NAME POINT POP OPEN_PARENTHESIS CLOSE_PARENTHESIS SEMICOLON .)
    NEW             reduce using rule 97 (arrayFn -> NAME POINT POP OPEN_PARENTHESIS CLOSE_PARENTHESIS SEMICOLON .)
    WHILE           reduce using rule 97 (arrayFn -> NAME POINT POP OPEN_PARENTHESIS CLOSE_PARENTHESIS SEMICOLON .)
    FOR             reduce using rule 97 (arrayFn -> NAME POINT POP OPEN_PARENTHESIS CLOSE_PARENTHESIS SEMICOLON .)
    OPEN_BRACE      reduce using rule 97 (arrayFn -> NAME POINT POP OPEN_PARENTHESIS CLOSE_PARENTHESIS SEMICOLON .)
    IF              reduce using rule 97 (arrayFn -> NAME POINT POP OPEN_PARENTHESIS CLOSE_PARENTHESIS SEMICOLON .)
    $end            reduce using rule 97 (arrayFn -> NAME POINT POP OPEN_PARENTHESIS CLOSE_PARENTHESIS SEMICOLON .)
    CLOSE_BRACE     reduce using rule 97 (arrayFn -> NAME POINT POP OPEN_PARENTHESIS CLOSE_PARENTHESIS SEMICOLON .)


state 242

    (98) arrayFn -> NAME POINT PUSH OPEN_PARENTHESIS element CLOSE_PARENTHESIS . SEMICOLON

    SEMICOLON       shift and go to state 262


state 243

    (99) arrayFn -> NAME POINT UNSHIFT OPEN_PARENTHESIS element CLOSE_PARENTHESIS . SEMICOLON

    SEMICOLON       shift and go to state 263


state 244

    (125) function -> FUNCTION NAME OPEN_PARENTHESIS CLOSE_PARENTHESIS OPEN_BRACE expression . CLOSE_BRACE

    CLOSE_BRACE     shift and go to state 264


state 245

    (126) function -> FUNCTION NAME OPEN_PARENTHESIS parameter CLOSE_PARENTHESIS OPEN_BRACE . expression CLOSE_BRACE
    (1) expression -> . semiExpression
    (2) expression -> . semiExpression expression
    (3) semiExpression -> . variable
    (4) semiExpression -> . dataStruct
    (5) semiExpression -> . controlStruct
    (6) semiExpression -> . methodsSet
    (7) semiExpression -> . mapFunctions
    (8) semiExpression -> . arrayFn
    (9) semiExpression -> . declaration
    (10) semiExpression -> . print
    (11) semiExpression -> . return
    (12) semiExpression -> . function
    (13) semiExpression -> . COMMENTS
    (14) semiExpression -> . asigOp
    (19) variable -> . type NAME IGUAL datatype SEMICOLON
    (20) variable -> . NAME IGUAL datatype SEMICOLON
    (24) dataStruct -> . array
    (25) dataStruct -> . set
    (26) dataStruct -> . map
    (21) controlStruct -> . while
    (22) controlStruct -> . for
    (23) controlStruct -> . if
    (103) methodsSet -> . NAME POINT ADD OPEN_PARENTHESIS element CLOSE_PARENTHESIS SEMICOLON
    (104) methodsSet -> . NAME POINT DELETE OPEN_PARENTHESIS element CLOSE_PARENTHESIS SEMICOLON
    (105) methodsSet -> . NAME POINT CLEAR OPEN_PARENTHESIS CLOSE_PARENTHESIS SEMICOLON
    (94) mapFunctions -> . NAME POINT CLEAR OPEN_PARENTHESIS CLOSE_PARENTHESIS SEMICOLON
    (95) mapFunctions -> . NAME POINT GET OPEN_PARENTHESIS clave CLOSE_PARENTHESIS SEMICOLON
    (96) mapFunctions -> . NAME POINT HAS OPEN_PARENTHESIS clave CLOSE_PARENTHESIS SEMICOLON
    (97) arrayFn -> . NAME POINT POP OPEN_PARENTHESIS CLOSE_PARENTHESIS SEMICOLON
    (98) arrayFn -> . NAME POINT PUSH OPEN_PARENTHESIS element CLOSE_PARENTHESIS SEMICOLON
    (99) arrayFn -> . NAME POINT UNSHIFT OPEN_PARENTHESIS element CLOSE_PARENTHESIS SEMICOLON
    (118) declaration -> . NAME IGUAL element SEMICOLON
    (130) print -> . PRINT OPEN_PARENTHESIS CLOSE_PARENTHESIS SEMICOLON
    (129) return -> . RETURN element SEMICOLON
    (125) function -> . FUNCTION NAME OPEN_PARENTHESIS CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE
    (126) function -> . FUNCTION NAME OPEN_PARENTHESIS parameter CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE
    (67) asigOp -> . NAME operadorAsig number SEMICOLON
    (70) type -> . CONST
    (71) type -> . LET
    (72) type -> . VAR
    (79) array -> . OPEN_BRACKET items CLOSE_BRACKET SEMICOLON
    (80) array -> . NEW ARRAY OPEN_PARENTHESIS items CLOSE_PARENTHESIS SEMICOLON
    (100) set -> . NEW SET OPEN_PARENTHESIS CLOSE_PARENTHESIS SEMICOLON
    (101) set -> . NEW SET OPEN_PARENTHESIS OPEN_BRACKET items CLOSE_BRACKET CLOSE_PARENTHESIS SEMICOLON
    (102) set -> . NEW SET OPEN_PARENTHESIS element CLOSE_PARENTHESIS SEMICOLON
    (81) map -> . iniciarMap
    (82) map -> . escribirMap
    (83) map -> . generarMap
    (27) while -> . WHILE OPEN_PARENTHESIS controlArg CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE
    (28) while -> . WHILE OPEN_PARENTHESIS bool CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE
    (38) for -> . FOR OPEN_PARENTHESIS inicialization SEMICOLON expBoolean SEMICOLON operations CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE
    (29) if -> . soloIf
    (30) if -> . soloIf elseIf
    (31) if -> . soloIf elseIf else
    (32) if -> . soloIf else
    (84) iniciarMap -> . NEW MAP OPEN_PARENTHESIS CLOSE_PARENTHESIS SEMICOLON
    (85) escribirMap -> . OPEN_BRACE claveValor CLOSE_BRACE
    (89) generarMap -> . OPEN_BRACE tuplas CLOSE_BRACE
    (33) soloIf -> . IF OPEN_PARENTHESIS controlArg CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE

    COMMENTS        shift and go to state 13
    NAME            shift and go to state 16
    PRINT           shift and go to state 23
    RETURN          shift and go to state 24
    FUNCTION        shift and go to state 25
    CONST           shift and go to state 27
    LET             shift and go to state 28
    VAR             shift and go to state 29
    OPEN_BRACKET    shift and go to state 30
    NEW             shift and go to state 31
    WHILE           shift and go to state 35
    FOR             shift and go to state 36
    OPEN_BRACE      shift and go to state 26
    IF              shift and go to state 38

    expression                     shift and go to state 265
    semiExpression                 shift and go to state 2
    variable                       shift and go to state 3
    dataStruct                     shift and go to state 4
    controlStruct                  shift and go to state 5
    methodsSet                     shift and go to state 6
    mapFunctions                   shift and go to state 7
    arrayFn                        shift and go to state 8
    declaration                    shift and go to state 9
    print                          shift and go to state 10
    return                         shift and go to state 11
    function                       shift and go to state 12
    asigOp                         shift and go to state 14
    type                           shift and go to state 15
    array                          shift and go to state 17
    set                            shift and go to state 18
    map                            shift and go to state 19
    while                          shift and go to state 20
    for                            shift and go to state 21
    if                             shift and go to state 22
    iniciarMap                     shift and go to state 32
    escribirMap                    shift and go to state 33
    generarMap                     shift and go to state 34
    soloIf                         shift and go to state 37

state 246

    (87) claveValor -> clave COLON datatype COMMA claveValor .

    CLOSE_BRACE     reduce using rule 87 (claveValor -> clave COLON datatype COMMA claveValor .)


state 247

    (93) tupla -> OPEN_BRACKET datatype COMMA datatype CLOSE_BRACKET . SEMICOLON

    SEMICOLON       shift and go to state 266


state 248

    (49) operations -> number operand number operand operations .

    COLON           reduce using rule 49 (operations -> number operand number operand operations .)
    COMMA           reduce using rule 49 (operations -> number operand number operand operations .)
    CLOSE_BRACKET   reduce using rule 49 (operations -> number operand number operand operations .)
    SEMICOLON       reduce using rule 49 (operations -> number operand number operand operations .)
    CLOSE_BRACE     reduce using rule 49 (operations -> number operand number operand operations .)
    CLOSE_PARENTHESIS reduce using rule 49 (operations -> number operand number operand operations .)


state 249

    (80) array -> NEW ARRAY OPEN_PARENTHESIS items CLOSE_PARENTHESIS SEMICOLON .

    COMMENTS        reduce using rule 80 (array -> NEW ARRAY OPEN_PARENTHESIS items CLOSE_PARENTHESIS SEMICOLON .)
    NAME            reduce using rule 80 (array -> NEW ARRAY OPEN_PARENTHESIS items CLOSE_PARENTHESIS SEMICOLON .)
    PRINT           reduce using rule 80 (array -> NEW ARRAY OPEN_PARENTHESIS items CLOSE_PARENTHESIS SEMICOLON .)
    RETURN          reduce using rule 80 (array -> NEW ARRAY OPEN_PARENTHESIS items CLOSE_PARENTHESIS SEMICOLON .)
    FUNCTION        reduce using rule 80 (array -> NEW ARRAY OPEN_PARENTHESIS items CLOSE_PARENTHESIS SEMICOLON .)
    CONST           reduce using rule 80 (array -> NEW ARRAY OPEN_PARENTHESIS items CLOSE_PARENTHESIS SEMICOLON .)
    LET             reduce using rule 80 (array -> NEW ARRAY OPEN_PARENTHESIS items CLOSE_PARENTHESIS SEMICOLON .)
    VAR             reduce using rule 80 (array -> NEW ARRAY OPEN_PARENTHESIS items CLOSE_PARENTHESIS SEMICOLON .)
    OPEN_BRACKET    reduce using rule 80 (array -> NEW ARRAY OPEN_PARENTHESIS items CLOSE_PARENTHESIS SEMICOLON .)
    NEW             reduce using rule 80 (array -> NEW ARRAY OPEN_PARENTHESIS items CLOSE_PARENTHESIS SEMICOLON .)
    WHILE           reduce using rule 80 (array -> NEW ARRAY OPEN_PARENTHESIS items CLOSE_PARENTHESIS SEMICOLON .)
    FOR             reduce using rule 80 (array -> NEW ARRAY OPEN_PARENTHESIS items CLOSE_PARENTHESIS SEMICOLON .)
    OPEN_BRACE      reduce using rule 80 (array -> NEW ARRAY OPEN_PARENTHESIS items CLOSE_PARENTHESIS SEMICOLON .)
    IF              reduce using rule 80 (array -> NEW ARRAY OPEN_PARENTHESIS items CLOSE_PARENTHESIS SEMICOLON .)
    $end            reduce using rule 80 (array -> NEW ARRAY OPEN_PARENTHESIS items CLOSE_PARENTHESIS SEMICOLON .)
    CLOSE_BRACE     reduce using rule 80 (array -> NEW ARRAY OPEN_PARENTHESIS items CLOSE_PARENTHESIS SEMICOLON .)
    COLON           reduce using rule 80 (array -> NEW ARRAY OPEN_PARENTHESIS items CLOSE_PARENTHESIS SEMICOLON .)
    COMMA           reduce using rule 80 (array -> NEW ARRAY OPEN_PARENTHESIS items CLOSE_PARENTHESIS SEMICOLON .)
    CLOSE_BRACKET   reduce using rule 80 (array -> NEW ARRAY OPEN_PARENTHESIS items CLOSE_PARENTHESIS SEMICOLON .)
    SEMICOLON       reduce using rule 80 (array -> NEW ARRAY OPEN_PARENTHESIS items CLOSE_PARENTHESIS SEMICOLON .)
    CLOSE_PARENTHESIS reduce using rule 80 (array -> NEW ARRAY OPEN_PARENTHESIS items CLOSE_PARENTHESIS SEMICOLON .)


state 250

    (101) set -> NEW SET OPEN_PARENTHESIS OPEN_BRACKET items CLOSE_BRACKET . CLOSE_PARENTHESIS SEMICOLON

    CLOSE_PARENTHESIS shift and go to state 267


state 251

    (102) set -> NEW SET OPEN_PARENTHESIS element CLOSE_PARENTHESIS SEMICOLON .

    COMMENTS        reduce using rule 102 (set -> NEW SET OPEN_PARENTHESIS element CLOSE_PARENTHESIS SEMICOLON .)
    NAME            reduce using rule 102 (set -> NEW SET OPEN_PARENTHESIS element CLOSE_PARENTHESIS SEMICOLON .)
    PRINT           reduce using rule 102 (set -> NEW SET OPEN_PARENTHESIS element CLOSE_PARENTHESIS SEMICOLON .)
    RETURN          reduce using rule 102 (set -> NEW SET OPEN_PARENTHESIS element CLOSE_PARENTHESIS SEMICOLON .)
    FUNCTION        reduce using rule 102 (set -> NEW SET OPEN_PARENTHESIS element CLOSE_PARENTHESIS SEMICOLON .)
    CONST           reduce using rule 102 (set -> NEW SET OPEN_PARENTHESIS element CLOSE_PARENTHESIS SEMICOLON .)
    LET             reduce using rule 102 (set -> NEW SET OPEN_PARENTHESIS element CLOSE_PARENTHESIS SEMICOLON .)
    VAR             reduce using rule 102 (set -> NEW SET OPEN_PARENTHESIS element CLOSE_PARENTHESIS SEMICOLON .)
    OPEN_BRACKET    reduce using rule 102 (set -> NEW SET OPEN_PARENTHESIS element CLOSE_PARENTHESIS SEMICOLON .)
    NEW             reduce using rule 102 (set -> NEW SET OPEN_PARENTHESIS element CLOSE_PARENTHESIS SEMICOLON .)
    WHILE           reduce using rule 102 (set -> NEW SET OPEN_PARENTHESIS element CLOSE_PARENTHESIS SEMICOLON .)
    FOR             reduce using rule 102 (set -> NEW SET OPEN_PARENTHESIS element CLOSE_PARENTHESIS SEMICOLON .)
    OPEN_BRACE      reduce using rule 102 (set -> NEW SET OPEN_PARENTHESIS element CLOSE_PARENTHESIS SEMICOLON .)
    IF              reduce using rule 102 (set -> NEW SET OPEN_PARENTHESIS element CLOSE_PARENTHESIS SEMICOLON .)
    $end            reduce using rule 102 (set -> NEW SET OPEN_PARENTHESIS element CLOSE_PARENTHESIS SEMICOLON .)
    CLOSE_BRACE     reduce using rule 102 (set -> NEW SET OPEN_PARENTHESIS element CLOSE_PARENTHESIS SEMICOLON .)
    COLON           reduce using rule 102 (set -> NEW SET OPEN_PARENTHESIS element CLOSE_PARENTHESIS SEMICOLON .)
    COMMA           reduce using rule 102 (set -> NEW SET OPEN_PARENTHESIS element CLOSE_PARENTHESIS SEMICOLON .)
    CLOSE_BRACKET   reduce using rule 102 (set -> NEW SET OPEN_PARENTHESIS element CLOSE_PARENTHESIS SEMICOLON .)
    SEMICOLON       reduce using rule 102 (set -> NEW SET OPEN_PARENTHESIS element CLOSE_PARENTHESIS SEMICOLON .)
    CLOSE_PARENTHESIS reduce using rule 102 (set -> NEW SET OPEN_PARENTHESIS element CLOSE_PARENTHESIS SEMICOLON .)


state 252

    (27) while -> WHILE OPEN_PARENTHESIS controlArg CLOSE_PARENTHESIS OPEN_BRACE expression . CLOSE_BRACE

    CLOSE_BRACE     shift and go to state 268


state 253

    (28) while -> WHILE OPEN_PARENTHESIS bool CLOSE_PARENTHESIS OPEN_BRACE expression . CLOSE_BRACE

    CLOSE_BRACE     shift and go to state 269


state 254

    (38) for -> FOR OPEN_PARENTHESIS inicialization SEMICOLON expBoolean SEMICOLON . operations CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE
    (41) operations -> . number operand number
    (42) operations -> . NAME
    (43) operations -> . number
    (44) operations -> . number operand NAME operations
    (45) operations -> . NAME operand number operations
    (46) operations -> . number operand NAME
    (47) operations -> . NAME operand number
    (48) operations -> . NAME operand NAME operations
    (49) operations -> . number operand number operand operations
    (50) operations -> . NAME SUMA SUMA
    (51) operations -> . NAME RESTA RESTA
    (15) number -> . INTEGER
    (16) number -> . FLOAT
    (17) number -> . OPEN_PARENTHESIS RESTA INTEGER CLOSE_PARENTHESIS
    (18) number -> . OPEN_PARENTHESIS RESTA FLOAT CLOSE_PARENTHESIS

    NAME            shift and go to state 70
    INTEGER         shift and go to state 55
    FLOAT           shift and go to state 56
    OPEN_PARENTHESIS shift and go to state 57

    operations                     shift and go to state 270
    number                         shift and go to state 219

state 255

    (39) inicialization -> type NAME IGUAL number .

    SEMICOLON       reduce using rule 39 (inicialization -> type NAME IGUAL number .)


state 256

    (34) elseIf -> ELSEIF OPEN_PARENTHESIS controlArg CLOSE_PARENTHESIS OPEN_BRACE . expression CLOSE_BRACE
    (35) elseIf -> ELSEIF OPEN_PARENTHESIS controlArg CLOSE_PARENTHESIS OPEN_BRACE . expression CLOSE_BRACE soloIf
    (1) expression -> . semiExpression
    (2) expression -> . semiExpression expression
    (3) semiExpression -> . variable
    (4) semiExpression -> . dataStruct
    (5) semiExpression -> . controlStruct
    (6) semiExpression -> . methodsSet
    (7) semiExpression -> . mapFunctions
    (8) semiExpression -> . arrayFn
    (9) semiExpression -> . declaration
    (10) semiExpression -> . print
    (11) semiExpression -> . return
    (12) semiExpression -> . function
    (13) semiExpression -> . COMMENTS
    (14) semiExpression -> . asigOp
    (19) variable -> . type NAME IGUAL datatype SEMICOLON
    (20) variable -> . NAME IGUAL datatype SEMICOLON
    (24) dataStruct -> . array
    (25) dataStruct -> . set
    (26) dataStruct -> . map
    (21) controlStruct -> . while
    (22) controlStruct -> . for
    (23) controlStruct -> . if
    (103) methodsSet -> . NAME POINT ADD OPEN_PARENTHESIS element CLOSE_PARENTHESIS SEMICOLON
    (104) methodsSet -> . NAME POINT DELETE OPEN_PARENTHESIS element CLOSE_PARENTHESIS SEMICOLON
    (105) methodsSet -> . NAME POINT CLEAR OPEN_PARENTHESIS CLOSE_PARENTHESIS SEMICOLON
    (94) mapFunctions -> . NAME POINT CLEAR OPEN_PARENTHESIS CLOSE_PARENTHESIS SEMICOLON
    (95) mapFunctions -> . NAME POINT GET OPEN_PARENTHESIS clave CLOSE_PARENTHESIS SEMICOLON
    (96) mapFunctions -> . NAME POINT HAS OPEN_PARENTHESIS clave CLOSE_PARENTHESIS SEMICOLON
    (97) arrayFn -> . NAME POINT POP OPEN_PARENTHESIS CLOSE_PARENTHESIS SEMICOLON
    (98) arrayFn -> . NAME POINT PUSH OPEN_PARENTHESIS element CLOSE_PARENTHESIS SEMICOLON
    (99) arrayFn -> . NAME POINT UNSHIFT OPEN_PARENTHESIS element CLOSE_PARENTHESIS SEMICOLON
    (118) declaration -> . NAME IGUAL element SEMICOLON
    (130) print -> . PRINT OPEN_PARENTHESIS CLOSE_PARENTHESIS SEMICOLON
    (129) return -> . RETURN element SEMICOLON
    (125) function -> . FUNCTION NAME OPEN_PARENTHESIS CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE
    (126) function -> . FUNCTION NAME OPEN_PARENTHESIS parameter CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE
    (67) asigOp -> . NAME operadorAsig number SEMICOLON
    (70) type -> . CONST
    (71) type -> . LET
    (72) type -> . VAR
    (79) array -> . OPEN_BRACKET items CLOSE_BRACKET SEMICOLON
    (80) array -> . NEW ARRAY OPEN_PARENTHESIS items CLOSE_PARENTHESIS SEMICOLON
    (100) set -> . NEW SET OPEN_PARENTHESIS CLOSE_PARENTHESIS SEMICOLON
    (101) set -> . NEW SET OPEN_PARENTHESIS OPEN_BRACKET items CLOSE_BRACKET CLOSE_PARENTHESIS SEMICOLON
    (102) set -> . NEW SET OPEN_PARENTHESIS element CLOSE_PARENTHESIS SEMICOLON
    (81) map -> . iniciarMap
    (82) map -> . escribirMap
    (83) map -> . generarMap
    (27) while -> . WHILE OPEN_PARENTHESIS controlArg CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE
    (28) while -> . WHILE OPEN_PARENTHESIS bool CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE
    (38) for -> . FOR OPEN_PARENTHESIS inicialization SEMICOLON expBoolean SEMICOLON operations CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE
    (29) if -> . soloIf
    (30) if -> . soloIf elseIf
    (31) if -> . soloIf elseIf else
    (32) if -> . soloIf else
    (84) iniciarMap -> . NEW MAP OPEN_PARENTHESIS CLOSE_PARENTHESIS SEMICOLON
    (85) escribirMap -> . OPEN_BRACE claveValor CLOSE_BRACE
    (89) generarMap -> . OPEN_BRACE tuplas CLOSE_BRACE
    (33) soloIf -> . IF OPEN_PARENTHESIS controlArg CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE

    COMMENTS        shift and go to state 13
    NAME            shift and go to state 16
    PRINT           shift and go to state 23
    RETURN          shift and go to state 24
    FUNCTION        shift and go to state 25
    CONST           shift and go to state 27
    LET             shift and go to state 28
    VAR             shift and go to state 29
    OPEN_BRACKET    shift and go to state 30
    NEW             shift and go to state 31
    WHILE           shift and go to state 35
    FOR             shift and go to state 36
    OPEN_BRACE      shift and go to state 26
    IF              shift and go to state 38

    expression                     shift and go to state 271
    soloIf                         shift and go to state 37
    semiExpression                 shift and go to state 2
    variable                       shift and go to state 3
    dataStruct                     shift and go to state 4
    controlStruct                  shift and go to state 5
    methodsSet                     shift and go to state 6
    mapFunctions                   shift and go to state 7
    arrayFn                        shift and go to state 8
    declaration                    shift and go to state 9
    print                          shift and go to state 10
    return                         shift and go to state 11
    function                       shift and go to state 12
    asigOp                         shift and go to state 14
    type                           shift and go to state 15
    array                          shift and go to state 17
    set                            shift and go to state 18
    map                            shift and go to state 19
    while                          shift and go to state 20
    for                            shift and go to state 21
    if                             shift and go to state 22
    iniciarMap                     shift and go to state 32
    escribirMap                    shift and go to state 33
    generarMap                     shift and go to state 34

state 257

    (33) soloIf -> IF OPEN_PARENTHESIS controlArg CLOSE_PARENTHESIS OPEN_BRACE expression . CLOSE_BRACE

    CLOSE_BRACE     shift and go to state 272


state 258

    (103) methodsSet -> NAME POINT ADD OPEN_PARENTHESIS element CLOSE_PARENTHESIS SEMICOLON .

    COMMENTS        reduce using rule 103 (methodsSet -> NAME POINT ADD OPEN_PARENTHESIS element CLOSE_PARENTHESIS SEMICOLON .)
    NAME            reduce using rule 103 (methodsSet -> NAME POINT ADD OPEN_PARENTHESIS element CLOSE_PARENTHESIS SEMICOLON .)
    PRINT           reduce using rule 103 (methodsSet -> NAME POINT ADD OPEN_PARENTHESIS element CLOSE_PARENTHESIS SEMICOLON .)
    RETURN          reduce using rule 103 (methodsSet -> NAME POINT ADD OPEN_PARENTHESIS element CLOSE_PARENTHESIS SEMICOLON .)
    FUNCTION        reduce using rule 103 (methodsSet -> NAME POINT ADD OPEN_PARENTHESIS element CLOSE_PARENTHESIS SEMICOLON .)
    CONST           reduce using rule 103 (methodsSet -> NAME POINT ADD OPEN_PARENTHESIS element CLOSE_PARENTHESIS SEMICOLON .)
    LET             reduce using rule 103 (methodsSet -> NAME POINT ADD OPEN_PARENTHESIS element CLOSE_PARENTHESIS SEMICOLON .)
    VAR             reduce using rule 103 (methodsSet -> NAME POINT ADD OPEN_PARENTHESIS element CLOSE_PARENTHESIS SEMICOLON .)
    OPEN_BRACKET    reduce using rule 103 (methodsSet -> NAME POINT ADD OPEN_PARENTHESIS element CLOSE_PARENTHESIS SEMICOLON .)
    NEW             reduce using rule 103 (methodsSet -> NAME POINT ADD OPEN_PARENTHESIS element CLOSE_PARENTHESIS SEMICOLON .)
    WHILE           reduce using rule 103 (methodsSet -> NAME POINT ADD OPEN_PARENTHESIS element CLOSE_PARENTHESIS SEMICOLON .)
    FOR             reduce using rule 103 (methodsSet -> NAME POINT ADD OPEN_PARENTHESIS element CLOSE_PARENTHESIS SEMICOLON .)
    OPEN_BRACE      reduce using rule 103 (methodsSet -> NAME POINT ADD OPEN_PARENTHESIS element CLOSE_PARENTHESIS SEMICOLON .)
    IF              reduce using rule 103 (methodsSet -> NAME POINT ADD OPEN_PARENTHESIS element CLOSE_PARENTHESIS SEMICOLON .)
    $end            reduce using rule 103 (methodsSet -> NAME POINT ADD OPEN_PARENTHESIS element CLOSE_PARENTHESIS SEMICOLON .)
    CLOSE_BRACE     reduce using rule 103 (methodsSet -> NAME POINT ADD OPEN_PARENTHESIS element CLOSE_PARENTHESIS SEMICOLON .)


state 259

    (104) methodsSet -> NAME POINT DELETE OPEN_PARENTHESIS element CLOSE_PARENTHESIS SEMICOLON .

    COMMENTS        reduce using rule 104 (methodsSet -> NAME POINT DELETE OPEN_PARENTHESIS element CLOSE_PARENTHESIS SEMICOLON .)
    NAME            reduce using rule 104 (methodsSet -> NAME POINT DELETE OPEN_PARENTHESIS element CLOSE_PARENTHESIS SEMICOLON .)
    PRINT           reduce using rule 104 (methodsSet -> NAME POINT DELETE OPEN_PARENTHESIS element CLOSE_PARENTHESIS SEMICOLON .)
    RETURN          reduce using rule 104 (methodsSet -> NAME POINT DELETE OPEN_PARENTHESIS element CLOSE_PARENTHESIS SEMICOLON .)
    FUNCTION        reduce using rule 104 (methodsSet -> NAME POINT DELETE OPEN_PARENTHESIS element CLOSE_PARENTHESIS SEMICOLON .)
    CONST           reduce using rule 104 (methodsSet -> NAME POINT DELETE OPEN_PARENTHESIS element CLOSE_PARENTHESIS SEMICOLON .)
    LET             reduce using rule 104 (methodsSet -> NAME POINT DELETE OPEN_PARENTHESIS element CLOSE_PARENTHESIS SEMICOLON .)
    VAR             reduce using rule 104 (methodsSet -> NAME POINT DELETE OPEN_PARENTHESIS element CLOSE_PARENTHESIS SEMICOLON .)
    OPEN_BRACKET    reduce using rule 104 (methodsSet -> NAME POINT DELETE OPEN_PARENTHESIS element CLOSE_PARENTHESIS SEMICOLON .)
    NEW             reduce using rule 104 (methodsSet -> NAME POINT DELETE OPEN_PARENTHESIS element CLOSE_PARENTHESIS SEMICOLON .)
    WHILE           reduce using rule 104 (methodsSet -> NAME POINT DELETE OPEN_PARENTHESIS element CLOSE_PARENTHESIS SEMICOLON .)
    FOR             reduce using rule 104 (methodsSet -> NAME POINT DELETE OPEN_PARENTHESIS element CLOSE_PARENTHESIS SEMICOLON .)
    OPEN_BRACE      reduce using rule 104 (methodsSet -> NAME POINT DELETE OPEN_PARENTHESIS element CLOSE_PARENTHESIS SEMICOLON .)
    IF              reduce using rule 104 (methodsSet -> NAME POINT DELETE OPEN_PARENTHESIS element CLOSE_PARENTHESIS SEMICOLON .)
    $end            reduce using rule 104 (methodsSet -> NAME POINT DELETE OPEN_PARENTHESIS element CLOSE_PARENTHESIS SEMICOLON .)
    CLOSE_BRACE     reduce using rule 104 (methodsSet -> NAME POINT DELETE OPEN_PARENTHESIS element CLOSE_PARENTHESIS SEMICOLON .)


state 260

    (95) mapFunctions -> NAME POINT GET OPEN_PARENTHESIS clave CLOSE_PARENTHESIS SEMICOLON .

    COMMENTS        reduce using rule 95 (mapFunctions -> NAME POINT GET OPEN_PARENTHESIS clave CLOSE_PARENTHESIS SEMICOLON .)
    NAME            reduce using rule 95 (mapFunctions -> NAME POINT GET OPEN_PARENTHESIS clave CLOSE_PARENTHESIS SEMICOLON .)
    PRINT           reduce using rule 95 (mapFunctions -> NAME POINT GET OPEN_PARENTHESIS clave CLOSE_PARENTHESIS SEMICOLON .)
    RETURN          reduce using rule 95 (mapFunctions -> NAME POINT GET OPEN_PARENTHESIS clave CLOSE_PARENTHESIS SEMICOLON .)
    FUNCTION        reduce using rule 95 (mapFunctions -> NAME POINT GET OPEN_PARENTHESIS clave CLOSE_PARENTHESIS SEMICOLON .)
    CONST           reduce using rule 95 (mapFunctions -> NAME POINT GET OPEN_PARENTHESIS clave CLOSE_PARENTHESIS SEMICOLON .)
    LET             reduce using rule 95 (mapFunctions -> NAME POINT GET OPEN_PARENTHESIS clave CLOSE_PARENTHESIS SEMICOLON .)
    VAR             reduce using rule 95 (mapFunctions -> NAME POINT GET OPEN_PARENTHESIS clave CLOSE_PARENTHESIS SEMICOLON .)
    OPEN_BRACKET    reduce using rule 95 (mapFunctions -> NAME POINT GET OPEN_PARENTHESIS clave CLOSE_PARENTHESIS SEMICOLON .)
    NEW             reduce using rule 95 (mapFunctions -> NAME POINT GET OPEN_PARENTHESIS clave CLOSE_PARENTHESIS SEMICOLON .)
    WHILE           reduce using rule 95 (mapFunctions -> NAME POINT GET OPEN_PARENTHESIS clave CLOSE_PARENTHESIS SEMICOLON .)
    FOR             reduce using rule 95 (mapFunctions -> NAME POINT GET OPEN_PARENTHESIS clave CLOSE_PARENTHESIS SEMICOLON .)
    OPEN_BRACE      reduce using rule 95 (mapFunctions -> NAME POINT GET OPEN_PARENTHESIS clave CLOSE_PARENTHESIS SEMICOLON .)
    IF              reduce using rule 95 (mapFunctions -> NAME POINT GET OPEN_PARENTHESIS clave CLOSE_PARENTHESIS SEMICOLON .)
    $end            reduce using rule 95 (mapFunctions -> NAME POINT GET OPEN_PARENTHESIS clave CLOSE_PARENTHESIS SEMICOLON .)
    CLOSE_BRACE     reduce using rule 95 (mapFunctions -> NAME POINT GET OPEN_PARENTHESIS clave CLOSE_PARENTHESIS SEMICOLON .)


state 261

    (96) mapFunctions -> NAME POINT HAS OPEN_PARENTHESIS clave CLOSE_PARENTHESIS SEMICOLON .

    COMMENTS        reduce using rule 96 (mapFunctions -> NAME POINT HAS OPEN_PARENTHESIS clave CLOSE_PARENTHESIS SEMICOLON .)
    NAME            reduce using rule 96 (mapFunctions -> NAME POINT HAS OPEN_PARENTHESIS clave CLOSE_PARENTHESIS SEMICOLON .)
    PRINT           reduce using rule 96 (mapFunctions -> NAME POINT HAS OPEN_PARENTHESIS clave CLOSE_PARENTHESIS SEMICOLON .)
    RETURN          reduce using rule 96 (mapFunctions -> NAME POINT HAS OPEN_PARENTHESIS clave CLOSE_PARENTHESIS SEMICOLON .)
    FUNCTION        reduce using rule 96 (mapFunctions -> NAME POINT HAS OPEN_PARENTHESIS clave CLOSE_PARENTHESIS SEMICOLON .)
    CONST           reduce using rule 96 (mapFunctions -> NAME POINT HAS OPEN_PARENTHESIS clave CLOSE_PARENTHESIS SEMICOLON .)
    LET             reduce using rule 96 (mapFunctions -> NAME POINT HAS OPEN_PARENTHESIS clave CLOSE_PARENTHESIS SEMICOLON .)
    VAR             reduce using rule 96 (mapFunctions -> NAME POINT HAS OPEN_PARENTHESIS clave CLOSE_PARENTHESIS SEMICOLON .)
    OPEN_BRACKET    reduce using rule 96 (mapFunctions -> NAME POINT HAS OPEN_PARENTHESIS clave CLOSE_PARENTHESIS SEMICOLON .)
    NEW             reduce using rule 96 (mapFunctions -> NAME POINT HAS OPEN_PARENTHESIS clave CLOSE_PARENTHESIS SEMICOLON .)
    WHILE           reduce using rule 96 (mapFunctions -> NAME POINT HAS OPEN_PARENTHESIS clave CLOSE_PARENTHESIS SEMICOLON .)
    FOR             reduce using rule 96 (mapFunctions -> NAME POINT HAS OPEN_PARENTHESIS clave CLOSE_PARENTHESIS SEMICOLON .)
    OPEN_BRACE      reduce using rule 96 (mapFunctions -> NAME POINT HAS OPEN_PARENTHESIS clave CLOSE_PARENTHESIS SEMICOLON .)
    IF              reduce using rule 96 (mapFunctions -> NAME POINT HAS OPEN_PARENTHESIS clave CLOSE_PARENTHESIS SEMICOLON .)
    $end            reduce using rule 96 (mapFunctions -> NAME POINT HAS OPEN_PARENTHESIS clave CLOSE_PARENTHESIS SEMICOLON .)
    CLOSE_BRACE     reduce using rule 96 (mapFunctions -> NAME POINT HAS OPEN_PARENTHESIS clave CLOSE_PARENTHESIS SEMICOLON .)


state 262

    (98) arrayFn -> NAME POINT PUSH OPEN_PARENTHESIS element CLOSE_PARENTHESIS SEMICOLON .

    COMMENTS        reduce using rule 98 (arrayFn -> NAME POINT PUSH OPEN_PARENTHESIS element CLOSE_PARENTHESIS SEMICOLON .)
    NAME            reduce using rule 98 (arrayFn -> NAME POINT PUSH OPEN_PARENTHESIS element CLOSE_PARENTHESIS SEMICOLON .)
    PRINT           reduce using rule 98 (arrayFn -> NAME POINT PUSH OPEN_PARENTHESIS element CLOSE_PARENTHESIS SEMICOLON .)
    RETURN          reduce using rule 98 (arrayFn -> NAME POINT PUSH OPEN_PARENTHESIS element CLOSE_PARENTHESIS SEMICOLON .)
    FUNCTION        reduce using rule 98 (arrayFn -> NAME POINT PUSH OPEN_PARENTHESIS element CLOSE_PARENTHESIS SEMICOLON .)
    CONST           reduce using rule 98 (arrayFn -> NAME POINT PUSH OPEN_PARENTHESIS element CLOSE_PARENTHESIS SEMICOLON .)
    LET             reduce using rule 98 (arrayFn -> NAME POINT PUSH OPEN_PARENTHESIS element CLOSE_PARENTHESIS SEMICOLON .)
    VAR             reduce using rule 98 (arrayFn -> NAME POINT PUSH OPEN_PARENTHESIS element CLOSE_PARENTHESIS SEMICOLON .)
    OPEN_BRACKET    reduce using rule 98 (arrayFn -> NAME POINT PUSH OPEN_PARENTHESIS element CLOSE_PARENTHESIS SEMICOLON .)
    NEW             reduce using rule 98 (arrayFn -> NAME POINT PUSH OPEN_PARENTHESIS element CLOSE_PARENTHESIS SEMICOLON .)
    WHILE           reduce using rule 98 (arrayFn -> NAME POINT PUSH OPEN_PARENTHESIS element CLOSE_PARENTHESIS SEMICOLON .)
    FOR             reduce using rule 98 (arrayFn -> NAME POINT PUSH OPEN_PARENTHESIS element CLOSE_PARENTHESIS SEMICOLON .)
    OPEN_BRACE      reduce using rule 98 (arrayFn -> NAME POINT PUSH OPEN_PARENTHESIS element CLOSE_PARENTHESIS SEMICOLON .)
    IF              reduce using rule 98 (arrayFn -> NAME POINT PUSH OPEN_PARENTHESIS element CLOSE_PARENTHESIS SEMICOLON .)
    $end            reduce using rule 98 (arrayFn -> NAME POINT PUSH OPEN_PARENTHESIS element CLOSE_PARENTHESIS SEMICOLON .)
    CLOSE_BRACE     reduce using rule 98 (arrayFn -> NAME POINT PUSH OPEN_PARENTHESIS element CLOSE_PARENTHESIS SEMICOLON .)


state 263

    (99) arrayFn -> NAME POINT UNSHIFT OPEN_PARENTHESIS element CLOSE_PARENTHESIS SEMICOLON .

    COMMENTS        reduce using rule 99 (arrayFn -> NAME POINT UNSHIFT OPEN_PARENTHESIS element CLOSE_PARENTHESIS SEMICOLON .)
    NAME            reduce using rule 99 (arrayFn -> NAME POINT UNSHIFT OPEN_PARENTHESIS element CLOSE_PARENTHESIS SEMICOLON .)
    PRINT           reduce using rule 99 (arrayFn -> NAME POINT UNSHIFT OPEN_PARENTHESIS element CLOSE_PARENTHESIS SEMICOLON .)
    RETURN          reduce using rule 99 (arrayFn -> NAME POINT UNSHIFT OPEN_PARENTHESIS element CLOSE_PARENTHESIS SEMICOLON .)
    FUNCTION        reduce using rule 99 (arrayFn -> NAME POINT UNSHIFT OPEN_PARENTHESIS element CLOSE_PARENTHESIS SEMICOLON .)
    CONST           reduce using rule 99 (arrayFn -> NAME POINT UNSHIFT OPEN_PARENTHESIS element CLOSE_PARENTHESIS SEMICOLON .)
    LET             reduce using rule 99 (arrayFn -> NAME POINT UNSHIFT OPEN_PARENTHESIS element CLOSE_PARENTHESIS SEMICOLON .)
    VAR             reduce using rule 99 (arrayFn -> NAME POINT UNSHIFT OPEN_PARENTHESIS element CLOSE_PARENTHESIS SEMICOLON .)
    OPEN_BRACKET    reduce using rule 99 (arrayFn -> NAME POINT UNSHIFT OPEN_PARENTHESIS element CLOSE_PARENTHESIS SEMICOLON .)
    NEW             reduce using rule 99 (arrayFn -> NAME POINT UNSHIFT OPEN_PARENTHESIS element CLOSE_PARENTHESIS SEMICOLON .)
    WHILE           reduce using rule 99 (arrayFn -> NAME POINT UNSHIFT OPEN_PARENTHESIS element CLOSE_PARENTHESIS SEMICOLON .)
    FOR             reduce using rule 99 (arrayFn -> NAME POINT UNSHIFT OPEN_PARENTHESIS element CLOSE_PARENTHESIS SEMICOLON .)
    OPEN_BRACE      reduce using rule 99 (arrayFn -> NAME POINT UNSHIFT OPEN_PARENTHESIS element CLOSE_PARENTHESIS SEMICOLON .)
    IF              reduce using rule 99 (arrayFn -> NAME POINT UNSHIFT OPEN_PARENTHESIS element CLOSE_PARENTHESIS SEMICOLON .)
    $end            reduce using rule 99 (arrayFn -> NAME POINT UNSHIFT OPEN_PARENTHESIS element CLOSE_PARENTHESIS SEMICOLON .)
    CLOSE_BRACE     reduce using rule 99 (arrayFn -> NAME POINT UNSHIFT OPEN_PARENTHESIS element CLOSE_PARENTHESIS SEMICOLON .)


state 264

    (125) function -> FUNCTION NAME OPEN_PARENTHESIS CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE .

    COMMENTS        reduce using rule 125 (function -> FUNCTION NAME OPEN_PARENTHESIS CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE .)
    NAME            reduce using rule 125 (function -> FUNCTION NAME OPEN_PARENTHESIS CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE .)
    PRINT           reduce using rule 125 (function -> FUNCTION NAME OPEN_PARENTHESIS CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE .)
    RETURN          reduce using rule 125 (function -> FUNCTION NAME OPEN_PARENTHESIS CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE .)
    FUNCTION        reduce using rule 125 (function -> FUNCTION NAME OPEN_PARENTHESIS CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE .)
    CONST           reduce using rule 125 (function -> FUNCTION NAME OPEN_PARENTHESIS CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE .)
    LET             reduce using rule 125 (function -> FUNCTION NAME OPEN_PARENTHESIS CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE .)
    VAR             reduce using rule 125 (function -> FUNCTION NAME OPEN_PARENTHESIS CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE .)
    OPEN_BRACKET    reduce using rule 125 (function -> FUNCTION NAME OPEN_PARENTHESIS CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE .)
    NEW             reduce using rule 125 (function -> FUNCTION NAME OPEN_PARENTHESIS CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE .)
    WHILE           reduce using rule 125 (function -> FUNCTION NAME OPEN_PARENTHESIS CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE .)
    FOR             reduce using rule 125 (function -> FUNCTION NAME OPEN_PARENTHESIS CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE .)
    OPEN_BRACE      reduce using rule 125 (function -> FUNCTION NAME OPEN_PARENTHESIS CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE .)
    IF              reduce using rule 125 (function -> FUNCTION NAME OPEN_PARENTHESIS CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE .)
    $end            reduce using rule 125 (function -> FUNCTION NAME OPEN_PARENTHESIS CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE .)
    CLOSE_BRACE     reduce using rule 125 (function -> FUNCTION NAME OPEN_PARENTHESIS CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE .)


state 265

    (126) function -> FUNCTION NAME OPEN_PARENTHESIS parameter CLOSE_PARENTHESIS OPEN_BRACE expression . CLOSE_BRACE

    CLOSE_BRACE     shift and go to state 273


state 266

    (93) tupla -> OPEN_BRACKET datatype COMMA datatype CLOSE_BRACKET SEMICOLON .

    COMMA           reduce using rule 93 (tupla -> OPEN_BRACKET datatype COMMA datatype CLOSE_BRACKET SEMICOLON .)
    CLOSE_BRACE     reduce using rule 93 (tupla -> OPEN_BRACKET datatype COMMA datatype CLOSE_BRACKET SEMICOLON .)


state 267

    (101) set -> NEW SET OPEN_PARENTHESIS OPEN_BRACKET items CLOSE_BRACKET CLOSE_PARENTHESIS . SEMICOLON

    SEMICOLON       shift and go to state 274


state 268

    (27) while -> WHILE OPEN_PARENTHESIS controlArg CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE .

    COMMENTS        reduce using rule 27 (while -> WHILE OPEN_PARENTHESIS controlArg CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE .)
    NAME            reduce using rule 27 (while -> WHILE OPEN_PARENTHESIS controlArg CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE .)
    PRINT           reduce using rule 27 (while -> WHILE OPEN_PARENTHESIS controlArg CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE .)
    RETURN          reduce using rule 27 (while -> WHILE OPEN_PARENTHESIS controlArg CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE .)
    FUNCTION        reduce using rule 27 (while -> WHILE OPEN_PARENTHESIS controlArg CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE .)
    CONST           reduce using rule 27 (while -> WHILE OPEN_PARENTHESIS controlArg CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE .)
    LET             reduce using rule 27 (while -> WHILE OPEN_PARENTHESIS controlArg CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE .)
    VAR             reduce using rule 27 (while -> WHILE OPEN_PARENTHESIS controlArg CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE .)
    OPEN_BRACKET    reduce using rule 27 (while -> WHILE OPEN_PARENTHESIS controlArg CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE .)
    NEW             reduce using rule 27 (while -> WHILE OPEN_PARENTHESIS controlArg CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE .)
    WHILE           reduce using rule 27 (while -> WHILE OPEN_PARENTHESIS controlArg CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE .)
    FOR             reduce using rule 27 (while -> WHILE OPEN_PARENTHESIS controlArg CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE .)
    OPEN_BRACE      reduce using rule 27 (while -> WHILE OPEN_PARENTHESIS controlArg CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE .)
    IF              reduce using rule 27 (while -> WHILE OPEN_PARENTHESIS controlArg CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE .)
    $end            reduce using rule 27 (while -> WHILE OPEN_PARENTHESIS controlArg CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE .)
    CLOSE_BRACE     reduce using rule 27 (while -> WHILE OPEN_PARENTHESIS controlArg CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE .)


state 269

    (28) while -> WHILE OPEN_PARENTHESIS bool CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE .

    COMMENTS        reduce using rule 28 (while -> WHILE OPEN_PARENTHESIS bool CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE .)
    NAME            reduce using rule 28 (while -> WHILE OPEN_PARENTHESIS bool CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE .)
    PRINT           reduce using rule 28 (while -> WHILE OPEN_PARENTHESIS bool CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE .)
    RETURN          reduce using rule 28 (while -> WHILE OPEN_PARENTHESIS bool CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE .)
    FUNCTION        reduce using rule 28 (while -> WHILE OPEN_PARENTHESIS bool CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE .)
    CONST           reduce using rule 28 (while -> WHILE OPEN_PARENTHESIS bool CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE .)
    LET             reduce using rule 28 (while -> WHILE OPEN_PARENTHESIS bool CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE .)
    VAR             reduce using rule 28 (while -> WHILE OPEN_PARENTHESIS bool CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE .)
    OPEN_BRACKET    reduce using rule 28 (while -> WHILE OPEN_PARENTHESIS bool CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE .)
    NEW             reduce using rule 28 (while -> WHILE OPEN_PARENTHESIS bool CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE .)
    WHILE           reduce using rule 28 (while -> WHILE OPEN_PARENTHESIS bool CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE .)
    FOR             reduce using rule 28 (while -> WHILE OPEN_PARENTHESIS bool CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE .)
    OPEN_BRACE      reduce using rule 28 (while -> WHILE OPEN_PARENTHESIS bool CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE .)
    IF              reduce using rule 28 (while -> WHILE OPEN_PARENTHESIS bool CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE .)
    $end            reduce using rule 28 (while -> WHILE OPEN_PARENTHESIS bool CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE .)
    CLOSE_BRACE     reduce using rule 28 (while -> WHILE OPEN_PARENTHESIS bool CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE .)


state 270

    (38) for -> FOR OPEN_PARENTHESIS inicialization SEMICOLON expBoolean SEMICOLON operations . CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE

    CLOSE_PARENTHESIS shift and go to state 275


state 271

    (34) elseIf -> ELSEIF OPEN_PARENTHESIS controlArg CLOSE_PARENTHESIS OPEN_BRACE expression . CLOSE_BRACE
    (35) elseIf -> ELSEIF OPEN_PARENTHESIS controlArg CLOSE_PARENTHESIS OPEN_BRACE expression . CLOSE_BRACE soloIf

    CLOSE_BRACE     shift and go to state 276


state 272

    (33) soloIf -> IF OPEN_PARENTHESIS controlArg CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE .

    ELSEIF          reduce using rule 33 (soloIf -> IF OPEN_PARENTHESIS controlArg CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE .)
    ELSE            reduce using rule 33 (soloIf -> IF OPEN_PARENTHESIS controlArg CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE .)
    COMMENTS        reduce using rule 33 (soloIf -> IF OPEN_PARENTHESIS controlArg CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE .)
    NAME            reduce using rule 33 (soloIf -> IF OPEN_PARENTHESIS controlArg CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE .)
    PRINT           reduce using rule 33 (soloIf -> IF OPEN_PARENTHESIS controlArg CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE .)
    RETURN          reduce using rule 33 (soloIf -> IF OPEN_PARENTHESIS controlArg CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE .)
    FUNCTION        reduce using rule 33 (soloIf -> IF OPEN_PARENTHESIS controlArg CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE .)
    CONST           reduce using rule 33 (soloIf -> IF OPEN_PARENTHESIS controlArg CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE .)
    LET             reduce using rule 33 (soloIf -> IF OPEN_PARENTHESIS controlArg CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE .)
    VAR             reduce using rule 33 (soloIf -> IF OPEN_PARENTHESIS controlArg CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE .)
    OPEN_BRACKET    reduce using rule 33 (soloIf -> IF OPEN_PARENTHESIS controlArg CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE .)
    NEW             reduce using rule 33 (soloIf -> IF OPEN_PARENTHESIS controlArg CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE .)
    WHILE           reduce using rule 33 (soloIf -> IF OPEN_PARENTHESIS controlArg CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE .)
    FOR             reduce using rule 33 (soloIf -> IF OPEN_PARENTHESIS controlArg CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE .)
    OPEN_BRACE      reduce using rule 33 (soloIf -> IF OPEN_PARENTHESIS controlArg CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE .)
    IF              reduce using rule 33 (soloIf -> IF OPEN_PARENTHESIS controlArg CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE .)
    $end            reduce using rule 33 (soloIf -> IF OPEN_PARENTHESIS controlArg CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE .)
    CLOSE_BRACE     reduce using rule 33 (soloIf -> IF OPEN_PARENTHESIS controlArg CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE .)


state 273

    (126) function -> FUNCTION NAME OPEN_PARENTHESIS parameter CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE .

    COMMENTS        reduce using rule 126 (function -> FUNCTION NAME OPEN_PARENTHESIS parameter CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE .)
    NAME            reduce using rule 126 (function -> FUNCTION NAME OPEN_PARENTHESIS parameter CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE .)
    PRINT           reduce using rule 126 (function -> FUNCTION NAME OPEN_PARENTHESIS parameter CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE .)
    RETURN          reduce using rule 126 (function -> FUNCTION NAME OPEN_PARENTHESIS parameter CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE .)
    FUNCTION        reduce using rule 126 (function -> FUNCTION NAME OPEN_PARENTHESIS parameter CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE .)
    CONST           reduce using rule 126 (function -> FUNCTION NAME OPEN_PARENTHESIS parameter CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE .)
    LET             reduce using rule 126 (function -> FUNCTION NAME OPEN_PARENTHESIS parameter CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE .)
    VAR             reduce using rule 126 (function -> FUNCTION NAME OPEN_PARENTHESIS parameter CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE .)
    OPEN_BRACKET    reduce using rule 126 (function -> FUNCTION NAME OPEN_PARENTHESIS parameter CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE .)
    NEW             reduce using rule 126 (function -> FUNCTION NAME OPEN_PARENTHESIS parameter CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE .)
    WHILE           reduce using rule 126 (function -> FUNCTION NAME OPEN_PARENTHESIS parameter CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE .)
    FOR             reduce using rule 126 (function -> FUNCTION NAME OPEN_PARENTHESIS parameter CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE .)
    OPEN_BRACE      reduce using rule 126 (function -> FUNCTION NAME OPEN_PARENTHESIS parameter CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE .)
    IF              reduce using rule 126 (function -> FUNCTION NAME OPEN_PARENTHESIS parameter CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE .)
    $end            reduce using rule 126 (function -> FUNCTION NAME OPEN_PARENTHESIS parameter CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE .)
    CLOSE_BRACE     reduce using rule 126 (function -> FUNCTION NAME OPEN_PARENTHESIS parameter CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE .)


state 274

    (101) set -> NEW SET OPEN_PARENTHESIS OPEN_BRACKET items CLOSE_BRACKET CLOSE_PARENTHESIS SEMICOLON .

    COMMENTS        reduce using rule 101 (set -> NEW SET OPEN_PARENTHESIS OPEN_BRACKET items CLOSE_BRACKET CLOSE_PARENTHESIS SEMICOLON .)
    NAME            reduce using rule 101 (set -> NEW SET OPEN_PARENTHESIS OPEN_BRACKET items CLOSE_BRACKET CLOSE_PARENTHESIS SEMICOLON .)
    PRINT           reduce using rule 101 (set -> NEW SET OPEN_PARENTHESIS OPEN_BRACKET items CLOSE_BRACKET CLOSE_PARENTHESIS SEMICOLON .)
    RETURN          reduce using rule 101 (set -> NEW SET OPEN_PARENTHESIS OPEN_BRACKET items CLOSE_BRACKET CLOSE_PARENTHESIS SEMICOLON .)
    FUNCTION        reduce using rule 101 (set -> NEW SET OPEN_PARENTHESIS OPEN_BRACKET items CLOSE_BRACKET CLOSE_PARENTHESIS SEMICOLON .)
    CONST           reduce using rule 101 (set -> NEW SET OPEN_PARENTHESIS OPEN_BRACKET items CLOSE_BRACKET CLOSE_PARENTHESIS SEMICOLON .)
    LET             reduce using rule 101 (set -> NEW SET OPEN_PARENTHESIS OPEN_BRACKET items CLOSE_BRACKET CLOSE_PARENTHESIS SEMICOLON .)
    VAR             reduce using rule 101 (set -> NEW SET OPEN_PARENTHESIS OPEN_BRACKET items CLOSE_BRACKET CLOSE_PARENTHESIS SEMICOLON .)
    OPEN_BRACKET    reduce using rule 101 (set -> NEW SET OPEN_PARENTHESIS OPEN_BRACKET items CLOSE_BRACKET CLOSE_PARENTHESIS SEMICOLON .)
    NEW             reduce using rule 101 (set -> NEW SET OPEN_PARENTHESIS OPEN_BRACKET items CLOSE_BRACKET CLOSE_PARENTHESIS SEMICOLON .)
    WHILE           reduce using rule 101 (set -> NEW SET OPEN_PARENTHESIS OPEN_BRACKET items CLOSE_BRACKET CLOSE_PARENTHESIS SEMICOLON .)
    FOR             reduce using rule 101 (set -> NEW SET OPEN_PARENTHESIS OPEN_BRACKET items CLOSE_BRACKET CLOSE_PARENTHESIS SEMICOLON .)
    OPEN_BRACE      reduce using rule 101 (set -> NEW SET OPEN_PARENTHESIS OPEN_BRACKET items CLOSE_BRACKET CLOSE_PARENTHESIS SEMICOLON .)
    IF              reduce using rule 101 (set -> NEW SET OPEN_PARENTHESIS OPEN_BRACKET items CLOSE_BRACKET CLOSE_PARENTHESIS SEMICOLON .)
    $end            reduce using rule 101 (set -> NEW SET OPEN_PARENTHESIS OPEN_BRACKET items CLOSE_BRACKET CLOSE_PARENTHESIS SEMICOLON .)
    CLOSE_BRACE     reduce using rule 101 (set -> NEW SET OPEN_PARENTHESIS OPEN_BRACKET items CLOSE_BRACKET CLOSE_PARENTHESIS SEMICOLON .)
    COLON           reduce using rule 101 (set -> NEW SET OPEN_PARENTHESIS OPEN_BRACKET items CLOSE_BRACKET CLOSE_PARENTHESIS SEMICOLON .)
    COMMA           reduce using rule 101 (set -> NEW SET OPEN_PARENTHESIS OPEN_BRACKET items CLOSE_BRACKET CLOSE_PARENTHESIS SEMICOLON .)
    CLOSE_BRACKET   reduce using rule 101 (set -> NEW SET OPEN_PARENTHESIS OPEN_BRACKET items CLOSE_BRACKET CLOSE_PARENTHESIS SEMICOLON .)
    SEMICOLON       reduce using rule 101 (set -> NEW SET OPEN_PARENTHESIS OPEN_BRACKET items CLOSE_BRACKET CLOSE_PARENTHESIS SEMICOLON .)
    CLOSE_PARENTHESIS reduce using rule 101 (set -> NEW SET OPEN_PARENTHESIS OPEN_BRACKET items CLOSE_BRACKET CLOSE_PARENTHESIS SEMICOLON .)


state 275

    (38) for -> FOR OPEN_PARENTHESIS inicialization SEMICOLON expBoolean SEMICOLON operations CLOSE_PARENTHESIS . OPEN_BRACE expression CLOSE_BRACE

    OPEN_BRACE      shift and go to state 277


state 276

    (34) elseIf -> ELSEIF OPEN_PARENTHESIS controlArg CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE .
    (35) elseIf -> ELSEIF OPEN_PARENTHESIS controlArg CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE . soloIf
    (33) soloIf -> . IF OPEN_PARENTHESIS controlArg CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE

  ! shift/reduce conflict for IF resolved as shift
    ELSE            reduce using rule 34 (elseIf -> ELSEIF OPEN_PARENTHESIS controlArg CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE .)
    COMMENTS        reduce using rule 34 (elseIf -> ELSEIF OPEN_PARENTHESIS controlArg CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE .)
    NAME            reduce using rule 34 (elseIf -> ELSEIF OPEN_PARENTHESIS controlArg CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE .)
    PRINT           reduce using rule 34 (elseIf -> ELSEIF OPEN_PARENTHESIS controlArg CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE .)
    RETURN          reduce using rule 34 (elseIf -> ELSEIF OPEN_PARENTHESIS controlArg CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE .)
    FUNCTION        reduce using rule 34 (elseIf -> ELSEIF OPEN_PARENTHESIS controlArg CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE .)
    CONST           reduce using rule 34 (elseIf -> ELSEIF OPEN_PARENTHESIS controlArg CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE .)
    LET             reduce using rule 34 (elseIf -> ELSEIF OPEN_PARENTHESIS controlArg CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE .)
    VAR             reduce using rule 34 (elseIf -> ELSEIF OPEN_PARENTHESIS controlArg CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE .)
    OPEN_BRACKET    reduce using rule 34 (elseIf -> ELSEIF OPEN_PARENTHESIS controlArg CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE .)
    NEW             reduce using rule 34 (elseIf -> ELSEIF OPEN_PARENTHESIS controlArg CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE .)
    WHILE           reduce using rule 34 (elseIf -> ELSEIF OPEN_PARENTHESIS controlArg CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE .)
    FOR             reduce using rule 34 (elseIf -> ELSEIF OPEN_PARENTHESIS controlArg CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE .)
    OPEN_BRACE      reduce using rule 34 (elseIf -> ELSEIF OPEN_PARENTHESIS controlArg CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE .)
    $end            reduce using rule 34 (elseIf -> ELSEIF OPEN_PARENTHESIS controlArg CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE .)
    CLOSE_BRACE     reduce using rule 34 (elseIf -> ELSEIF OPEN_PARENTHESIS controlArg CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE .)
    IF              shift and go to state 38

  ! IF              [ reduce using rule 34 (elseIf -> ELSEIF OPEN_PARENTHESIS controlArg CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE .) ]

    soloIf                         shift and go to state 278

state 277

    (38) for -> FOR OPEN_PARENTHESIS inicialization SEMICOLON expBoolean SEMICOLON operations CLOSE_PARENTHESIS OPEN_BRACE . expression CLOSE_BRACE
    (1) expression -> . semiExpression
    (2) expression -> . semiExpression expression
    (3) semiExpression -> . variable
    (4) semiExpression -> . dataStruct
    (5) semiExpression -> . controlStruct
    (6) semiExpression -> . methodsSet
    (7) semiExpression -> . mapFunctions
    (8) semiExpression -> . arrayFn
    (9) semiExpression -> . declaration
    (10) semiExpression -> . print
    (11) semiExpression -> . return
    (12) semiExpression -> . function
    (13) semiExpression -> . COMMENTS
    (14) semiExpression -> . asigOp
    (19) variable -> . type NAME IGUAL datatype SEMICOLON
    (20) variable -> . NAME IGUAL datatype SEMICOLON
    (24) dataStruct -> . array
    (25) dataStruct -> . set
    (26) dataStruct -> . map
    (21) controlStruct -> . while
    (22) controlStruct -> . for
    (23) controlStruct -> . if
    (103) methodsSet -> . NAME POINT ADD OPEN_PARENTHESIS element CLOSE_PARENTHESIS SEMICOLON
    (104) methodsSet -> . NAME POINT DELETE OPEN_PARENTHESIS element CLOSE_PARENTHESIS SEMICOLON
    (105) methodsSet -> . NAME POINT CLEAR OPEN_PARENTHESIS CLOSE_PARENTHESIS SEMICOLON
    (94) mapFunctions -> . NAME POINT CLEAR OPEN_PARENTHESIS CLOSE_PARENTHESIS SEMICOLON
    (95) mapFunctions -> . NAME POINT GET OPEN_PARENTHESIS clave CLOSE_PARENTHESIS SEMICOLON
    (96) mapFunctions -> . NAME POINT HAS OPEN_PARENTHESIS clave CLOSE_PARENTHESIS SEMICOLON
    (97) arrayFn -> . NAME POINT POP OPEN_PARENTHESIS CLOSE_PARENTHESIS SEMICOLON
    (98) arrayFn -> . NAME POINT PUSH OPEN_PARENTHESIS element CLOSE_PARENTHESIS SEMICOLON
    (99) arrayFn -> . NAME POINT UNSHIFT OPEN_PARENTHESIS element CLOSE_PARENTHESIS SEMICOLON
    (118) declaration -> . NAME IGUAL element SEMICOLON
    (130) print -> . PRINT OPEN_PARENTHESIS CLOSE_PARENTHESIS SEMICOLON
    (129) return -> . RETURN element SEMICOLON
    (125) function -> . FUNCTION NAME OPEN_PARENTHESIS CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE
    (126) function -> . FUNCTION NAME OPEN_PARENTHESIS parameter CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE
    (67) asigOp -> . NAME operadorAsig number SEMICOLON
    (70) type -> . CONST
    (71) type -> . LET
    (72) type -> . VAR
    (79) array -> . OPEN_BRACKET items CLOSE_BRACKET SEMICOLON
    (80) array -> . NEW ARRAY OPEN_PARENTHESIS items CLOSE_PARENTHESIS SEMICOLON
    (100) set -> . NEW SET OPEN_PARENTHESIS CLOSE_PARENTHESIS SEMICOLON
    (101) set -> . NEW SET OPEN_PARENTHESIS OPEN_BRACKET items CLOSE_BRACKET CLOSE_PARENTHESIS SEMICOLON
    (102) set -> . NEW SET OPEN_PARENTHESIS element CLOSE_PARENTHESIS SEMICOLON
    (81) map -> . iniciarMap
    (82) map -> . escribirMap
    (83) map -> . generarMap
    (27) while -> . WHILE OPEN_PARENTHESIS controlArg CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE
    (28) while -> . WHILE OPEN_PARENTHESIS bool CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE
    (38) for -> . FOR OPEN_PARENTHESIS inicialization SEMICOLON expBoolean SEMICOLON operations CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE
    (29) if -> . soloIf
    (30) if -> . soloIf elseIf
    (31) if -> . soloIf elseIf else
    (32) if -> . soloIf else
    (84) iniciarMap -> . NEW MAP OPEN_PARENTHESIS CLOSE_PARENTHESIS SEMICOLON
    (85) escribirMap -> . OPEN_BRACE claveValor CLOSE_BRACE
    (89) generarMap -> . OPEN_BRACE tuplas CLOSE_BRACE
    (33) soloIf -> . IF OPEN_PARENTHESIS controlArg CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE

    COMMENTS        shift and go to state 13
    NAME            shift and go to state 16
    PRINT           shift and go to state 23
    RETURN          shift and go to state 24
    FUNCTION        shift and go to state 25
    CONST           shift and go to state 27
    LET             shift and go to state 28
    VAR             shift and go to state 29
    OPEN_BRACKET    shift and go to state 30
    NEW             shift and go to state 31
    WHILE           shift and go to state 35
    FOR             shift and go to state 36
    OPEN_BRACE      shift and go to state 26
    IF              shift and go to state 38

    expression                     shift and go to state 279
    semiExpression                 shift and go to state 2
    variable                       shift and go to state 3
    dataStruct                     shift and go to state 4
    controlStruct                  shift and go to state 5
    methodsSet                     shift and go to state 6
    mapFunctions                   shift and go to state 7
    arrayFn                        shift and go to state 8
    declaration                    shift and go to state 9
    print                          shift and go to state 10
    return                         shift and go to state 11
    function                       shift and go to state 12
    asigOp                         shift and go to state 14
    type                           shift and go to state 15
    array                          shift and go to state 17
    set                            shift and go to state 18
    map                            shift and go to state 19
    while                          shift and go to state 20
    for                            shift and go to state 21
    if                             shift and go to state 22
    iniciarMap                     shift and go to state 32
    escribirMap                    shift and go to state 33
    generarMap                     shift and go to state 34
    soloIf                         shift and go to state 37

state 278

    (35) elseIf -> ELSEIF OPEN_PARENTHESIS controlArg CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE soloIf .

    ELSE            reduce using rule 35 (elseIf -> ELSEIF OPEN_PARENTHESIS controlArg CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE soloIf .)
    COMMENTS        reduce using rule 35 (elseIf -> ELSEIF OPEN_PARENTHESIS controlArg CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE soloIf .)
    NAME            reduce using rule 35 (elseIf -> ELSEIF OPEN_PARENTHESIS controlArg CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE soloIf .)
    PRINT           reduce using rule 35 (elseIf -> ELSEIF OPEN_PARENTHESIS controlArg CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE soloIf .)
    RETURN          reduce using rule 35 (elseIf -> ELSEIF OPEN_PARENTHESIS controlArg CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE soloIf .)
    FUNCTION        reduce using rule 35 (elseIf -> ELSEIF OPEN_PARENTHESIS controlArg CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE soloIf .)
    CONST           reduce using rule 35 (elseIf -> ELSEIF OPEN_PARENTHESIS controlArg CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE soloIf .)
    LET             reduce using rule 35 (elseIf -> ELSEIF OPEN_PARENTHESIS controlArg CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE soloIf .)
    VAR             reduce using rule 35 (elseIf -> ELSEIF OPEN_PARENTHESIS controlArg CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE soloIf .)
    OPEN_BRACKET    reduce using rule 35 (elseIf -> ELSEIF OPEN_PARENTHESIS controlArg CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE soloIf .)
    NEW             reduce using rule 35 (elseIf -> ELSEIF OPEN_PARENTHESIS controlArg CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE soloIf .)
    WHILE           reduce using rule 35 (elseIf -> ELSEIF OPEN_PARENTHESIS controlArg CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE soloIf .)
    FOR             reduce using rule 35 (elseIf -> ELSEIF OPEN_PARENTHESIS controlArg CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE soloIf .)
    OPEN_BRACE      reduce using rule 35 (elseIf -> ELSEIF OPEN_PARENTHESIS controlArg CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE soloIf .)
    IF              reduce using rule 35 (elseIf -> ELSEIF OPEN_PARENTHESIS controlArg CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE soloIf .)
    $end            reduce using rule 35 (elseIf -> ELSEIF OPEN_PARENTHESIS controlArg CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE soloIf .)
    CLOSE_BRACE     reduce using rule 35 (elseIf -> ELSEIF OPEN_PARENTHESIS controlArg CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE soloIf .)


state 279

    (38) for -> FOR OPEN_PARENTHESIS inicialization SEMICOLON expBoolean SEMICOLON operations CLOSE_PARENTHESIS OPEN_BRACE expression . CLOSE_BRACE

    CLOSE_BRACE     shift and go to state 280


state 280

    (38) for -> FOR OPEN_PARENTHESIS inicialization SEMICOLON expBoolean SEMICOLON operations CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE .

    COMMENTS        reduce using rule 38 (for -> FOR OPEN_PARENTHESIS inicialization SEMICOLON expBoolean SEMICOLON operations CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE .)
    NAME            reduce using rule 38 (for -> FOR OPEN_PARENTHESIS inicialization SEMICOLON expBoolean SEMICOLON operations CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE .)
    PRINT           reduce using rule 38 (for -> FOR OPEN_PARENTHESIS inicialization SEMICOLON expBoolean SEMICOLON operations CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE .)
    RETURN          reduce using rule 38 (for -> FOR OPEN_PARENTHESIS inicialization SEMICOLON expBoolean SEMICOLON operations CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE .)
    FUNCTION        reduce using rule 38 (for -> FOR OPEN_PARENTHESIS inicialization SEMICOLON expBoolean SEMICOLON operations CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE .)
    CONST           reduce using rule 38 (for -> FOR OPEN_PARENTHESIS inicialization SEMICOLON expBoolean SEMICOLON operations CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE .)
    LET             reduce using rule 38 (for -> FOR OPEN_PARENTHESIS inicialization SEMICOLON expBoolean SEMICOLON operations CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE .)
    VAR             reduce using rule 38 (for -> FOR OPEN_PARENTHESIS inicialization SEMICOLON expBoolean SEMICOLON operations CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE .)
    OPEN_BRACKET    reduce using rule 38 (for -> FOR OPEN_PARENTHESIS inicialization SEMICOLON expBoolean SEMICOLON operations CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE .)
    NEW             reduce using rule 38 (for -> FOR OPEN_PARENTHESIS inicialization SEMICOLON expBoolean SEMICOLON operations CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE .)
    WHILE           reduce using rule 38 (for -> FOR OPEN_PARENTHESIS inicialization SEMICOLON expBoolean SEMICOLON operations CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE .)
    FOR             reduce using rule 38 (for -> FOR OPEN_PARENTHESIS inicialization SEMICOLON expBoolean SEMICOLON operations CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE .)
    OPEN_BRACE      reduce using rule 38 (for -> FOR OPEN_PARENTHESIS inicialization SEMICOLON expBoolean SEMICOLON operations CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE .)
    IF              reduce using rule 38 (for -> FOR OPEN_PARENTHESIS inicialization SEMICOLON expBoolean SEMICOLON operations CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE .)
    $end            reduce using rule 38 (for -> FOR OPEN_PARENTHESIS inicialization SEMICOLON expBoolean SEMICOLON operations CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE .)
    CLOSE_BRACE     reduce using rule 38 (for -> FOR OPEN_PARENTHESIS inicialization SEMICOLON expBoolean SEMICOLON operations CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for COMMA in state 117 resolved as shift
WARNING: shift/reduce conflict for CLOSE_BRACKET in state 117 resolved as shift
WARNING: shift/reduce conflict for AND in state 134 resolved as shift
WARNING: shift/reduce conflict for OR in state 134 resolved as shift
WARNING: shift/reduce conflict for AND in state 185 resolved as shift
WARNING: shift/reduce conflict for OR in state 185 resolved as shift
WARNING: shift/reduce conflict for IF in state 276 resolved as shift
WARNING: reduce/reduce conflict in state 65 resolved using rule (operations -> number)
WARNING: rejected rule (datatype -> number) in state 65
WARNING: reduce/reduce conflict in state 73 resolved using rule (datatype -> number)
WARNING: rejected rule (item -> number) in state 73
WARNING: reduce/reduce conflict in state 73 resolved using rule (operations -> number)
WARNING: rejected rule (datatype -> number) in state 73
WARNING: reduce/reduce conflict in state 74 resolved using rule (datatype -> STRING)
WARNING: rejected rule (item -> STRING) in state 74
WARNING: reduce/reduce conflict in state 76 resolved using rule (operations -> NAME)
WARNING: rejected rule (item -> NAME) in state 76
WARNING: reduce/reduce conflict in state 95 resolved using rule (operations -> NAME)
WARNING: rejected rule (element -> NAME) in state 95
WARNING: reduce/reduce conflict in state 98 resolved using rule (datatype -> number)
WARNING: rejected rule (element -> number) in state 98
WARNING: reduce/reduce conflict in state 98 resolved using rule (operations -> number)
WARNING: rejected rule (datatype -> number) in state 98
WARNING: reduce/reduce conflict in state 99 resolved using rule (datatype -> STRING)
WARNING: rejected rule (element -> STRING) in state 99
WARNING: reduce/reduce conflict in state 118 resolved using rule (operations -> number)
WARNING: rejected rule (datatype -> number) in state 118
WARNING: reduce/reduce conflict in state 118 resolved using rule (operations -> number)
WARNING: rejected rule (item -> number) in state 118
WARNING: reduce/reduce conflict in state 119 resolved using rule (datatype -> STRING)
WARNING: rejected rule (item -> STRING) in state 119
WARNING: reduce/reduce conflict in state 120 resolved using rule (operations -> NAME)
WARNING: rejected rule (item -> NAME) in state 120
WARNING: reduce/reduce conflict in state 238 resolved using rule (mapFunctions -> NAME POINT CLEAR OPEN_PARENTHESIS CLOSE_PARENTHESIS SEMICOLON)
WARNING: rejected rule (methodsSet -> NAME POINT CLEAR OPEN_PARENTHESIS CLOSE_PARENTHESIS SEMICOLON) in state 238
WARNING: Rule (datatype -> number) is never reduced
WARNING: Rule (item -> number) is never reduced
WARNING: Rule (item -> STRING) is never reduced
WARNING: Rule (item -> NAME) is never reduced
WARNING: Rule (methodsSet -> NAME POINT CLEAR OPEN_PARENTHESIS CLOSE_PARENTHESIS SEMICOLON) is never reduced

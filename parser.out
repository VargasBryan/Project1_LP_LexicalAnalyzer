Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    BACKSLASH
    BOOLEAN
    COMMENTS
    DIVIGUAL
    DOUBLE_QUOTES
    INT
    LINE_BREAK
    LONGCOMMENT
    MASIGUAL
    MENOSIGUAL
    MODIGUAL
    NULL
    PORIGUAL
    POTIGUAL
    SINGLE_QUOTE

Grammar

Rule 0     S' -> expression
Rule 1     expression -> variable
Rule 2     expression -> variable expression
Rule 3     expression -> dataStruct
Rule 4     expression -> dataStruct expression
Rule 5     expression -> controlStruct
Rule 6     expression -> controlStruct expression
Rule 7     expression -> methodsSet
Rule 8     expression -> mapFunctions
Rule 9     expression -> arrayFn
Rule 10    expression -> declaration
Rule 11    expression -> print
Rule 12    expression -> return
Rule 13    expression -> function
Rule 14    number -> INTEGER
Rule 15    number -> FLOAT
Rule 16    number -> RESTA INTEGER
Rule 17    number -> RESTA FLOAT
Rule 18    variable -> type NAME IGUAL datatype SEMICOLON
Rule 19    variable -> type NAME IGUAL operations SEMICOLON
Rule 20    variable -> NAME IGUAL datatype SEMICOLON
Rule 21    controlStruct -> while
Rule 22    controlStruct -> for
Rule 23    controlStruct -> if
Rule 24    dataStruct -> array
Rule 25    dataStruct -> set
Rule 26    dataStruct -> map
Rule 27    while -> WHILE OPEN_PARENTHESIS controlArg CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE
Rule 28    while -> WHILE OPEN_PARENTHESIS bool CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE
Rule 29    if -> soloIf
Rule 30    if -> soloIf elseIf
Rule 31    if -> soloIf elseIf else
Rule 32    if -> soloIf else
Rule 33    soloIf -> IF OPEN_PARENTHESIS controlArg CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE
Rule 34    elseIf -> ELSEIF OPEN_PARENTHESIS controlArg CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE
Rule 35    elseIf -> ELSEIF OPEN_PARENTHESIS controlArg CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE soloIf
Rule 36    else -> ELSE OPEN_BRACE expression CLOSE_BRACE
Rule 37    controlArg -> element clause element
Rule 38    for -> FOR OPEN_PARENTHESIS inicialization SEMICOLON expBoolean SEMICOLON operations CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE
Rule 39    inicialization -> type NAME IGUAL number
Rule 40    inicialization -> NAME IGUAL number
Rule 41    operations -> number operand number
Rule 42    operations -> NAME
Rule 43    operations -> number
Rule 44    operations -> number operand NAME operations
Rule 45    operations -> NAME operand number operations
Rule 46    operations -> number operand NAME
Rule 47    operations -> NAME operand number
Rule 48    operations -> NAME operand NAME operations
Rule 49    operations -> number operand number operand operations
Rule 50    datatype -> number
Rule 51    datatype -> STRING
Rule 52    datatype -> CHAR
Rule 53    datatype -> operations
Rule 54    operand -> SUMA
Rule 55    operand -> RESTA
Rule 56    operand -> MULTIPLICACION
Rule 57    operand -> DIVISION
Rule 58    bool -> TRUE
Rule 59    bool -> FALSE
Rule 60    type -> CONST
Rule 61    type -> LET
Rule 62    type -> VAR
Rule 63    clause -> IGUALIGUAL
Rule 64    clause -> DIFERENTE
Rule 65    clause -> MAYORQUE
Rule 66    clause -> MAYORIGUALQUE
Rule 67    clause -> MENORQUE
Rule 68    clause -> MENORIGUALQUE
Rule 69    value -> NAME
Rule 70    value -> number
Rule 71    array -> type NAME IGUAL OPEN_BRACKET items CLOSE_BRACKET SEMICOLON
Rule 72    array -> type NAME IGUAL NEW ARRAY OPEN_PARENTHESIS items CLOSE_PARENTHESIS SEMICOLON
Rule 73    map -> iniciarMap
Rule 74    map -> escribirMap
Rule 75    map -> generarMap
Rule 76    iniciarMap -> variable IGUAL NEW MAP OPEN_PARENTHESIS CLOSE_PARENTHESIS SEMICOLON
Rule 77    escribirMap -> variable IGUAL OPEN_BRACE claveValor CLOSE_BRACE
Rule 78    claveValor -> clave COLON valor
Rule 79    claveValor -> clave COLON valor COMMA claveValor
Rule 80    clave -> datatype
Rule 81    valor -> datatype
Rule 82    valor -> dataStruct
Rule 83    generarMap -> variable IGUAL OPEN_BRACE tuplas CLOSE_BRACE
Rule 84    tuplas -> tupla
Rule 85    tuplas -> tupla COMMA tuplas
Rule 86    tupla -> OPEN_BRACKET datatype CLOSE_BRACKET SEMICOLON
Rule 87    tupla -> OPEN_BRACKET datatype COMMA datatype CLOSE_BRACKET SEMICOLON
Rule 88    mapFunctions -> NAME POINT CLEAR OPEN_PARENTHESIS CLOSE_PARENTHESIS SEMICOLON
Rule 89    mapFunctions -> NAME POINT GET OPEN_PARENTHESIS clave CLOSE_PARENTHESIS SEMICOLON
Rule 90    mapFunctions -> NAME POINT HAS OPEN_PARENTHESIS clave CLOSE_PARENTHESIS SEMICOLON
Rule 91    arrayFn -> NAME POINT POP OPEN_PARENTHESIS CLOSE_PARENTHESIS SEMICOLON
Rule 92    arrayFn -> NAME POINT PUSH OPEN_PARENTHESIS element CLOSE_PARENTHESIS SEMICOLON
Rule 93    arrayFn -> NAME POINT UNSHIFT OPEN_PARENTHESIS element CLOSE_PARENTHESIS SEMICOLON
Rule 94    set -> type NAME IGUAL NEW SET OPEN_PARENTHESIS CLOSE_PARENTHESIS SEMICOLON
Rule 95    set -> type NAME IGUAL NEW SET OPEN_PARENTHESIS OPEN_BRACKET items CLOSE_BRACKET CLOSE_PARENTHESIS SEMICOLON
Rule 96    set -> type NAME IGUAL NEW SET OPEN_PARENTHESIS element CLOSE_PARENTHESIS SEMICOLON
Rule 97    set -> NAME IGUAL NEW SET OPEN_PARENTHESIS CLOSE_PARENTHESIS SEMICOLON
Rule 98    set -> NAME IGUAL NEW SET OPEN_PARENTHESIS OPEN_BRACKET items CLOSE_BRACKET CLOSE_PARENTHESIS SEMICOLON
Rule 99    set -> NAME IGUAL NEW SET OPEN_PARENTHESIS element CLOSE_PARENTHESIS SEMICOLON
Rule 100   methodsSet -> NAME POINT ADD OPEN_PARENTHESIS element CLOSE_PARENTHESIS SEMICOLON
Rule 101   methodsSet -> NAME POINT DELETE OPEN_PARENTHESIS element CLOSE_PARENTHESIS SEMICOLON
Rule 102   methodsSet -> NAME POINT CLEAR OPEN_PARENTHESIS CLOSE_PARENTHESIS SEMICOLON
Rule 103   items -> number
Rule 104   items -> cadena
Rule 105   cadena -> STRING
Rule 106   cadena -> STRING COMMA cadena
Rule 107   element -> STRING
Rule 108   element -> number
Rule 109   element -> NAME
Rule 110   declaration -> NAME IGUAL element SEMICOLON
Rule 111   logicalOperator -> AND
Rule 112   logicalOperator -> OR
Rule 113   expBoolean -> controlArg
Rule 114   expBoolean -> bool
Rule 115   expBoolean -> NOT expBoolean
Rule 116   expBoolean -> expBoolean logicalOperator expBoolean
Rule 117   function -> FUNCTION NAME OPEN_PARENTHESIS CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE
Rule 118   function -> FUNCTION NAME OPEN_PARENTHESIS parameter CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE
Rule 119   parameter -> element
Rule 120   parameter -> element parameter
Rule 121   return -> RETURN element SEMICOLON
Rule 122   print -> PRINT OPEN_PARENTHESIS CLOSE_PARENTHESIS SEMICOLON

Terminals, with rules where they appear

ADD                  : 100
AND                  : 111
ARRAY                : 72
BACKSLASH            : 
BOOLEAN              : 
CHAR                 : 52
CLEAR                : 88 102
CLOSE_BRACE          : 27 28 33 34 35 36 38 77 83 117 118
CLOSE_BRACKET        : 71 86 87 95 98
CLOSE_PARENTHESIS    : 27 28 33 34 35 38 72 76 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 117 118 122
COLON                : 78 79
COMMA                : 79 85 87 106
COMMENTS             : 
CONST                : 60
DELETE               : 101
DIFERENTE            : 64
DIVIGUAL             : 
DIVISION             : 57
DOUBLE_QUOTES        : 
ELSE                 : 36
ELSEIF               : 34 35
FALSE                : 59
FLOAT                : 15 17
FOR                  : 38
FUNCTION             : 117 118
GET                  : 89
HAS                  : 90
IF                   : 33
IGUAL                : 18 19 20 39 40 71 72 76 77 83 94 95 96 97 98 99 110
IGUALIGUAL           : 63
INT                  : 
INTEGER              : 14 16
LET                  : 61
LINE_BREAK           : 
LONGCOMMENT          : 
MAP                  : 76
MASIGUAL             : 
MAYORIGUALQUE        : 66
MAYORQUE             : 65
MENORIGUALQUE        : 68
MENORQUE             : 67
MENOSIGUAL           : 
MODIGUAL             : 
MULTIPLICACION       : 56
NAME                 : 18 19 20 39 40 42 44 45 46 47 48 48 69 71 72 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 109 110 117 118
NEW                  : 72 76 94 95 96 97 98 99
NOT                  : 115
NULL                 : 
OPEN_BRACE           : 27 28 33 34 35 36 38 77 83 117 118
OPEN_BRACKET         : 71 86 87 95 98
OPEN_PARENTHESIS     : 27 28 33 34 35 38 72 76 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 117 118 122
OR                   : 112
POINT                : 88 89 90 91 92 93 100 101 102
POP                  : 91
PORIGUAL             : 
POTIGUAL             : 
PRINT                : 122
PUSH                 : 92
RESTA                : 16 17 55
RETURN               : 121
SEMICOLON            : 18 19 20 38 38 71 72 76 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 110 121 122
SET                  : 94 95 96 97 98 99
SINGLE_QUOTE         : 
STRING               : 51 105 106 107
SUMA                 : 54
TRUE                 : 58
UNSHIFT              : 93
VAR                  : 62
WHILE                : 27 28
error                : 

Nonterminals, with rules where they appear

array                : 24
arrayFn              : 9
bool                 : 28 114
cadena               : 104 106
clause               : 37
clave                : 78 79 89 90
claveValor           : 77 79
controlArg           : 27 33 34 35 113
controlStruct        : 5 6
dataStruct           : 3 4 82
datatype             : 18 20 80 81 86 87 87
declaration          : 10
element              : 37 37 92 93 96 99 100 101 110 119 120 121
else                 : 31 32
elseIf               : 30 31
escribirMap          : 74
expBoolean           : 38 115 116 116
expression           : 2 4 6 27 28 33 34 35 36 38 117 118 0
for                  : 22
function             : 13
generarMap           : 75
if                   : 23
inicialization       : 38
iniciarMap           : 73
items                : 71 72 95 98
logicalOperator      : 116
map                  : 26
mapFunctions         : 8
methodsSet           : 7
number               : 39 40 41 41 43 44 45 46 47 49 49 50 70 103 108
operand              : 41 44 45 46 47 48 49 49
operations           : 19 38 44 45 48 49 53
parameter            : 118 120
print                : 11
return               : 12
set                  : 25
soloIf               : 29 30 31 32 35
tupla                : 84 85
tuplas               : 83 85
type                 : 18 19 39 71 72 94 95 96
valor                : 78 79
value                : 
variable             : 1 2 76 77 83
while                : 21

Parsing method: LALR

state 0

    (0) S' -> . expression
    (1) expression -> . variable
    (2) expression -> . variable expression
    (3) expression -> . dataStruct
    (4) expression -> . dataStruct expression
    (5) expression -> . controlStruct
    (6) expression -> . controlStruct expression
    (7) expression -> . methodsSet
    (8) expression -> . mapFunctions
    (9) expression -> . arrayFn
    (10) expression -> . declaration
    (11) expression -> . print
    (12) expression -> . return
    (13) expression -> . function
    (18) variable -> . type NAME IGUAL datatype SEMICOLON
    (19) variable -> . type NAME IGUAL operations SEMICOLON
    (20) variable -> . NAME IGUAL datatype SEMICOLON
    (24) dataStruct -> . array
    (25) dataStruct -> . set
    (26) dataStruct -> . map
    (21) controlStruct -> . while
    (22) controlStruct -> . for
    (23) controlStruct -> . if
    (100) methodsSet -> . NAME POINT ADD OPEN_PARENTHESIS element CLOSE_PARENTHESIS SEMICOLON
    (101) methodsSet -> . NAME POINT DELETE OPEN_PARENTHESIS element CLOSE_PARENTHESIS SEMICOLON
    (102) methodsSet -> . NAME POINT CLEAR OPEN_PARENTHESIS CLOSE_PARENTHESIS SEMICOLON
    (88) mapFunctions -> . NAME POINT CLEAR OPEN_PARENTHESIS CLOSE_PARENTHESIS SEMICOLON
    (89) mapFunctions -> . NAME POINT GET OPEN_PARENTHESIS clave CLOSE_PARENTHESIS SEMICOLON
    (90) mapFunctions -> . NAME POINT HAS OPEN_PARENTHESIS clave CLOSE_PARENTHESIS SEMICOLON
    (91) arrayFn -> . NAME POINT POP OPEN_PARENTHESIS CLOSE_PARENTHESIS SEMICOLON
    (92) arrayFn -> . NAME POINT PUSH OPEN_PARENTHESIS element CLOSE_PARENTHESIS SEMICOLON
    (93) arrayFn -> . NAME POINT UNSHIFT OPEN_PARENTHESIS element CLOSE_PARENTHESIS SEMICOLON
    (110) declaration -> . NAME IGUAL element SEMICOLON
    (122) print -> . PRINT OPEN_PARENTHESIS CLOSE_PARENTHESIS SEMICOLON
    (121) return -> . RETURN element SEMICOLON
    (117) function -> . FUNCTION NAME OPEN_PARENTHESIS CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE
    (118) function -> . FUNCTION NAME OPEN_PARENTHESIS parameter CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE
    (60) type -> . CONST
    (61) type -> . LET
    (62) type -> . VAR
    (71) array -> . type NAME IGUAL OPEN_BRACKET items CLOSE_BRACKET SEMICOLON
    (72) array -> . type NAME IGUAL NEW ARRAY OPEN_PARENTHESIS items CLOSE_PARENTHESIS SEMICOLON
    (94) set -> . type NAME IGUAL NEW SET OPEN_PARENTHESIS CLOSE_PARENTHESIS SEMICOLON
    (95) set -> . type NAME IGUAL NEW SET OPEN_PARENTHESIS OPEN_BRACKET items CLOSE_BRACKET CLOSE_PARENTHESIS SEMICOLON
    (96) set -> . type NAME IGUAL NEW SET OPEN_PARENTHESIS element CLOSE_PARENTHESIS SEMICOLON
    (97) set -> . NAME IGUAL NEW SET OPEN_PARENTHESIS CLOSE_PARENTHESIS SEMICOLON
    (98) set -> . NAME IGUAL NEW SET OPEN_PARENTHESIS OPEN_BRACKET items CLOSE_BRACKET CLOSE_PARENTHESIS SEMICOLON
    (99) set -> . NAME IGUAL NEW SET OPEN_PARENTHESIS element CLOSE_PARENTHESIS SEMICOLON
    (73) map -> . iniciarMap
    (74) map -> . escribirMap
    (75) map -> . generarMap
    (27) while -> . WHILE OPEN_PARENTHESIS controlArg CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE
    (28) while -> . WHILE OPEN_PARENTHESIS bool CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE
    (38) for -> . FOR OPEN_PARENTHESIS inicialization SEMICOLON expBoolean SEMICOLON operations CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE
    (29) if -> . soloIf
    (30) if -> . soloIf elseIf
    (31) if -> . soloIf elseIf else
    (32) if -> . soloIf else
    (76) iniciarMap -> . variable IGUAL NEW MAP OPEN_PARENTHESIS CLOSE_PARENTHESIS SEMICOLON
    (77) escribirMap -> . variable IGUAL OPEN_BRACE claveValor CLOSE_BRACE
    (83) generarMap -> . variable IGUAL OPEN_BRACE tuplas CLOSE_BRACE
    (33) soloIf -> . IF OPEN_PARENTHESIS controlArg CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE

    NAME            shift and go to state 13
    PRINT           shift and go to state 20
    RETURN          shift and go to state 21
    FUNCTION        shift and go to state 22
    CONST           shift and go to state 23
    LET             shift and go to state 24
    VAR             shift and go to state 25
    WHILE           shift and go to state 29
    FOR             shift and go to state 30
    IF              shift and go to state 32

    expression                     shift and go to state 1
    variable                       shift and go to state 2
    dataStruct                     shift and go to state 3
    controlStruct                  shift and go to state 4
    methodsSet                     shift and go to state 5
    mapFunctions                   shift and go to state 6
    arrayFn                        shift and go to state 7
    declaration                    shift and go to state 8
    print                          shift and go to state 9
    return                         shift and go to state 10
    function                       shift and go to state 11
    type                           shift and go to state 12
    array                          shift and go to state 14
    set                            shift and go to state 15
    map                            shift and go to state 16
    while                          shift and go to state 17
    for                            shift and go to state 18
    if                             shift and go to state 19
    iniciarMap                     shift and go to state 26
    escribirMap                    shift and go to state 27
    generarMap                     shift and go to state 28
    soloIf                         shift and go to state 31

state 1

    (0) S' -> expression .



state 2

    (1) expression -> variable .
    (2) expression -> variable . expression
    (76) iniciarMap -> variable . IGUAL NEW MAP OPEN_PARENTHESIS CLOSE_PARENTHESIS SEMICOLON
    (77) escribirMap -> variable . IGUAL OPEN_BRACE claveValor CLOSE_BRACE
    (83) generarMap -> variable . IGUAL OPEN_BRACE tuplas CLOSE_BRACE
    (1) expression -> . variable
    (2) expression -> . variable expression
    (3) expression -> . dataStruct
    (4) expression -> . dataStruct expression
    (5) expression -> . controlStruct
    (6) expression -> . controlStruct expression
    (7) expression -> . methodsSet
    (8) expression -> . mapFunctions
    (9) expression -> . arrayFn
    (10) expression -> . declaration
    (11) expression -> . print
    (12) expression -> . return
    (13) expression -> . function
    (18) variable -> . type NAME IGUAL datatype SEMICOLON
    (19) variable -> . type NAME IGUAL operations SEMICOLON
    (20) variable -> . NAME IGUAL datatype SEMICOLON
    (24) dataStruct -> . array
    (25) dataStruct -> . set
    (26) dataStruct -> . map
    (21) controlStruct -> . while
    (22) controlStruct -> . for
    (23) controlStruct -> . if
    (100) methodsSet -> . NAME POINT ADD OPEN_PARENTHESIS element CLOSE_PARENTHESIS SEMICOLON
    (101) methodsSet -> . NAME POINT DELETE OPEN_PARENTHESIS element CLOSE_PARENTHESIS SEMICOLON
    (102) methodsSet -> . NAME POINT CLEAR OPEN_PARENTHESIS CLOSE_PARENTHESIS SEMICOLON
    (88) mapFunctions -> . NAME POINT CLEAR OPEN_PARENTHESIS CLOSE_PARENTHESIS SEMICOLON
    (89) mapFunctions -> . NAME POINT GET OPEN_PARENTHESIS clave CLOSE_PARENTHESIS SEMICOLON
    (90) mapFunctions -> . NAME POINT HAS OPEN_PARENTHESIS clave CLOSE_PARENTHESIS SEMICOLON
    (91) arrayFn -> . NAME POINT POP OPEN_PARENTHESIS CLOSE_PARENTHESIS SEMICOLON
    (92) arrayFn -> . NAME POINT PUSH OPEN_PARENTHESIS element CLOSE_PARENTHESIS SEMICOLON
    (93) arrayFn -> . NAME POINT UNSHIFT OPEN_PARENTHESIS element CLOSE_PARENTHESIS SEMICOLON
    (110) declaration -> . NAME IGUAL element SEMICOLON
    (122) print -> . PRINT OPEN_PARENTHESIS CLOSE_PARENTHESIS SEMICOLON
    (121) return -> . RETURN element SEMICOLON
    (117) function -> . FUNCTION NAME OPEN_PARENTHESIS CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE
    (118) function -> . FUNCTION NAME OPEN_PARENTHESIS parameter CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE
    (60) type -> . CONST
    (61) type -> . LET
    (62) type -> . VAR
    (71) array -> . type NAME IGUAL OPEN_BRACKET items CLOSE_BRACKET SEMICOLON
    (72) array -> . type NAME IGUAL NEW ARRAY OPEN_PARENTHESIS items CLOSE_PARENTHESIS SEMICOLON
    (94) set -> . type NAME IGUAL NEW SET OPEN_PARENTHESIS CLOSE_PARENTHESIS SEMICOLON
    (95) set -> . type NAME IGUAL NEW SET OPEN_PARENTHESIS OPEN_BRACKET items CLOSE_BRACKET CLOSE_PARENTHESIS SEMICOLON
    (96) set -> . type NAME IGUAL NEW SET OPEN_PARENTHESIS element CLOSE_PARENTHESIS SEMICOLON
    (97) set -> . NAME IGUAL NEW SET OPEN_PARENTHESIS CLOSE_PARENTHESIS SEMICOLON
    (98) set -> . NAME IGUAL NEW SET OPEN_PARENTHESIS OPEN_BRACKET items CLOSE_BRACKET CLOSE_PARENTHESIS SEMICOLON
    (99) set -> . NAME IGUAL NEW SET OPEN_PARENTHESIS element CLOSE_PARENTHESIS SEMICOLON
    (73) map -> . iniciarMap
    (74) map -> . escribirMap
    (75) map -> . generarMap
    (27) while -> . WHILE OPEN_PARENTHESIS controlArg CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE
    (28) while -> . WHILE OPEN_PARENTHESIS bool CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE
    (38) for -> . FOR OPEN_PARENTHESIS inicialization SEMICOLON expBoolean SEMICOLON operations CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE
    (29) if -> . soloIf
    (30) if -> . soloIf elseIf
    (31) if -> . soloIf elseIf else
    (32) if -> . soloIf else
    (76) iniciarMap -> . variable IGUAL NEW MAP OPEN_PARENTHESIS CLOSE_PARENTHESIS SEMICOLON
    (77) escribirMap -> . variable IGUAL OPEN_BRACE claveValor CLOSE_BRACE
    (83) generarMap -> . variable IGUAL OPEN_BRACE tuplas CLOSE_BRACE
    (33) soloIf -> . IF OPEN_PARENTHESIS controlArg CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE

    $end            reduce using rule 1 (expression -> variable .)
    CLOSE_BRACE     reduce using rule 1 (expression -> variable .)
    IGUAL           shift and go to state 34
    NAME            shift and go to state 13
    PRINT           shift and go to state 20
    RETURN          shift and go to state 21
    FUNCTION        shift and go to state 22
    CONST           shift and go to state 23
    LET             shift and go to state 24
    VAR             shift and go to state 25
    WHILE           shift and go to state 29
    FOR             shift and go to state 30
    IF              shift and go to state 32

    variable                       shift and go to state 2
    expression                     shift and go to state 33
    dataStruct                     shift and go to state 3
    controlStruct                  shift and go to state 4
    methodsSet                     shift and go to state 5
    mapFunctions                   shift and go to state 6
    arrayFn                        shift and go to state 7
    declaration                    shift and go to state 8
    print                          shift and go to state 9
    return                         shift and go to state 10
    function                       shift and go to state 11
    type                           shift and go to state 12
    array                          shift and go to state 14
    set                            shift and go to state 15
    map                            shift and go to state 16
    while                          shift and go to state 17
    for                            shift and go to state 18
    if                             shift and go to state 19
    iniciarMap                     shift and go to state 26
    escribirMap                    shift and go to state 27
    generarMap                     shift and go to state 28
    soloIf                         shift and go to state 31

state 3

    (3) expression -> dataStruct .
    (4) expression -> dataStruct . expression
    (1) expression -> . variable
    (2) expression -> . variable expression
    (3) expression -> . dataStruct
    (4) expression -> . dataStruct expression
    (5) expression -> . controlStruct
    (6) expression -> . controlStruct expression
    (7) expression -> . methodsSet
    (8) expression -> . mapFunctions
    (9) expression -> . arrayFn
    (10) expression -> . declaration
    (11) expression -> . print
    (12) expression -> . return
    (13) expression -> . function
    (18) variable -> . type NAME IGUAL datatype SEMICOLON
    (19) variable -> . type NAME IGUAL operations SEMICOLON
    (20) variable -> . NAME IGUAL datatype SEMICOLON
    (24) dataStruct -> . array
    (25) dataStruct -> . set
    (26) dataStruct -> . map
    (21) controlStruct -> . while
    (22) controlStruct -> . for
    (23) controlStruct -> . if
    (100) methodsSet -> . NAME POINT ADD OPEN_PARENTHESIS element CLOSE_PARENTHESIS SEMICOLON
    (101) methodsSet -> . NAME POINT DELETE OPEN_PARENTHESIS element CLOSE_PARENTHESIS SEMICOLON
    (102) methodsSet -> . NAME POINT CLEAR OPEN_PARENTHESIS CLOSE_PARENTHESIS SEMICOLON
    (88) mapFunctions -> . NAME POINT CLEAR OPEN_PARENTHESIS CLOSE_PARENTHESIS SEMICOLON
    (89) mapFunctions -> . NAME POINT GET OPEN_PARENTHESIS clave CLOSE_PARENTHESIS SEMICOLON
    (90) mapFunctions -> . NAME POINT HAS OPEN_PARENTHESIS clave CLOSE_PARENTHESIS SEMICOLON
    (91) arrayFn -> . NAME POINT POP OPEN_PARENTHESIS CLOSE_PARENTHESIS SEMICOLON
    (92) arrayFn -> . NAME POINT PUSH OPEN_PARENTHESIS element CLOSE_PARENTHESIS SEMICOLON
    (93) arrayFn -> . NAME POINT UNSHIFT OPEN_PARENTHESIS element CLOSE_PARENTHESIS SEMICOLON
    (110) declaration -> . NAME IGUAL element SEMICOLON
    (122) print -> . PRINT OPEN_PARENTHESIS CLOSE_PARENTHESIS SEMICOLON
    (121) return -> . RETURN element SEMICOLON
    (117) function -> . FUNCTION NAME OPEN_PARENTHESIS CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE
    (118) function -> . FUNCTION NAME OPEN_PARENTHESIS parameter CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE
    (60) type -> . CONST
    (61) type -> . LET
    (62) type -> . VAR
    (71) array -> . type NAME IGUAL OPEN_BRACKET items CLOSE_BRACKET SEMICOLON
    (72) array -> . type NAME IGUAL NEW ARRAY OPEN_PARENTHESIS items CLOSE_PARENTHESIS SEMICOLON
    (94) set -> . type NAME IGUAL NEW SET OPEN_PARENTHESIS CLOSE_PARENTHESIS SEMICOLON
    (95) set -> . type NAME IGUAL NEW SET OPEN_PARENTHESIS OPEN_BRACKET items CLOSE_BRACKET CLOSE_PARENTHESIS SEMICOLON
    (96) set -> . type NAME IGUAL NEW SET OPEN_PARENTHESIS element CLOSE_PARENTHESIS SEMICOLON
    (97) set -> . NAME IGUAL NEW SET OPEN_PARENTHESIS CLOSE_PARENTHESIS SEMICOLON
    (98) set -> . NAME IGUAL NEW SET OPEN_PARENTHESIS OPEN_BRACKET items CLOSE_BRACKET CLOSE_PARENTHESIS SEMICOLON
    (99) set -> . NAME IGUAL NEW SET OPEN_PARENTHESIS element CLOSE_PARENTHESIS SEMICOLON
    (73) map -> . iniciarMap
    (74) map -> . escribirMap
    (75) map -> . generarMap
    (27) while -> . WHILE OPEN_PARENTHESIS controlArg CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE
    (28) while -> . WHILE OPEN_PARENTHESIS bool CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE
    (38) for -> . FOR OPEN_PARENTHESIS inicialization SEMICOLON expBoolean SEMICOLON operations CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE
    (29) if -> . soloIf
    (30) if -> . soloIf elseIf
    (31) if -> . soloIf elseIf else
    (32) if -> . soloIf else
    (76) iniciarMap -> . variable IGUAL NEW MAP OPEN_PARENTHESIS CLOSE_PARENTHESIS SEMICOLON
    (77) escribirMap -> . variable IGUAL OPEN_BRACE claveValor CLOSE_BRACE
    (83) generarMap -> . variable IGUAL OPEN_BRACE tuplas CLOSE_BRACE
    (33) soloIf -> . IF OPEN_PARENTHESIS controlArg CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE

    $end            reduce using rule 3 (expression -> dataStruct .)
    CLOSE_BRACE     reduce using rule 3 (expression -> dataStruct .)
    NAME            shift and go to state 13
    PRINT           shift and go to state 20
    RETURN          shift and go to state 21
    FUNCTION        shift and go to state 22
    CONST           shift and go to state 23
    LET             shift and go to state 24
    VAR             shift and go to state 25
    WHILE           shift and go to state 29
    FOR             shift and go to state 30
    IF              shift and go to state 32

    dataStruct                     shift and go to state 3
    expression                     shift and go to state 35
    variable                       shift and go to state 2
    controlStruct                  shift and go to state 4
    methodsSet                     shift and go to state 5
    mapFunctions                   shift and go to state 6
    arrayFn                        shift and go to state 7
    declaration                    shift and go to state 8
    print                          shift and go to state 9
    return                         shift and go to state 10
    function                       shift and go to state 11
    type                           shift and go to state 12
    array                          shift and go to state 14
    set                            shift and go to state 15
    map                            shift and go to state 16
    while                          shift and go to state 17
    for                            shift and go to state 18
    if                             shift and go to state 19
    iniciarMap                     shift and go to state 26
    escribirMap                    shift and go to state 27
    generarMap                     shift and go to state 28
    soloIf                         shift and go to state 31

state 4

    (5) expression -> controlStruct .
    (6) expression -> controlStruct . expression
    (1) expression -> . variable
    (2) expression -> . variable expression
    (3) expression -> . dataStruct
    (4) expression -> . dataStruct expression
    (5) expression -> . controlStruct
    (6) expression -> . controlStruct expression
    (7) expression -> . methodsSet
    (8) expression -> . mapFunctions
    (9) expression -> . arrayFn
    (10) expression -> . declaration
    (11) expression -> . print
    (12) expression -> . return
    (13) expression -> . function
    (18) variable -> . type NAME IGUAL datatype SEMICOLON
    (19) variable -> . type NAME IGUAL operations SEMICOLON
    (20) variable -> . NAME IGUAL datatype SEMICOLON
    (24) dataStruct -> . array
    (25) dataStruct -> . set
    (26) dataStruct -> . map
    (21) controlStruct -> . while
    (22) controlStruct -> . for
    (23) controlStruct -> . if
    (100) methodsSet -> . NAME POINT ADD OPEN_PARENTHESIS element CLOSE_PARENTHESIS SEMICOLON
    (101) methodsSet -> . NAME POINT DELETE OPEN_PARENTHESIS element CLOSE_PARENTHESIS SEMICOLON
    (102) methodsSet -> . NAME POINT CLEAR OPEN_PARENTHESIS CLOSE_PARENTHESIS SEMICOLON
    (88) mapFunctions -> . NAME POINT CLEAR OPEN_PARENTHESIS CLOSE_PARENTHESIS SEMICOLON
    (89) mapFunctions -> . NAME POINT GET OPEN_PARENTHESIS clave CLOSE_PARENTHESIS SEMICOLON
    (90) mapFunctions -> . NAME POINT HAS OPEN_PARENTHESIS clave CLOSE_PARENTHESIS SEMICOLON
    (91) arrayFn -> . NAME POINT POP OPEN_PARENTHESIS CLOSE_PARENTHESIS SEMICOLON
    (92) arrayFn -> . NAME POINT PUSH OPEN_PARENTHESIS element CLOSE_PARENTHESIS SEMICOLON
    (93) arrayFn -> . NAME POINT UNSHIFT OPEN_PARENTHESIS element CLOSE_PARENTHESIS SEMICOLON
    (110) declaration -> . NAME IGUAL element SEMICOLON
    (122) print -> . PRINT OPEN_PARENTHESIS CLOSE_PARENTHESIS SEMICOLON
    (121) return -> . RETURN element SEMICOLON
    (117) function -> . FUNCTION NAME OPEN_PARENTHESIS CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE
    (118) function -> . FUNCTION NAME OPEN_PARENTHESIS parameter CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE
    (60) type -> . CONST
    (61) type -> . LET
    (62) type -> . VAR
    (71) array -> . type NAME IGUAL OPEN_BRACKET items CLOSE_BRACKET SEMICOLON
    (72) array -> . type NAME IGUAL NEW ARRAY OPEN_PARENTHESIS items CLOSE_PARENTHESIS SEMICOLON
    (94) set -> . type NAME IGUAL NEW SET OPEN_PARENTHESIS CLOSE_PARENTHESIS SEMICOLON
    (95) set -> . type NAME IGUAL NEW SET OPEN_PARENTHESIS OPEN_BRACKET items CLOSE_BRACKET CLOSE_PARENTHESIS SEMICOLON
    (96) set -> . type NAME IGUAL NEW SET OPEN_PARENTHESIS element CLOSE_PARENTHESIS SEMICOLON
    (97) set -> . NAME IGUAL NEW SET OPEN_PARENTHESIS CLOSE_PARENTHESIS SEMICOLON
    (98) set -> . NAME IGUAL NEW SET OPEN_PARENTHESIS OPEN_BRACKET items CLOSE_BRACKET CLOSE_PARENTHESIS SEMICOLON
    (99) set -> . NAME IGUAL NEW SET OPEN_PARENTHESIS element CLOSE_PARENTHESIS SEMICOLON
    (73) map -> . iniciarMap
    (74) map -> . escribirMap
    (75) map -> . generarMap
    (27) while -> . WHILE OPEN_PARENTHESIS controlArg CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE
    (28) while -> . WHILE OPEN_PARENTHESIS bool CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE
    (38) for -> . FOR OPEN_PARENTHESIS inicialization SEMICOLON expBoolean SEMICOLON operations CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE
    (29) if -> . soloIf
    (30) if -> . soloIf elseIf
    (31) if -> . soloIf elseIf else
    (32) if -> . soloIf else
    (76) iniciarMap -> . variable IGUAL NEW MAP OPEN_PARENTHESIS CLOSE_PARENTHESIS SEMICOLON
    (77) escribirMap -> . variable IGUAL OPEN_BRACE claveValor CLOSE_BRACE
    (83) generarMap -> . variable IGUAL OPEN_BRACE tuplas CLOSE_BRACE
    (33) soloIf -> . IF OPEN_PARENTHESIS controlArg CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE

    $end            reduce using rule 5 (expression -> controlStruct .)
    CLOSE_BRACE     reduce using rule 5 (expression -> controlStruct .)
    NAME            shift and go to state 13
    PRINT           shift and go to state 20
    RETURN          shift and go to state 21
    FUNCTION        shift and go to state 22
    CONST           shift and go to state 23
    LET             shift and go to state 24
    VAR             shift and go to state 25
    WHILE           shift and go to state 29
    FOR             shift and go to state 30
    IF              shift and go to state 32

    controlStruct                  shift and go to state 4
    expression                     shift and go to state 36
    variable                       shift and go to state 2
    dataStruct                     shift and go to state 3
    methodsSet                     shift and go to state 5
    mapFunctions                   shift and go to state 6
    arrayFn                        shift and go to state 7
    declaration                    shift and go to state 8
    print                          shift and go to state 9
    return                         shift and go to state 10
    function                       shift and go to state 11
    type                           shift and go to state 12
    array                          shift and go to state 14
    set                            shift and go to state 15
    map                            shift and go to state 16
    while                          shift and go to state 17
    for                            shift and go to state 18
    if                             shift and go to state 19
    iniciarMap                     shift and go to state 26
    escribirMap                    shift and go to state 27
    generarMap                     shift and go to state 28
    soloIf                         shift and go to state 31

state 5

    (7) expression -> methodsSet .

    $end            reduce using rule 7 (expression -> methodsSet .)
    CLOSE_BRACE     reduce using rule 7 (expression -> methodsSet .)


state 6

    (8) expression -> mapFunctions .

    $end            reduce using rule 8 (expression -> mapFunctions .)
    CLOSE_BRACE     reduce using rule 8 (expression -> mapFunctions .)


state 7

    (9) expression -> arrayFn .

    $end            reduce using rule 9 (expression -> arrayFn .)
    CLOSE_BRACE     reduce using rule 9 (expression -> arrayFn .)


state 8

    (10) expression -> declaration .

    $end            reduce using rule 10 (expression -> declaration .)
    CLOSE_BRACE     reduce using rule 10 (expression -> declaration .)


state 9

    (11) expression -> print .

    $end            reduce using rule 11 (expression -> print .)
    CLOSE_BRACE     reduce using rule 11 (expression -> print .)


state 10

    (12) expression -> return .

    $end            reduce using rule 12 (expression -> return .)
    CLOSE_BRACE     reduce using rule 12 (expression -> return .)


state 11

    (13) expression -> function .

    $end            reduce using rule 13 (expression -> function .)
    CLOSE_BRACE     reduce using rule 13 (expression -> function .)


state 12

    (18) variable -> type . NAME IGUAL datatype SEMICOLON
    (19) variable -> type . NAME IGUAL operations SEMICOLON
    (71) array -> type . NAME IGUAL OPEN_BRACKET items CLOSE_BRACKET SEMICOLON
    (72) array -> type . NAME IGUAL NEW ARRAY OPEN_PARENTHESIS items CLOSE_PARENTHESIS SEMICOLON
    (94) set -> type . NAME IGUAL NEW SET OPEN_PARENTHESIS CLOSE_PARENTHESIS SEMICOLON
    (95) set -> type . NAME IGUAL NEW SET OPEN_PARENTHESIS OPEN_BRACKET items CLOSE_BRACKET CLOSE_PARENTHESIS SEMICOLON
    (96) set -> type . NAME IGUAL NEW SET OPEN_PARENTHESIS element CLOSE_PARENTHESIS SEMICOLON

    NAME            shift and go to state 37


state 13

    (20) variable -> NAME . IGUAL datatype SEMICOLON
    (100) methodsSet -> NAME . POINT ADD OPEN_PARENTHESIS element CLOSE_PARENTHESIS SEMICOLON
    (101) methodsSet -> NAME . POINT DELETE OPEN_PARENTHESIS element CLOSE_PARENTHESIS SEMICOLON
    (102) methodsSet -> NAME . POINT CLEAR OPEN_PARENTHESIS CLOSE_PARENTHESIS SEMICOLON
    (88) mapFunctions -> NAME . POINT CLEAR OPEN_PARENTHESIS CLOSE_PARENTHESIS SEMICOLON
    (89) mapFunctions -> NAME . POINT GET OPEN_PARENTHESIS clave CLOSE_PARENTHESIS SEMICOLON
    (90) mapFunctions -> NAME . POINT HAS OPEN_PARENTHESIS clave CLOSE_PARENTHESIS SEMICOLON
    (91) arrayFn -> NAME . POINT POP OPEN_PARENTHESIS CLOSE_PARENTHESIS SEMICOLON
    (92) arrayFn -> NAME . POINT PUSH OPEN_PARENTHESIS element CLOSE_PARENTHESIS SEMICOLON
    (93) arrayFn -> NAME . POINT UNSHIFT OPEN_PARENTHESIS element CLOSE_PARENTHESIS SEMICOLON
    (110) declaration -> NAME . IGUAL element SEMICOLON
    (97) set -> NAME . IGUAL NEW SET OPEN_PARENTHESIS CLOSE_PARENTHESIS SEMICOLON
    (98) set -> NAME . IGUAL NEW SET OPEN_PARENTHESIS OPEN_BRACKET items CLOSE_BRACKET CLOSE_PARENTHESIS SEMICOLON
    (99) set -> NAME . IGUAL NEW SET OPEN_PARENTHESIS element CLOSE_PARENTHESIS SEMICOLON

    IGUAL           shift and go to state 38
    POINT           shift and go to state 39


state 14

    (24) dataStruct -> array .

    NAME            reduce using rule 24 (dataStruct -> array .)
    PRINT           reduce using rule 24 (dataStruct -> array .)
    RETURN          reduce using rule 24 (dataStruct -> array .)
    FUNCTION        reduce using rule 24 (dataStruct -> array .)
    CONST           reduce using rule 24 (dataStruct -> array .)
    LET             reduce using rule 24 (dataStruct -> array .)
    VAR             reduce using rule 24 (dataStruct -> array .)
    WHILE           reduce using rule 24 (dataStruct -> array .)
    FOR             reduce using rule 24 (dataStruct -> array .)
    IF              reduce using rule 24 (dataStruct -> array .)
    $end            reduce using rule 24 (dataStruct -> array .)
    CLOSE_BRACE     reduce using rule 24 (dataStruct -> array .)
    COMMA           reduce using rule 24 (dataStruct -> array .)


state 15

    (25) dataStruct -> set .

    NAME            reduce using rule 25 (dataStruct -> set .)
    PRINT           reduce using rule 25 (dataStruct -> set .)
    RETURN          reduce using rule 25 (dataStruct -> set .)
    FUNCTION        reduce using rule 25 (dataStruct -> set .)
    CONST           reduce using rule 25 (dataStruct -> set .)
    LET             reduce using rule 25 (dataStruct -> set .)
    VAR             reduce using rule 25 (dataStruct -> set .)
    WHILE           reduce using rule 25 (dataStruct -> set .)
    FOR             reduce using rule 25 (dataStruct -> set .)
    IF              reduce using rule 25 (dataStruct -> set .)
    $end            reduce using rule 25 (dataStruct -> set .)
    CLOSE_BRACE     reduce using rule 25 (dataStruct -> set .)
    COMMA           reduce using rule 25 (dataStruct -> set .)


state 16

    (26) dataStruct -> map .

    NAME            reduce using rule 26 (dataStruct -> map .)
    PRINT           reduce using rule 26 (dataStruct -> map .)
    RETURN          reduce using rule 26 (dataStruct -> map .)
    FUNCTION        reduce using rule 26 (dataStruct -> map .)
    CONST           reduce using rule 26 (dataStruct -> map .)
    LET             reduce using rule 26 (dataStruct -> map .)
    VAR             reduce using rule 26 (dataStruct -> map .)
    WHILE           reduce using rule 26 (dataStruct -> map .)
    FOR             reduce using rule 26 (dataStruct -> map .)
    IF              reduce using rule 26 (dataStruct -> map .)
    $end            reduce using rule 26 (dataStruct -> map .)
    CLOSE_BRACE     reduce using rule 26 (dataStruct -> map .)
    COMMA           reduce using rule 26 (dataStruct -> map .)


state 17

    (21) controlStruct -> while .

    NAME            reduce using rule 21 (controlStruct -> while .)
    PRINT           reduce using rule 21 (controlStruct -> while .)
    RETURN          reduce using rule 21 (controlStruct -> while .)
    FUNCTION        reduce using rule 21 (controlStruct -> while .)
    CONST           reduce using rule 21 (controlStruct -> while .)
    LET             reduce using rule 21 (controlStruct -> while .)
    VAR             reduce using rule 21 (controlStruct -> while .)
    WHILE           reduce using rule 21 (controlStruct -> while .)
    FOR             reduce using rule 21 (controlStruct -> while .)
    IF              reduce using rule 21 (controlStruct -> while .)
    $end            reduce using rule 21 (controlStruct -> while .)
    CLOSE_BRACE     reduce using rule 21 (controlStruct -> while .)


state 18

    (22) controlStruct -> for .

    NAME            reduce using rule 22 (controlStruct -> for .)
    PRINT           reduce using rule 22 (controlStruct -> for .)
    RETURN          reduce using rule 22 (controlStruct -> for .)
    FUNCTION        reduce using rule 22 (controlStruct -> for .)
    CONST           reduce using rule 22 (controlStruct -> for .)
    LET             reduce using rule 22 (controlStruct -> for .)
    VAR             reduce using rule 22 (controlStruct -> for .)
    WHILE           reduce using rule 22 (controlStruct -> for .)
    FOR             reduce using rule 22 (controlStruct -> for .)
    IF              reduce using rule 22 (controlStruct -> for .)
    $end            reduce using rule 22 (controlStruct -> for .)
    CLOSE_BRACE     reduce using rule 22 (controlStruct -> for .)


state 19

    (23) controlStruct -> if .

    NAME            reduce using rule 23 (controlStruct -> if .)
    PRINT           reduce using rule 23 (controlStruct -> if .)
    RETURN          reduce using rule 23 (controlStruct -> if .)
    FUNCTION        reduce using rule 23 (controlStruct -> if .)
    CONST           reduce using rule 23 (controlStruct -> if .)
    LET             reduce using rule 23 (controlStruct -> if .)
    VAR             reduce using rule 23 (controlStruct -> if .)
    WHILE           reduce using rule 23 (controlStruct -> if .)
    FOR             reduce using rule 23 (controlStruct -> if .)
    IF              reduce using rule 23 (controlStruct -> if .)
    $end            reduce using rule 23 (controlStruct -> if .)
    CLOSE_BRACE     reduce using rule 23 (controlStruct -> if .)


state 20

    (122) print -> PRINT . OPEN_PARENTHESIS CLOSE_PARENTHESIS SEMICOLON

    OPEN_PARENTHESIS shift and go to state 40


state 21

    (121) return -> RETURN . element SEMICOLON
    (107) element -> . STRING
    (108) element -> . number
    (109) element -> . NAME
    (14) number -> . INTEGER
    (15) number -> . FLOAT
    (16) number -> . RESTA INTEGER
    (17) number -> . RESTA FLOAT

    STRING          shift and go to state 42
    NAME            shift and go to state 44
    INTEGER         shift and go to state 45
    FLOAT           shift and go to state 46
    RESTA           shift and go to state 47

    element                        shift and go to state 41
    number                         shift and go to state 43

state 22

    (117) function -> FUNCTION . NAME OPEN_PARENTHESIS CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE
    (118) function -> FUNCTION . NAME OPEN_PARENTHESIS parameter CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE

    NAME            shift and go to state 48


state 23

    (60) type -> CONST .

    NAME            reduce using rule 60 (type -> CONST .)


state 24

    (61) type -> LET .

    NAME            reduce using rule 61 (type -> LET .)


state 25

    (62) type -> VAR .

    NAME            reduce using rule 62 (type -> VAR .)


state 26

    (73) map -> iniciarMap .

    NAME            reduce using rule 73 (map -> iniciarMap .)
    PRINT           reduce using rule 73 (map -> iniciarMap .)
    RETURN          reduce using rule 73 (map -> iniciarMap .)
    FUNCTION        reduce using rule 73 (map -> iniciarMap .)
    CONST           reduce using rule 73 (map -> iniciarMap .)
    LET             reduce using rule 73 (map -> iniciarMap .)
    VAR             reduce using rule 73 (map -> iniciarMap .)
    WHILE           reduce using rule 73 (map -> iniciarMap .)
    FOR             reduce using rule 73 (map -> iniciarMap .)
    IF              reduce using rule 73 (map -> iniciarMap .)
    $end            reduce using rule 73 (map -> iniciarMap .)
    CLOSE_BRACE     reduce using rule 73 (map -> iniciarMap .)
    COMMA           reduce using rule 73 (map -> iniciarMap .)


state 27

    (74) map -> escribirMap .

    NAME            reduce using rule 74 (map -> escribirMap .)
    PRINT           reduce using rule 74 (map -> escribirMap .)
    RETURN          reduce using rule 74 (map -> escribirMap .)
    FUNCTION        reduce using rule 74 (map -> escribirMap .)
    CONST           reduce using rule 74 (map -> escribirMap .)
    LET             reduce using rule 74 (map -> escribirMap .)
    VAR             reduce using rule 74 (map -> escribirMap .)
    WHILE           reduce using rule 74 (map -> escribirMap .)
    FOR             reduce using rule 74 (map -> escribirMap .)
    IF              reduce using rule 74 (map -> escribirMap .)
    $end            reduce using rule 74 (map -> escribirMap .)
    CLOSE_BRACE     reduce using rule 74 (map -> escribirMap .)
    COMMA           reduce using rule 74 (map -> escribirMap .)


state 28

    (75) map -> generarMap .

    NAME            reduce using rule 75 (map -> generarMap .)
    PRINT           reduce using rule 75 (map -> generarMap .)
    RETURN          reduce using rule 75 (map -> generarMap .)
    FUNCTION        reduce using rule 75 (map -> generarMap .)
    CONST           reduce using rule 75 (map -> generarMap .)
    LET             reduce using rule 75 (map -> generarMap .)
    VAR             reduce using rule 75 (map -> generarMap .)
    WHILE           reduce using rule 75 (map -> generarMap .)
    FOR             reduce using rule 75 (map -> generarMap .)
    IF              reduce using rule 75 (map -> generarMap .)
    $end            reduce using rule 75 (map -> generarMap .)
    CLOSE_BRACE     reduce using rule 75 (map -> generarMap .)
    COMMA           reduce using rule 75 (map -> generarMap .)


state 29

    (27) while -> WHILE . OPEN_PARENTHESIS controlArg CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE
    (28) while -> WHILE . OPEN_PARENTHESIS bool CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE

    OPEN_PARENTHESIS shift and go to state 49


state 30

    (38) for -> FOR . OPEN_PARENTHESIS inicialization SEMICOLON expBoolean SEMICOLON operations CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE

    OPEN_PARENTHESIS shift and go to state 50


state 31

    (29) if -> soloIf .
    (30) if -> soloIf . elseIf
    (31) if -> soloIf . elseIf else
    (32) if -> soloIf . else
    (34) elseIf -> . ELSEIF OPEN_PARENTHESIS controlArg CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE
    (35) elseIf -> . ELSEIF OPEN_PARENTHESIS controlArg CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE soloIf
    (36) else -> . ELSE OPEN_BRACE expression CLOSE_BRACE

    NAME            reduce using rule 29 (if -> soloIf .)
    PRINT           reduce using rule 29 (if -> soloIf .)
    RETURN          reduce using rule 29 (if -> soloIf .)
    FUNCTION        reduce using rule 29 (if -> soloIf .)
    CONST           reduce using rule 29 (if -> soloIf .)
    LET             reduce using rule 29 (if -> soloIf .)
    VAR             reduce using rule 29 (if -> soloIf .)
    WHILE           reduce using rule 29 (if -> soloIf .)
    FOR             reduce using rule 29 (if -> soloIf .)
    IF              reduce using rule 29 (if -> soloIf .)
    $end            reduce using rule 29 (if -> soloIf .)
    CLOSE_BRACE     reduce using rule 29 (if -> soloIf .)
    ELSEIF          shift and go to state 53
    ELSE            shift and go to state 54

    elseIf                         shift and go to state 51
    else                           shift and go to state 52

state 32

    (33) soloIf -> IF . OPEN_PARENTHESIS controlArg CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE

    OPEN_PARENTHESIS shift and go to state 55


state 33

    (2) expression -> variable expression .

    $end            reduce using rule 2 (expression -> variable expression .)
    CLOSE_BRACE     reduce using rule 2 (expression -> variable expression .)


state 34

    (76) iniciarMap -> variable IGUAL . NEW MAP OPEN_PARENTHESIS CLOSE_PARENTHESIS SEMICOLON
    (77) escribirMap -> variable IGUAL . OPEN_BRACE claveValor CLOSE_BRACE
    (83) generarMap -> variable IGUAL . OPEN_BRACE tuplas CLOSE_BRACE

    NEW             shift and go to state 56
    OPEN_BRACE      shift and go to state 57


state 35

    (4) expression -> dataStruct expression .

    $end            reduce using rule 4 (expression -> dataStruct expression .)
    CLOSE_BRACE     reduce using rule 4 (expression -> dataStruct expression .)


state 36

    (6) expression -> controlStruct expression .

    $end            reduce using rule 6 (expression -> controlStruct expression .)
    CLOSE_BRACE     reduce using rule 6 (expression -> controlStruct expression .)


state 37

    (18) variable -> type NAME . IGUAL datatype SEMICOLON
    (19) variable -> type NAME . IGUAL operations SEMICOLON
    (71) array -> type NAME . IGUAL OPEN_BRACKET items CLOSE_BRACKET SEMICOLON
    (72) array -> type NAME . IGUAL NEW ARRAY OPEN_PARENTHESIS items CLOSE_PARENTHESIS SEMICOLON
    (94) set -> type NAME . IGUAL NEW SET OPEN_PARENTHESIS CLOSE_PARENTHESIS SEMICOLON
    (95) set -> type NAME . IGUAL NEW SET OPEN_PARENTHESIS OPEN_BRACKET items CLOSE_BRACKET CLOSE_PARENTHESIS SEMICOLON
    (96) set -> type NAME . IGUAL NEW SET OPEN_PARENTHESIS element CLOSE_PARENTHESIS SEMICOLON

    IGUAL           shift and go to state 58


state 38

    (20) variable -> NAME IGUAL . datatype SEMICOLON
    (110) declaration -> NAME IGUAL . element SEMICOLON
    (97) set -> NAME IGUAL . NEW SET OPEN_PARENTHESIS CLOSE_PARENTHESIS SEMICOLON
    (98) set -> NAME IGUAL . NEW SET OPEN_PARENTHESIS OPEN_BRACKET items CLOSE_BRACKET CLOSE_PARENTHESIS SEMICOLON
    (99) set -> NAME IGUAL . NEW SET OPEN_PARENTHESIS element CLOSE_PARENTHESIS SEMICOLON
    (50) datatype -> . number
    (51) datatype -> . STRING
    (52) datatype -> . CHAR
    (53) datatype -> . operations
    (107) element -> . STRING
    (108) element -> . number
    (109) element -> . NAME
    (14) number -> . INTEGER
    (15) number -> . FLOAT
    (16) number -> . RESTA INTEGER
    (17) number -> . RESTA FLOAT
    (41) operations -> . number operand number
    (42) operations -> . NAME
    (43) operations -> . number
    (44) operations -> . number operand NAME operations
    (45) operations -> . NAME operand number operations
    (46) operations -> . number operand NAME
    (47) operations -> . NAME operand number
    (48) operations -> . NAME operand NAME operations
    (49) operations -> . number operand number operand operations

    NEW             shift and go to state 62
    STRING          shift and go to state 64
    CHAR            shift and go to state 65
    NAME            shift and go to state 59
    INTEGER         shift and go to state 45
    FLOAT           shift and go to state 46
    RESTA           shift and go to state 47

    datatype                       shift and go to state 60
    element                        shift and go to state 61
    number                         shift and go to state 63
    operations                     shift and go to state 66

state 39

    (100) methodsSet -> NAME POINT . ADD OPEN_PARENTHESIS element CLOSE_PARENTHESIS SEMICOLON
    (101) methodsSet -> NAME POINT . DELETE OPEN_PARENTHESIS element CLOSE_PARENTHESIS SEMICOLON
    (102) methodsSet -> NAME POINT . CLEAR OPEN_PARENTHESIS CLOSE_PARENTHESIS SEMICOLON
    (88) mapFunctions -> NAME POINT . CLEAR OPEN_PARENTHESIS CLOSE_PARENTHESIS SEMICOLON
    (89) mapFunctions -> NAME POINT . GET OPEN_PARENTHESIS clave CLOSE_PARENTHESIS SEMICOLON
    (90) mapFunctions -> NAME POINT . HAS OPEN_PARENTHESIS clave CLOSE_PARENTHESIS SEMICOLON
    (91) arrayFn -> NAME POINT . POP OPEN_PARENTHESIS CLOSE_PARENTHESIS SEMICOLON
    (92) arrayFn -> NAME POINT . PUSH OPEN_PARENTHESIS element CLOSE_PARENTHESIS SEMICOLON
    (93) arrayFn -> NAME POINT . UNSHIFT OPEN_PARENTHESIS element CLOSE_PARENTHESIS SEMICOLON

    ADD             shift and go to state 67
    DELETE          shift and go to state 68
    CLEAR           shift and go to state 69
    GET             shift and go to state 70
    HAS             shift and go to state 71
    POP             shift and go to state 72
    PUSH            shift and go to state 73
    UNSHIFT         shift and go to state 74


state 40

    (122) print -> PRINT OPEN_PARENTHESIS . CLOSE_PARENTHESIS SEMICOLON

    CLOSE_PARENTHESIS shift and go to state 75


state 41

    (121) return -> RETURN element . SEMICOLON

    SEMICOLON       shift and go to state 76


state 42

    (107) element -> STRING .

    SEMICOLON       reduce using rule 107 (element -> STRING .)
    IGUALIGUAL      reduce using rule 107 (element -> STRING .)
    DIFERENTE       reduce using rule 107 (element -> STRING .)
    MAYORQUE        reduce using rule 107 (element -> STRING .)
    MAYORIGUALQUE   reduce using rule 107 (element -> STRING .)
    MENORQUE        reduce using rule 107 (element -> STRING .)
    MENORIGUALQUE   reduce using rule 107 (element -> STRING .)
    STRING          reduce using rule 107 (element -> STRING .)
    NAME            reduce using rule 107 (element -> STRING .)
    INTEGER         reduce using rule 107 (element -> STRING .)
    FLOAT           reduce using rule 107 (element -> STRING .)
    RESTA           reduce using rule 107 (element -> STRING .)
    CLOSE_PARENTHESIS reduce using rule 107 (element -> STRING .)
    AND             reduce using rule 107 (element -> STRING .)
    OR              reduce using rule 107 (element -> STRING .)


state 43

    (108) element -> number .

    SEMICOLON       reduce using rule 108 (element -> number .)
    IGUALIGUAL      reduce using rule 108 (element -> number .)
    DIFERENTE       reduce using rule 108 (element -> number .)
    MAYORQUE        reduce using rule 108 (element -> number .)
    MAYORIGUALQUE   reduce using rule 108 (element -> number .)
    MENORQUE        reduce using rule 108 (element -> number .)
    MENORIGUALQUE   reduce using rule 108 (element -> number .)
    STRING          reduce using rule 108 (element -> number .)
    NAME            reduce using rule 108 (element -> number .)
    INTEGER         reduce using rule 108 (element -> number .)
    FLOAT           reduce using rule 108 (element -> number .)
    RESTA           reduce using rule 108 (element -> number .)
    CLOSE_PARENTHESIS reduce using rule 108 (element -> number .)
    AND             reduce using rule 108 (element -> number .)
    OR              reduce using rule 108 (element -> number .)


state 44

    (109) element -> NAME .

    SEMICOLON       reduce using rule 109 (element -> NAME .)
    IGUALIGUAL      reduce using rule 109 (element -> NAME .)
    DIFERENTE       reduce using rule 109 (element -> NAME .)
    MAYORQUE        reduce using rule 109 (element -> NAME .)
    MAYORIGUALQUE   reduce using rule 109 (element -> NAME .)
    MENORQUE        reduce using rule 109 (element -> NAME .)
    MENORIGUALQUE   reduce using rule 109 (element -> NAME .)
    STRING          reduce using rule 109 (element -> NAME .)
    NAME            reduce using rule 109 (element -> NAME .)
    INTEGER         reduce using rule 109 (element -> NAME .)
    FLOAT           reduce using rule 109 (element -> NAME .)
    RESTA           reduce using rule 109 (element -> NAME .)
    CLOSE_PARENTHESIS reduce using rule 109 (element -> NAME .)
    AND             reduce using rule 109 (element -> NAME .)
    OR              reduce using rule 109 (element -> NAME .)


state 45

    (14) number -> INTEGER .

    SEMICOLON       reduce using rule 14 (number -> INTEGER .)
    SUMA            reduce using rule 14 (number -> INTEGER .)
    RESTA           reduce using rule 14 (number -> INTEGER .)
    MULTIPLICACION  reduce using rule 14 (number -> INTEGER .)
    DIVISION        reduce using rule 14 (number -> INTEGER .)
    IGUALIGUAL      reduce using rule 14 (number -> INTEGER .)
    DIFERENTE       reduce using rule 14 (number -> INTEGER .)
    MAYORQUE        reduce using rule 14 (number -> INTEGER .)
    MAYORIGUALQUE   reduce using rule 14 (number -> INTEGER .)
    MENORQUE        reduce using rule 14 (number -> INTEGER .)
    MENORIGUALQUE   reduce using rule 14 (number -> INTEGER .)
    COLON           reduce using rule 14 (number -> INTEGER .)
    STRING          reduce using rule 14 (number -> INTEGER .)
    NAME            reduce using rule 14 (number -> INTEGER .)
    INTEGER         reduce using rule 14 (number -> INTEGER .)
    FLOAT           reduce using rule 14 (number -> INTEGER .)
    CLOSE_PARENTHESIS reduce using rule 14 (number -> INTEGER .)
    CLOSE_BRACKET   reduce using rule 14 (number -> INTEGER .)
    COMMA           reduce using rule 14 (number -> INTEGER .)
    CLOSE_BRACE     reduce using rule 14 (number -> INTEGER .)
    AND             reduce using rule 14 (number -> INTEGER .)
    OR              reduce using rule 14 (number -> INTEGER .)


state 46

    (15) number -> FLOAT .

    SEMICOLON       reduce using rule 15 (number -> FLOAT .)
    SUMA            reduce using rule 15 (number -> FLOAT .)
    RESTA           reduce using rule 15 (number -> FLOAT .)
    MULTIPLICACION  reduce using rule 15 (number -> FLOAT .)
    DIVISION        reduce using rule 15 (number -> FLOAT .)
    IGUALIGUAL      reduce using rule 15 (number -> FLOAT .)
    DIFERENTE       reduce using rule 15 (number -> FLOAT .)
    MAYORQUE        reduce using rule 15 (number -> FLOAT .)
    MAYORIGUALQUE   reduce using rule 15 (number -> FLOAT .)
    MENORQUE        reduce using rule 15 (number -> FLOAT .)
    MENORIGUALQUE   reduce using rule 15 (number -> FLOAT .)
    COLON           reduce using rule 15 (number -> FLOAT .)
    STRING          reduce using rule 15 (number -> FLOAT .)
    NAME            reduce using rule 15 (number -> FLOAT .)
    INTEGER         reduce using rule 15 (number -> FLOAT .)
    FLOAT           reduce using rule 15 (number -> FLOAT .)
    CLOSE_PARENTHESIS reduce using rule 15 (number -> FLOAT .)
    CLOSE_BRACKET   reduce using rule 15 (number -> FLOAT .)
    COMMA           reduce using rule 15 (number -> FLOAT .)
    CLOSE_BRACE     reduce using rule 15 (number -> FLOAT .)
    AND             reduce using rule 15 (number -> FLOAT .)
    OR              reduce using rule 15 (number -> FLOAT .)


state 47

    (16) number -> RESTA . INTEGER
    (17) number -> RESTA . FLOAT

    INTEGER         shift and go to state 77
    FLOAT           shift and go to state 78


state 48

    (117) function -> FUNCTION NAME . OPEN_PARENTHESIS CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE
    (118) function -> FUNCTION NAME . OPEN_PARENTHESIS parameter CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE

    OPEN_PARENTHESIS shift and go to state 79


state 49

    (27) while -> WHILE OPEN_PARENTHESIS . controlArg CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE
    (28) while -> WHILE OPEN_PARENTHESIS . bool CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE
    (37) controlArg -> . element clause element
    (58) bool -> . TRUE
    (59) bool -> . FALSE
    (107) element -> . STRING
    (108) element -> . number
    (109) element -> . NAME
    (14) number -> . INTEGER
    (15) number -> . FLOAT
    (16) number -> . RESTA INTEGER
    (17) number -> . RESTA FLOAT

    TRUE            shift and go to state 83
    FALSE           shift and go to state 84
    STRING          shift and go to state 42
    NAME            shift and go to state 44
    INTEGER         shift and go to state 45
    FLOAT           shift and go to state 46
    RESTA           shift and go to state 47

    controlArg                     shift and go to state 80
    bool                           shift and go to state 81
    element                        shift and go to state 82
    number                         shift and go to state 43

state 50

    (38) for -> FOR OPEN_PARENTHESIS . inicialization SEMICOLON expBoolean SEMICOLON operations CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE
    (39) inicialization -> . type NAME IGUAL number
    (40) inicialization -> . NAME IGUAL number
    (60) type -> . CONST
    (61) type -> . LET
    (62) type -> . VAR

    NAME            shift and go to state 87
    CONST           shift and go to state 23
    LET             shift and go to state 24
    VAR             shift and go to state 25

    inicialization                 shift and go to state 85
    type                           shift and go to state 86

state 51

    (30) if -> soloIf elseIf .
    (31) if -> soloIf elseIf . else
    (36) else -> . ELSE OPEN_BRACE expression CLOSE_BRACE

    NAME            reduce using rule 30 (if -> soloIf elseIf .)
    PRINT           reduce using rule 30 (if -> soloIf elseIf .)
    RETURN          reduce using rule 30 (if -> soloIf elseIf .)
    FUNCTION        reduce using rule 30 (if -> soloIf elseIf .)
    CONST           reduce using rule 30 (if -> soloIf elseIf .)
    LET             reduce using rule 30 (if -> soloIf elseIf .)
    VAR             reduce using rule 30 (if -> soloIf elseIf .)
    WHILE           reduce using rule 30 (if -> soloIf elseIf .)
    FOR             reduce using rule 30 (if -> soloIf elseIf .)
    IF              reduce using rule 30 (if -> soloIf elseIf .)
    $end            reduce using rule 30 (if -> soloIf elseIf .)
    CLOSE_BRACE     reduce using rule 30 (if -> soloIf elseIf .)
    ELSE            shift and go to state 54

    else                           shift and go to state 88

state 52

    (32) if -> soloIf else .

    NAME            reduce using rule 32 (if -> soloIf else .)
    PRINT           reduce using rule 32 (if -> soloIf else .)
    RETURN          reduce using rule 32 (if -> soloIf else .)
    FUNCTION        reduce using rule 32 (if -> soloIf else .)
    CONST           reduce using rule 32 (if -> soloIf else .)
    LET             reduce using rule 32 (if -> soloIf else .)
    VAR             reduce using rule 32 (if -> soloIf else .)
    WHILE           reduce using rule 32 (if -> soloIf else .)
    FOR             reduce using rule 32 (if -> soloIf else .)
    IF              reduce using rule 32 (if -> soloIf else .)
    $end            reduce using rule 32 (if -> soloIf else .)
    CLOSE_BRACE     reduce using rule 32 (if -> soloIf else .)


state 53

    (34) elseIf -> ELSEIF . OPEN_PARENTHESIS controlArg CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE
    (35) elseIf -> ELSEIF . OPEN_PARENTHESIS controlArg CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE soloIf

    OPEN_PARENTHESIS shift and go to state 89


state 54

    (36) else -> ELSE . OPEN_BRACE expression CLOSE_BRACE

    OPEN_BRACE      shift and go to state 90


state 55

    (33) soloIf -> IF OPEN_PARENTHESIS . controlArg CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE
    (37) controlArg -> . element clause element
    (107) element -> . STRING
    (108) element -> . number
    (109) element -> . NAME
    (14) number -> . INTEGER
    (15) number -> . FLOAT
    (16) number -> . RESTA INTEGER
    (17) number -> . RESTA FLOAT

    STRING          shift and go to state 42
    NAME            shift and go to state 44
    INTEGER         shift and go to state 45
    FLOAT           shift and go to state 46
    RESTA           shift and go to state 47

    controlArg                     shift and go to state 91
    element                        shift and go to state 82
    number                         shift and go to state 43

state 56

    (76) iniciarMap -> variable IGUAL NEW . MAP OPEN_PARENTHESIS CLOSE_PARENTHESIS SEMICOLON

    MAP             shift and go to state 92


state 57

    (77) escribirMap -> variable IGUAL OPEN_BRACE . claveValor CLOSE_BRACE
    (83) generarMap -> variable IGUAL OPEN_BRACE . tuplas CLOSE_BRACE
    (78) claveValor -> . clave COLON valor
    (79) claveValor -> . clave COLON valor COMMA claveValor
    (84) tuplas -> . tupla
    (85) tuplas -> . tupla COMMA tuplas
    (80) clave -> . datatype
    (86) tupla -> . OPEN_BRACKET datatype CLOSE_BRACKET SEMICOLON
    (87) tupla -> . OPEN_BRACKET datatype COMMA datatype CLOSE_BRACKET SEMICOLON
    (50) datatype -> . number
    (51) datatype -> . STRING
    (52) datatype -> . CHAR
    (53) datatype -> . operations
    (14) number -> . INTEGER
    (15) number -> . FLOAT
    (16) number -> . RESTA INTEGER
    (17) number -> . RESTA FLOAT
    (41) operations -> . number operand number
    (42) operations -> . NAME
    (43) operations -> . number
    (44) operations -> . number operand NAME operations
    (45) operations -> . NAME operand number operations
    (46) operations -> . number operand NAME
    (47) operations -> . NAME operand number
    (48) operations -> . NAME operand NAME operations
    (49) operations -> . number operand number operand operations

    OPEN_BRACKET    shift and go to state 98
    STRING          shift and go to state 100
    CHAR            shift and go to state 65
    INTEGER         shift and go to state 45
    FLOAT           shift and go to state 46
    RESTA           shift and go to state 47
    NAME            shift and go to state 101

    claveValor                     shift and go to state 93
    tuplas                         shift and go to state 94
    clave                          shift and go to state 95
    tupla                          shift and go to state 96
    datatype                       shift and go to state 97
    number                         shift and go to state 99
    operations                     shift and go to state 66

state 58

    (18) variable -> type NAME IGUAL . datatype SEMICOLON
    (19) variable -> type NAME IGUAL . operations SEMICOLON
    (71) array -> type NAME IGUAL . OPEN_BRACKET items CLOSE_BRACKET SEMICOLON
    (72) array -> type NAME IGUAL . NEW ARRAY OPEN_PARENTHESIS items CLOSE_PARENTHESIS SEMICOLON
    (94) set -> type NAME IGUAL . NEW SET OPEN_PARENTHESIS CLOSE_PARENTHESIS SEMICOLON
    (95) set -> type NAME IGUAL . NEW SET OPEN_PARENTHESIS OPEN_BRACKET items CLOSE_BRACKET CLOSE_PARENTHESIS SEMICOLON
    (96) set -> type NAME IGUAL . NEW SET OPEN_PARENTHESIS element CLOSE_PARENTHESIS SEMICOLON
    (50) datatype -> . number
    (51) datatype -> . STRING
    (52) datatype -> . CHAR
    (53) datatype -> . operations
    (41) operations -> . number operand number
    (42) operations -> . NAME
    (43) operations -> . number
    (44) operations -> . number operand NAME operations
    (45) operations -> . NAME operand number operations
    (46) operations -> . number operand NAME
    (47) operations -> . NAME operand number
    (48) operations -> . NAME operand NAME operations
    (49) operations -> . number operand number operand operations
    (14) number -> . INTEGER
    (15) number -> . FLOAT
    (16) number -> . RESTA INTEGER
    (17) number -> . RESTA FLOAT

    OPEN_BRACKET    shift and go to state 104
    NEW             shift and go to state 105
    STRING          shift and go to state 100
    CHAR            shift and go to state 65
    NAME            shift and go to state 101
    INTEGER         shift and go to state 45
    FLOAT           shift and go to state 46
    RESTA           shift and go to state 47

    datatype                       shift and go to state 102
    operations                     shift and go to state 103
    number                         shift and go to state 99

state 59

    (109) element -> NAME .
    (42) operations -> NAME .
    (45) operations -> NAME . operand number operations
    (47) operations -> NAME . operand number
    (48) operations -> NAME . operand NAME operations
    (54) operand -> . SUMA
    (55) operand -> . RESTA
    (56) operand -> . MULTIPLICACION
    (57) operand -> . DIVISION

  ! reduce/reduce conflict for SEMICOLON resolved using rule 42 (operations -> NAME .)
    SEMICOLON       reduce using rule 42 (operations -> NAME .)
    SUMA            shift and go to state 107
    RESTA           shift and go to state 108
    MULTIPLICACION  shift and go to state 109
    DIVISION        shift and go to state 110

  ! SEMICOLON       [ reduce using rule 109 (element -> NAME .) ]

    operand                        shift and go to state 106

state 60

    (20) variable -> NAME IGUAL datatype . SEMICOLON

    SEMICOLON       shift and go to state 111


state 61

    (110) declaration -> NAME IGUAL element . SEMICOLON

    SEMICOLON       shift and go to state 112


state 62

    (97) set -> NAME IGUAL NEW . SET OPEN_PARENTHESIS CLOSE_PARENTHESIS SEMICOLON
    (98) set -> NAME IGUAL NEW . SET OPEN_PARENTHESIS OPEN_BRACKET items CLOSE_BRACKET CLOSE_PARENTHESIS SEMICOLON
    (99) set -> NAME IGUAL NEW . SET OPEN_PARENTHESIS element CLOSE_PARENTHESIS SEMICOLON

    SET             shift and go to state 113


state 63

    (50) datatype -> number .
    (108) element -> number .
    (41) operations -> number . operand number
    (43) operations -> number .
    (44) operations -> number . operand NAME operations
    (46) operations -> number . operand NAME
    (49) operations -> number . operand number operand operations
    (54) operand -> . SUMA
    (55) operand -> . RESTA
    (56) operand -> . MULTIPLICACION
    (57) operand -> . DIVISION

  ! reduce/reduce conflict for SEMICOLON resolved using rule 50 (datatype -> number .)
  ! reduce/reduce conflict for SEMICOLON resolved using rule 43 (operations -> number .)
    SEMICOLON       reduce using rule 43 (operations -> number .)
    SUMA            shift and go to state 107
    RESTA           shift and go to state 108
    MULTIPLICACION  shift and go to state 109
    DIVISION        shift and go to state 110

  ! SEMICOLON       [ reduce using rule 50 (datatype -> number .) ]
  ! SEMICOLON       [ reduce using rule 108 (element -> number .) ]

    operand                        shift and go to state 114

state 64

    (51) datatype -> STRING .
    (107) element -> STRING .

  ! reduce/reduce conflict for SEMICOLON resolved using rule 51 (datatype -> STRING .)
    SEMICOLON       reduce using rule 51 (datatype -> STRING .)

  ! SEMICOLON       [ reduce using rule 107 (element -> STRING .) ]


state 65

    (52) datatype -> CHAR .

    SEMICOLON       reduce using rule 52 (datatype -> CHAR .)
    COLON           reduce using rule 52 (datatype -> CHAR .)
    CLOSE_BRACKET   reduce using rule 52 (datatype -> CHAR .)
    COMMA           reduce using rule 52 (datatype -> CHAR .)
    CLOSE_PARENTHESIS reduce using rule 52 (datatype -> CHAR .)
    CLOSE_BRACE     reduce using rule 52 (datatype -> CHAR .)


state 66

    (53) datatype -> operations .

    SEMICOLON       reduce using rule 53 (datatype -> operations .)
    COLON           reduce using rule 53 (datatype -> operations .)
    CLOSE_BRACKET   reduce using rule 53 (datatype -> operations .)
    COMMA           reduce using rule 53 (datatype -> operations .)
    CLOSE_PARENTHESIS reduce using rule 53 (datatype -> operations .)
    CLOSE_BRACE     reduce using rule 53 (datatype -> operations .)


state 67

    (100) methodsSet -> NAME POINT ADD . OPEN_PARENTHESIS element CLOSE_PARENTHESIS SEMICOLON

    OPEN_PARENTHESIS shift and go to state 115


state 68

    (101) methodsSet -> NAME POINT DELETE . OPEN_PARENTHESIS element CLOSE_PARENTHESIS SEMICOLON

    OPEN_PARENTHESIS shift and go to state 116


state 69

    (102) methodsSet -> NAME POINT CLEAR . OPEN_PARENTHESIS CLOSE_PARENTHESIS SEMICOLON
    (88) mapFunctions -> NAME POINT CLEAR . OPEN_PARENTHESIS CLOSE_PARENTHESIS SEMICOLON

    OPEN_PARENTHESIS shift and go to state 117


state 70

    (89) mapFunctions -> NAME POINT GET . OPEN_PARENTHESIS clave CLOSE_PARENTHESIS SEMICOLON

    OPEN_PARENTHESIS shift and go to state 118


state 71

    (90) mapFunctions -> NAME POINT HAS . OPEN_PARENTHESIS clave CLOSE_PARENTHESIS SEMICOLON

    OPEN_PARENTHESIS shift and go to state 119


state 72

    (91) arrayFn -> NAME POINT POP . OPEN_PARENTHESIS CLOSE_PARENTHESIS SEMICOLON

    OPEN_PARENTHESIS shift and go to state 120


state 73

    (92) arrayFn -> NAME POINT PUSH . OPEN_PARENTHESIS element CLOSE_PARENTHESIS SEMICOLON

    OPEN_PARENTHESIS shift and go to state 121


state 74

    (93) arrayFn -> NAME POINT UNSHIFT . OPEN_PARENTHESIS element CLOSE_PARENTHESIS SEMICOLON

    OPEN_PARENTHESIS shift and go to state 122


state 75

    (122) print -> PRINT OPEN_PARENTHESIS CLOSE_PARENTHESIS . SEMICOLON

    SEMICOLON       shift and go to state 123


state 76

    (121) return -> RETURN element SEMICOLON .

    $end            reduce using rule 121 (return -> RETURN element SEMICOLON .)
    CLOSE_BRACE     reduce using rule 121 (return -> RETURN element SEMICOLON .)


state 77

    (16) number -> RESTA INTEGER .

    SEMICOLON       reduce using rule 16 (number -> RESTA INTEGER .)
    SUMA            reduce using rule 16 (number -> RESTA INTEGER .)
    RESTA           reduce using rule 16 (number -> RESTA INTEGER .)
    MULTIPLICACION  reduce using rule 16 (number -> RESTA INTEGER .)
    DIVISION        reduce using rule 16 (number -> RESTA INTEGER .)
    IGUALIGUAL      reduce using rule 16 (number -> RESTA INTEGER .)
    DIFERENTE       reduce using rule 16 (number -> RESTA INTEGER .)
    MAYORQUE        reduce using rule 16 (number -> RESTA INTEGER .)
    MAYORIGUALQUE   reduce using rule 16 (number -> RESTA INTEGER .)
    MENORQUE        reduce using rule 16 (number -> RESTA INTEGER .)
    MENORIGUALQUE   reduce using rule 16 (number -> RESTA INTEGER .)
    COLON           reduce using rule 16 (number -> RESTA INTEGER .)
    STRING          reduce using rule 16 (number -> RESTA INTEGER .)
    NAME            reduce using rule 16 (number -> RESTA INTEGER .)
    INTEGER         reduce using rule 16 (number -> RESTA INTEGER .)
    FLOAT           reduce using rule 16 (number -> RESTA INTEGER .)
    CLOSE_PARENTHESIS reduce using rule 16 (number -> RESTA INTEGER .)
    CLOSE_BRACKET   reduce using rule 16 (number -> RESTA INTEGER .)
    COMMA           reduce using rule 16 (number -> RESTA INTEGER .)
    CLOSE_BRACE     reduce using rule 16 (number -> RESTA INTEGER .)
    AND             reduce using rule 16 (number -> RESTA INTEGER .)
    OR              reduce using rule 16 (number -> RESTA INTEGER .)


state 78

    (17) number -> RESTA FLOAT .

    SEMICOLON       reduce using rule 17 (number -> RESTA FLOAT .)
    SUMA            reduce using rule 17 (number -> RESTA FLOAT .)
    RESTA           reduce using rule 17 (number -> RESTA FLOAT .)
    MULTIPLICACION  reduce using rule 17 (number -> RESTA FLOAT .)
    DIVISION        reduce using rule 17 (number -> RESTA FLOAT .)
    IGUALIGUAL      reduce using rule 17 (number -> RESTA FLOAT .)
    DIFERENTE       reduce using rule 17 (number -> RESTA FLOAT .)
    MAYORQUE        reduce using rule 17 (number -> RESTA FLOAT .)
    MAYORIGUALQUE   reduce using rule 17 (number -> RESTA FLOAT .)
    MENORQUE        reduce using rule 17 (number -> RESTA FLOAT .)
    MENORIGUALQUE   reduce using rule 17 (number -> RESTA FLOAT .)
    COLON           reduce using rule 17 (number -> RESTA FLOAT .)
    STRING          reduce using rule 17 (number -> RESTA FLOAT .)
    NAME            reduce using rule 17 (number -> RESTA FLOAT .)
    INTEGER         reduce using rule 17 (number -> RESTA FLOAT .)
    FLOAT           reduce using rule 17 (number -> RESTA FLOAT .)
    CLOSE_PARENTHESIS reduce using rule 17 (number -> RESTA FLOAT .)
    CLOSE_BRACKET   reduce using rule 17 (number -> RESTA FLOAT .)
    COMMA           reduce using rule 17 (number -> RESTA FLOAT .)
    CLOSE_BRACE     reduce using rule 17 (number -> RESTA FLOAT .)
    AND             reduce using rule 17 (number -> RESTA FLOAT .)
    OR              reduce using rule 17 (number -> RESTA FLOAT .)


state 79

    (117) function -> FUNCTION NAME OPEN_PARENTHESIS . CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE
    (118) function -> FUNCTION NAME OPEN_PARENTHESIS . parameter CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE
    (119) parameter -> . element
    (120) parameter -> . element parameter
    (107) element -> . STRING
    (108) element -> . number
    (109) element -> . NAME
    (14) number -> . INTEGER
    (15) number -> . FLOAT
    (16) number -> . RESTA INTEGER
    (17) number -> . RESTA FLOAT

    CLOSE_PARENTHESIS shift and go to state 124
    STRING          shift and go to state 42
    NAME            shift and go to state 44
    INTEGER         shift and go to state 45
    FLOAT           shift and go to state 46
    RESTA           shift and go to state 47

    parameter                      shift and go to state 125
    element                        shift and go to state 126
    number                         shift and go to state 43

state 80

    (27) while -> WHILE OPEN_PARENTHESIS controlArg . CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE

    CLOSE_PARENTHESIS shift and go to state 127


state 81

    (28) while -> WHILE OPEN_PARENTHESIS bool . CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE

    CLOSE_PARENTHESIS shift and go to state 128


state 82

    (37) controlArg -> element . clause element
    (63) clause -> . IGUALIGUAL
    (64) clause -> . DIFERENTE
    (65) clause -> . MAYORQUE
    (66) clause -> . MAYORIGUALQUE
    (67) clause -> . MENORQUE
    (68) clause -> . MENORIGUALQUE

    IGUALIGUAL      shift and go to state 130
    DIFERENTE       shift and go to state 131
    MAYORQUE        shift and go to state 132
    MAYORIGUALQUE   shift and go to state 133
    MENORQUE        shift and go to state 134
    MENORIGUALQUE   shift and go to state 135

    clause                         shift and go to state 129

state 83

    (58) bool -> TRUE .

    CLOSE_PARENTHESIS reduce using rule 58 (bool -> TRUE .)
    SEMICOLON       reduce using rule 58 (bool -> TRUE .)
    AND             reduce using rule 58 (bool -> TRUE .)
    OR              reduce using rule 58 (bool -> TRUE .)


state 84

    (59) bool -> FALSE .

    CLOSE_PARENTHESIS reduce using rule 59 (bool -> FALSE .)
    SEMICOLON       reduce using rule 59 (bool -> FALSE .)
    AND             reduce using rule 59 (bool -> FALSE .)
    OR              reduce using rule 59 (bool -> FALSE .)


state 85

    (38) for -> FOR OPEN_PARENTHESIS inicialization . SEMICOLON expBoolean SEMICOLON operations CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE

    SEMICOLON       shift and go to state 136


state 86

    (39) inicialization -> type . NAME IGUAL number

    NAME            shift and go to state 137


state 87

    (40) inicialization -> NAME . IGUAL number

    IGUAL           shift and go to state 138


state 88

    (31) if -> soloIf elseIf else .

    NAME            reduce using rule 31 (if -> soloIf elseIf else .)
    PRINT           reduce using rule 31 (if -> soloIf elseIf else .)
    RETURN          reduce using rule 31 (if -> soloIf elseIf else .)
    FUNCTION        reduce using rule 31 (if -> soloIf elseIf else .)
    CONST           reduce using rule 31 (if -> soloIf elseIf else .)
    LET             reduce using rule 31 (if -> soloIf elseIf else .)
    VAR             reduce using rule 31 (if -> soloIf elseIf else .)
    WHILE           reduce using rule 31 (if -> soloIf elseIf else .)
    FOR             reduce using rule 31 (if -> soloIf elseIf else .)
    IF              reduce using rule 31 (if -> soloIf elseIf else .)
    $end            reduce using rule 31 (if -> soloIf elseIf else .)
    CLOSE_BRACE     reduce using rule 31 (if -> soloIf elseIf else .)


state 89

    (34) elseIf -> ELSEIF OPEN_PARENTHESIS . controlArg CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE
    (35) elseIf -> ELSEIF OPEN_PARENTHESIS . controlArg CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE soloIf
    (37) controlArg -> . element clause element
    (107) element -> . STRING
    (108) element -> . number
    (109) element -> . NAME
    (14) number -> . INTEGER
    (15) number -> . FLOAT
    (16) number -> . RESTA INTEGER
    (17) number -> . RESTA FLOAT

    STRING          shift and go to state 42
    NAME            shift and go to state 44
    INTEGER         shift and go to state 45
    FLOAT           shift and go to state 46
    RESTA           shift and go to state 47

    controlArg                     shift and go to state 139
    element                        shift and go to state 82
    number                         shift and go to state 43

state 90

    (36) else -> ELSE OPEN_BRACE . expression CLOSE_BRACE
    (1) expression -> . variable
    (2) expression -> . variable expression
    (3) expression -> . dataStruct
    (4) expression -> . dataStruct expression
    (5) expression -> . controlStruct
    (6) expression -> . controlStruct expression
    (7) expression -> . methodsSet
    (8) expression -> . mapFunctions
    (9) expression -> . arrayFn
    (10) expression -> . declaration
    (11) expression -> . print
    (12) expression -> . return
    (13) expression -> . function
    (18) variable -> . type NAME IGUAL datatype SEMICOLON
    (19) variable -> . type NAME IGUAL operations SEMICOLON
    (20) variable -> . NAME IGUAL datatype SEMICOLON
    (24) dataStruct -> . array
    (25) dataStruct -> . set
    (26) dataStruct -> . map
    (21) controlStruct -> . while
    (22) controlStruct -> . for
    (23) controlStruct -> . if
    (100) methodsSet -> . NAME POINT ADD OPEN_PARENTHESIS element CLOSE_PARENTHESIS SEMICOLON
    (101) methodsSet -> . NAME POINT DELETE OPEN_PARENTHESIS element CLOSE_PARENTHESIS SEMICOLON
    (102) methodsSet -> . NAME POINT CLEAR OPEN_PARENTHESIS CLOSE_PARENTHESIS SEMICOLON
    (88) mapFunctions -> . NAME POINT CLEAR OPEN_PARENTHESIS CLOSE_PARENTHESIS SEMICOLON
    (89) mapFunctions -> . NAME POINT GET OPEN_PARENTHESIS clave CLOSE_PARENTHESIS SEMICOLON
    (90) mapFunctions -> . NAME POINT HAS OPEN_PARENTHESIS clave CLOSE_PARENTHESIS SEMICOLON
    (91) arrayFn -> . NAME POINT POP OPEN_PARENTHESIS CLOSE_PARENTHESIS SEMICOLON
    (92) arrayFn -> . NAME POINT PUSH OPEN_PARENTHESIS element CLOSE_PARENTHESIS SEMICOLON
    (93) arrayFn -> . NAME POINT UNSHIFT OPEN_PARENTHESIS element CLOSE_PARENTHESIS SEMICOLON
    (110) declaration -> . NAME IGUAL element SEMICOLON
    (122) print -> . PRINT OPEN_PARENTHESIS CLOSE_PARENTHESIS SEMICOLON
    (121) return -> . RETURN element SEMICOLON
    (117) function -> . FUNCTION NAME OPEN_PARENTHESIS CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE
    (118) function -> . FUNCTION NAME OPEN_PARENTHESIS parameter CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE
    (60) type -> . CONST
    (61) type -> . LET
    (62) type -> . VAR
    (71) array -> . type NAME IGUAL OPEN_BRACKET items CLOSE_BRACKET SEMICOLON
    (72) array -> . type NAME IGUAL NEW ARRAY OPEN_PARENTHESIS items CLOSE_PARENTHESIS SEMICOLON
    (94) set -> . type NAME IGUAL NEW SET OPEN_PARENTHESIS CLOSE_PARENTHESIS SEMICOLON
    (95) set -> . type NAME IGUAL NEW SET OPEN_PARENTHESIS OPEN_BRACKET items CLOSE_BRACKET CLOSE_PARENTHESIS SEMICOLON
    (96) set -> . type NAME IGUAL NEW SET OPEN_PARENTHESIS element CLOSE_PARENTHESIS SEMICOLON
    (97) set -> . NAME IGUAL NEW SET OPEN_PARENTHESIS CLOSE_PARENTHESIS SEMICOLON
    (98) set -> . NAME IGUAL NEW SET OPEN_PARENTHESIS OPEN_BRACKET items CLOSE_BRACKET CLOSE_PARENTHESIS SEMICOLON
    (99) set -> . NAME IGUAL NEW SET OPEN_PARENTHESIS element CLOSE_PARENTHESIS SEMICOLON
    (73) map -> . iniciarMap
    (74) map -> . escribirMap
    (75) map -> . generarMap
    (27) while -> . WHILE OPEN_PARENTHESIS controlArg CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE
    (28) while -> . WHILE OPEN_PARENTHESIS bool CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE
    (38) for -> . FOR OPEN_PARENTHESIS inicialization SEMICOLON expBoolean SEMICOLON operations CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE
    (29) if -> . soloIf
    (30) if -> . soloIf elseIf
    (31) if -> . soloIf elseIf else
    (32) if -> . soloIf else
    (76) iniciarMap -> . variable IGUAL NEW MAP OPEN_PARENTHESIS CLOSE_PARENTHESIS SEMICOLON
    (77) escribirMap -> . variable IGUAL OPEN_BRACE claveValor CLOSE_BRACE
    (83) generarMap -> . variable IGUAL OPEN_BRACE tuplas CLOSE_BRACE
    (33) soloIf -> . IF OPEN_PARENTHESIS controlArg CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE

    NAME            shift and go to state 13
    PRINT           shift and go to state 20
    RETURN          shift and go to state 21
    FUNCTION        shift and go to state 22
    CONST           shift and go to state 23
    LET             shift and go to state 24
    VAR             shift and go to state 25
    WHILE           shift and go to state 29
    FOR             shift and go to state 30
    IF              shift and go to state 32

    expression                     shift and go to state 140
    variable                       shift and go to state 2
    dataStruct                     shift and go to state 3
    controlStruct                  shift and go to state 4
    methodsSet                     shift and go to state 5
    mapFunctions                   shift and go to state 6
    arrayFn                        shift and go to state 7
    declaration                    shift and go to state 8
    print                          shift and go to state 9
    return                         shift and go to state 10
    function                       shift and go to state 11
    type                           shift and go to state 12
    array                          shift and go to state 14
    set                            shift and go to state 15
    map                            shift and go to state 16
    while                          shift and go to state 17
    for                            shift and go to state 18
    if                             shift and go to state 19
    iniciarMap                     shift and go to state 26
    escribirMap                    shift and go to state 27
    generarMap                     shift and go to state 28
    soloIf                         shift and go to state 31

state 91

    (33) soloIf -> IF OPEN_PARENTHESIS controlArg . CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE

    CLOSE_PARENTHESIS shift and go to state 141


state 92

    (76) iniciarMap -> variable IGUAL NEW MAP . OPEN_PARENTHESIS CLOSE_PARENTHESIS SEMICOLON

    OPEN_PARENTHESIS shift and go to state 142


state 93

    (77) escribirMap -> variable IGUAL OPEN_BRACE claveValor . CLOSE_BRACE

    CLOSE_BRACE     shift and go to state 143


state 94

    (83) generarMap -> variable IGUAL OPEN_BRACE tuplas . CLOSE_BRACE

    CLOSE_BRACE     shift and go to state 144


state 95

    (78) claveValor -> clave . COLON valor
    (79) claveValor -> clave . COLON valor COMMA claveValor

    COLON           shift and go to state 145


state 96

    (84) tuplas -> tupla .
    (85) tuplas -> tupla . COMMA tuplas

    CLOSE_BRACE     reduce using rule 84 (tuplas -> tupla .)
    COMMA           shift and go to state 146


state 97

    (80) clave -> datatype .

    COLON           reduce using rule 80 (clave -> datatype .)
    CLOSE_PARENTHESIS reduce using rule 80 (clave -> datatype .)


state 98

    (86) tupla -> OPEN_BRACKET . datatype CLOSE_BRACKET SEMICOLON
    (87) tupla -> OPEN_BRACKET . datatype COMMA datatype CLOSE_BRACKET SEMICOLON
    (50) datatype -> . number
    (51) datatype -> . STRING
    (52) datatype -> . CHAR
    (53) datatype -> . operations
    (14) number -> . INTEGER
    (15) number -> . FLOAT
    (16) number -> . RESTA INTEGER
    (17) number -> . RESTA FLOAT
    (41) operations -> . number operand number
    (42) operations -> . NAME
    (43) operations -> . number
    (44) operations -> . number operand NAME operations
    (45) operations -> . NAME operand number operations
    (46) operations -> . number operand NAME
    (47) operations -> . NAME operand number
    (48) operations -> . NAME operand NAME operations
    (49) operations -> . number operand number operand operations

    STRING          shift and go to state 100
    CHAR            shift and go to state 65
    INTEGER         shift and go to state 45
    FLOAT           shift and go to state 46
    RESTA           shift and go to state 47
    NAME            shift and go to state 101

    datatype                       shift and go to state 147
    number                         shift and go to state 99
    operations                     shift and go to state 66

state 99

    (50) datatype -> number .
    (41) operations -> number . operand number
    (43) operations -> number .
    (44) operations -> number . operand NAME operations
    (46) operations -> number . operand NAME
    (49) operations -> number . operand number operand operations
    (54) operand -> . SUMA
    (55) operand -> . RESTA
    (56) operand -> . MULTIPLICACION
    (57) operand -> . DIVISION

  ! reduce/reduce conflict for COLON resolved using rule 43 (operations -> number .)
  ! reduce/reduce conflict for SEMICOLON resolved using rule 43 (operations -> number .)
  ! reduce/reduce conflict for CLOSE_BRACKET resolved using rule 43 (operations -> number .)
  ! reduce/reduce conflict for COMMA resolved using rule 43 (operations -> number .)
  ! reduce/reduce conflict for CLOSE_PARENTHESIS resolved using rule 43 (operations -> number .)
  ! reduce/reduce conflict for CLOSE_BRACE resolved using rule 43 (operations -> number .)
    COLON           reduce using rule 43 (operations -> number .)
    SEMICOLON       reduce using rule 43 (operations -> number .)
    CLOSE_BRACKET   reduce using rule 43 (operations -> number .)
    COMMA           reduce using rule 43 (operations -> number .)
    CLOSE_PARENTHESIS reduce using rule 43 (operations -> number .)
    CLOSE_BRACE     reduce using rule 43 (operations -> number .)
    SUMA            shift and go to state 107
    RESTA           shift and go to state 108
    MULTIPLICACION  shift and go to state 109
    DIVISION        shift and go to state 110

  ! COLON           [ reduce using rule 50 (datatype -> number .) ]
  ! SEMICOLON       [ reduce using rule 50 (datatype -> number .) ]
  ! CLOSE_BRACKET   [ reduce using rule 50 (datatype -> number .) ]
  ! COMMA           [ reduce using rule 50 (datatype -> number .) ]
  ! CLOSE_PARENTHESIS [ reduce using rule 50 (datatype -> number .) ]
  ! CLOSE_BRACE     [ reduce using rule 50 (datatype -> number .) ]

    operand                        shift and go to state 114

state 100

    (51) datatype -> STRING .

    COLON           reduce using rule 51 (datatype -> STRING .)
    SEMICOLON       reduce using rule 51 (datatype -> STRING .)
    CLOSE_BRACKET   reduce using rule 51 (datatype -> STRING .)
    COMMA           reduce using rule 51 (datatype -> STRING .)
    CLOSE_PARENTHESIS reduce using rule 51 (datatype -> STRING .)
    CLOSE_BRACE     reduce using rule 51 (datatype -> STRING .)


state 101

    (42) operations -> NAME .
    (45) operations -> NAME . operand number operations
    (47) operations -> NAME . operand number
    (48) operations -> NAME . operand NAME operations
    (54) operand -> . SUMA
    (55) operand -> . RESTA
    (56) operand -> . MULTIPLICACION
    (57) operand -> . DIVISION

    COLON           reduce using rule 42 (operations -> NAME .)
    SEMICOLON       reduce using rule 42 (operations -> NAME .)
    CLOSE_BRACKET   reduce using rule 42 (operations -> NAME .)
    COMMA           reduce using rule 42 (operations -> NAME .)
    CLOSE_PARENTHESIS reduce using rule 42 (operations -> NAME .)
    CLOSE_BRACE     reduce using rule 42 (operations -> NAME .)
    SUMA            shift and go to state 107
    RESTA           shift and go to state 108
    MULTIPLICACION  shift and go to state 109
    DIVISION        shift and go to state 110

    operand                        shift and go to state 106

state 102

    (18) variable -> type NAME IGUAL datatype . SEMICOLON

    SEMICOLON       shift and go to state 148


state 103

    (19) variable -> type NAME IGUAL operations . SEMICOLON
    (53) datatype -> operations .

  ! shift/reduce conflict for SEMICOLON resolved as shift
    SEMICOLON       shift and go to state 149

  ! SEMICOLON       [ reduce using rule 53 (datatype -> operations .) ]


state 104

    (71) array -> type NAME IGUAL OPEN_BRACKET . items CLOSE_BRACKET SEMICOLON
    (103) items -> . number
    (104) items -> . cadena
    (14) number -> . INTEGER
    (15) number -> . FLOAT
    (16) number -> . RESTA INTEGER
    (17) number -> . RESTA FLOAT
    (105) cadena -> . STRING
    (106) cadena -> . STRING COMMA cadena

    INTEGER         shift and go to state 45
    FLOAT           shift and go to state 46
    RESTA           shift and go to state 47
    STRING          shift and go to state 153

    items                          shift and go to state 150
    number                         shift and go to state 151
    cadena                         shift and go to state 152

state 105

    (72) array -> type NAME IGUAL NEW . ARRAY OPEN_PARENTHESIS items CLOSE_PARENTHESIS SEMICOLON
    (94) set -> type NAME IGUAL NEW . SET OPEN_PARENTHESIS CLOSE_PARENTHESIS SEMICOLON
    (95) set -> type NAME IGUAL NEW . SET OPEN_PARENTHESIS OPEN_BRACKET items CLOSE_BRACKET CLOSE_PARENTHESIS SEMICOLON
    (96) set -> type NAME IGUAL NEW . SET OPEN_PARENTHESIS element CLOSE_PARENTHESIS SEMICOLON

    ARRAY           shift and go to state 154
    SET             shift and go to state 155


state 106

    (45) operations -> NAME operand . number operations
    (47) operations -> NAME operand . number
    (48) operations -> NAME operand . NAME operations
    (14) number -> . INTEGER
    (15) number -> . FLOAT
    (16) number -> . RESTA INTEGER
    (17) number -> . RESTA FLOAT

    NAME            shift and go to state 156
    INTEGER         shift and go to state 45
    FLOAT           shift and go to state 46
    RESTA           shift and go to state 47

    number                         shift and go to state 157

state 107

    (54) operand -> SUMA .

    NAME            reduce using rule 54 (operand -> SUMA .)
    INTEGER         reduce using rule 54 (operand -> SUMA .)
    FLOAT           reduce using rule 54 (operand -> SUMA .)
    RESTA           reduce using rule 54 (operand -> SUMA .)


state 108

    (55) operand -> RESTA .

    NAME            reduce using rule 55 (operand -> RESTA .)
    INTEGER         reduce using rule 55 (operand -> RESTA .)
    FLOAT           reduce using rule 55 (operand -> RESTA .)
    RESTA           reduce using rule 55 (operand -> RESTA .)


state 109

    (56) operand -> MULTIPLICACION .

    NAME            reduce using rule 56 (operand -> MULTIPLICACION .)
    INTEGER         reduce using rule 56 (operand -> MULTIPLICACION .)
    FLOAT           reduce using rule 56 (operand -> MULTIPLICACION .)
    RESTA           reduce using rule 56 (operand -> MULTIPLICACION .)


state 110

    (57) operand -> DIVISION .

    NAME            reduce using rule 57 (operand -> DIVISION .)
    INTEGER         reduce using rule 57 (operand -> DIVISION .)
    FLOAT           reduce using rule 57 (operand -> DIVISION .)
    RESTA           reduce using rule 57 (operand -> DIVISION .)


state 111

    (20) variable -> NAME IGUAL datatype SEMICOLON .

    IGUAL           reduce using rule 20 (variable -> NAME IGUAL datatype SEMICOLON .)
    NAME            reduce using rule 20 (variable -> NAME IGUAL datatype SEMICOLON .)
    PRINT           reduce using rule 20 (variable -> NAME IGUAL datatype SEMICOLON .)
    RETURN          reduce using rule 20 (variable -> NAME IGUAL datatype SEMICOLON .)
    FUNCTION        reduce using rule 20 (variable -> NAME IGUAL datatype SEMICOLON .)
    CONST           reduce using rule 20 (variable -> NAME IGUAL datatype SEMICOLON .)
    LET             reduce using rule 20 (variable -> NAME IGUAL datatype SEMICOLON .)
    VAR             reduce using rule 20 (variable -> NAME IGUAL datatype SEMICOLON .)
    WHILE           reduce using rule 20 (variable -> NAME IGUAL datatype SEMICOLON .)
    FOR             reduce using rule 20 (variable -> NAME IGUAL datatype SEMICOLON .)
    IF              reduce using rule 20 (variable -> NAME IGUAL datatype SEMICOLON .)
    $end            reduce using rule 20 (variable -> NAME IGUAL datatype SEMICOLON .)
    CLOSE_BRACE     reduce using rule 20 (variable -> NAME IGUAL datatype SEMICOLON .)


state 112

    (110) declaration -> NAME IGUAL element SEMICOLON .

    $end            reduce using rule 110 (declaration -> NAME IGUAL element SEMICOLON .)
    CLOSE_BRACE     reduce using rule 110 (declaration -> NAME IGUAL element SEMICOLON .)


state 113

    (97) set -> NAME IGUAL NEW SET . OPEN_PARENTHESIS CLOSE_PARENTHESIS SEMICOLON
    (98) set -> NAME IGUAL NEW SET . OPEN_PARENTHESIS OPEN_BRACKET items CLOSE_BRACKET CLOSE_PARENTHESIS SEMICOLON
    (99) set -> NAME IGUAL NEW SET . OPEN_PARENTHESIS element CLOSE_PARENTHESIS SEMICOLON

    OPEN_PARENTHESIS shift and go to state 158


state 114

    (41) operations -> number operand . number
    (44) operations -> number operand . NAME operations
    (46) operations -> number operand . NAME
    (49) operations -> number operand . number operand operations
    (14) number -> . INTEGER
    (15) number -> . FLOAT
    (16) number -> . RESTA INTEGER
    (17) number -> . RESTA FLOAT

    NAME            shift and go to state 160
    INTEGER         shift and go to state 45
    FLOAT           shift and go to state 46
    RESTA           shift and go to state 47

    number                         shift and go to state 159

state 115

    (100) methodsSet -> NAME POINT ADD OPEN_PARENTHESIS . element CLOSE_PARENTHESIS SEMICOLON
    (107) element -> . STRING
    (108) element -> . number
    (109) element -> . NAME
    (14) number -> . INTEGER
    (15) number -> . FLOAT
    (16) number -> . RESTA INTEGER
    (17) number -> . RESTA FLOAT

    STRING          shift and go to state 42
    NAME            shift and go to state 44
    INTEGER         shift and go to state 45
    FLOAT           shift and go to state 46
    RESTA           shift and go to state 47

    element                        shift and go to state 161
    number                         shift and go to state 43

state 116

    (101) methodsSet -> NAME POINT DELETE OPEN_PARENTHESIS . element CLOSE_PARENTHESIS SEMICOLON
    (107) element -> . STRING
    (108) element -> . number
    (109) element -> . NAME
    (14) number -> . INTEGER
    (15) number -> . FLOAT
    (16) number -> . RESTA INTEGER
    (17) number -> . RESTA FLOAT

    STRING          shift and go to state 42
    NAME            shift and go to state 44
    INTEGER         shift and go to state 45
    FLOAT           shift and go to state 46
    RESTA           shift and go to state 47

    element                        shift and go to state 162
    number                         shift and go to state 43

state 117

    (102) methodsSet -> NAME POINT CLEAR OPEN_PARENTHESIS . CLOSE_PARENTHESIS SEMICOLON
    (88) mapFunctions -> NAME POINT CLEAR OPEN_PARENTHESIS . CLOSE_PARENTHESIS SEMICOLON

    CLOSE_PARENTHESIS shift and go to state 163


state 118

    (89) mapFunctions -> NAME POINT GET OPEN_PARENTHESIS . clave CLOSE_PARENTHESIS SEMICOLON
    (80) clave -> . datatype
    (50) datatype -> . number
    (51) datatype -> . STRING
    (52) datatype -> . CHAR
    (53) datatype -> . operations
    (14) number -> . INTEGER
    (15) number -> . FLOAT
    (16) number -> . RESTA INTEGER
    (17) number -> . RESTA FLOAT
    (41) operations -> . number operand number
    (42) operations -> . NAME
    (43) operations -> . number
    (44) operations -> . number operand NAME operations
    (45) operations -> . NAME operand number operations
    (46) operations -> . number operand NAME
    (47) operations -> . NAME operand number
    (48) operations -> . NAME operand NAME operations
    (49) operations -> . number operand number operand operations

    STRING          shift and go to state 100
    CHAR            shift and go to state 65
    INTEGER         shift and go to state 45
    FLOAT           shift and go to state 46
    RESTA           shift and go to state 47
    NAME            shift and go to state 101

    clave                          shift and go to state 164
    datatype                       shift and go to state 97
    number                         shift and go to state 99
    operations                     shift and go to state 66

state 119

    (90) mapFunctions -> NAME POINT HAS OPEN_PARENTHESIS . clave CLOSE_PARENTHESIS SEMICOLON
    (80) clave -> . datatype
    (50) datatype -> . number
    (51) datatype -> . STRING
    (52) datatype -> . CHAR
    (53) datatype -> . operations
    (14) number -> . INTEGER
    (15) number -> . FLOAT
    (16) number -> . RESTA INTEGER
    (17) number -> . RESTA FLOAT
    (41) operations -> . number operand number
    (42) operations -> . NAME
    (43) operations -> . number
    (44) operations -> . number operand NAME operations
    (45) operations -> . NAME operand number operations
    (46) operations -> . number operand NAME
    (47) operations -> . NAME operand number
    (48) operations -> . NAME operand NAME operations
    (49) operations -> . number operand number operand operations

    STRING          shift and go to state 100
    CHAR            shift and go to state 65
    INTEGER         shift and go to state 45
    FLOAT           shift and go to state 46
    RESTA           shift and go to state 47
    NAME            shift and go to state 101

    clave                          shift and go to state 165
    datatype                       shift and go to state 97
    number                         shift and go to state 99
    operations                     shift and go to state 66

state 120

    (91) arrayFn -> NAME POINT POP OPEN_PARENTHESIS . CLOSE_PARENTHESIS SEMICOLON

    CLOSE_PARENTHESIS shift and go to state 166


state 121

    (92) arrayFn -> NAME POINT PUSH OPEN_PARENTHESIS . element CLOSE_PARENTHESIS SEMICOLON
    (107) element -> . STRING
    (108) element -> . number
    (109) element -> . NAME
    (14) number -> . INTEGER
    (15) number -> . FLOAT
    (16) number -> . RESTA INTEGER
    (17) number -> . RESTA FLOAT

    STRING          shift and go to state 42
    NAME            shift and go to state 44
    INTEGER         shift and go to state 45
    FLOAT           shift and go to state 46
    RESTA           shift and go to state 47

    element                        shift and go to state 167
    number                         shift and go to state 43

state 122

    (93) arrayFn -> NAME POINT UNSHIFT OPEN_PARENTHESIS . element CLOSE_PARENTHESIS SEMICOLON
    (107) element -> . STRING
    (108) element -> . number
    (109) element -> . NAME
    (14) number -> . INTEGER
    (15) number -> . FLOAT
    (16) number -> . RESTA INTEGER
    (17) number -> . RESTA FLOAT

    STRING          shift and go to state 42
    NAME            shift and go to state 44
    INTEGER         shift and go to state 45
    FLOAT           shift and go to state 46
    RESTA           shift and go to state 47

    element                        shift and go to state 168
    number                         shift and go to state 43

state 123

    (122) print -> PRINT OPEN_PARENTHESIS CLOSE_PARENTHESIS SEMICOLON .

    $end            reduce using rule 122 (print -> PRINT OPEN_PARENTHESIS CLOSE_PARENTHESIS SEMICOLON .)
    CLOSE_BRACE     reduce using rule 122 (print -> PRINT OPEN_PARENTHESIS CLOSE_PARENTHESIS SEMICOLON .)


state 124

    (117) function -> FUNCTION NAME OPEN_PARENTHESIS CLOSE_PARENTHESIS . OPEN_BRACE expression CLOSE_BRACE

    OPEN_BRACE      shift and go to state 169


state 125

    (118) function -> FUNCTION NAME OPEN_PARENTHESIS parameter . CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE

    CLOSE_PARENTHESIS shift and go to state 170


state 126

    (119) parameter -> element .
    (120) parameter -> element . parameter
    (119) parameter -> . element
    (120) parameter -> . element parameter
    (107) element -> . STRING
    (108) element -> . number
    (109) element -> . NAME
    (14) number -> . INTEGER
    (15) number -> . FLOAT
    (16) number -> . RESTA INTEGER
    (17) number -> . RESTA FLOAT

    CLOSE_PARENTHESIS reduce using rule 119 (parameter -> element .)
    STRING          shift and go to state 42
    NAME            shift and go to state 44
    INTEGER         shift and go to state 45
    FLOAT           shift and go to state 46
    RESTA           shift and go to state 47

    element                        shift and go to state 126
    parameter                      shift and go to state 171
    number                         shift and go to state 43

state 127

    (27) while -> WHILE OPEN_PARENTHESIS controlArg CLOSE_PARENTHESIS . OPEN_BRACE expression CLOSE_BRACE

    OPEN_BRACE      shift and go to state 172


state 128

    (28) while -> WHILE OPEN_PARENTHESIS bool CLOSE_PARENTHESIS . OPEN_BRACE expression CLOSE_BRACE

    OPEN_BRACE      shift and go to state 173


state 129

    (37) controlArg -> element clause . element
    (107) element -> . STRING
    (108) element -> . number
    (109) element -> . NAME
    (14) number -> . INTEGER
    (15) number -> . FLOAT
    (16) number -> . RESTA INTEGER
    (17) number -> . RESTA FLOAT

    STRING          shift and go to state 42
    NAME            shift and go to state 44
    INTEGER         shift and go to state 45
    FLOAT           shift and go to state 46
    RESTA           shift and go to state 47

    element                        shift and go to state 174
    number                         shift and go to state 43

state 130

    (63) clause -> IGUALIGUAL .

    STRING          reduce using rule 63 (clause -> IGUALIGUAL .)
    NAME            reduce using rule 63 (clause -> IGUALIGUAL .)
    INTEGER         reduce using rule 63 (clause -> IGUALIGUAL .)
    FLOAT           reduce using rule 63 (clause -> IGUALIGUAL .)
    RESTA           reduce using rule 63 (clause -> IGUALIGUAL .)


state 131

    (64) clause -> DIFERENTE .

    STRING          reduce using rule 64 (clause -> DIFERENTE .)
    NAME            reduce using rule 64 (clause -> DIFERENTE .)
    INTEGER         reduce using rule 64 (clause -> DIFERENTE .)
    FLOAT           reduce using rule 64 (clause -> DIFERENTE .)
    RESTA           reduce using rule 64 (clause -> DIFERENTE .)


state 132

    (65) clause -> MAYORQUE .

    STRING          reduce using rule 65 (clause -> MAYORQUE .)
    NAME            reduce using rule 65 (clause -> MAYORQUE .)
    INTEGER         reduce using rule 65 (clause -> MAYORQUE .)
    FLOAT           reduce using rule 65 (clause -> MAYORQUE .)
    RESTA           reduce using rule 65 (clause -> MAYORQUE .)


state 133

    (66) clause -> MAYORIGUALQUE .

    STRING          reduce using rule 66 (clause -> MAYORIGUALQUE .)
    NAME            reduce using rule 66 (clause -> MAYORIGUALQUE .)
    INTEGER         reduce using rule 66 (clause -> MAYORIGUALQUE .)
    FLOAT           reduce using rule 66 (clause -> MAYORIGUALQUE .)
    RESTA           reduce using rule 66 (clause -> MAYORIGUALQUE .)


state 134

    (67) clause -> MENORQUE .

    STRING          reduce using rule 67 (clause -> MENORQUE .)
    NAME            reduce using rule 67 (clause -> MENORQUE .)
    INTEGER         reduce using rule 67 (clause -> MENORQUE .)
    FLOAT           reduce using rule 67 (clause -> MENORQUE .)
    RESTA           reduce using rule 67 (clause -> MENORQUE .)


state 135

    (68) clause -> MENORIGUALQUE .

    STRING          reduce using rule 68 (clause -> MENORIGUALQUE .)
    NAME            reduce using rule 68 (clause -> MENORIGUALQUE .)
    INTEGER         reduce using rule 68 (clause -> MENORIGUALQUE .)
    FLOAT           reduce using rule 68 (clause -> MENORIGUALQUE .)
    RESTA           reduce using rule 68 (clause -> MENORIGUALQUE .)


state 136

    (38) for -> FOR OPEN_PARENTHESIS inicialization SEMICOLON . expBoolean SEMICOLON operations CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE
    (113) expBoolean -> . controlArg
    (114) expBoolean -> . bool
    (115) expBoolean -> . NOT expBoolean
    (116) expBoolean -> . expBoolean logicalOperator expBoolean
    (37) controlArg -> . element clause element
    (58) bool -> . TRUE
    (59) bool -> . FALSE
    (107) element -> . STRING
    (108) element -> . number
    (109) element -> . NAME
    (14) number -> . INTEGER
    (15) number -> . FLOAT
    (16) number -> . RESTA INTEGER
    (17) number -> . RESTA FLOAT

    NOT             shift and go to state 178
    TRUE            shift and go to state 83
    FALSE           shift and go to state 84
    STRING          shift and go to state 42
    NAME            shift and go to state 44
    INTEGER         shift and go to state 45
    FLOAT           shift and go to state 46
    RESTA           shift and go to state 47

    expBoolean                     shift and go to state 175
    controlArg                     shift and go to state 176
    bool                           shift and go to state 177
    element                        shift and go to state 82
    number                         shift and go to state 43

state 137

    (39) inicialization -> type NAME . IGUAL number

    IGUAL           shift and go to state 179


state 138

    (40) inicialization -> NAME IGUAL . number
    (14) number -> . INTEGER
    (15) number -> . FLOAT
    (16) number -> . RESTA INTEGER
    (17) number -> . RESTA FLOAT

    INTEGER         shift and go to state 45
    FLOAT           shift and go to state 46
    RESTA           shift and go to state 47

    number                         shift and go to state 180

state 139

    (34) elseIf -> ELSEIF OPEN_PARENTHESIS controlArg . CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE
    (35) elseIf -> ELSEIF OPEN_PARENTHESIS controlArg . CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE soloIf

    CLOSE_PARENTHESIS shift and go to state 181


state 140

    (36) else -> ELSE OPEN_BRACE expression . CLOSE_BRACE

    CLOSE_BRACE     shift and go to state 182


state 141

    (33) soloIf -> IF OPEN_PARENTHESIS controlArg CLOSE_PARENTHESIS . OPEN_BRACE expression CLOSE_BRACE

    OPEN_BRACE      shift and go to state 183


state 142

    (76) iniciarMap -> variable IGUAL NEW MAP OPEN_PARENTHESIS . CLOSE_PARENTHESIS SEMICOLON

    CLOSE_PARENTHESIS shift and go to state 184


state 143

    (77) escribirMap -> variable IGUAL OPEN_BRACE claveValor CLOSE_BRACE .

    NAME            reduce using rule 77 (escribirMap -> variable IGUAL OPEN_BRACE claveValor CLOSE_BRACE .)
    PRINT           reduce using rule 77 (escribirMap -> variable IGUAL OPEN_BRACE claveValor CLOSE_BRACE .)
    RETURN          reduce using rule 77 (escribirMap -> variable IGUAL OPEN_BRACE claveValor CLOSE_BRACE .)
    FUNCTION        reduce using rule 77 (escribirMap -> variable IGUAL OPEN_BRACE claveValor CLOSE_BRACE .)
    CONST           reduce using rule 77 (escribirMap -> variable IGUAL OPEN_BRACE claveValor CLOSE_BRACE .)
    LET             reduce using rule 77 (escribirMap -> variable IGUAL OPEN_BRACE claveValor CLOSE_BRACE .)
    VAR             reduce using rule 77 (escribirMap -> variable IGUAL OPEN_BRACE claveValor CLOSE_BRACE .)
    WHILE           reduce using rule 77 (escribirMap -> variable IGUAL OPEN_BRACE claveValor CLOSE_BRACE .)
    FOR             reduce using rule 77 (escribirMap -> variable IGUAL OPEN_BRACE claveValor CLOSE_BRACE .)
    IF              reduce using rule 77 (escribirMap -> variable IGUAL OPEN_BRACE claveValor CLOSE_BRACE .)
    $end            reduce using rule 77 (escribirMap -> variable IGUAL OPEN_BRACE claveValor CLOSE_BRACE .)
    CLOSE_BRACE     reduce using rule 77 (escribirMap -> variable IGUAL OPEN_BRACE claveValor CLOSE_BRACE .)
    COMMA           reduce using rule 77 (escribirMap -> variable IGUAL OPEN_BRACE claveValor CLOSE_BRACE .)


state 144

    (83) generarMap -> variable IGUAL OPEN_BRACE tuplas CLOSE_BRACE .

    NAME            reduce using rule 83 (generarMap -> variable IGUAL OPEN_BRACE tuplas CLOSE_BRACE .)
    PRINT           reduce using rule 83 (generarMap -> variable IGUAL OPEN_BRACE tuplas CLOSE_BRACE .)
    RETURN          reduce using rule 83 (generarMap -> variable IGUAL OPEN_BRACE tuplas CLOSE_BRACE .)
    FUNCTION        reduce using rule 83 (generarMap -> variable IGUAL OPEN_BRACE tuplas CLOSE_BRACE .)
    CONST           reduce using rule 83 (generarMap -> variable IGUAL OPEN_BRACE tuplas CLOSE_BRACE .)
    LET             reduce using rule 83 (generarMap -> variable IGUAL OPEN_BRACE tuplas CLOSE_BRACE .)
    VAR             reduce using rule 83 (generarMap -> variable IGUAL OPEN_BRACE tuplas CLOSE_BRACE .)
    WHILE           reduce using rule 83 (generarMap -> variable IGUAL OPEN_BRACE tuplas CLOSE_BRACE .)
    FOR             reduce using rule 83 (generarMap -> variable IGUAL OPEN_BRACE tuplas CLOSE_BRACE .)
    IF              reduce using rule 83 (generarMap -> variable IGUAL OPEN_BRACE tuplas CLOSE_BRACE .)
    $end            reduce using rule 83 (generarMap -> variable IGUAL OPEN_BRACE tuplas CLOSE_BRACE .)
    CLOSE_BRACE     reduce using rule 83 (generarMap -> variable IGUAL OPEN_BRACE tuplas CLOSE_BRACE .)
    COMMA           reduce using rule 83 (generarMap -> variable IGUAL OPEN_BRACE tuplas CLOSE_BRACE .)


state 145

    (78) claveValor -> clave COLON . valor
    (79) claveValor -> clave COLON . valor COMMA claveValor
    (81) valor -> . datatype
    (82) valor -> . dataStruct
    (50) datatype -> . number
    (51) datatype -> . STRING
    (52) datatype -> . CHAR
    (53) datatype -> . operations
    (24) dataStruct -> . array
    (25) dataStruct -> . set
    (26) dataStruct -> . map
    (14) number -> . INTEGER
    (15) number -> . FLOAT
    (16) number -> . RESTA INTEGER
    (17) number -> . RESTA FLOAT
    (41) operations -> . number operand number
    (42) operations -> . NAME
    (43) operations -> . number
    (44) operations -> . number operand NAME operations
    (45) operations -> . NAME operand number operations
    (46) operations -> . number operand NAME
    (47) operations -> . NAME operand number
    (48) operations -> . NAME operand NAME operations
    (49) operations -> . number operand number operand operations
    (71) array -> . type NAME IGUAL OPEN_BRACKET items CLOSE_BRACKET SEMICOLON
    (72) array -> . type NAME IGUAL NEW ARRAY OPEN_PARENTHESIS items CLOSE_PARENTHESIS SEMICOLON
    (94) set -> . type NAME IGUAL NEW SET OPEN_PARENTHESIS CLOSE_PARENTHESIS SEMICOLON
    (95) set -> . type NAME IGUAL NEW SET OPEN_PARENTHESIS OPEN_BRACKET items CLOSE_BRACKET CLOSE_PARENTHESIS SEMICOLON
    (96) set -> . type NAME IGUAL NEW SET OPEN_PARENTHESIS element CLOSE_PARENTHESIS SEMICOLON
    (97) set -> . NAME IGUAL NEW SET OPEN_PARENTHESIS CLOSE_PARENTHESIS SEMICOLON
    (98) set -> . NAME IGUAL NEW SET OPEN_PARENTHESIS OPEN_BRACKET items CLOSE_BRACKET CLOSE_PARENTHESIS SEMICOLON
    (99) set -> . NAME IGUAL NEW SET OPEN_PARENTHESIS element CLOSE_PARENTHESIS SEMICOLON
    (73) map -> . iniciarMap
    (74) map -> . escribirMap
    (75) map -> . generarMap
    (60) type -> . CONST
    (61) type -> . LET
    (62) type -> . VAR
    (76) iniciarMap -> . variable IGUAL NEW MAP OPEN_PARENTHESIS CLOSE_PARENTHESIS SEMICOLON
    (77) escribirMap -> . variable IGUAL OPEN_BRACE claveValor CLOSE_BRACE
    (83) generarMap -> . variable IGUAL OPEN_BRACE tuplas CLOSE_BRACE
    (18) variable -> . type NAME IGUAL datatype SEMICOLON
    (19) variable -> . type NAME IGUAL operations SEMICOLON
    (20) variable -> . NAME IGUAL datatype SEMICOLON

    STRING          shift and go to state 100
    CHAR            shift and go to state 65
    INTEGER         shift and go to state 45
    FLOAT           shift and go to state 46
    RESTA           shift and go to state 47
    NAME            shift and go to state 188
    CONST           shift and go to state 23
    LET             shift and go to state 24
    VAR             shift and go to state 25

    valor                          shift and go to state 185
    datatype                       shift and go to state 186
    dataStruct                     shift and go to state 187
    number                         shift and go to state 99
    operations                     shift and go to state 66
    array                          shift and go to state 14
    set                            shift and go to state 15
    map                            shift and go to state 16
    type                           shift and go to state 189
    iniciarMap                     shift and go to state 26
    escribirMap                    shift and go to state 27
    generarMap                     shift and go to state 28
    variable                       shift and go to state 190

state 146

    (85) tuplas -> tupla COMMA . tuplas
    (84) tuplas -> . tupla
    (85) tuplas -> . tupla COMMA tuplas
    (86) tupla -> . OPEN_BRACKET datatype CLOSE_BRACKET SEMICOLON
    (87) tupla -> . OPEN_BRACKET datatype COMMA datatype CLOSE_BRACKET SEMICOLON

    OPEN_BRACKET    shift and go to state 98

    tupla                          shift and go to state 96
    tuplas                         shift and go to state 191

state 147

    (86) tupla -> OPEN_BRACKET datatype . CLOSE_BRACKET SEMICOLON
    (87) tupla -> OPEN_BRACKET datatype . COMMA datatype CLOSE_BRACKET SEMICOLON

    CLOSE_BRACKET   shift and go to state 192
    COMMA           shift and go to state 193


state 148

    (18) variable -> type NAME IGUAL datatype SEMICOLON .

    IGUAL           reduce using rule 18 (variable -> type NAME IGUAL datatype SEMICOLON .)
    NAME            reduce using rule 18 (variable -> type NAME IGUAL datatype SEMICOLON .)
    PRINT           reduce using rule 18 (variable -> type NAME IGUAL datatype SEMICOLON .)
    RETURN          reduce using rule 18 (variable -> type NAME IGUAL datatype SEMICOLON .)
    FUNCTION        reduce using rule 18 (variable -> type NAME IGUAL datatype SEMICOLON .)
    CONST           reduce using rule 18 (variable -> type NAME IGUAL datatype SEMICOLON .)
    LET             reduce using rule 18 (variable -> type NAME IGUAL datatype SEMICOLON .)
    VAR             reduce using rule 18 (variable -> type NAME IGUAL datatype SEMICOLON .)
    WHILE           reduce using rule 18 (variable -> type NAME IGUAL datatype SEMICOLON .)
    FOR             reduce using rule 18 (variable -> type NAME IGUAL datatype SEMICOLON .)
    IF              reduce using rule 18 (variable -> type NAME IGUAL datatype SEMICOLON .)
    $end            reduce using rule 18 (variable -> type NAME IGUAL datatype SEMICOLON .)
    CLOSE_BRACE     reduce using rule 18 (variable -> type NAME IGUAL datatype SEMICOLON .)


state 149

    (19) variable -> type NAME IGUAL operations SEMICOLON .

    IGUAL           reduce using rule 19 (variable -> type NAME IGUAL operations SEMICOLON .)
    NAME            reduce using rule 19 (variable -> type NAME IGUAL operations SEMICOLON .)
    PRINT           reduce using rule 19 (variable -> type NAME IGUAL operations SEMICOLON .)
    RETURN          reduce using rule 19 (variable -> type NAME IGUAL operations SEMICOLON .)
    FUNCTION        reduce using rule 19 (variable -> type NAME IGUAL operations SEMICOLON .)
    CONST           reduce using rule 19 (variable -> type NAME IGUAL operations SEMICOLON .)
    LET             reduce using rule 19 (variable -> type NAME IGUAL operations SEMICOLON .)
    VAR             reduce using rule 19 (variable -> type NAME IGUAL operations SEMICOLON .)
    WHILE           reduce using rule 19 (variable -> type NAME IGUAL operations SEMICOLON .)
    FOR             reduce using rule 19 (variable -> type NAME IGUAL operations SEMICOLON .)
    IF              reduce using rule 19 (variable -> type NAME IGUAL operations SEMICOLON .)
    $end            reduce using rule 19 (variable -> type NAME IGUAL operations SEMICOLON .)
    CLOSE_BRACE     reduce using rule 19 (variable -> type NAME IGUAL operations SEMICOLON .)


state 150

    (71) array -> type NAME IGUAL OPEN_BRACKET items . CLOSE_BRACKET SEMICOLON

    CLOSE_BRACKET   shift and go to state 194


state 151

    (103) items -> number .

    CLOSE_BRACKET   reduce using rule 103 (items -> number .)
    CLOSE_PARENTHESIS reduce using rule 103 (items -> number .)


state 152

    (104) items -> cadena .

    CLOSE_BRACKET   reduce using rule 104 (items -> cadena .)
    CLOSE_PARENTHESIS reduce using rule 104 (items -> cadena .)


state 153

    (105) cadena -> STRING .
    (106) cadena -> STRING . COMMA cadena

    CLOSE_BRACKET   reduce using rule 105 (cadena -> STRING .)
    CLOSE_PARENTHESIS reduce using rule 105 (cadena -> STRING .)
    COMMA           shift and go to state 195


state 154

    (72) array -> type NAME IGUAL NEW ARRAY . OPEN_PARENTHESIS items CLOSE_PARENTHESIS SEMICOLON

    OPEN_PARENTHESIS shift and go to state 196


state 155

    (94) set -> type NAME IGUAL NEW SET . OPEN_PARENTHESIS CLOSE_PARENTHESIS SEMICOLON
    (95) set -> type NAME IGUAL NEW SET . OPEN_PARENTHESIS OPEN_BRACKET items CLOSE_BRACKET CLOSE_PARENTHESIS SEMICOLON
    (96) set -> type NAME IGUAL NEW SET . OPEN_PARENTHESIS element CLOSE_PARENTHESIS SEMICOLON

    OPEN_PARENTHESIS shift and go to state 197


state 156

    (48) operations -> NAME operand NAME . operations
    (41) operations -> . number operand number
    (42) operations -> . NAME
    (43) operations -> . number
    (44) operations -> . number operand NAME operations
    (45) operations -> . NAME operand number operations
    (46) operations -> . number operand NAME
    (47) operations -> . NAME operand number
    (48) operations -> . NAME operand NAME operations
    (49) operations -> . number operand number operand operations
    (14) number -> . INTEGER
    (15) number -> . FLOAT
    (16) number -> . RESTA INTEGER
    (17) number -> . RESTA FLOAT

    NAME            shift and go to state 101
    INTEGER         shift and go to state 45
    FLOAT           shift and go to state 46
    RESTA           shift and go to state 47

    operations                     shift and go to state 198
    number                         shift and go to state 199

state 157

    (45) operations -> NAME operand number . operations
    (47) operations -> NAME operand number .
    (41) operations -> . number operand number
    (42) operations -> . NAME
    (43) operations -> . number
    (44) operations -> . number operand NAME operations
    (45) operations -> . NAME operand number operations
    (46) operations -> . number operand NAME
    (47) operations -> . NAME operand number
    (48) operations -> . NAME operand NAME operations
    (49) operations -> . number operand number operand operations
    (14) number -> . INTEGER
    (15) number -> . FLOAT
    (16) number -> . RESTA INTEGER
    (17) number -> . RESTA FLOAT

    SEMICOLON       reduce using rule 47 (operations -> NAME operand number .)
    COLON           reduce using rule 47 (operations -> NAME operand number .)
    CLOSE_BRACKET   reduce using rule 47 (operations -> NAME operand number .)
    COMMA           reduce using rule 47 (operations -> NAME operand number .)
    CLOSE_PARENTHESIS reduce using rule 47 (operations -> NAME operand number .)
    CLOSE_BRACE     reduce using rule 47 (operations -> NAME operand number .)
    NAME            shift and go to state 101
    INTEGER         shift and go to state 45
    FLOAT           shift and go to state 46
    RESTA           shift and go to state 47

    number                         shift and go to state 199
    operations                     shift and go to state 200

state 158

    (97) set -> NAME IGUAL NEW SET OPEN_PARENTHESIS . CLOSE_PARENTHESIS SEMICOLON
    (98) set -> NAME IGUAL NEW SET OPEN_PARENTHESIS . OPEN_BRACKET items CLOSE_BRACKET CLOSE_PARENTHESIS SEMICOLON
    (99) set -> NAME IGUAL NEW SET OPEN_PARENTHESIS . element CLOSE_PARENTHESIS SEMICOLON
    (107) element -> . STRING
    (108) element -> . number
    (109) element -> . NAME
    (14) number -> . INTEGER
    (15) number -> . FLOAT
    (16) number -> . RESTA INTEGER
    (17) number -> . RESTA FLOAT

    CLOSE_PARENTHESIS shift and go to state 201
    OPEN_BRACKET    shift and go to state 202
    STRING          shift and go to state 42
    NAME            shift and go to state 44
    INTEGER         shift and go to state 45
    FLOAT           shift and go to state 46
    RESTA           shift and go to state 47

    element                        shift and go to state 203
    number                         shift and go to state 43

state 159

    (41) operations -> number operand number .
    (49) operations -> number operand number . operand operations
    (54) operand -> . SUMA
    (55) operand -> . RESTA
    (56) operand -> . MULTIPLICACION
    (57) operand -> . DIVISION

    SEMICOLON       reduce using rule 41 (operations -> number operand number .)
    COLON           reduce using rule 41 (operations -> number operand number .)
    CLOSE_BRACKET   reduce using rule 41 (operations -> number operand number .)
    COMMA           reduce using rule 41 (operations -> number operand number .)
    CLOSE_PARENTHESIS reduce using rule 41 (operations -> number operand number .)
    CLOSE_BRACE     reduce using rule 41 (operations -> number operand number .)
    SUMA            shift and go to state 107
    RESTA           shift and go to state 108
    MULTIPLICACION  shift and go to state 109
    DIVISION        shift and go to state 110

    operand                        shift and go to state 204

state 160

    (44) operations -> number operand NAME . operations
    (46) operations -> number operand NAME .
    (41) operations -> . number operand number
    (42) operations -> . NAME
    (43) operations -> . number
    (44) operations -> . number operand NAME operations
    (45) operations -> . NAME operand number operations
    (46) operations -> . number operand NAME
    (47) operations -> . NAME operand number
    (48) operations -> . NAME operand NAME operations
    (49) operations -> . number operand number operand operations
    (14) number -> . INTEGER
    (15) number -> . FLOAT
    (16) number -> . RESTA INTEGER
    (17) number -> . RESTA FLOAT

    SEMICOLON       reduce using rule 46 (operations -> number operand NAME .)
    COLON           reduce using rule 46 (operations -> number operand NAME .)
    CLOSE_BRACKET   reduce using rule 46 (operations -> number operand NAME .)
    COMMA           reduce using rule 46 (operations -> number operand NAME .)
    CLOSE_PARENTHESIS reduce using rule 46 (operations -> number operand NAME .)
    CLOSE_BRACE     reduce using rule 46 (operations -> number operand NAME .)
    NAME            shift and go to state 101
    INTEGER         shift and go to state 45
    FLOAT           shift and go to state 46
    RESTA           shift and go to state 47

    number                         shift and go to state 199
    operations                     shift and go to state 205

state 161

    (100) methodsSet -> NAME POINT ADD OPEN_PARENTHESIS element . CLOSE_PARENTHESIS SEMICOLON

    CLOSE_PARENTHESIS shift and go to state 206


state 162

    (101) methodsSet -> NAME POINT DELETE OPEN_PARENTHESIS element . CLOSE_PARENTHESIS SEMICOLON

    CLOSE_PARENTHESIS shift and go to state 207


state 163

    (102) methodsSet -> NAME POINT CLEAR OPEN_PARENTHESIS CLOSE_PARENTHESIS . SEMICOLON
    (88) mapFunctions -> NAME POINT CLEAR OPEN_PARENTHESIS CLOSE_PARENTHESIS . SEMICOLON

    SEMICOLON       shift and go to state 208


state 164

    (89) mapFunctions -> NAME POINT GET OPEN_PARENTHESIS clave . CLOSE_PARENTHESIS SEMICOLON

    CLOSE_PARENTHESIS shift and go to state 209


state 165

    (90) mapFunctions -> NAME POINT HAS OPEN_PARENTHESIS clave . CLOSE_PARENTHESIS SEMICOLON

    CLOSE_PARENTHESIS shift and go to state 210


state 166

    (91) arrayFn -> NAME POINT POP OPEN_PARENTHESIS CLOSE_PARENTHESIS . SEMICOLON

    SEMICOLON       shift and go to state 211


state 167

    (92) arrayFn -> NAME POINT PUSH OPEN_PARENTHESIS element . CLOSE_PARENTHESIS SEMICOLON

    CLOSE_PARENTHESIS shift and go to state 212


state 168

    (93) arrayFn -> NAME POINT UNSHIFT OPEN_PARENTHESIS element . CLOSE_PARENTHESIS SEMICOLON

    CLOSE_PARENTHESIS shift and go to state 213


state 169

    (117) function -> FUNCTION NAME OPEN_PARENTHESIS CLOSE_PARENTHESIS OPEN_BRACE . expression CLOSE_BRACE
    (1) expression -> . variable
    (2) expression -> . variable expression
    (3) expression -> . dataStruct
    (4) expression -> . dataStruct expression
    (5) expression -> . controlStruct
    (6) expression -> . controlStruct expression
    (7) expression -> . methodsSet
    (8) expression -> . mapFunctions
    (9) expression -> . arrayFn
    (10) expression -> . declaration
    (11) expression -> . print
    (12) expression -> . return
    (13) expression -> . function
    (18) variable -> . type NAME IGUAL datatype SEMICOLON
    (19) variable -> . type NAME IGUAL operations SEMICOLON
    (20) variable -> . NAME IGUAL datatype SEMICOLON
    (24) dataStruct -> . array
    (25) dataStruct -> . set
    (26) dataStruct -> . map
    (21) controlStruct -> . while
    (22) controlStruct -> . for
    (23) controlStruct -> . if
    (100) methodsSet -> . NAME POINT ADD OPEN_PARENTHESIS element CLOSE_PARENTHESIS SEMICOLON
    (101) methodsSet -> . NAME POINT DELETE OPEN_PARENTHESIS element CLOSE_PARENTHESIS SEMICOLON
    (102) methodsSet -> . NAME POINT CLEAR OPEN_PARENTHESIS CLOSE_PARENTHESIS SEMICOLON
    (88) mapFunctions -> . NAME POINT CLEAR OPEN_PARENTHESIS CLOSE_PARENTHESIS SEMICOLON
    (89) mapFunctions -> . NAME POINT GET OPEN_PARENTHESIS clave CLOSE_PARENTHESIS SEMICOLON
    (90) mapFunctions -> . NAME POINT HAS OPEN_PARENTHESIS clave CLOSE_PARENTHESIS SEMICOLON
    (91) arrayFn -> . NAME POINT POP OPEN_PARENTHESIS CLOSE_PARENTHESIS SEMICOLON
    (92) arrayFn -> . NAME POINT PUSH OPEN_PARENTHESIS element CLOSE_PARENTHESIS SEMICOLON
    (93) arrayFn -> . NAME POINT UNSHIFT OPEN_PARENTHESIS element CLOSE_PARENTHESIS SEMICOLON
    (110) declaration -> . NAME IGUAL element SEMICOLON
    (122) print -> . PRINT OPEN_PARENTHESIS CLOSE_PARENTHESIS SEMICOLON
    (121) return -> . RETURN element SEMICOLON
    (117) function -> . FUNCTION NAME OPEN_PARENTHESIS CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE
    (118) function -> . FUNCTION NAME OPEN_PARENTHESIS parameter CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE
    (60) type -> . CONST
    (61) type -> . LET
    (62) type -> . VAR
    (71) array -> . type NAME IGUAL OPEN_BRACKET items CLOSE_BRACKET SEMICOLON
    (72) array -> . type NAME IGUAL NEW ARRAY OPEN_PARENTHESIS items CLOSE_PARENTHESIS SEMICOLON
    (94) set -> . type NAME IGUAL NEW SET OPEN_PARENTHESIS CLOSE_PARENTHESIS SEMICOLON
    (95) set -> . type NAME IGUAL NEW SET OPEN_PARENTHESIS OPEN_BRACKET items CLOSE_BRACKET CLOSE_PARENTHESIS SEMICOLON
    (96) set -> . type NAME IGUAL NEW SET OPEN_PARENTHESIS element CLOSE_PARENTHESIS SEMICOLON
    (97) set -> . NAME IGUAL NEW SET OPEN_PARENTHESIS CLOSE_PARENTHESIS SEMICOLON
    (98) set -> . NAME IGUAL NEW SET OPEN_PARENTHESIS OPEN_BRACKET items CLOSE_BRACKET CLOSE_PARENTHESIS SEMICOLON
    (99) set -> . NAME IGUAL NEW SET OPEN_PARENTHESIS element CLOSE_PARENTHESIS SEMICOLON
    (73) map -> . iniciarMap
    (74) map -> . escribirMap
    (75) map -> . generarMap
    (27) while -> . WHILE OPEN_PARENTHESIS controlArg CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE
    (28) while -> . WHILE OPEN_PARENTHESIS bool CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE
    (38) for -> . FOR OPEN_PARENTHESIS inicialization SEMICOLON expBoolean SEMICOLON operations CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE
    (29) if -> . soloIf
    (30) if -> . soloIf elseIf
    (31) if -> . soloIf elseIf else
    (32) if -> . soloIf else
    (76) iniciarMap -> . variable IGUAL NEW MAP OPEN_PARENTHESIS CLOSE_PARENTHESIS SEMICOLON
    (77) escribirMap -> . variable IGUAL OPEN_BRACE claveValor CLOSE_BRACE
    (83) generarMap -> . variable IGUAL OPEN_BRACE tuplas CLOSE_BRACE
    (33) soloIf -> . IF OPEN_PARENTHESIS controlArg CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE

    NAME            shift and go to state 13
    PRINT           shift and go to state 20
    RETURN          shift and go to state 21
    FUNCTION        shift and go to state 22
    CONST           shift and go to state 23
    LET             shift and go to state 24
    VAR             shift and go to state 25
    WHILE           shift and go to state 29
    FOR             shift and go to state 30
    IF              shift and go to state 32

    expression                     shift and go to state 214
    variable                       shift and go to state 2
    dataStruct                     shift and go to state 3
    controlStruct                  shift and go to state 4
    methodsSet                     shift and go to state 5
    mapFunctions                   shift and go to state 6
    arrayFn                        shift and go to state 7
    declaration                    shift and go to state 8
    print                          shift and go to state 9
    return                         shift and go to state 10
    function                       shift and go to state 11
    type                           shift and go to state 12
    array                          shift and go to state 14
    set                            shift and go to state 15
    map                            shift and go to state 16
    while                          shift and go to state 17
    for                            shift and go to state 18
    if                             shift and go to state 19
    iniciarMap                     shift and go to state 26
    escribirMap                    shift and go to state 27
    generarMap                     shift and go to state 28
    soloIf                         shift and go to state 31

state 170

    (118) function -> FUNCTION NAME OPEN_PARENTHESIS parameter CLOSE_PARENTHESIS . OPEN_BRACE expression CLOSE_BRACE

    OPEN_BRACE      shift and go to state 215


state 171

    (120) parameter -> element parameter .

    CLOSE_PARENTHESIS reduce using rule 120 (parameter -> element parameter .)


state 172

    (27) while -> WHILE OPEN_PARENTHESIS controlArg CLOSE_PARENTHESIS OPEN_BRACE . expression CLOSE_BRACE
    (1) expression -> . variable
    (2) expression -> . variable expression
    (3) expression -> . dataStruct
    (4) expression -> . dataStruct expression
    (5) expression -> . controlStruct
    (6) expression -> . controlStruct expression
    (7) expression -> . methodsSet
    (8) expression -> . mapFunctions
    (9) expression -> . arrayFn
    (10) expression -> . declaration
    (11) expression -> . print
    (12) expression -> . return
    (13) expression -> . function
    (18) variable -> . type NAME IGUAL datatype SEMICOLON
    (19) variable -> . type NAME IGUAL operations SEMICOLON
    (20) variable -> . NAME IGUAL datatype SEMICOLON
    (24) dataStruct -> . array
    (25) dataStruct -> . set
    (26) dataStruct -> . map
    (21) controlStruct -> . while
    (22) controlStruct -> . for
    (23) controlStruct -> . if
    (100) methodsSet -> . NAME POINT ADD OPEN_PARENTHESIS element CLOSE_PARENTHESIS SEMICOLON
    (101) methodsSet -> . NAME POINT DELETE OPEN_PARENTHESIS element CLOSE_PARENTHESIS SEMICOLON
    (102) methodsSet -> . NAME POINT CLEAR OPEN_PARENTHESIS CLOSE_PARENTHESIS SEMICOLON
    (88) mapFunctions -> . NAME POINT CLEAR OPEN_PARENTHESIS CLOSE_PARENTHESIS SEMICOLON
    (89) mapFunctions -> . NAME POINT GET OPEN_PARENTHESIS clave CLOSE_PARENTHESIS SEMICOLON
    (90) mapFunctions -> . NAME POINT HAS OPEN_PARENTHESIS clave CLOSE_PARENTHESIS SEMICOLON
    (91) arrayFn -> . NAME POINT POP OPEN_PARENTHESIS CLOSE_PARENTHESIS SEMICOLON
    (92) arrayFn -> . NAME POINT PUSH OPEN_PARENTHESIS element CLOSE_PARENTHESIS SEMICOLON
    (93) arrayFn -> . NAME POINT UNSHIFT OPEN_PARENTHESIS element CLOSE_PARENTHESIS SEMICOLON
    (110) declaration -> . NAME IGUAL element SEMICOLON
    (122) print -> . PRINT OPEN_PARENTHESIS CLOSE_PARENTHESIS SEMICOLON
    (121) return -> . RETURN element SEMICOLON
    (117) function -> . FUNCTION NAME OPEN_PARENTHESIS CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE
    (118) function -> . FUNCTION NAME OPEN_PARENTHESIS parameter CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE
    (60) type -> . CONST
    (61) type -> . LET
    (62) type -> . VAR
    (71) array -> . type NAME IGUAL OPEN_BRACKET items CLOSE_BRACKET SEMICOLON
    (72) array -> . type NAME IGUAL NEW ARRAY OPEN_PARENTHESIS items CLOSE_PARENTHESIS SEMICOLON
    (94) set -> . type NAME IGUAL NEW SET OPEN_PARENTHESIS CLOSE_PARENTHESIS SEMICOLON
    (95) set -> . type NAME IGUAL NEW SET OPEN_PARENTHESIS OPEN_BRACKET items CLOSE_BRACKET CLOSE_PARENTHESIS SEMICOLON
    (96) set -> . type NAME IGUAL NEW SET OPEN_PARENTHESIS element CLOSE_PARENTHESIS SEMICOLON
    (97) set -> . NAME IGUAL NEW SET OPEN_PARENTHESIS CLOSE_PARENTHESIS SEMICOLON
    (98) set -> . NAME IGUAL NEW SET OPEN_PARENTHESIS OPEN_BRACKET items CLOSE_BRACKET CLOSE_PARENTHESIS SEMICOLON
    (99) set -> . NAME IGUAL NEW SET OPEN_PARENTHESIS element CLOSE_PARENTHESIS SEMICOLON
    (73) map -> . iniciarMap
    (74) map -> . escribirMap
    (75) map -> . generarMap
    (27) while -> . WHILE OPEN_PARENTHESIS controlArg CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE
    (28) while -> . WHILE OPEN_PARENTHESIS bool CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE
    (38) for -> . FOR OPEN_PARENTHESIS inicialization SEMICOLON expBoolean SEMICOLON operations CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE
    (29) if -> . soloIf
    (30) if -> . soloIf elseIf
    (31) if -> . soloIf elseIf else
    (32) if -> . soloIf else
    (76) iniciarMap -> . variable IGUAL NEW MAP OPEN_PARENTHESIS CLOSE_PARENTHESIS SEMICOLON
    (77) escribirMap -> . variable IGUAL OPEN_BRACE claveValor CLOSE_BRACE
    (83) generarMap -> . variable IGUAL OPEN_BRACE tuplas CLOSE_BRACE
    (33) soloIf -> . IF OPEN_PARENTHESIS controlArg CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE

    NAME            shift and go to state 13
    PRINT           shift and go to state 20
    RETURN          shift and go to state 21
    FUNCTION        shift and go to state 22
    CONST           shift and go to state 23
    LET             shift and go to state 24
    VAR             shift and go to state 25
    WHILE           shift and go to state 29
    FOR             shift and go to state 30
    IF              shift and go to state 32

    expression                     shift and go to state 216
    variable                       shift and go to state 2
    dataStruct                     shift and go to state 3
    controlStruct                  shift and go to state 4
    methodsSet                     shift and go to state 5
    mapFunctions                   shift and go to state 6
    arrayFn                        shift and go to state 7
    declaration                    shift and go to state 8
    print                          shift and go to state 9
    return                         shift and go to state 10
    function                       shift and go to state 11
    type                           shift and go to state 12
    array                          shift and go to state 14
    set                            shift and go to state 15
    map                            shift and go to state 16
    while                          shift and go to state 17
    for                            shift and go to state 18
    if                             shift and go to state 19
    iniciarMap                     shift and go to state 26
    escribirMap                    shift and go to state 27
    generarMap                     shift and go to state 28
    soloIf                         shift and go to state 31

state 173

    (28) while -> WHILE OPEN_PARENTHESIS bool CLOSE_PARENTHESIS OPEN_BRACE . expression CLOSE_BRACE
    (1) expression -> . variable
    (2) expression -> . variable expression
    (3) expression -> . dataStruct
    (4) expression -> . dataStruct expression
    (5) expression -> . controlStruct
    (6) expression -> . controlStruct expression
    (7) expression -> . methodsSet
    (8) expression -> . mapFunctions
    (9) expression -> . arrayFn
    (10) expression -> . declaration
    (11) expression -> . print
    (12) expression -> . return
    (13) expression -> . function
    (18) variable -> . type NAME IGUAL datatype SEMICOLON
    (19) variable -> . type NAME IGUAL operations SEMICOLON
    (20) variable -> . NAME IGUAL datatype SEMICOLON
    (24) dataStruct -> . array
    (25) dataStruct -> . set
    (26) dataStruct -> . map
    (21) controlStruct -> . while
    (22) controlStruct -> . for
    (23) controlStruct -> . if
    (100) methodsSet -> . NAME POINT ADD OPEN_PARENTHESIS element CLOSE_PARENTHESIS SEMICOLON
    (101) methodsSet -> . NAME POINT DELETE OPEN_PARENTHESIS element CLOSE_PARENTHESIS SEMICOLON
    (102) methodsSet -> . NAME POINT CLEAR OPEN_PARENTHESIS CLOSE_PARENTHESIS SEMICOLON
    (88) mapFunctions -> . NAME POINT CLEAR OPEN_PARENTHESIS CLOSE_PARENTHESIS SEMICOLON
    (89) mapFunctions -> . NAME POINT GET OPEN_PARENTHESIS clave CLOSE_PARENTHESIS SEMICOLON
    (90) mapFunctions -> . NAME POINT HAS OPEN_PARENTHESIS clave CLOSE_PARENTHESIS SEMICOLON
    (91) arrayFn -> . NAME POINT POP OPEN_PARENTHESIS CLOSE_PARENTHESIS SEMICOLON
    (92) arrayFn -> . NAME POINT PUSH OPEN_PARENTHESIS element CLOSE_PARENTHESIS SEMICOLON
    (93) arrayFn -> . NAME POINT UNSHIFT OPEN_PARENTHESIS element CLOSE_PARENTHESIS SEMICOLON
    (110) declaration -> . NAME IGUAL element SEMICOLON
    (122) print -> . PRINT OPEN_PARENTHESIS CLOSE_PARENTHESIS SEMICOLON
    (121) return -> . RETURN element SEMICOLON
    (117) function -> . FUNCTION NAME OPEN_PARENTHESIS CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE
    (118) function -> . FUNCTION NAME OPEN_PARENTHESIS parameter CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE
    (60) type -> . CONST
    (61) type -> . LET
    (62) type -> . VAR
    (71) array -> . type NAME IGUAL OPEN_BRACKET items CLOSE_BRACKET SEMICOLON
    (72) array -> . type NAME IGUAL NEW ARRAY OPEN_PARENTHESIS items CLOSE_PARENTHESIS SEMICOLON
    (94) set -> . type NAME IGUAL NEW SET OPEN_PARENTHESIS CLOSE_PARENTHESIS SEMICOLON
    (95) set -> . type NAME IGUAL NEW SET OPEN_PARENTHESIS OPEN_BRACKET items CLOSE_BRACKET CLOSE_PARENTHESIS SEMICOLON
    (96) set -> . type NAME IGUAL NEW SET OPEN_PARENTHESIS element CLOSE_PARENTHESIS SEMICOLON
    (97) set -> . NAME IGUAL NEW SET OPEN_PARENTHESIS CLOSE_PARENTHESIS SEMICOLON
    (98) set -> . NAME IGUAL NEW SET OPEN_PARENTHESIS OPEN_BRACKET items CLOSE_BRACKET CLOSE_PARENTHESIS SEMICOLON
    (99) set -> . NAME IGUAL NEW SET OPEN_PARENTHESIS element CLOSE_PARENTHESIS SEMICOLON
    (73) map -> . iniciarMap
    (74) map -> . escribirMap
    (75) map -> . generarMap
    (27) while -> . WHILE OPEN_PARENTHESIS controlArg CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE
    (28) while -> . WHILE OPEN_PARENTHESIS bool CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE
    (38) for -> . FOR OPEN_PARENTHESIS inicialization SEMICOLON expBoolean SEMICOLON operations CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE
    (29) if -> . soloIf
    (30) if -> . soloIf elseIf
    (31) if -> . soloIf elseIf else
    (32) if -> . soloIf else
    (76) iniciarMap -> . variable IGUAL NEW MAP OPEN_PARENTHESIS CLOSE_PARENTHESIS SEMICOLON
    (77) escribirMap -> . variable IGUAL OPEN_BRACE claveValor CLOSE_BRACE
    (83) generarMap -> . variable IGUAL OPEN_BRACE tuplas CLOSE_BRACE
    (33) soloIf -> . IF OPEN_PARENTHESIS controlArg CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE

    NAME            shift and go to state 13
    PRINT           shift and go to state 20
    RETURN          shift and go to state 21
    FUNCTION        shift and go to state 22
    CONST           shift and go to state 23
    LET             shift and go to state 24
    VAR             shift and go to state 25
    WHILE           shift and go to state 29
    FOR             shift and go to state 30
    IF              shift and go to state 32

    expression                     shift and go to state 217
    variable                       shift and go to state 2
    dataStruct                     shift and go to state 3
    controlStruct                  shift and go to state 4
    methodsSet                     shift and go to state 5
    mapFunctions                   shift and go to state 6
    arrayFn                        shift and go to state 7
    declaration                    shift and go to state 8
    print                          shift and go to state 9
    return                         shift and go to state 10
    function                       shift and go to state 11
    type                           shift and go to state 12
    array                          shift and go to state 14
    set                            shift and go to state 15
    map                            shift and go to state 16
    while                          shift and go to state 17
    for                            shift and go to state 18
    if                             shift and go to state 19
    iniciarMap                     shift and go to state 26
    escribirMap                    shift and go to state 27
    generarMap                     shift and go to state 28
    soloIf                         shift and go to state 31

state 174

    (37) controlArg -> element clause element .

    CLOSE_PARENTHESIS reduce using rule 37 (controlArg -> element clause element .)
    SEMICOLON       reduce using rule 37 (controlArg -> element clause element .)
    AND             reduce using rule 37 (controlArg -> element clause element .)
    OR              reduce using rule 37 (controlArg -> element clause element .)


state 175

    (38) for -> FOR OPEN_PARENTHESIS inicialization SEMICOLON expBoolean . SEMICOLON operations CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE
    (116) expBoolean -> expBoolean . logicalOperator expBoolean
    (111) logicalOperator -> . AND
    (112) logicalOperator -> . OR

    SEMICOLON       shift and go to state 218
    AND             shift and go to state 220
    OR              shift and go to state 221

    logicalOperator                shift and go to state 219

state 176

    (113) expBoolean -> controlArg .

    SEMICOLON       reduce using rule 113 (expBoolean -> controlArg .)
    AND             reduce using rule 113 (expBoolean -> controlArg .)
    OR              reduce using rule 113 (expBoolean -> controlArg .)


state 177

    (114) expBoolean -> bool .

    SEMICOLON       reduce using rule 114 (expBoolean -> bool .)
    AND             reduce using rule 114 (expBoolean -> bool .)
    OR              reduce using rule 114 (expBoolean -> bool .)


state 178

    (115) expBoolean -> NOT . expBoolean
    (113) expBoolean -> . controlArg
    (114) expBoolean -> . bool
    (115) expBoolean -> . NOT expBoolean
    (116) expBoolean -> . expBoolean logicalOperator expBoolean
    (37) controlArg -> . element clause element
    (58) bool -> . TRUE
    (59) bool -> . FALSE
    (107) element -> . STRING
    (108) element -> . number
    (109) element -> . NAME
    (14) number -> . INTEGER
    (15) number -> . FLOAT
    (16) number -> . RESTA INTEGER
    (17) number -> . RESTA FLOAT

    NOT             shift and go to state 178
    TRUE            shift and go to state 83
    FALSE           shift and go to state 84
    STRING          shift and go to state 42
    NAME            shift and go to state 44
    INTEGER         shift and go to state 45
    FLOAT           shift and go to state 46
    RESTA           shift and go to state 47

    expBoolean                     shift and go to state 222
    controlArg                     shift and go to state 176
    bool                           shift and go to state 177
    element                        shift and go to state 82
    number                         shift and go to state 43

state 179

    (39) inicialization -> type NAME IGUAL . number
    (14) number -> . INTEGER
    (15) number -> . FLOAT
    (16) number -> . RESTA INTEGER
    (17) number -> . RESTA FLOAT

    INTEGER         shift and go to state 45
    FLOAT           shift and go to state 46
    RESTA           shift and go to state 47

    number                         shift and go to state 223

state 180

    (40) inicialization -> NAME IGUAL number .

    SEMICOLON       reduce using rule 40 (inicialization -> NAME IGUAL number .)


state 181

    (34) elseIf -> ELSEIF OPEN_PARENTHESIS controlArg CLOSE_PARENTHESIS . OPEN_BRACE expression CLOSE_BRACE
    (35) elseIf -> ELSEIF OPEN_PARENTHESIS controlArg CLOSE_PARENTHESIS . OPEN_BRACE expression CLOSE_BRACE soloIf

    OPEN_BRACE      shift and go to state 224


state 182

    (36) else -> ELSE OPEN_BRACE expression CLOSE_BRACE .

    NAME            reduce using rule 36 (else -> ELSE OPEN_BRACE expression CLOSE_BRACE .)
    PRINT           reduce using rule 36 (else -> ELSE OPEN_BRACE expression CLOSE_BRACE .)
    RETURN          reduce using rule 36 (else -> ELSE OPEN_BRACE expression CLOSE_BRACE .)
    FUNCTION        reduce using rule 36 (else -> ELSE OPEN_BRACE expression CLOSE_BRACE .)
    CONST           reduce using rule 36 (else -> ELSE OPEN_BRACE expression CLOSE_BRACE .)
    LET             reduce using rule 36 (else -> ELSE OPEN_BRACE expression CLOSE_BRACE .)
    VAR             reduce using rule 36 (else -> ELSE OPEN_BRACE expression CLOSE_BRACE .)
    WHILE           reduce using rule 36 (else -> ELSE OPEN_BRACE expression CLOSE_BRACE .)
    FOR             reduce using rule 36 (else -> ELSE OPEN_BRACE expression CLOSE_BRACE .)
    IF              reduce using rule 36 (else -> ELSE OPEN_BRACE expression CLOSE_BRACE .)
    $end            reduce using rule 36 (else -> ELSE OPEN_BRACE expression CLOSE_BRACE .)
    CLOSE_BRACE     reduce using rule 36 (else -> ELSE OPEN_BRACE expression CLOSE_BRACE .)


state 183

    (33) soloIf -> IF OPEN_PARENTHESIS controlArg CLOSE_PARENTHESIS OPEN_BRACE . expression CLOSE_BRACE
    (1) expression -> . variable
    (2) expression -> . variable expression
    (3) expression -> . dataStruct
    (4) expression -> . dataStruct expression
    (5) expression -> . controlStruct
    (6) expression -> . controlStruct expression
    (7) expression -> . methodsSet
    (8) expression -> . mapFunctions
    (9) expression -> . arrayFn
    (10) expression -> . declaration
    (11) expression -> . print
    (12) expression -> . return
    (13) expression -> . function
    (18) variable -> . type NAME IGUAL datatype SEMICOLON
    (19) variable -> . type NAME IGUAL operations SEMICOLON
    (20) variable -> . NAME IGUAL datatype SEMICOLON
    (24) dataStruct -> . array
    (25) dataStruct -> . set
    (26) dataStruct -> . map
    (21) controlStruct -> . while
    (22) controlStruct -> . for
    (23) controlStruct -> . if
    (100) methodsSet -> . NAME POINT ADD OPEN_PARENTHESIS element CLOSE_PARENTHESIS SEMICOLON
    (101) methodsSet -> . NAME POINT DELETE OPEN_PARENTHESIS element CLOSE_PARENTHESIS SEMICOLON
    (102) methodsSet -> . NAME POINT CLEAR OPEN_PARENTHESIS CLOSE_PARENTHESIS SEMICOLON
    (88) mapFunctions -> . NAME POINT CLEAR OPEN_PARENTHESIS CLOSE_PARENTHESIS SEMICOLON
    (89) mapFunctions -> . NAME POINT GET OPEN_PARENTHESIS clave CLOSE_PARENTHESIS SEMICOLON
    (90) mapFunctions -> . NAME POINT HAS OPEN_PARENTHESIS clave CLOSE_PARENTHESIS SEMICOLON
    (91) arrayFn -> . NAME POINT POP OPEN_PARENTHESIS CLOSE_PARENTHESIS SEMICOLON
    (92) arrayFn -> . NAME POINT PUSH OPEN_PARENTHESIS element CLOSE_PARENTHESIS SEMICOLON
    (93) arrayFn -> . NAME POINT UNSHIFT OPEN_PARENTHESIS element CLOSE_PARENTHESIS SEMICOLON
    (110) declaration -> . NAME IGUAL element SEMICOLON
    (122) print -> . PRINT OPEN_PARENTHESIS CLOSE_PARENTHESIS SEMICOLON
    (121) return -> . RETURN element SEMICOLON
    (117) function -> . FUNCTION NAME OPEN_PARENTHESIS CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE
    (118) function -> . FUNCTION NAME OPEN_PARENTHESIS parameter CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE
    (60) type -> . CONST
    (61) type -> . LET
    (62) type -> . VAR
    (71) array -> . type NAME IGUAL OPEN_BRACKET items CLOSE_BRACKET SEMICOLON
    (72) array -> . type NAME IGUAL NEW ARRAY OPEN_PARENTHESIS items CLOSE_PARENTHESIS SEMICOLON
    (94) set -> . type NAME IGUAL NEW SET OPEN_PARENTHESIS CLOSE_PARENTHESIS SEMICOLON
    (95) set -> . type NAME IGUAL NEW SET OPEN_PARENTHESIS OPEN_BRACKET items CLOSE_BRACKET CLOSE_PARENTHESIS SEMICOLON
    (96) set -> . type NAME IGUAL NEW SET OPEN_PARENTHESIS element CLOSE_PARENTHESIS SEMICOLON
    (97) set -> . NAME IGUAL NEW SET OPEN_PARENTHESIS CLOSE_PARENTHESIS SEMICOLON
    (98) set -> . NAME IGUAL NEW SET OPEN_PARENTHESIS OPEN_BRACKET items CLOSE_BRACKET CLOSE_PARENTHESIS SEMICOLON
    (99) set -> . NAME IGUAL NEW SET OPEN_PARENTHESIS element CLOSE_PARENTHESIS SEMICOLON
    (73) map -> . iniciarMap
    (74) map -> . escribirMap
    (75) map -> . generarMap
    (27) while -> . WHILE OPEN_PARENTHESIS controlArg CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE
    (28) while -> . WHILE OPEN_PARENTHESIS bool CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE
    (38) for -> . FOR OPEN_PARENTHESIS inicialization SEMICOLON expBoolean SEMICOLON operations CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE
    (29) if -> . soloIf
    (30) if -> . soloIf elseIf
    (31) if -> . soloIf elseIf else
    (32) if -> . soloIf else
    (76) iniciarMap -> . variable IGUAL NEW MAP OPEN_PARENTHESIS CLOSE_PARENTHESIS SEMICOLON
    (77) escribirMap -> . variable IGUAL OPEN_BRACE claveValor CLOSE_BRACE
    (83) generarMap -> . variable IGUAL OPEN_BRACE tuplas CLOSE_BRACE
    (33) soloIf -> . IF OPEN_PARENTHESIS controlArg CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE

    NAME            shift and go to state 13
    PRINT           shift and go to state 20
    RETURN          shift and go to state 21
    FUNCTION        shift and go to state 22
    CONST           shift and go to state 23
    LET             shift and go to state 24
    VAR             shift and go to state 25
    WHILE           shift and go to state 29
    FOR             shift and go to state 30
    IF              shift and go to state 32

    expression                     shift and go to state 225
    variable                       shift and go to state 2
    dataStruct                     shift and go to state 3
    controlStruct                  shift and go to state 4
    methodsSet                     shift and go to state 5
    mapFunctions                   shift and go to state 6
    arrayFn                        shift and go to state 7
    declaration                    shift and go to state 8
    print                          shift and go to state 9
    return                         shift and go to state 10
    function                       shift and go to state 11
    type                           shift and go to state 12
    array                          shift and go to state 14
    set                            shift and go to state 15
    map                            shift and go to state 16
    while                          shift and go to state 17
    for                            shift and go to state 18
    if                             shift and go to state 19
    iniciarMap                     shift and go to state 26
    escribirMap                    shift and go to state 27
    generarMap                     shift and go to state 28
    soloIf                         shift and go to state 31

state 184

    (76) iniciarMap -> variable IGUAL NEW MAP OPEN_PARENTHESIS CLOSE_PARENTHESIS . SEMICOLON

    SEMICOLON       shift and go to state 226


state 185

    (78) claveValor -> clave COLON valor .
    (79) claveValor -> clave COLON valor . COMMA claveValor

    CLOSE_BRACE     reduce using rule 78 (claveValor -> clave COLON valor .)
    COMMA           shift and go to state 227


state 186

    (81) valor -> datatype .

    COMMA           reduce using rule 81 (valor -> datatype .)
    CLOSE_BRACE     reduce using rule 81 (valor -> datatype .)


state 187

    (82) valor -> dataStruct .

    COMMA           reduce using rule 82 (valor -> dataStruct .)
    CLOSE_BRACE     reduce using rule 82 (valor -> dataStruct .)


state 188

    (42) operations -> NAME .
    (45) operations -> NAME . operand number operations
    (47) operations -> NAME . operand number
    (48) operations -> NAME . operand NAME operations
    (97) set -> NAME . IGUAL NEW SET OPEN_PARENTHESIS CLOSE_PARENTHESIS SEMICOLON
    (98) set -> NAME . IGUAL NEW SET OPEN_PARENTHESIS OPEN_BRACKET items CLOSE_BRACKET CLOSE_PARENTHESIS SEMICOLON
    (99) set -> NAME . IGUAL NEW SET OPEN_PARENTHESIS element CLOSE_PARENTHESIS SEMICOLON
    (20) variable -> NAME . IGUAL datatype SEMICOLON
    (54) operand -> . SUMA
    (55) operand -> . RESTA
    (56) operand -> . MULTIPLICACION
    (57) operand -> . DIVISION

    COMMA           reduce using rule 42 (operations -> NAME .)
    CLOSE_BRACE     reduce using rule 42 (operations -> NAME .)
    IGUAL           shift and go to state 228
    SUMA            shift and go to state 107
    RESTA           shift and go to state 108
    MULTIPLICACION  shift and go to state 109
    DIVISION        shift and go to state 110

    operand                        shift and go to state 106

state 189

    (71) array -> type . NAME IGUAL OPEN_BRACKET items CLOSE_BRACKET SEMICOLON
    (72) array -> type . NAME IGUAL NEW ARRAY OPEN_PARENTHESIS items CLOSE_PARENTHESIS SEMICOLON
    (94) set -> type . NAME IGUAL NEW SET OPEN_PARENTHESIS CLOSE_PARENTHESIS SEMICOLON
    (95) set -> type . NAME IGUAL NEW SET OPEN_PARENTHESIS OPEN_BRACKET items CLOSE_BRACKET CLOSE_PARENTHESIS SEMICOLON
    (96) set -> type . NAME IGUAL NEW SET OPEN_PARENTHESIS element CLOSE_PARENTHESIS SEMICOLON
    (18) variable -> type . NAME IGUAL datatype SEMICOLON
    (19) variable -> type . NAME IGUAL operations SEMICOLON

    NAME            shift and go to state 229


state 190

    (76) iniciarMap -> variable . IGUAL NEW MAP OPEN_PARENTHESIS CLOSE_PARENTHESIS SEMICOLON
    (77) escribirMap -> variable . IGUAL OPEN_BRACE claveValor CLOSE_BRACE
    (83) generarMap -> variable . IGUAL OPEN_BRACE tuplas CLOSE_BRACE

    IGUAL           shift and go to state 34


state 191

    (85) tuplas -> tupla COMMA tuplas .

    CLOSE_BRACE     reduce using rule 85 (tuplas -> tupla COMMA tuplas .)


state 192

    (86) tupla -> OPEN_BRACKET datatype CLOSE_BRACKET . SEMICOLON

    SEMICOLON       shift and go to state 230


state 193

    (87) tupla -> OPEN_BRACKET datatype COMMA . datatype CLOSE_BRACKET SEMICOLON
    (50) datatype -> . number
    (51) datatype -> . STRING
    (52) datatype -> . CHAR
    (53) datatype -> . operations
    (14) number -> . INTEGER
    (15) number -> . FLOAT
    (16) number -> . RESTA INTEGER
    (17) number -> . RESTA FLOAT
    (41) operations -> . number operand number
    (42) operations -> . NAME
    (43) operations -> . number
    (44) operations -> . number operand NAME operations
    (45) operations -> . NAME operand number operations
    (46) operations -> . number operand NAME
    (47) operations -> . NAME operand number
    (48) operations -> . NAME operand NAME operations
    (49) operations -> . number operand number operand operations

    STRING          shift and go to state 100
    CHAR            shift and go to state 65
    INTEGER         shift and go to state 45
    FLOAT           shift and go to state 46
    RESTA           shift and go to state 47
    NAME            shift and go to state 101

    datatype                       shift and go to state 231
    number                         shift and go to state 99
    operations                     shift and go to state 66

state 194

    (71) array -> type NAME IGUAL OPEN_BRACKET items CLOSE_BRACKET . SEMICOLON

    SEMICOLON       shift and go to state 232


state 195

    (106) cadena -> STRING COMMA . cadena
    (105) cadena -> . STRING
    (106) cadena -> . STRING COMMA cadena

    STRING          shift and go to state 153

    cadena                         shift and go to state 233

state 196

    (72) array -> type NAME IGUAL NEW ARRAY OPEN_PARENTHESIS . items CLOSE_PARENTHESIS SEMICOLON
    (103) items -> . number
    (104) items -> . cadena
    (14) number -> . INTEGER
    (15) number -> . FLOAT
    (16) number -> . RESTA INTEGER
    (17) number -> . RESTA FLOAT
    (105) cadena -> . STRING
    (106) cadena -> . STRING COMMA cadena

    INTEGER         shift and go to state 45
    FLOAT           shift and go to state 46
    RESTA           shift and go to state 47
    STRING          shift and go to state 153

    items                          shift and go to state 234
    number                         shift and go to state 151
    cadena                         shift and go to state 152

state 197

    (94) set -> type NAME IGUAL NEW SET OPEN_PARENTHESIS . CLOSE_PARENTHESIS SEMICOLON
    (95) set -> type NAME IGUAL NEW SET OPEN_PARENTHESIS . OPEN_BRACKET items CLOSE_BRACKET CLOSE_PARENTHESIS SEMICOLON
    (96) set -> type NAME IGUAL NEW SET OPEN_PARENTHESIS . element CLOSE_PARENTHESIS SEMICOLON
    (107) element -> . STRING
    (108) element -> . number
    (109) element -> . NAME
    (14) number -> . INTEGER
    (15) number -> . FLOAT
    (16) number -> . RESTA INTEGER
    (17) number -> . RESTA FLOAT

    CLOSE_PARENTHESIS shift and go to state 235
    OPEN_BRACKET    shift and go to state 236
    STRING          shift and go to state 42
    NAME            shift and go to state 44
    INTEGER         shift and go to state 45
    FLOAT           shift and go to state 46
    RESTA           shift and go to state 47

    element                        shift and go to state 237
    number                         shift and go to state 43

state 198

    (48) operations -> NAME operand NAME operations .

    SEMICOLON       reduce using rule 48 (operations -> NAME operand NAME operations .)
    COLON           reduce using rule 48 (operations -> NAME operand NAME operations .)
    CLOSE_BRACKET   reduce using rule 48 (operations -> NAME operand NAME operations .)
    COMMA           reduce using rule 48 (operations -> NAME operand NAME operations .)
    CLOSE_PARENTHESIS reduce using rule 48 (operations -> NAME operand NAME operations .)
    CLOSE_BRACE     reduce using rule 48 (operations -> NAME operand NAME operations .)


state 199

    (41) operations -> number . operand number
    (43) operations -> number .
    (44) operations -> number . operand NAME operations
    (46) operations -> number . operand NAME
    (49) operations -> number . operand number operand operations
    (54) operand -> . SUMA
    (55) operand -> . RESTA
    (56) operand -> . MULTIPLICACION
    (57) operand -> . DIVISION

    SEMICOLON       reduce using rule 43 (operations -> number .)
    COLON           reduce using rule 43 (operations -> number .)
    CLOSE_BRACKET   reduce using rule 43 (operations -> number .)
    COMMA           reduce using rule 43 (operations -> number .)
    CLOSE_PARENTHESIS reduce using rule 43 (operations -> number .)
    CLOSE_BRACE     reduce using rule 43 (operations -> number .)
    SUMA            shift and go to state 107
    RESTA           shift and go to state 108
    MULTIPLICACION  shift and go to state 109
    DIVISION        shift and go to state 110

    operand                        shift and go to state 114

state 200

    (45) operations -> NAME operand number operations .

    SEMICOLON       reduce using rule 45 (operations -> NAME operand number operations .)
    COLON           reduce using rule 45 (operations -> NAME operand number operations .)
    CLOSE_BRACKET   reduce using rule 45 (operations -> NAME operand number operations .)
    COMMA           reduce using rule 45 (operations -> NAME operand number operations .)
    CLOSE_PARENTHESIS reduce using rule 45 (operations -> NAME operand number operations .)
    CLOSE_BRACE     reduce using rule 45 (operations -> NAME operand number operations .)


state 201

    (97) set -> NAME IGUAL NEW SET OPEN_PARENTHESIS CLOSE_PARENTHESIS . SEMICOLON

    SEMICOLON       shift and go to state 238


state 202

    (98) set -> NAME IGUAL NEW SET OPEN_PARENTHESIS OPEN_BRACKET . items CLOSE_BRACKET CLOSE_PARENTHESIS SEMICOLON
    (103) items -> . number
    (104) items -> . cadena
    (14) number -> . INTEGER
    (15) number -> . FLOAT
    (16) number -> . RESTA INTEGER
    (17) number -> . RESTA FLOAT
    (105) cadena -> . STRING
    (106) cadena -> . STRING COMMA cadena

    INTEGER         shift and go to state 45
    FLOAT           shift and go to state 46
    RESTA           shift and go to state 47
    STRING          shift and go to state 153

    items                          shift and go to state 239
    number                         shift and go to state 151
    cadena                         shift and go to state 152

state 203

    (99) set -> NAME IGUAL NEW SET OPEN_PARENTHESIS element . CLOSE_PARENTHESIS SEMICOLON

    CLOSE_PARENTHESIS shift and go to state 240


state 204

    (49) operations -> number operand number operand . operations
    (41) operations -> . number operand number
    (42) operations -> . NAME
    (43) operations -> . number
    (44) operations -> . number operand NAME operations
    (45) operations -> . NAME operand number operations
    (46) operations -> . number operand NAME
    (47) operations -> . NAME operand number
    (48) operations -> . NAME operand NAME operations
    (49) operations -> . number operand number operand operations
    (14) number -> . INTEGER
    (15) number -> . FLOAT
    (16) number -> . RESTA INTEGER
    (17) number -> . RESTA FLOAT

    NAME            shift and go to state 101
    INTEGER         shift and go to state 45
    FLOAT           shift and go to state 46
    RESTA           shift and go to state 47

    number                         shift and go to state 199
    operations                     shift and go to state 241

state 205

    (44) operations -> number operand NAME operations .

    SEMICOLON       reduce using rule 44 (operations -> number operand NAME operations .)
    COLON           reduce using rule 44 (operations -> number operand NAME operations .)
    CLOSE_BRACKET   reduce using rule 44 (operations -> number operand NAME operations .)
    COMMA           reduce using rule 44 (operations -> number operand NAME operations .)
    CLOSE_PARENTHESIS reduce using rule 44 (operations -> number operand NAME operations .)
    CLOSE_BRACE     reduce using rule 44 (operations -> number operand NAME operations .)


state 206

    (100) methodsSet -> NAME POINT ADD OPEN_PARENTHESIS element CLOSE_PARENTHESIS . SEMICOLON

    SEMICOLON       shift and go to state 242


state 207

    (101) methodsSet -> NAME POINT DELETE OPEN_PARENTHESIS element CLOSE_PARENTHESIS . SEMICOLON

    SEMICOLON       shift and go to state 243


state 208

    (102) methodsSet -> NAME POINT CLEAR OPEN_PARENTHESIS CLOSE_PARENTHESIS SEMICOLON .
    (88) mapFunctions -> NAME POINT CLEAR OPEN_PARENTHESIS CLOSE_PARENTHESIS SEMICOLON .

  ! reduce/reduce conflict for $end resolved using rule 88 (mapFunctions -> NAME POINT CLEAR OPEN_PARENTHESIS CLOSE_PARENTHESIS SEMICOLON .)
  ! reduce/reduce conflict for CLOSE_BRACE resolved using rule 88 (mapFunctions -> NAME POINT CLEAR OPEN_PARENTHESIS CLOSE_PARENTHESIS SEMICOLON .)
    $end            reduce using rule 88 (mapFunctions -> NAME POINT CLEAR OPEN_PARENTHESIS CLOSE_PARENTHESIS SEMICOLON .)
    CLOSE_BRACE     reduce using rule 88 (mapFunctions -> NAME POINT CLEAR OPEN_PARENTHESIS CLOSE_PARENTHESIS SEMICOLON .)

  ! $end            [ reduce using rule 102 (methodsSet -> NAME POINT CLEAR OPEN_PARENTHESIS CLOSE_PARENTHESIS SEMICOLON .) ]
  ! CLOSE_BRACE     [ reduce using rule 102 (methodsSet -> NAME POINT CLEAR OPEN_PARENTHESIS CLOSE_PARENTHESIS SEMICOLON .) ]


state 209

    (89) mapFunctions -> NAME POINT GET OPEN_PARENTHESIS clave CLOSE_PARENTHESIS . SEMICOLON

    SEMICOLON       shift and go to state 244


state 210

    (90) mapFunctions -> NAME POINT HAS OPEN_PARENTHESIS clave CLOSE_PARENTHESIS . SEMICOLON

    SEMICOLON       shift and go to state 245


state 211

    (91) arrayFn -> NAME POINT POP OPEN_PARENTHESIS CLOSE_PARENTHESIS SEMICOLON .

    $end            reduce using rule 91 (arrayFn -> NAME POINT POP OPEN_PARENTHESIS CLOSE_PARENTHESIS SEMICOLON .)
    CLOSE_BRACE     reduce using rule 91 (arrayFn -> NAME POINT POP OPEN_PARENTHESIS CLOSE_PARENTHESIS SEMICOLON .)


state 212

    (92) arrayFn -> NAME POINT PUSH OPEN_PARENTHESIS element CLOSE_PARENTHESIS . SEMICOLON

    SEMICOLON       shift and go to state 246


state 213

    (93) arrayFn -> NAME POINT UNSHIFT OPEN_PARENTHESIS element CLOSE_PARENTHESIS . SEMICOLON

    SEMICOLON       shift and go to state 247


state 214

    (117) function -> FUNCTION NAME OPEN_PARENTHESIS CLOSE_PARENTHESIS OPEN_BRACE expression . CLOSE_BRACE

    CLOSE_BRACE     shift and go to state 248


state 215

    (118) function -> FUNCTION NAME OPEN_PARENTHESIS parameter CLOSE_PARENTHESIS OPEN_BRACE . expression CLOSE_BRACE
    (1) expression -> . variable
    (2) expression -> . variable expression
    (3) expression -> . dataStruct
    (4) expression -> . dataStruct expression
    (5) expression -> . controlStruct
    (6) expression -> . controlStruct expression
    (7) expression -> . methodsSet
    (8) expression -> . mapFunctions
    (9) expression -> . arrayFn
    (10) expression -> . declaration
    (11) expression -> . print
    (12) expression -> . return
    (13) expression -> . function
    (18) variable -> . type NAME IGUAL datatype SEMICOLON
    (19) variable -> . type NAME IGUAL operations SEMICOLON
    (20) variable -> . NAME IGUAL datatype SEMICOLON
    (24) dataStruct -> . array
    (25) dataStruct -> . set
    (26) dataStruct -> . map
    (21) controlStruct -> . while
    (22) controlStruct -> . for
    (23) controlStruct -> . if
    (100) methodsSet -> . NAME POINT ADD OPEN_PARENTHESIS element CLOSE_PARENTHESIS SEMICOLON
    (101) methodsSet -> . NAME POINT DELETE OPEN_PARENTHESIS element CLOSE_PARENTHESIS SEMICOLON
    (102) methodsSet -> . NAME POINT CLEAR OPEN_PARENTHESIS CLOSE_PARENTHESIS SEMICOLON
    (88) mapFunctions -> . NAME POINT CLEAR OPEN_PARENTHESIS CLOSE_PARENTHESIS SEMICOLON
    (89) mapFunctions -> . NAME POINT GET OPEN_PARENTHESIS clave CLOSE_PARENTHESIS SEMICOLON
    (90) mapFunctions -> . NAME POINT HAS OPEN_PARENTHESIS clave CLOSE_PARENTHESIS SEMICOLON
    (91) arrayFn -> . NAME POINT POP OPEN_PARENTHESIS CLOSE_PARENTHESIS SEMICOLON
    (92) arrayFn -> . NAME POINT PUSH OPEN_PARENTHESIS element CLOSE_PARENTHESIS SEMICOLON
    (93) arrayFn -> . NAME POINT UNSHIFT OPEN_PARENTHESIS element CLOSE_PARENTHESIS SEMICOLON
    (110) declaration -> . NAME IGUAL element SEMICOLON
    (122) print -> . PRINT OPEN_PARENTHESIS CLOSE_PARENTHESIS SEMICOLON
    (121) return -> . RETURN element SEMICOLON
    (117) function -> . FUNCTION NAME OPEN_PARENTHESIS CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE
    (118) function -> . FUNCTION NAME OPEN_PARENTHESIS parameter CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE
    (60) type -> . CONST
    (61) type -> . LET
    (62) type -> . VAR
    (71) array -> . type NAME IGUAL OPEN_BRACKET items CLOSE_BRACKET SEMICOLON
    (72) array -> . type NAME IGUAL NEW ARRAY OPEN_PARENTHESIS items CLOSE_PARENTHESIS SEMICOLON
    (94) set -> . type NAME IGUAL NEW SET OPEN_PARENTHESIS CLOSE_PARENTHESIS SEMICOLON
    (95) set -> . type NAME IGUAL NEW SET OPEN_PARENTHESIS OPEN_BRACKET items CLOSE_BRACKET CLOSE_PARENTHESIS SEMICOLON
    (96) set -> . type NAME IGUAL NEW SET OPEN_PARENTHESIS element CLOSE_PARENTHESIS SEMICOLON
    (97) set -> . NAME IGUAL NEW SET OPEN_PARENTHESIS CLOSE_PARENTHESIS SEMICOLON
    (98) set -> . NAME IGUAL NEW SET OPEN_PARENTHESIS OPEN_BRACKET items CLOSE_BRACKET CLOSE_PARENTHESIS SEMICOLON
    (99) set -> . NAME IGUAL NEW SET OPEN_PARENTHESIS element CLOSE_PARENTHESIS SEMICOLON
    (73) map -> . iniciarMap
    (74) map -> . escribirMap
    (75) map -> . generarMap
    (27) while -> . WHILE OPEN_PARENTHESIS controlArg CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE
    (28) while -> . WHILE OPEN_PARENTHESIS bool CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE
    (38) for -> . FOR OPEN_PARENTHESIS inicialization SEMICOLON expBoolean SEMICOLON operations CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE
    (29) if -> . soloIf
    (30) if -> . soloIf elseIf
    (31) if -> . soloIf elseIf else
    (32) if -> . soloIf else
    (76) iniciarMap -> . variable IGUAL NEW MAP OPEN_PARENTHESIS CLOSE_PARENTHESIS SEMICOLON
    (77) escribirMap -> . variable IGUAL OPEN_BRACE claveValor CLOSE_BRACE
    (83) generarMap -> . variable IGUAL OPEN_BRACE tuplas CLOSE_BRACE
    (33) soloIf -> . IF OPEN_PARENTHESIS controlArg CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE

    NAME            shift and go to state 13
    PRINT           shift and go to state 20
    RETURN          shift and go to state 21
    FUNCTION        shift and go to state 22
    CONST           shift and go to state 23
    LET             shift and go to state 24
    VAR             shift and go to state 25
    WHILE           shift and go to state 29
    FOR             shift and go to state 30
    IF              shift and go to state 32

    expression                     shift and go to state 249
    variable                       shift and go to state 2
    dataStruct                     shift and go to state 3
    controlStruct                  shift and go to state 4
    methodsSet                     shift and go to state 5
    mapFunctions                   shift and go to state 6
    arrayFn                        shift and go to state 7
    declaration                    shift and go to state 8
    print                          shift and go to state 9
    return                         shift and go to state 10
    function                       shift and go to state 11
    type                           shift and go to state 12
    array                          shift and go to state 14
    set                            shift and go to state 15
    map                            shift and go to state 16
    while                          shift and go to state 17
    for                            shift and go to state 18
    if                             shift and go to state 19
    iniciarMap                     shift and go to state 26
    escribirMap                    shift and go to state 27
    generarMap                     shift and go to state 28
    soloIf                         shift and go to state 31

state 216

    (27) while -> WHILE OPEN_PARENTHESIS controlArg CLOSE_PARENTHESIS OPEN_BRACE expression . CLOSE_BRACE

    CLOSE_BRACE     shift and go to state 250


state 217

    (28) while -> WHILE OPEN_PARENTHESIS bool CLOSE_PARENTHESIS OPEN_BRACE expression . CLOSE_BRACE

    CLOSE_BRACE     shift and go to state 251


state 218

    (38) for -> FOR OPEN_PARENTHESIS inicialization SEMICOLON expBoolean SEMICOLON . operations CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE
    (41) operations -> . number operand number
    (42) operations -> . NAME
    (43) operations -> . number
    (44) operations -> . number operand NAME operations
    (45) operations -> . NAME operand number operations
    (46) operations -> . number operand NAME
    (47) operations -> . NAME operand number
    (48) operations -> . NAME operand NAME operations
    (49) operations -> . number operand number operand operations
    (14) number -> . INTEGER
    (15) number -> . FLOAT
    (16) number -> . RESTA INTEGER
    (17) number -> . RESTA FLOAT

    NAME            shift and go to state 101
    INTEGER         shift and go to state 45
    FLOAT           shift and go to state 46
    RESTA           shift and go to state 47

    operations                     shift and go to state 252
    number                         shift and go to state 199

state 219

    (116) expBoolean -> expBoolean logicalOperator . expBoolean
    (113) expBoolean -> . controlArg
    (114) expBoolean -> . bool
    (115) expBoolean -> . NOT expBoolean
    (116) expBoolean -> . expBoolean logicalOperator expBoolean
    (37) controlArg -> . element clause element
    (58) bool -> . TRUE
    (59) bool -> . FALSE
    (107) element -> . STRING
    (108) element -> . number
    (109) element -> . NAME
    (14) number -> . INTEGER
    (15) number -> . FLOAT
    (16) number -> . RESTA INTEGER
    (17) number -> . RESTA FLOAT

    NOT             shift and go to state 178
    TRUE            shift and go to state 83
    FALSE           shift and go to state 84
    STRING          shift and go to state 42
    NAME            shift and go to state 44
    INTEGER         shift and go to state 45
    FLOAT           shift and go to state 46
    RESTA           shift and go to state 47

    expBoolean                     shift and go to state 253
    controlArg                     shift and go to state 176
    bool                           shift and go to state 177
    element                        shift and go to state 82
    number                         shift and go to state 43

state 220

    (111) logicalOperator -> AND .

    NOT             reduce using rule 111 (logicalOperator -> AND .)
    TRUE            reduce using rule 111 (logicalOperator -> AND .)
    FALSE           reduce using rule 111 (logicalOperator -> AND .)
    STRING          reduce using rule 111 (logicalOperator -> AND .)
    NAME            reduce using rule 111 (logicalOperator -> AND .)
    INTEGER         reduce using rule 111 (logicalOperator -> AND .)
    FLOAT           reduce using rule 111 (logicalOperator -> AND .)
    RESTA           reduce using rule 111 (logicalOperator -> AND .)


state 221

    (112) logicalOperator -> OR .

    NOT             reduce using rule 112 (logicalOperator -> OR .)
    TRUE            reduce using rule 112 (logicalOperator -> OR .)
    FALSE           reduce using rule 112 (logicalOperator -> OR .)
    STRING          reduce using rule 112 (logicalOperator -> OR .)
    NAME            reduce using rule 112 (logicalOperator -> OR .)
    INTEGER         reduce using rule 112 (logicalOperator -> OR .)
    FLOAT           reduce using rule 112 (logicalOperator -> OR .)
    RESTA           reduce using rule 112 (logicalOperator -> OR .)


state 222

    (115) expBoolean -> NOT expBoolean .
    (116) expBoolean -> expBoolean . logicalOperator expBoolean
    (111) logicalOperator -> . AND
    (112) logicalOperator -> . OR

  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
    SEMICOLON       reduce using rule 115 (expBoolean -> NOT expBoolean .)
    AND             shift and go to state 220
    OR              shift and go to state 221

  ! AND             [ reduce using rule 115 (expBoolean -> NOT expBoolean .) ]
  ! OR              [ reduce using rule 115 (expBoolean -> NOT expBoolean .) ]

    logicalOperator                shift and go to state 219

state 223

    (39) inicialization -> type NAME IGUAL number .

    SEMICOLON       reduce using rule 39 (inicialization -> type NAME IGUAL number .)


state 224

    (34) elseIf -> ELSEIF OPEN_PARENTHESIS controlArg CLOSE_PARENTHESIS OPEN_BRACE . expression CLOSE_BRACE
    (35) elseIf -> ELSEIF OPEN_PARENTHESIS controlArg CLOSE_PARENTHESIS OPEN_BRACE . expression CLOSE_BRACE soloIf
    (1) expression -> . variable
    (2) expression -> . variable expression
    (3) expression -> . dataStruct
    (4) expression -> . dataStruct expression
    (5) expression -> . controlStruct
    (6) expression -> . controlStruct expression
    (7) expression -> . methodsSet
    (8) expression -> . mapFunctions
    (9) expression -> . arrayFn
    (10) expression -> . declaration
    (11) expression -> . print
    (12) expression -> . return
    (13) expression -> . function
    (18) variable -> . type NAME IGUAL datatype SEMICOLON
    (19) variable -> . type NAME IGUAL operations SEMICOLON
    (20) variable -> . NAME IGUAL datatype SEMICOLON
    (24) dataStruct -> . array
    (25) dataStruct -> . set
    (26) dataStruct -> . map
    (21) controlStruct -> . while
    (22) controlStruct -> . for
    (23) controlStruct -> . if
    (100) methodsSet -> . NAME POINT ADD OPEN_PARENTHESIS element CLOSE_PARENTHESIS SEMICOLON
    (101) methodsSet -> . NAME POINT DELETE OPEN_PARENTHESIS element CLOSE_PARENTHESIS SEMICOLON
    (102) methodsSet -> . NAME POINT CLEAR OPEN_PARENTHESIS CLOSE_PARENTHESIS SEMICOLON
    (88) mapFunctions -> . NAME POINT CLEAR OPEN_PARENTHESIS CLOSE_PARENTHESIS SEMICOLON
    (89) mapFunctions -> . NAME POINT GET OPEN_PARENTHESIS clave CLOSE_PARENTHESIS SEMICOLON
    (90) mapFunctions -> . NAME POINT HAS OPEN_PARENTHESIS clave CLOSE_PARENTHESIS SEMICOLON
    (91) arrayFn -> . NAME POINT POP OPEN_PARENTHESIS CLOSE_PARENTHESIS SEMICOLON
    (92) arrayFn -> . NAME POINT PUSH OPEN_PARENTHESIS element CLOSE_PARENTHESIS SEMICOLON
    (93) arrayFn -> . NAME POINT UNSHIFT OPEN_PARENTHESIS element CLOSE_PARENTHESIS SEMICOLON
    (110) declaration -> . NAME IGUAL element SEMICOLON
    (122) print -> . PRINT OPEN_PARENTHESIS CLOSE_PARENTHESIS SEMICOLON
    (121) return -> . RETURN element SEMICOLON
    (117) function -> . FUNCTION NAME OPEN_PARENTHESIS CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE
    (118) function -> . FUNCTION NAME OPEN_PARENTHESIS parameter CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE
    (60) type -> . CONST
    (61) type -> . LET
    (62) type -> . VAR
    (71) array -> . type NAME IGUAL OPEN_BRACKET items CLOSE_BRACKET SEMICOLON
    (72) array -> . type NAME IGUAL NEW ARRAY OPEN_PARENTHESIS items CLOSE_PARENTHESIS SEMICOLON
    (94) set -> . type NAME IGUAL NEW SET OPEN_PARENTHESIS CLOSE_PARENTHESIS SEMICOLON
    (95) set -> . type NAME IGUAL NEW SET OPEN_PARENTHESIS OPEN_BRACKET items CLOSE_BRACKET CLOSE_PARENTHESIS SEMICOLON
    (96) set -> . type NAME IGUAL NEW SET OPEN_PARENTHESIS element CLOSE_PARENTHESIS SEMICOLON
    (97) set -> . NAME IGUAL NEW SET OPEN_PARENTHESIS CLOSE_PARENTHESIS SEMICOLON
    (98) set -> . NAME IGUAL NEW SET OPEN_PARENTHESIS OPEN_BRACKET items CLOSE_BRACKET CLOSE_PARENTHESIS SEMICOLON
    (99) set -> . NAME IGUAL NEW SET OPEN_PARENTHESIS element CLOSE_PARENTHESIS SEMICOLON
    (73) map -> . iniciarMap
    (74) map -> . escribirMap
    (75) map -> . generarMap
    (27) while -> . WHILE OPEN_PARENTHESIS controlArg CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE
    (28) while -> . WHILE OPEN_PARENTHESIS bool CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE
    (38) for -> . FOR OPEN_PARENTHESIS inicialization SEMICOLON expBoolean SEMICOLON operations CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE
    (29) if -> . soloIf
    (30) if -> . soloIf elseIf
    (31) if -> . soloIf elseIf else
    (32) if -> . soloIf else
    (76) iniciarMap -> . variable IGUAL NEW MAP OPEN_PARENTHESIS CLOSE_PARENTHESIS SEMICOLON
    (77) escribirMap -> . variable IGUAL OPEN_BRACE claveValor CLOSE_BRACE
    (83) generarMap -> . variable IGUAL OPEN_BRACE tuplas CLOSE_BRACE
    (33) soloIf -> . IF OPEN_PARENTHESIS controlArg CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE

    NAME            shift and go to state 13
    PRINT           shift and go to state 20
    RETURN          shift and go to state 21
    FUNCTION        shift and go to state 22
    CONST           shift and go to state 23
    LET             shift and go to state 24
    VAR             shift and go to state 25
    WHILE           shift and go to state 29
    FOR             shift and go to state 30
    IF              shift and go to state 32

    expression                     shift and go to state 254
    soloIf                         shift and go to state 31
    variable                       shift and go to state 2
    dataStruct                     shift and go to state 3
    controlStruct                  shift and go to state 4
    methodsSet                     shift and go to state 5
    mapFunctions                   shift and go to state 6
    arrayFn                        shift and go to state 7
    declaration                    shift and go to state 8
    print                          shift and go to state 9
    return                         shift and go to state 10
    function                       shift and go to state 11
    type                           shift and go to state 12
    array                          shift and go to state 14
    set                            shift and go to state 15
    map                            shift and go to state 16
    while                          shift and go to state 17
    for                            shift and go to state 18
    if                             shift and go to state 19
    iniciarMap                     shift and go to state 26
    escribirMap                    shift and go to state 27
    generarMap                     shift and go to state 28

state 225

    (33) soloIf -> IF OPEN_PARENTHESIS controlArg CLOSE_PARENTHESIS OPEN_BRACE expression . CLOSE_BRACE

    CLOSE_BRACE     shift and go to state 255


state 226

    (76) iniciarMap -> variable IGUAL NEW MAP OPEN_PARENTHESIS CLOSE_PARENTHESIS SEMICOLON .

    NAME            reduce using rule 76 (iniciarMap -> variable IGUAL NEW MAP OPEN_PARENTHESIS CLOSE_PARENTHESIS SEMICOLON .)
    PRINT           reduce using rule 76 (iniciarMap -> variable IGUAL NEW MAP OPEN_PARENTHESIS CLOSE_PARENTHESIS SEMICOLON .)
    RETURN          reduce using rule 76 (iniciarMap -> variable IGUAL NEW MAP OPEN_PARENTHESIS CLOSE_PARENTHESIS SEMICOLON .)
    FUNCTION        reduce using rule 76 (iniciarMap -> variable IGUAL NEW MAP OPEN_PARENTHESIS CLOSE_PARENTHESIS SEMICOLON .)
    CONST           reduce using rule 76 (iniciarMap -> variable IGUAL NEW MAP OPEN_PARENTHESIS CLOSE_PARENTHESIS SEMICOLON .)
    LET             reduce using rule 76 (iniciarMap -> variable IGUAL NEW MAP OPEN_PARENTHESIS CLOSE_PARENTHESIS SEMICOLON .)
    VAR             reduce using rule 76 (iniciarMap -> variable IGUAL NEW MAP OPEN_PARENTHESIS CLOSE_PARENTHESIS SEMICOLON .)
    WHILE           reduce using rule 76 (iniciarMap -> variable IGUAL NEW MAP OPEN_PARENTHESIS CLOSE_PARENTHESIS SEMICOLON .)
    FOR             reduce using rule 76 (iniciarMap -> variable IGUAL NEW MAP OPEN_PARENTHESIS CLOSE_PARENTHESIS SEMICOLON .)
    IF              reduce using rule 76 (iniciarMap -> variable IGUAL NEW MAP OPEN_PARENTHESIS CLOSE_PARENTHESIS SEMICOLON .)
    $end            reduce using rule 76 (iniciarMap -> variable IGUAL NEW MAP OPEN_PARENTHESIS CLOSE_PARENTHESIS SEMICOLON .)
    CLOSE_BRACE     reduce using rule 76 (iniciarMap -> variable IGUAL NEW MAP OPEN_PARENTHESIS CLOSE_PARENTHESIS SEMICOLON .)
    COMMA           reduce using rule 76 (iniciarMap -> variable IGUAL NEW MAP OPEN_PARENTHESIS CLOSE_PARENTHESIS SEMICOLON .)


state 227

    (79) claveValor -> clave COLON valor COMMA . claveValor
    (78) claveValor -> . clave COLON valor
    (79) claveValor -> . clave COLON valor COMMA claveValor
    (80) clave -> . datatype
    (50) datatype -> . number
    (51) datatype -> . STRING
    (52) datatype -> . CHAR
    (53) datatype -> . operations
    (14) number -> . INTEGER
    (15) number -> . FLOAT
    (16) number -> . RESTA INTEGER
    (17) number -> . RESTA FLOAT
    (41) operations -> . number operand number
    (42) operations -> . NAME
    (43) operations -> . number
    (44) operations -> . number operand NAME operations
    (45) operations -> . NAME operand number operations
    (46) operations -> . number operand NAME
    (47) operations -> . NAME operand number
    (48) operations -> . NAME operand NAME operations
    (49) operations -> . number operand number operand operations

    STRING          shift and go to state 100
    CHAR            shift and go to state 65
    INTEGER         shift and go to state 45
    FLOAT           shift and go to state 46
    RESTA           shift and go to state 47
    NAME            shift and go to state 101

    clave                          shift and go to state 95
    claveValor                     shift and go to state 256
    datatype                       shift and go to state 97
    number                         shift and go to state 99
    operations                     shift and go to state 66

state 228

    (97) set -> NAME IGUAL . NEW SET OPEN_PARENTHESIS CLOSE_PARENTHESIS SEMICOLON
    (98) set -> NAME IGUAL . NEW SET OPEN_PARENTHESIS OPEN_BRACKET items CLOSE_BRACKET CLOSE_PARENTHESIS SEMICOLON
    (99) set -> NAME IGUAL . NEW SET OPEN_PARENTHESIS element CLOSE_PARENTHESIS SEMICOLON
    (20) variable -> NAME IGUAL . datatype SEMICOLON
    (50) datatype -> . number
    (51) datatype -> . STRING
    (52) datatype -> . CHAR
    (53) datatype -> . operations
    (14) number -> . INTEGER
    (15) number -> . FLOAT
    (16) number -> . RESTA INTEGER
    (17) number -> . RESTA FLOAT
    (41) operations -> . number operand number
    (42) operations -> . NAME
    (43) operations -> . number
    (44) operations -> . number operand NAME operations
    (45) operations -> . NAME operand number operations
    (46) operations -> . number operand NAME
    (47) operations -> . NAME operand number
    (48) operations -> . NAME operand NAME operations
    (49) operations -> . number operand number operand operations

    NEW             shift and go to state 62
    STRING          shift and go to state 100
    CHAR            shift and go to state 65
    INTEGER         shift and go to state 45
    FLOAT           shift and go to state 46
    RESTA           shift and go to state 47
    NAME            shift and go to state 101

    datatype                       shift and go to state 60
    number                         shift and go to state 99
    operations                     shift and go to state 66

state 229

    (71) array -> type NAME . IGUAL OPEN_BRACKET items CLOSE_BRACKET SEMICOLON
    (72) array -> type NAME . IGUAL NEW ARRAY OPEN_PARENTHESIS items CLOSE_PARENTHESIS SEMICOLON
    (94) set -> type NAME . IGUAL NEW SET OPEN_PARENTHESIS CLOSE_PARENTHESIS SEMICOLON
    (95) set -> type NAME . IGUAL NEW SET OPEN_PARENTHESIS OPEN_BRACKET items CLOSE_BRACKET CLOSE_PARENTHESIS SEMICOLON
    (96) set -> type NAME . IGUAL NEW SET OPEN_PARENTHESIS element CLOSE_PARENTHESIS SEMICOLON
    (18) variable -> type NAME . IGUAL datatype SEMICOLON
    (19) variable -> type NAME . IGUAL operations SEMICOLON

    IGUAL           shift and go to state 257


state 230

    (86) tupla -> OPEN_BRACKET datatype CLOSE_BRACKET SEMICOLON .

    COMMA           reduce using rule 86 (tupla -> OPEN_BRACKET datatype CLOSE_BRACKET SEMICOLON .)
    CLOSE_BRACE     reduce using rule 86 (tupla -> OPEN_BRACKET datatype CLOSE_BRACKET SEMICOLON .)


state 231

    (87) tupla -> OPEN_BRACKET datatype COMMA datatype . CLOSE_BRACKET SEMICOLON

    CLOSE_BRACKET   shift and go to state 258


state 232

    (71) array -> type NAME IGUAL OPEN_BRACKET items CLOSE_BRACKET SEMICOLON .

    NAME            reduce using rule 71 (array -> type NAME IGUAL OPEN_BRACKET items CLOSE_BRACKET SEMICOLON .)
    PRINT           reduce using rule 71 (array -> type NAME IGUAL OPEN_BRACKET items CLOSE_BRACKET SEMICOLON .)
    RETURN          reduce using rule 71 (array -> type NAME IGUAL OPEN_BRACKET items CLOSE_BRACKET SEMICOLON .)
    FUNCTION        reduce using rule 71 (array -> type NAME IGUAL OPEN_BRACKET items CLOSE_BRACKET SEMICOLON .)
    CONST           reduce using rule 71 (array -> type NAME IGUAL OPEN_BRACKET items CLOSE_BRACKET SEMICOLON .)
    LET             reduce using rule 71 (array -> type NAME IGUAL OPEN_BRACKET items CLOSE_BRACKET SEMICOLON .)
    VAR             reduce using rule 71 (array -> type NAME IGUAL OPEN_BRACKET items CLOSE_BRACKET SEMICOLON .)
    WHILE           reduce using rule 71 (array -> type NAME IGUAL OPEN_BRACKET items CLOSE_BRACKET SEMICOLON .)
    FOR             reduce using rule 71 (array -> type NAME IGUAL OPEN_BRACKET items CLOSE_BRACKET SEMICOLON .)
    IF              reduce using rule 71 (array -> type NAME IGUAL OPEN_BRACKET items CLOSE_BRACKET SEMICOLON .)
    $end            reduce using rule 71 (array -> type NAME IGUAL OPEN_BRACKET items CLOSE_BRACKET SEMICOLON .)
    CLOSE_BRACE     reduce using rule 71 (array -> type NAME IGUAL OPEN_BRACKET items CLOSE_BRACKET SEMICOLON .)
    COMMA           reduce using rule 71 (array -> type NAME IGUAL OPEN_BRACKET items CLOSE_BRACKET SEMICOLON .)


state 233

    (106) cadena -> STRING COMMA cadena .

    CLOSE_BRACKET   reduce using rule 106 (cadena -> STRING COMMA cadena .)
    CLOSE_PARENTHESIS reduce using rule 106 (cadena -> STRING COMMA cadena .)


state 234

    (72) array -> type NAME IGUAL NEW ARRAY OPEN_PARENTHESIS items . CLOSE_PARENTHESIS SEMICOLON

    CLOSE_PARENTHESIS shift and go to state 259


state 235

    (94) set -> type NAME IGUAL NEW SET OPEN_PARENTHESIS CLOSE_PARENTHESIS . SEMICOLON

    SEMICOLON       shift and go to state 260


state 236

    (95) set -> type NAME IGUAL NEW SET OPEN_PARENTHESIS OPEN_BRACKET . items CLOSE_BRACKET CLOSE_PARENTHESIS SEMICOLON
    (103) items -> . number
    (104) items -> . cadena
    (14) number -> . INTEGER
    (15) number -> . FLOAT
    (16) number -> . RESTA INTEGER
    (17) number -> . RESTA FLOAT
    (105) cadena -> . STRING
    (106) cadena -> . STRING COMMA cadena

    INTEGER         shift and go to state 45
    FLOAT           shift and go to state 46
    RESTA           shift and go to state 47
    STRING          shift and go to state 153

    items                          shift and go to state 261
    number                         shift and go to state 151
    cadena                         shift and go to state 152

state 237

    (96) set -> type NAME IGUAL NEW SET OPEN_PARENTHESIS element . CLOSE_PARENTHESIS SEMICOLON

    CLOSE_PARENTHESIS shift and go to state 262


state 238

    (97) set -> NAME IGUAL NEW SET OPEN_PARENTHESIS CLOSE_PARENTHESIS SEMICOLON .

    NAME            reduce using rule 97 (set -> NAME IGUAL NEW SET OPEN_PARENTHESIS CLOSE_PARENTHESIS SEMICOLON .)
    PRINT           reduce using rule 97 (set -> NAME IGUAL NEW SET OPEN_PARENTHESIS CLOSE_PARENTHESIS SEMICOLON .)
    RETURN          reduce using rule 97 (set -> NAME IGUAL NEW SET OPEN_PARENTHESIS CLOSE_PARENTHESIS SEMICOLON .)
    FUNCTION        reduce using rule 97 (set -> NAME IGUAL NEW SET OPEN_PARENTHESIS CLOSE_PARENTHESIS SEMICOLON .)
    CONST           reduce using rule 97 (set -> NAME IGUAL NEW SET OPEN_PARENTHESIS CLOSE_PARENTHESIS SEMICOLON .)
    LET             reduce using rule 97 (set -> NAME IGUAL NEW SET OPEN_PARENTHESIS CLOSE_PARENTHESIS SEMICOLON .)
    VAR             reduce using rule 97 (set -> NAME IGUAL NEW SET OPEN_PARENTHESIS CLOSE_PARENTHESIS SEMICOLON .)
    WHILE           reduce using rule 97 (set -> NAME IGUAL NEW SET OPEN_PARENTHESIS CLOSE_PARENTHESIS SEMICOLON .)
    FOR             reduce using rule 97 (set -> NAME IGUAL NEW SET OPEN_PARENTHESIS CLOSE_PARENTHESIS SEMICOLON .)
    IF              reduce using rule 97 (set -> NAME IGUAL NEW SET OPEN_PARENTHESIS CLOSE_PARENTHESIS SEMICOLON .)
    $end            reduce using rule 97 (set -> NAME IGUAL NEW SET OPEN_PARENTHESIS CLOSE_PARENTHESIS SEMICOLON .)
    CLOSE_BRACE     reduce using rule 97 (set -> NAME IGUAL NEW SET OPEN_PARENTHESIS CLOSE_PARENTHESIS SEMICOLON .)
    COMMA           reduce using rule 97 (set -> NAME IGUAL NEW SET OPEN_PARENTHESIS CLOSE_PARENTHESIS SEMICOLON .)


state 239

    (98) set -> NAME IGUAL NEW SET OPEN_PARENTHESIS OPEN_BRACKET items . CLOSE_BRACKET CLOSE_PARENTHESIS SEMICOLON

    CLOSE_BRACKET   shift and go to state 263


state 240

    (99) set -> NAME IGUAL NEW SET OPEN_PARENTHESIS element CLOSE_PARENTHESIS . SEMICOLON

    SEMICOLON       shift and go to state 264


state 241

    (49) operations -> number operand number operand operations .

    SEMICOLON       reduce using rule 49 (operations -> number operand number operand operations .)
    COLON           reduce using rule 49 (operations -> number operand number operand operations .)
    CLOSE_BRACKET   reduce using rule 49 (operations -> number operand number operand operations .)
    COMMA           reduce using rule 49 (operations -> number operand number operand operations .)
    CLOSE_PARENTHESIS reduce using rule 49 (operations -> number operand number operand operations .)
    CLOSE_BRACE     reduce using rule 49 (operations -> number operand number operand operations .)


state 242

    (100) methodsSet -> NAME POINT ADD OPEN_PARENTHESIS element CLOSE_PARENTHESIS SEMICOLON .

    $end            reduce using rule 100 (methodsSet -> NAME POINT ADD OPEN_PARENTHESIS element CLOSE_PARENTHESIS SEMICOLON .)
    CLOSE_BRACE     reduce using rule 100 (methodsSet -> NAME POINT ADD OPEN_PARENTHESIS element CLOSE_PARENTHESIS SEMICOLON .)


state 243

    (101) methodsSet -> NAME POINT DELETE OPEN_PARENTHESIS element CLOSE_PARENTHESIS SEMICOLON .

    $end            reduce using rule 101 (methodsSet -> NAME POINT DELETE OPEN_PARENTHESIS element CLOSE_PARENTHESIS SEMICOLON .)
    CLOSE_BRACE     reduce using rule 101 (methodsSet -> NAME POINT DELETE OPEN_PARENTHESIS element CLOSE_PARENTHESIS SEMICOLON .)


state 244

    (89) mapFunctions -> NAME POINT GET OPEN_PARENTHESIS clave CLOSE_PARENTHESIS SEMICOLON .

    $end            reduce using rule 89 (mapFunctions -> NAME POINT GET OPEN_PARENTHESIS clave CLOSE_PARENTHESIS SEMICOLON .)
    CLOSE_BRACE     reduce using rule 89 (mapFunctions -> NAME POINT GET OPEN_PARENTHESIS clave CLOSE_PARENTHESIS SEMICOLON .)


state 245

    (90) mapFunctions -> NAME POINT HAS OPEN_PARENTHESIS clave CLOSE_PARENTHESIS SEMICOLON .

    $end            reduce using rule 90 (mapFunctions -> NAME POINT HAS OPEN_PARENTHESIS clave CLOSE_PARENTHESIS SEMICOLON .)
    CLOSE_BRACE     reduce using rule 90 (mapFunctions -> NAME POINT HAS OPEN_PARENTHESIS clave CLOSE_PARENTHESIS SEMICOLON .)


state 246

    (92) arrayFn -> NAME POINT PUSH OPEN_PARENTHESIS element CLOSE_PARENTHESIS SEMICOLON .

    $end            reduce using rule 92 (arrayFn -> NAME POINT PUSH OPEN_PARENTHESIS element CLOSE_PARENTHESIS SEMICOLON .)
    CLOSE_BRACE     reduce using rule 92 (arrayFn -> NAME POINT PUSH OPEN_PARENTHESIS element CLOSE_PARENTHESIS SEMICOLON .)


state 247

    (93) arrayFn -> NAME POINT UNSHIFT OPEN_PARENTHESIS element CLOSE_PARENTHESIS SEMICOLON .

    $end            reduce using rule 93 (arrayFn -> NAME POINT UNSHIFT OPEN_PARENTHESIS element CLOSE_PARENTHESIS SEMICOLON .)
    CLOSE_BRACE     reduce using rule 93 (arrayFn -> NAME POINT UNSHIFT OPEN_PARENTHESIS element CLOSE_PARENTHESIS SEMICOLON .)


state 248

    (117) function -> FUNCTION NAME OPEN_PARENTHESIS CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE .

    $end            reduce using rule 117 (function -> FUNCTION NAME OPEN_PARENTHESIS CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE .)
    CLOSE_BRACE     reduce using rule 117 (function -> FUNCTION NAME OPEN_PARENTHESIS CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE .)


state 249

    (118) function -> FUNCTION NAME OPEN_PARENTHESIS parameter CLOSE_PARENTHESIS OPEN_BRACE expression . CLOSE_BRACE

    CLOSE_BRACE     shift and go to state 265


state 250

    (27) while -> WHILE OPEN_PARENTHESIS controlArg CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE .

    NAME            reduce using rule 27 (while -> WHILE OPEN_PARENTHESIS controlArg CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE .)
    PRINT           reduce using rule 27 (while -> WHILE OPEN_PARENTHESIS controlArg CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE .)
    RETURN          reduce using rule 27 (while -> WHILE OPEN_PARENTHESIS controlArg CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE .)
    FUNCTION        reduce using rule 27 (while -> WHILE OPEN_PARENTHESIS controlArg CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE .)
    CONST           reduce using rule 27 (while -> WHILE OPEN_PARENTHESIS controlArg CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE .)
    LET             reduce using rule 27 (while -> WHILE OPEN_PARENTHESIS controlArg CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE .)
    VAR             reduce using rule 27 (while -> WHILE OPEN_PARENTHESIS controlArg CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE .)
    WHILE           reduce using rule 27 (while -> WHILE OPEN_PARENTHESIS controlArg CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE .)
    FOR             reduce using rule 27 (while -> WHILE OPEN_PARENTHESIS controlArg CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE .)
    IF              reduce using rule 27 (while -> WHILE OPEN_PARENTHESIS controlArg CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE .)
    $end            reduce using rule 27 (while -> WHILE OPEN_PARENTHESIS controlArg CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE .)
    CLOSE_BRACE     reduce using rule 27 (while -> WHILE OPEN_PARENTHESIS controlArg CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE .)


state 251

    (28) while -> WHILE OPEN_PARENTHESIS bool CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE .

    NAME            reduce using rule 28 (while -> WHILE OPEN_PARENTHESIS bool CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE .)
    PRINT           reduce using rule 28 (while -> WHILE OPEN_PARENTHESIS bool CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE .)
    RETURN          reduce using rule 28 (while -> WHILE OPEN_PARENTHESIS bool CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE .)
    FUNCTION        reduce using rule 28 (while -> WHILE OPEN_PARENTHESIS bool CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE .)
    CONST           reduce using rule 28 (while -> WHILE OPEN_PARENTHESIS bool CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE .)
    LET             reduce using rule 28 (while -> WHILE OPEN_PARENTHESIS bool CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE .)
    VAR             reduce using rule 28 (while -> WHILE OPEN_PARENTHESIS bool CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE .)
    WHILE           reduce using rule 28 (while -> WHILE OPEN_PARENTHESIS bool CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE .)
    FOR             reduce using rule 28 (while -> WHILE OPEN_PARENTHESIS bool CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE .)
    IF              reduce using rule 28 (while -> WHILE OPEN_PARENTHESIS bool CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE .)
    $end            reduce using rule 28 (while -> WHILE OPEN_PARENTHESIS bool CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE .)
    CLOSE_BRACE     reduce using rule 28 (while -> WHILE OPEN_PARENTHESIS bool CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE .)


state 252

    (38) for -> FOR OPEN_PARENTHESIS inicialization SEMICOLON expBoolean SEMICOLON operations . CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE

    CLOSE_PARENTHESIS shift and go to state 266


state 253

    (116) expBoolean -> expBoolean logicalOperator expBoolean .
    (116) expBoolean -> expBoolean . logicalOperator expBoolean
    (111) logicalOperator -> . AND
    (112) logicalOperator -> . OR

  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
    SEMICOLON       reduce using rule 116 (expBoolean -> expBoolean logicalOperator expBoolean .)
    AND             shift and go to state 220
    OR              shift and go to state 221

  ! AND             [ reduce using rule 116 (expBoolean -> expBoolean logicalOperator expBoolean .) ]
  ! OR              [ reduce using rule 116 (expBoolean -> expBoolean logicalOperator expBoolean .) ]

    logicalOperator                shift and go to state 219

state 254

    (34) elseIf -> ELSEIF OPEN_PARENTHESIS controlArg CLOSE_PARENTHESIS OPEN_BRACE expression . CLOSE_BRACE
    (35) elseIf -> ELSEIF OPEN_PARENTHESIS controlArg CLOSE_PARENTHESIS OPEN_BRACE expression . CLOSE_BRACE soloIf

    CLOSE_BRACE     shift and go to state 267


state 255

    (33) soloIf -> IF OPEN_PARENTHESIS controlArg CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE .

    ELSEIF          reduce using rule 33 (soloIf -> IF OPEN_PARENTHESIS controlArg CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE .)
    ELSE            reduce using rule 33 (soloIf -> IF OPEN_PARENTHESIS controlArg CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE .)
    NAME            reduce using rule 33 (soloIf -> IF OPEN_PARENTHESIS controlArg CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE .)
    PRINT           reduce using rule 33 (soloIf -> IF OPEN_PARENTHESIS controlArg CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE .)
    RETURN          reduce using rule 33 (soloIf -> IF OPEN_PARENTHESIS controlArg CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE .)
    FUNCTION        reduce using rule 33 (soloIf -> IF OPEN_PARENTHESIS controlArg CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE .)
    CONST           reduce using rule 33 (soloIf -> IF OPEN_PARENTHESIS controlArg CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE .)
    LET             reduce using rule 33 (soloIf -> IF OPEN_PARENTHESIS controlArg CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE .)
    VAR             reduce using rule 33 (soloIf -> IF OPEN_PARENTHESIS controlArg CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE .)
    WHILE           reduce using rule 33 (soloIf -> IF OPEN_PARENTHESIS controlArg CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE .)
    FOR             reduce using rule 33 (soloIf -> IF OPEN_PARENTHESIS controlArg CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE .)
    IF              reduce using rule 33 (soloIf -> IF OPEN_PARENTHESIS controlArg CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE .)
    $end            reduce using rule 33 (soloIf -> IF OPEN_PARENTHESIS controlArg CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE .)
    CLOSE_BRACE     reduce using rule 33 (soloIf -> IF OPEN_PARENTHESIS controlArg CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE .)


state 256

    (79) claveValor -> clave COLON valor COMMA claveValor .

    CLOSE_BRACE     reduce using rule 79 (claveValor -> clave COLON valor COMMA claveValor .)


state 257

    (71) array -> type NAME IGUAL . OPEN_BRACKET items CLOSE_BRACKET SEMICOLON
    (72) array -> type NAME IGUAL . NEW ARRAY OPEN_PARENTHESIS items CLOSE_PARENTHESIS SEMICOLON
    (94) set -> type NAME IGUAL . NEW SET OPEN_PARENTHESIS CLOSE_PARENTHESIS SEMICOLON
    (95) set -> type NAME IGUAL . NEW SET OPEN_PARENTHESIS OPEN_BRACKET items CLOSE_BRACKET CLOSE_PARENTHESIS SEMICOLON
    (96) set -> type NAME IGUAL . NEW SET OPEN_PARENTHESIS element CLOSE_PARENTHESIS SEMICOLON
    (18) variable -> type NAME IGUAL . datatype SEMICOLON
    (19) variable -> type NAME IGUAL . operations SEMICOLON
    (50) datatype -> . number
    (51) datatype -> . STRING
    (52) datatype -> . CHAR
    (53) datatype -> . operations
    (41) operations -> . number operand number
    (42) operations -> . NAME
    (43) operations -> . number
    (44) operations -> . number operand NAME operations
    (45) operations -> . NAME operand number operations
    (46) operations -> . number operand NAME
    (47) operations -> . NAME operand number
    (48) operations -> . NAME operand NAME operations
    (49) operations -> . number operand number operand operations
    (14) number -> . INTEGER
    (15) number -> . FLOAT
    (16) number -> . RESTA INTEGER
    (17) number -> . RESTA FLOAT

    OPEN_BRACKET    shift and go to state 104
    NEW             shift and go to state 105
    STRING          shift and go to state 100
    CHAR            shift and go to state 65
    NAME            shift and go to state 101
    INTEGER         shift and go to state 45
    FLOAT           shift and go to state 46
    RESTA           shift and go to state 47

    datatype                       shift and go to state 102
    operations                     shift and go to state 103
    number                         shift and go to state 99

state 258

    (87) tupla -> OPEN_BRACKET datatype COMMA datatype CLOSE_BRACKET . SEMICOLON

    SEMICOLON       shift and go to state 268


state 259

    (72) array -> type NAME IGUAL NEW ARRAY OPEN_PARENTHESIS items CLOSE_PARENTHESIS . SEMICOLON

    SEMICOLON       shift and go to state 269


state 260

    (94) set -> type NAME IGUAL NEW SET OPEN_PARENTHESIS CLOSE_PARENTHESIS SEMICOLON .

    NAME            reduce using rule 94 (set -> type NAME IGUAL NEW SET OPEN_PARENTHESIS CLOSE_PARENTHESIS SEMICOLON .)
    PRINT           reduce using rule 94 (set -> type NAME IGUAL NEW SET OPEN_PARENTHESIS CLOSE_PARENTHESIS SEMICOLON .)
    RETURN          reduce using rule 94 (set -> type NAME IGUAL NEW SET OPEN_PARENTHESIS CLOSE_PARENTHESIS SEMICOLON .)
    FUNCTION        reduce using rule 94 (set -> type NAME IGUAL NEW SET OPEN_PARENTHESIS CLOSE_PARENTHESIS SEMICOLON .)
    CONST           reduce using rule 94 (set -> type NAME IGUAL NEW SET OPEN_PARENTHESIS CLOSE_PARENTHESIS SEMICOLON .)
    LET             reduce using rule 94 (set -> type NAME IGUAL NEW SET OPEN_PARENTHESIS CLOSE_PARENTHESIS SEMICOLON .)
    VAR             reduce using rule 94 (set -> type NAME IGUAL NEW SET OPEN_PARENTHESIS CLOSE_PARENTHESIS SEMICOLON .)
    WHILE           reduce using rule 94 (set -> type NAME IGUAL NEW SET OPEN_PARENTHESIS CLOSE_PARENTHESIS SEMICOLON .)
    FOR             reduce using rule 94 (set -> type NAME IGUAL NEW SET OPEN_PARENTHESIS CLOSE_PARENTHESIS SEMICOLON .)
    IF              reduce using rule 94 (set -> type NAME IGUAL NEW SET OPEN_PARENTHESIS CLOSE_PARENTHESIS SEMICOLON .)
    $end            reduce using rule 94 (set -> type NAME IGUAL NEW SET OPEN_PARENTHESIS CLOSE_PARENTHESIS SEMICOLON .)
    CLOSE_BRACE     reduce using rule 94 (set -> type NAME IGUAL NEW SET OPEN_PARENTHESIS CLOSE_PARENTHESIS SEMICOLON .)
    COMMA           reduce using rule 94 (set -> type NAME IGUAL NEW SET OPEN_PARENTHESIS CLOSE_PARENTHESIS SEMICOLON .)


state 261

    (95) set -> type NAME IGUAL NEW SET OPEN_PARENTHESIS OPEN_BRACKET items . CLOSE_BRACKET CLOSE_PARENTHESIS SEMICOLON

    CLOSE_BRACKET   shift and go to state 270


state 262

    (96) set -> type NAME IGUAL NEW SET OPEN_PARENTHESIS element CLOSE_PARENTHESIS . SEMICOLON

    SEMICOLON       shift and go to state 271


state 263

    (98) set -> NAME IGUAL NEW SET OPEN_PARENTHESIS OPEN_BRACKET items CLOSE_BRACKET . CLOSE_PARENTHESIS SEMICOLON

    CLOSE_PARENTHESIS shift and go to state 272


state 264

    (99) set -> NAME IGUAL NEW SET OPEN_PARENTHESIS element CLOSE_PARENTHESIS SEMICOLON .

    NAME            reduce using rule 99 (set -> NAME IGUAL NEW SET OPEN_PARENTHESIS element CLOSE_PARENTHESIS SEMICOLON .)
    PRINT           reduce using rule 99 (set -> NAME IGUAL NEW SET OPEN_PARENTHESIS element CLOSE_PARENTHESIS SEMICOLON .)
    RETURN          reduce using rule 99 (set -> NAME IGUAL NEW SET OPEN_PARENTHESIS element CLOSE_PARENTHESIS SEMICOLON .)
    FUNCTION        reduce using rule 99 (set -> NAME IGUAL NEW SET OPEN_PARENTHESIS element CLOSE_PARENTHESIS SEMICOLON .)
    CONST           reduce using rule 99 (set -> NAME IGUAL NEW SET OPEN_PARENTHESIS element CLOSE_PARENTHESIS SEMICOLON .)
    LET             reduce using rule 99 (set -> NAME IGUAL NEW SET OPEN_PARENTHESIS element CLOSE_PARENTHESIS SEMICOLON .)
    VAR             reduce using rule 99 (set -> NAME IGUAL NEW SET OPEN_PARENTHESIS element CLOSE_PARENTHESIS SEMICOLON .)
    WHILE           reduce using rule 99 (set -> NAME IGUAL NEW SET OPEN_PARENTHESIS element CLOSE_PARENTHESIS SEMICOLON .)
    FOR             reduce using rule 99 (set -> NAME IGUAL NEW SET OPEN_PARENTHESIS element CLOSE_PARENTHESIS SEMICOLON .)
    IF              reduce using rule 99 (set -> NAME IGUAL NEW SET OPEN_PARENTHESIS element CLOSE_PARENTHESIS SEMICOLON .)
    $end            reduce using rule 99 (set -> NAME IGUAL NEW SET OPEN_PARENTHESIS element CLOSE_PARENTHESIS SEMICOLON .)
    CLOSE_BRACE     reduce using rule 99 (set -> NAME IGUAL NEW SET OPEN_PARENTHESIS element CLOSE_PARENTHESIS SEMICOLON .)
    COMMA           reduce using rule 99 (set -> NAME IGUAL NEW SET OPEN_PARENTHESIS element CLOSE_PARENTHESIS SEMICOLON .)


state 265

    (118) function -> FUNCTION NAME OPEN_PARENTHESIS parameter CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE .

    $end            reduce using rule 118 (function -> FUNCTION NAME OPEN_PARENTHESIS parameter CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE .)
    CLOSE_BRACE     reduce using rule 118 (function -> FUNCTION NAME OPEN_PARENTHESIS parameter CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE .)


state 266

    (38) for -> FOR OPEN_PARENTHESIS inicialization SEMICOLON expBoolean SEMICOLON operations CLOSE_PARENTHESIS . OPEN_BRACE expression CLOSE_BRACE

    OPEN_BRACE      shift and go to state 273


state 267

    (34) elseIf -> ELSEIF OPEN_PARENTHESIS controlArg CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE .
    (35) elseIf -> ELSEIF OPEN_PARENTHESIS controlArg CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE . soloIf
    (33) soloIf -> . IF OPEN_PARENTHESIS controlArg CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE

  ! shift/reduce conflict for IF resolved as shift
    ELSE            reduce using rule 34 (elseIf -> ELSEIF OPEN_PARENTHESIS controlArg CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE .)
    NAME            reduce using rule 34 (elseIf -> ELSEIF OPEN_PARENTHESIS controlArg CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE .)
    PRINT           reduce using rule 34 (elseIf -> ELSEIF OPEN_PARENTHESIS controlArg CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE .)
    RETURN          reduce using rule 34 (elseIf -> ELSEIF OPEN_PARENTHESIS controlArg CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE .)
    FUNCTION        reduce using rule 34 (elseIf -> ELSEIF OPEN_PARENTHESIS controlArg CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE .)
    CONST           reduce using rule 34 (elseIf -> ELSEIF OPEN_PARENTHESIS controlArg CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE .)
    LET             reduce using rule 34 (elseIf -> ELSEIF OPEN_PARENTHESIS controlArg CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE .)
    VAR             reduce using rule 34 (elseIf -> ELSEIF OPEN_PARENTHESIS controlArg CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE .)
    WHILE           reduce using rule 34 (elseIf -> ELSEIF OPEN_PARENTHESIS controlArg CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE .)
    FOR             reduce using rule 34 (elseIf -> ELSEIF OPEN_PARENTHESIS controlArg CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE .)
    $end            reduce using rule 34 (elseIf -> ELSEIF OPEN_PARENTHESIS controlArg CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE .)
    CLOSE_BRACE     reduce using rule 34 (elseIf -> ELSEIF OPEN_PARENTHESIS controlArg CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE .)
    IF              shift and go to state 32

  ! IF              [ reduce using rule 34 (elseIf -> ELSEIF OPEN_PARENTHESIS controlArg CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE .) ]

    soloIf                         shift and go to state 274

state 268

    (87) tupla -> OPEN_BRACKET datatype COMMA datatype CLOSE_BRACKET SEMICOLON .

    COMMA           reduce using rule 87 (tupla -> OPEN_BRACKET datatype COMMA datatype CLOSE_BRACKET SEMICOLON .)
    CLOSE_BRACE     reduce using rule 87 (tupla -> OPEN_BRACKET datatype COMMA datatype CLOSE_BRACKET SEMICOLON .)


state 269

    (72) array -> type NAME IGUAL NEW ARRAY OPEN_PARENTHESIS items CLOSE_PARENTHESIS SEMICOLON .

    NAME            reduce using rule 72 (array -> type NAME IGUAL NEW ARRAY OPEN_PARENTHESIS items CLOSE_PARENTHESIS SEMICOLON .)
    PRINT           reduce using rule 72 (array -> type NAME IGUAL NEW ARRAY OPEN_PARENTHESIS items CLOSE_PARENTHESIS SEMICOLON .)
    RETURN          reduce using rule 72 (array -> type NAME IGUAL NEW ARRAY OPEN_PARENTHESIS items CLOSE_PARENTHESIS SEMICOLON .)
    FUNCTION        reduce using rule 72 (array -> type NAME IGUAL NEW ARRAY OPEN_PARENTHESIS items CLOSE_PARENTHESIS SEMICOLON .)
    CONST           reduce using rule 72 (array -> type NAME IGUAL NEW ARRAY OPEN_PARENTHESIS items CLOSE_PARENTHESIS SEMICOLON .)
    LET             reduce using rule 72 (array -> type NAME IGUAL NEW ARRAY OPEN_PARENTHESIS items CLOSE_PARENTHESIS SEMICOLON .)
    VAR             reduce using rule 72 (array -> type NAME IGUAL NEW ARRAY OPEN_PARENTHESIS items CLOSE_PARENTHESIS SEMICOLON .)
    WHILE           reduce using rule 72 (array -> type NAME IGUAL NEW ARRAY OPEN_PARENTHESIS items CLOSE_PARENTHESIS SEMICOLON .)
    FOR             reduce using rule 72 (array -> type NAME IGUAL NEW ARRAY OPEN_PARENTHESIS items CLOSE_PARENTHESIS SEMICOLON .)
    IF              reduce using rule 72 (array -> type NAME IGUAL NEW ARRAY OPEN_PARENTHESIS items CLOSE_PARENTHESIS SEMICOLON .)
    $end            reduce using rule 72 (array -> type NAME IGUAL NEW ARRAY OPEN_PARENTHESIS items CLOSE_PARENTHESIS SEMICOLON .)
    CLOSE_BRACE     reduce using rule 72 (array -> type NAME IGUAL NEW ARRAY OPEN_PARENTHESIS items CLOSE_PARENTHESIS SEMICOLON .)
    COMMA           reduce using rule 72 (array -> type NAME IGUAL NEW ARRAY OPEN_PARENTHESIS items CLOSE_PARENTHESIS SEMICOLON .)


state 270

    (95) set -> type NAME IGUAL NEW SET OPEN_PARENTHESIS OPEN_BRACKET items CLOSE_BRACKET . CLOSE_PARENTHESIS SEMICOLON

    CLOSE_PARENTHESIS shift and go to state 275


state 271

    (96) set -> type NAME IGUAL NEW SET OPEN_PARENTHESIS element CLOSE_PARENTHESIS SEMICOLON .

    NAME            reduce using rule 96 (set -> type NAME IGUAL NEW SET OPEN_PARENTHESIS element CLOSE_PARENTHESIS SEMICOLON .)
    PRINT           reduce using rule 96 (set -> type NAME IGUAL NEW SET OPEN_PARENTHESIS element CLOSE_PARENTHESIS SEMICOLON .)
    RETURN          reduce using rule 96 (set -> type NAME IGUAL NEW SET OPEN_PARENTHESIS element CLOSE_PARENTHESIS SEMICOLON .)
    FUNCTION        reduce using rule 96 (set -> type NAME IGUAL NEW SET OPEN_PARENTHESIS element CLOSE_PARENTHESIS SEMICOLON .)
    CONST           reduce using rule 96 (set -> type NAME IGUAL NEW SET OPEN_PARENTHESIS element CLOSE_PARENTHESIS SEMICOLON .)
    LET             reduce using rule 96 (set -> type NAME IGUAL NEW SET OPEN_PARENTHESIS element CLOSE_PARENTHESIS SEMICOLON .)
    VAR             reduce using rule 96 (set -> type NAME IGUAL NEW SET OPEN_PARENTHESIS element CLOSE_PARENTHESIS SEMICOLON .)
    WHILE           reduce using rule 96 (set -> type NAME IGUAL NEW SET OPEN_PARENTHESIS element CLOSE_PARENTHESIS SEMICOLON .)
    FOR             reduce using rule 96 (set -> type NAME IGUAL NEW SET OPEN_PARENTHESIS element CLOSE_PARENTHESIS SEMICOLON .)
    IF              reduce using rule 96 (set -> type NAME IGUAL NEW SET OPEN_PARENTHESIS element CLOSE_PARENTHESIS SEMICOLON .)
    $end            reduce using rule 96 (set -> type NAME IGUAL NEW SET OPEN_PARENTHESIS element CLOSE_PARENTHESIS SEMICOLON .)
    CLOSE_BRACE     reduce using rule 96 (set -> type NAME IGUAL NEW SET OPEN_PARENTHESIS element CLOSE_PARENTHESIS SEMICOLON .)
    COMMA           reduce using rule 96 (set -> type NAME IGUAL NEW SET OPEN_PARENTHESIS element CLOSE_PARENTHESIS SEMICOLON .)


state 272

    (98) set -> NAME IGUAL NEW SET OPEN_PARENTHESIS OPEN_BRACKET items CLOSE_BRACKET CLOSE_PARENTHESIS . SEMICOLON

    SEMICOLON       shift and go to state 276


state 273

    (38) for -> FOR OPEN_PARENTHESIS inicialization SEMICOLON expBoolean SEMICOLON operations CLOSE_PARENTHESIS OPEN_BRACE . expression CLOSE_BRACE
    (1) expression -> . variable
    (2) expression -> . variable expression
    (3) expression -> . dataStruct
    (4) expression -> . dataStruct expression
    (5) expression -> . controlStruct
    (6) expression -> . controlStruct expression
    (7) expression -> . methodsSet
    (8) expression -> . mapFunctions
    (9) expression -> . arrayFn
    (10) expression -> . declaration
    (11) expression -> . print
    (12) expression -> . return
    (13) expression -> . function
    (18) variable -> . type NAME IGUAL datatype SEMICOLON
    (19) variable -> . type NAME IGUAL operations SEMICOLON
    (20) variable -> . NAME IGUAL datatype SEMICOLON
    (24) dataStruct -> . array
    (25) dataStruct -> . set
    (26) dataStruct -> . map
    (21) controlStruct -> . while
    (22) controlStruct -> . for
    (23) controlStruct -> . if
    (100) methodsSet -> . NAME POINT ADD OPEN_PARENTHESIS element CLOSE_PARENTHESIS SEMICOLON
    (101) methodsSet -> . NAME POINT DELETE OPEN_PARENTHESIS element CLOSE_PARENTHESIS SEMICOLON
    (102) methodsSet -> . NAME POINT CLEAR OPEN_PARENTHESIS CLOSE_PARENTHESIS SEMICOLON
    (88) mapFunctions -> . NAME POINT CLEAR OPEN_PARENTHESIS CLOSE_PARENTHESIS SEMICOLON
    (89) mapFunctions -> . NAME POINT GET OPEN_PARENTHESIS clave CLOSE_PARENTHESIS SEMICOLON
    (90) mapFunctions -> . NAME POINT HAS OPEN_PARENTHESIS clave CLOSE_PARENTHESIS SEMICOLON
    (91) arrayFn -> . NAME POINT POP OPEN_PARENTHESIS CLOSE_PARENTHESIS SEMICOLON
    (92) arrayFn -> . NAME POINT PUSH OPEN_PARENTHESIS element CLOSE_PARENTHESIS SEMICOLON
    (93) arrayFn -> . NAME POINT UNSHIFT OPEN_PARENTHESIS element CLOSE_PARENTHESIS SEMICOLON
    (110) declaration -> . NAME IGUAL element SEMICOLON
    (122) print -> . PRINT OPEN_PARENTHESIS CLOSE_PARENTHESIS SEMICOLON
    (121) return -> . RETURN element SEMICOLON
    (117) function -> . FUNCTION NAME OPEN_PARENTHESIS CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE
    (118) function -> . FUNCTION NAME OPEN_PARENTHESIS parameter CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE
    (60) type -> . CONST
    (61) type -> . LET
    (62) type -> . VAR
    (71) array -> . type NAME IGUAL OPEN_BRACKET items CLOSE_BRACKET SEMICOLON
    (72) array -> . type NAME IGUAL NEW ARRAY OPEN_PARENTHESIS items CLOSE_PARENTHESIS SEMICOLON
    (94) set -> . type NAME IGUAL NEW SET OPEN_PARENTHESIS CLOSE_PARENTHESIS SEMICOLON
    (95) set -> . type NAME IGUAL NEW SET OPEN_PARENTHESIS OPEN_BRACKET items CLOSE_BRACKET CLOSE_PARENTHESIS SEMICOLON
    (96) set -> . type NAME IGUAL NEW SET OPEN_PARENTHESIS element CLOSE_PARENTHESIS SEMICOLON
    (97) set -> . NAME IGUAL NEW SET OPEN_PARENTHESIS CLOSE_PARENTHESIS SEMICOLON
    (98) set -> . NAME IGUAL NEW SET OPEN_PARENTHESIS OPEN_BRACKET items CLOSE_BRACKET CLOSE_PARENTHESIS SEMICOLON
    (99) set -> . NAME IGUAL NEW SET OPEN_PARENTHESIS element CLOSE_PARENTHESIS SEMICOLON
    (73) map -> . iniciarMap
    (74) map -> . escribirMap
    (75) map -> . generarMap
    (27) while -> . WHILE OPEN_PARENTHESIS controlArg CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE
    (28) while -> . WHILE OPEN_PARENTHESIS bool CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE
    (38) for -> . FOR OPEN_PARENTHESIS inicialization SEMICOLON expBoolean SEMICOLON operations CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE
    (29) if -> . soloIf
    (30) if -> . soloIf elseIf
    (31) if -> . soloIf elseIf else
    (32) if -> . soloIf else
    (76) iniciarMap -> . variable IGUAL NEW MAP OPEN_PARENTHESIS CLOSE_PARENTHESIS SEMICOLON
    (77) escribirMap -> . variable IGUAL OPEN_BRACE claveValor CLOSE_BRACE
    (83) generarMap -> . variable IGUAL OPEN_BRACE tuplas CLOSE_BRACE
    (33) soloIf -> . IF OPEN_PARENTHESIS controlArg CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE

    NAME            shift and go to state 13
    PRINT           shift and go to state 20
    RETURN          shift and go to state 21
    FUNCTION        shift and go to state 22
    CONST           shift and go to state 23
    LET             shift and go to state 24
    VAR             shift and go to state 25
    WHILE           shift and go to state 29
    FOR             shift and go to state 30
    IF              shift and go to state 32

    expression                     shift and go to state 277
    variable                       shift and go to state 2
    dataStruct                     shift and go to state 3
    controlStruct                  shift and go to state 4
    methodsSet                     shift and go to state 5
    mapFunctions                   shift and go to state 6
    arrayFn                        shift and go to state 7
    declaration                    shift and go to state 8
    print                          shift and go to state 9
    return                         shift and go to state 10
    function                       shift and go to state 11
    type                           shift and go to state 12
    array                          shift and go to state 14
    set                            shift and go to state 15
    map                            shift and go to state 16
    while                          shift and go to state 17
    for                            shift and go to state 18
    if                             shift and go to state 19
    iniciarMap                     shift and go to state 26
    escribirMap                    shift and go to state 27
    generarMap                     shift and go to state 28
    soloIf                         shift and go to state 31

state 274

    (35) elseIf -> ELSEIF OPEN_PARENTHESIS controlArg CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE soloIf .

    ELSE            reduce using rule 35 (elseIf -> ELSEIF OPEN_PARENTHESIS controlArg CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE soloIf .)
    NAME            reduce using rule 35 (elseIf -> ELSEIF OPEN_PARENTHESIS controlArg CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE soloIf .)
    PRINT           reduce using rule 35 (elseIf -> ELSEIF OPEN_PARENTHESIS controlArg CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE soloIf .)
    RETURN          reduce using rule 35 (elseIf -> ELSEIF OPEN_PARENTHESIS controlArg CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE soloIf .)
    FUNCTION        reduce using rule 35 (elseIf -> ELSEIF OPEN_PARENTHESIS controlArg CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE soloIf .)
    CONST           reduce using rule 35 (elseIf -> ELSEIF OPEN_PARENTHESIS controlArg CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE soloIf .)
    LET             reduce using rule 35 (elseIf -> ELSEIF OPEN_PARENTHESIS controlArg CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE soloIf .)
    VAR             reduce using rule 35 (elseIf -> ELSEIF OPEN_PARENTHESIS controlArg CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE soloIf .)
    WHILE           reduce using rule 35 (elseIf -> ELSEIF OPEN_PARENTHESIS controlArg CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE soloIf .)
    FOR             reduce using rule 35 (elseIf -> ELSEIF OPEN_PARENTHESIS controlArg CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE soloIf .)
    IF              reduce using rule 35 (elseIf -> ELSEIF OPEN_PARENTHESIS controlArg CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE soloIf .)
    $end            reduce using rule 35 (elseIf -> ELSEIF OPEN_PARENTHESIS controlArg CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE soloIf .)
    CLOSE_BRACE     reduce using rule 35 (elseIf -> ELSEIF OPEN_PARENTHESIS controlArg CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE soloIf .)


state 275

    (95) set -> type NAME IGUAL NEW SET OPEN_PARENTHESIS OPEN_BRACKET items CLOSE_BRACKET CLOSE_PARENTHESIS . SEMICOLON

    SEMICOLON       shift and go to state 278


state 276

    (98) set -> NAME IGUAL NEW SET OPEN_PARENTHESIS OPEN_BRACKET items CLOSE_BRACKET CLOSE_PARENTHESIS SEMICOLON .

    NAME            reduce using rule 98 (set -> NAME IGUAL NEW SET OPEN_PARENTHESIS OPEN_BRACKET items CLOSE_BRACKET CLOSE_PARENTHESIS SEMICOLON .)
    PRINT           reduce using rule 98 (set -> NAME IGUAL NEW SET OPEN_PARENTHESIS OPEN_BRACKET items CLOSE_BRACKET CLOSE_PARENTHESIS SEMICOLON .)
    RETURN          reduce using rule 98 (set -> NAME IGUAL NEW SET OPEN_PARENTHESIS OPEN_BRACKET items CLOSE_BRACKET CLOSE_PARENTHESIS SEMICOLON .)
    FUNCTION        reduce using rule 98 (set -> NAME IGUAL NEW SET OPEN_PARENTHESIS OPEN_BRACKET items CLOSE_BRACKET CLOSE_PARENTHESIS SEMICOLON .)
    CONST           reduce using rule 98 (set -> NAME IGUAL NEW SET OPEN_PARENTHESIS OPEN_BRACKET items CLOSE_BRACKET CLOSE_PARENTHESIS SEMICOLON .)
    LET             reduce using rule 98 (set -> NAME IGUAL NEW SET OPEN_PARENTHESIS OPEN_BRACKET items CLOSE_BRACKET CLOSE_PARENTHESIS SEMICOLON .)
    VAR             reduce using rule 98 (set -> NAME IGUAL NEW SET OPEN_PARENTHESIS OPEN_BRACKET items CLOSE_BRACKET CLOSE_PARENTHESIS SEMICOLON .)
    WHILE           reduce using rule 98 (set -> NAME IGUAL NEW SET OPEN_PARENTHESIS OPEN_BRACKET items CLOSE_BRACKET CLOSE_PARENTHESIS SEMICOLON .)
    FOR             reduce using rule 98 (set -> NAME IGUAL NEW SET OPEN_PARENTHESIS OPEN_BRACKET items CLOSE_BRACKET CLOSE_PARENTHESIS SEMICOLON .)
    IF              reduce using rule 98 (set -> NAME IGUAL NEW SET OPEN_PARENTHESIS OPEN_BRACKET items CLOSE_BRACKET CLOSE_PARENTHESIS SEMICOLON .)
    $end            reduce using rule 98 (set -> NAME IGUAL NEW SET OPEN_PARENTHESIS OPEN_BRACKET items CLOSE_BRACKET CLOSE_PARENTHESIS SEMICOLON .)
    CLOSE_BRACE     reduce using rule 98 (set -> NAME IGUAL NEW SET OPEN_PARENTHESIS OPEN_BRACKET items CLOSE_BRACKET CLOSE_PARENTHESIS SEMICOLON .)
    COMMA           reduce using rule 98 (set -> NAME IGUAL NEW SET OPEN_PARENTHESIS OPEN_BRACKET items CLOSE_BRACKET CLOSE_PARENTHESIS SEMICOLON .)


state 277

    (38) for -> FOR OPEN_PARENTHESIS inicialization SEMICOLON expBoolean SEMICOLON operations CLOSE_PARENTHESIS OPEN_BRACE expression . CLOSE_BRACE

    CLOSE_BRACE     shift and go to state 279


state 278

    (95) set -> type NAME IGUAL NEW SET OPEN_PARENTHESIS OPEN_BRACKET items CLOSE_BRACKET CLOSE_PARENTHESIS SEMICOLON .

    NAME            reduce using rule 95 (set -> type NAME IGUAL NEW SET OPEN_PARENTHESIS OPEN_BRACKET items CLOSE_BRACKET CLOSE_PARENTHESIS SEMICOLON .)
    PRINT           reduce using rule 95 (set -> type NAME IGUAL NEW SET OPEN_PARENTHESIS OPEN_BRACKET items CLOSE_BRACKET CLOSE_PARENTHESIS SEMICOLON .)
    RETURN          reduce using rule 95 (set -> type NAME IGUAL NEW SET OPEN_PARENTHESIS OPEN_BRACKET items CLOSE_BRACKET CLOSE_PARENTHESIS SEMICOLON .)
    FUNCTION        reduce using rule 95 (set -> type NAME IGUAL NEW SET OPEN_PARENTHESIS OPEN_BRACKET items CLOSE_BRACKET CLOSE_PARENTHESIS SEMICOLON .)
    CONST           reduce using rule 95 (set -> type NAME IGUAL NEW SET OPEN_PARENTHESIS OPEN_BRACKET items CLOSE_BRACKET CLOSE_PARENTHESIS SEMICOLON .)
    LET             reduce using rule 95 (set -> type NAME IGUAL NEW SET OPEN_PARENTHESIS OPEN_BRACKET items CLOSE_BRACKET CLOSE_PARENTHESIS SEMICOLON .)
    VAR             reduce using rule 95 (set -> type NAME IGUAL NEW SET OPEN_PARENTHESIS OPEN_BRACKET items CLOSE_BRACKET CLOSE_PARENTHESIS SEMICOLON .)
    WHILE           reduce using rule 95 (set -> type NAME IGUAL NEW SET OPEN_PARENTHESIS OPEN_BRACKET items CLOSE_BRACKET CLOSE_PARENTHESIS SEMICOLON .)
    FOR             reduce using rule 95 (set -> type NAME IGUAL NEW SET OPEN_PARENTHESIS OPEN_BRACKET items CLOSE_BRACKET CLOSE_PARENTHESIS SEMICOLON .)
    IF              reduce using rule 95 (set -> type NAME IGUAL NEW SET OPEN_PARENTHESIS OPEN_BRACKET items CLOSE_BRACKET CLOSE_PARENTHESIS SEMICOLON .)
    $end            reduce using rule 95 (set -> type NAME IGUAL NEW SET OPEN_PARENTHESIS OPEN_BRACKET items CLOSE_BRACKET CLOSE_PARENTHESIS SEMICOLON .)
    CLOSE_BRACE     reduce using rule 95 (set -> type NAME IGUAL NEW SET OPEN_PARENTHESIS OPEN_BRACKET items CLOSE_BRACKET CLOSE_PARENTHESIS SEMICOLON .)
    COMMA           reduce using rule 95 (set -> type NAME IGUAL NEW SET OPEN_PARENTHESIS OPEN_BRACKET items CLOSE_BRACKET CLOSE_PARENTHESIS SEMICOLON .)


state 279

    (38) for -> FOR OPEN_PARENTHESIS inicialization SEMICOLON expBoolean SEMICOLON operations CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE .

    NAME            reduce using rule 38 (for -> FOR OPEN_PARENTHESIS inicialization SEMICOLON expBoolean SEMICOLON operations CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE .)
    PRINT           reduce using rule 38 (for -> FOR OPEN_PARENTHESIS inicialization SEMICOLON expBoolean SEMICOLON operations CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE .)
    RETURN          reduce using rule 38 (for -> FOR OPEN_PARENTHESIS inicialization SEMICOLON expBoolean SEMICOLON operations CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE .)
    FUNCTION        reduce using rule 38 (for -> FOR OPEN_PARENTHESIS inicialization SEMICOLON expBoolean SEMICOLON operations CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE .)
    CONST           reduce using rule 38 (for -> FOR OPEN_PARENTHESIS inicialization SEMICOLON expBoolean SEMICOLON operations CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE .)
    LET             reduce using rule 38 (for -> FOR OPEN_PARENTHESIS inicialization SEMICOLON expBoolean SEMICOLON operations CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE .)
    VAR             reduce using rule 38 (for -> FOR OPEN_PARENTHESIS inicialization SEMICOLON expBoolean SEMICOLON operations CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE .)
    WHILE           reduce using rule 38 (for -> FOR OPEN_PARENTHESIS inicialization SEMICOLON expBoolean SEMICOLON operations CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE .)
    FOR             reduce using rule 38 (for -> FOR OPEN_PARENTHESIS inicialization SEMICOLON expBoolean SEMICOLON operations CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE .)
    IF              reduce using rule 38 (for -> FOR OPEN_PARENTHESIS inicialization SEMICOLON expBoolean SEMICOLON operations CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE .)
    $end            reduce using rule 38 (for -> FOR OPEN_PARENTHESIS inicialization SEMICOLON expBoolean SEMICOLON operations CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE .)
    CLOSE_BRACE     reduce using rule 38 (for -> FOR OPEN_PARENTHESIS inicialization SEMICOLON expBoolean SEMICOLON operations CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for SEMICOLON in state 103 resolved as shift
WARNING: shift/reduce conflict for AND in state 222 resolved as shift
WARNING: shift/reduce conflict for OR in state 222 resolved as shift
WARNING: shift/reduce conflict for AND in state 253 resolved as shift
WARNING: shift/reduce conflict for OR in state 253 resolved as shift
WARNING: shift/reduce conflict for IF in state 267 resolved as shift
WARNING: reduce/reduce conflict in state 59 resolved using rule (operations -> NAME)
WARNING: rejected rule (element -> NAME) in state 59
WARNING: reduce/reduce conflict in state 63 resolved using rule (datatype -> number)
WARNING: rejected rule (element -> number) in state 63
WARNING: reduce/reduce conflict in state 63 resolved using rule (operations -> number)
WARNING: rejected rule (datatype -> number) in state 63
WARNING: reduce/reduce conflict in state 64 resolved using rule (datatype -> STRING)
WARNING: rejected rule (element -> STRING) in state 64
WARNING: reduce/reduce conflict in state 99 resolved using rule (operations -> number)
WARNING: rejected rule (datatype -> number) in state 99
WARNING: reduce/reduce conflict in state 208 resolved using rule (mapFunctions -> NAME POINT CLEAR OPEN_PARENTHESIS CLOSE_PARENTHESIS SEMICOLON)
WARNING: rejected rule (methodsSet -> NAME POINT CLEAR OPEN_PARENTHESIS CLOSE_PARENTHESIS SEMICOLON) in state 208
WARNING: Rule (datatype -> number) is never reduced
WARNING: Rule (methodsSet -> NAME POINT CLEAR OPEN_PARENTHESIS CLOSE_PARENTHESIS SEMICOLON) is never reduced

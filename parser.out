Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    AND
    BACKSLASH
    BOOLEAN
    BREAK
    CASE
    CLASS
    COLON
    COMMENTS
    DEFAULT
    DIVIGUAL
    DOUBLE_QUOTES
    ELSE
    FLOAT
    FUNCTION
    IF
    INT
    LENGTH
    LINE_BREAK
    LONGCOMMENT
    MAP
    MASIGUAL
    MENOSIGUAL
    MODIGUAL
    NOT
    NULL
    OR
    PORIGUAL
    POTIGUAL
    RETURN
    SINGLE_QUOTE
    STATIC
    SWITCH
    THEN
    TOSTRING
    TYPEOF
    UNDEFINED

Grammar

Rule 0     S' -> expression
Rule 1     expression -> variable
Rule 2     expression -> variable expression
Rule 3     expression -> dataStruct
Rule 4     expression -> dataStruct expression
Rule 5     expression -> controlStruct
Rule 6     expression -> controlStruct expression
Rule 7     expression -> methodsSet
Rule 8     variable -> type NAME IGUAL datatype SEMICOLON
Rule 9     controlStruct -> while
Rule 10    controlStruct -> for
Rule 11    dataStruct -> array
Rule 12    dataStruct -> set
Rule 13    while -> WHILE OPEN_PARENTHESIS expression CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE
Rule 14    while -> WHILE OPEN_PARENTHESIS bool CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE
Rule 15    for -> FOR OPEN_PARENTHESIS inicialization SEMICOLON condition SEMICOLON operations CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE
Rule 16    inicialization -> type NAME IGUAL NUMBER
Rule 17    inicialization -> NAME IGUAL NUMBER
Rule 18    condition -> NAME clause value
Rule 19    operations -> NUMBER operand NUMBER
Rule 20    operations -> NAME SUMA SUMA
Rule 21    operations -> NAME RESTA RESTA
Rule 22    datatype -> NUMBER
Rule 23    datatype -> STRING
Rule 24    datatype -> operations
Rule 25    datatype -> CHAR
Rule 26    operand -> SUMA
Rule 27    operand -> RESTA
Rule 28    operand -> MULTIPLICACION
Rule 29    operand -> DIVISION
Rule 30    bool -> TRUE
Rule 31    bool -> FALSE
Rule 32    type -> CONST
Rule 33    type -> LET
Rule 34    type -> VAR
Rule 35    clause -> IGUALIGUAL
Rule 36    clause -> DIFERENTE
Rule 37    clause -> MAYORQUE
Rule 38    clause -> MAYORIGUALQUE
Rule 39    clause -> MENORQUE
Rule 40    clause -> MENORIGUALQUE
Rule 41    value -> NAME
Rule 42    value -> NUMBER
Rule 43    array -> type NAME IGUAL OPEN_BRACKET items CLOSE_BRACKET SEMICOLON
Rule 44    array -> type NAME IGUAL NEW ARRAY OPEN_PARENTHESIS items CLOSE_PARENTHESIS SEMICOLON
Rule 45    set -> type NAME IGUAL NEW SET OPEN_PARENTHESIS CLOSE_PARENTHESIS SEMICOLON
Rule 46    set -> type NAME IGUAL NEW SET OPEN_PARENTHESIS OPEN_BRACKET items CLOSE_BRACKET CLOSE_PARENTHESIS SEMICOLON
Rule 47    set -> type NAME IGUAL NEW SET OPEN_PARENTHESIS element CLOSE_PARENTHESIS SEMICOLON
Rule 48    set -> NAME IGUAL NEW SET OPEN_PARENTHESIS CLOSE_PARENTHESIS SEMICOLON
Rule 49    set -> NAME IGUAL NEW SET OPEN_PARENTHESIS OPEN_BRACKET items CLOSE_BRACKET CLOSE_PARENTHESIS SEMICOLON
Rule 50    set -> NAME IGUAL NEW SET OPEN_PARENTHESIS element CLOSE_PARENTHESIS SEMICOLON
Rule 51    methodsSet -> NAME POINT ADD OPEN_PARENTHESIS element CLOSE_PARENTHESIS SEMICOLON
Rule 52    methodsSet -> NAME POINT DELETE OPEN_PARENTHESIS element CLOSE_PARENTHESIS SEMICOLON
Rule 53    methodsSet -> NAME POINT CLEAR OPEN_PARENTHESIS CLOSE_PARENTHESIS SEMICOLON
Rule 54    items -> numeros
Rule 55    items -> cadena
Rule 56    numeros -> NUMBER
Rule 57    numeros -> NUMBER COMMA numeros
Rule 58    cadena -> STRING
Rule 59    cadena -> STRING COMMA cadena
Rule 60    element -> STRING
Rule 61    element -> NUMBER
Rule 62    element -> NAME

Terminals, with rules where they appear

ADD                  : 51
AND                  : 
ARRAY                : 44
BACKSLASH            : 
BOOLEAN              : 
BREAK                : 
CASE                 : 
CHAR                 : 25
CLASS                : 
CLEAR                : 53
CLOSE_BRACE          : 13 14 15
CLOSE_BRACKET        : 43 46 49
CLOSE_PARENTHESIS    : 13 14 15 44 45 46 47 48 49 50 51 52 53
COLON                : 
COMMA                : 57 59
COMMENTS             : 
CONST                : 32
DEFAULT              : 
DELETE               : 52
DIFERENTE            : 36
DIVIGUAL             : 
DIVISION             : 29
DOUBLE_QUOTES        : 
ELSE                 : 
FALSE                : 31
FLOAT                : 
FOR                  : 15
FUNCTION             : 
IF                   : 
IGUAL                : 8 16 17 43 44 45 46 47 48 49 50
IGUALIGUAL           : 35
INT                  : 
LENGTH               : 
LET                  : 33
LINE_BREAK           : 
LONGCOMMENT          : 
MAP                  : 
MASIGUAL             : 
MAYORIGUALQUE        : 38
MAYORQUE             : 37
MENORIGUALQUE        : 40
MENORQUE             : 39
MENOSIGUAL           : 
MODIGUAL             : 
MULTIPLICACION       : 28
NAME                 : 8 16 17 18 20 21 41 43 44 45 46 47 48 49 50 51 52 53 62
NEW                  : 44 45 46 47 48 49 50
NOT                  : 
NULL                 : 
NUMBER               : 16 17 19 19 22 42 56 57 61
OPEN_BRACE           : 13 14 15
OPEN_BRACKET         : 43 46 49
OPEN_PARENTHESIS     : 13 14 15 44 45 46 47 48 49 50 51 52 53
OR                   : 
POINT                : 51 52 53
PORIGUAL             : 
POTIGUAL             : 
RESTA                : 21 21 27
RETURN               : 
SEMICOLON            : 8 15 15 43 44 45 46 47 48 49 50 51 52 53
SET                  : 45 46 47 48 49 50
SINGLE_QUOTE         : 
STATIC               : 
STRING               : 23 58 59 60
SUMA                 : 20 20 26
SWITCH               : 
THEN                 : 
TOSTRING             : 
TRUE                 : 30
TYPEOF               : 
UNDEFINED            : 
VAR                  : 34
WHILE                : 13 14
error                : 

Nonterminals, with rules where they appear

array                : 11
bool                 : 14
cadena               : 55 59
clause               : 18
condition            : 15
controlStruct        : 5 6
dataStruct           : 3 4
datatype             : 8
element              : 47 50 51 52
expression           : 2 4 6 13 13 14 15 0
for                  : 10
inicialization       : 15
items                : 43 44 46 49
methodsSet           : 7
numeros              : 54 57
operand              : 19
operations           : 15 24
set                  : 12
type                 : 8 16 43 44 45 46 47
value                : 18
variable             : 1 2
while                : 9

Parsing method: LALR

state 0

    (0) S' -> . expression
    (1) expression -> . variable
    (2) expression -> . variable expression
    (3) expression -> . dataStruct
    (4) expression -> . dataStruct expression
    (5) expression -> . controlStruct
    (6) expression -> . controlStruct expression
    (7) expression -> . methodsSet
    (8) variable -> . type NAME IGUAL datatype SEMICOLON
    (11) dataStruct -> . array
    (12) dataStruct -> . set
    (9) controlStruct -> . while
    (10) controlStruct -> . for
    (51) methodsSet -> . NAME POINT ADD OPEN_PARENTHESIS element CLOSE_PARENTHESIS SEMICOLON
    (52) methodsSet -> . NAME POINT DELETE OPEN_PARENTHESIS element CLOSE_PARENTHESIS SEMICOLON
    (53) methodsSet -> . NAME POINT CLEAR OPEN_PARENTHESIS CLOSE_PARENTHESIS SEMICOLON
    (32) type -> . CONST
    (33) type -> . LET
    (34) type -> . VAR
    (43) array -> . type NAME IGUAL OPEN_BRACKET items CLOSE_BRACKET SEMICOLON
    (44) array -> . type NAME IGUAL NEW ARRAY OPEN_PARENTHESIS items CLOSE_PARENTHESIS SEMICOLON
    (45) set -> . type NAME IGUAL NEW SET OPEN_PARENTHESIS CLOSE_PARENTHESIS SEMICOLON
    (46) set -> . type NAME IGUAL NEW SET OPEN_PARENTHESIS OPEN_BRACKET items CLOSE_BRACKET CLOSE_PARENTHESIS SEMICOLON
    (47) set -> . type NAME IGUAL NEW SET OPEN_PARENTHESIS element CLOSE_PARENTHESIS SEMICOLON
    (48) set -> . NAME IGUAL NEW SET OPEN_PARENTHESIS CLOSE_PARENTHESIS SEMICOLON
    (49) set -> . NAME IGUAL NEW SET OPEN_PARENTHESIS OPEN_BRACKET items CLOSE_BRACKET CLOSE_PARENTHESIS SEMICOLON
    (50) set -> . NAME IGUAL NEW SET OPEN_PARENTHESIS element CLOSE_PARENTHESIS SEMICOLON
    (13) while -> . WHILE OPEN_PARENTHESIS expression CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE
    (14) while -> . WHILE OPEN_PARENTHESIS bool CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE
    (15) for -> . FOR OPEN_PARENTHESIS inicialization SEMICOLON condition SEMICOLON operations CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE

    NAME            shift and go to state 7
    CONST           shift and go to state 12
    LET             shift and go to state 13
    VAR             shift and go to state 14
    WHILE           shift and go to state 15
    FOR             shift and go to state 16

    expression                     shift and go to state 1
    variable                       shift and go to state 2
    dataStruct                     shift and go to state 3
    controlStruct                  shift and go to state 4
    methodsSet                     shift and go to state 5
    type                           shift and go to state 6
    array                          shift and go to state 8
    set                            shift and go to state 9
    while                          shift and go to state 10
    for                            shift and go to state 11

state 1

    (0) S' -> expression .



state 2

    (1) expression -> variable .
    (2) expression -> variable . expression
    (1) expression -> . variable
    (2) expression -> . variable expression
    (3) expression -> . dataStruct
    (4) expression -> . dataStruct expression
    (5) expression -> . controlStruct
    (6) expression -> . controlStruct expression
    (7) expression -> . methodsSet
    (8) variable -> . type NAME IGUAL datatype SEMICOLON
    (11) dataStruct -> . array
    (12) dataStruct -> . set
    (9) controlStruct -> . while
    (10) controlStruct -> . for
    (51) methodsSet -> . NAME POINT ADD OPEN_PARENTHESIS element CLOSE_PARENTHESIS SEMICOLON
    (52) methodsSet -> . NAME POINT DELETE OPEN_PARENTHESIS element CLOSE_PARENTHESIS SEMICOLON
    (53) methodsSet -> . NAME POINT CLEAR OPEN_PARENTHESIS CLOSE_PARENTHESIS SEMICOLON
    (32) type -> . CONST
    (33) type -> . LET
    (34) type -> . VAR
    (43) array -> . type NAME IGUAL OPEN_BRACKET items CLOSE_BRACKET SEMICOLON
    (44) array -> . type NAME IGUAL NEW ARRAY OPEN_PARENTHESIS items CLOSE_PARENTHESIS SEMICOLON
    (45) set -> . type NAME IGUAL NEW SET OPEN_PARENTHESIS CLOSE_PARENTHESIS SEMICOLON
    (46) set -> . type NAME IGUAL NEW SET OPEN_PARENTHESIS OPEN_BRACKET items CLOSE_BRACKET CLOSE_PARENTHESIS SEMICOLON
    (47) set -> . type NAME IGUAL NEW SET OPEN_PARENTHESIS element CLOSE_PARENTHESIS SEMICOLON
    (48) set -> . NAME IGUAL NEW SET OPEN_PARENTHESIS CLOSE_PARENTHESIS SEMICOLON
    (49) set -> . NAME IGUAL NEW SET OPEN_PARENTHESIS OPEN_BRACKET items CLOSE_BRACKET CLOSE_PARENTHESIS SEMICOLON
    (50) set -> . NAME IGUAL NEW SET OPEN_PARENTHESIS element CLOSE_PARENTHESIS SEMICOLON
    (13) while -> . WHILE OPEN_PARENTHESIS expression CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE
    (14) while -> . WHILE OPEN_PARENTHESIS bool CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE
    (15) for -> . FOR OPEN_PARENTHESIS inicialization SEMICOLON condition SEMICOLON operations CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE

    $end            reduce using rule 1 (expression -> variable .)
    CLOSE_PARENTHESIS reduce using rule 1 (expression -> variable .)
    CLOSE_BRACE     reduce using rule 1 (expression -> variable .)
    NAME            shift and go to state 7
    CONST           shift and go to state 12
    LET             shift and go to state 13
    VAR             shift and go to state 14
    WHILE           shift and go to state 15
    FOR             shift and go to state 16

    variable                       shift and go to state 2
    expression                     shift and go to state 17
    dataStruct                     shift and go to state 3
    controlStruct                  shift and go to state 4
    methodsSet                     shift and go to state 5
    type                           shift and go to state 6
    array                          shift and go to state 8
    set                            shift and go to state 9
    while                          shift and go to state 10
    for                            shift and go to state 11

state 3

    (3) expression -> dataStruct .
    (4) expression -> dataStruct . expression
    (1) expression -> . variable
    (2) expression -> . variable expression
    (3) expression -> . dataStruct
    (4) expression -> . dataStruct expression
    (5) expression -> . controlStruct
    (6) expression -> . controlStruct expression
    (7) expression -> . methodsSet
    (8) variable -> . type NAME IGUAL datatype SEMICOLON
    (11) dataStruct -> . array
    (12) dataStruct -> . set
    (9) controlStruct -> . while
    (10) controlStruct -> . for
    (51) methodsSet -> . NAME POINT ADD OPEN_PARENTHESIS element CLOSE_PARENTHESIS SEMICOLON
    (52) methodsSet -> . NAME POINT DELETE OPEN_PARENTHESIS element CLOSE_PARENTHESIS SEMICOLON
    (53) methodsSet -> . NAME POINT CLEAR OPEN_PARENTHESIS CLOSE_PARENTHESIS SEMICOLON
    (32) type -> . CONST
    (33) type -> . LET
    (34) type -> . VAR
    (43) array -> . type NAME IGUAL OPEN_BRACKET items CLOSE_BRACKET SEMICOLON
    (44) array -> . type NAME IGUAL NEW ARRAY OPEN_PARENTHESIS items CLOSE_PARENTHESIS SEMICOLON
    (45) set -> . type NAME IGUAL NEW SET OPEN_PARENTHESIS CLOSE_PARENTHESIS SEMICOLON
    (46) set -> . type NAME IGUAL NEW SET OPEN_PARENTHESIS OPEN_BRACKET items CLOSE_BRACKET CLOSE_PARENTHESIS SEMICOLON
    (47) set -> . type NAME IGUAL NEW SET OPEN_PARENTHESIS element CLOSE_PARENTHESIS SEMICOLON
    (48) set -> . NAME IGUAL NEW SET OPEN_PARENTHESIS CLOSE_PARENTHESIS SEMICOLON
    (49) set -> . NAME IGUAL NEW SET OPEN_PARENTHESIS OPEN_BRACKET items CLOSE_BRACKET CLOSE_PARENTHESIS SEMICOLON
    (50) set -> . NAME IGUAL NEW SET OPEN_PARENTHESIS element CLOSE_PARENTHESIS SEMICOLON
    (13) while -> . WHILE OPEN_PARENTHESIS expression CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE
    (14) while -> . WHILE OPEN_PARENTHESIS bool CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE
    (15) for -> . FOR OPEN_PARENTHESIS inicialization SEMICOLON condition SEMICOLON operations CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE

    $end            reduce using rule 3 (expression -> dataStruct .)
    CLOSE_PARENTHESIS reduce using rule 3 (expression -> dataStruct .)
    CLOSE_BRACE     reduce using rule 3 (expression -> dataStruct .)
    NAME            shift and go to state 7
    CONST           shift and go to state 12
    LET             shift and go to state 13
    VAR             shift and go to state 14
    WHILE           shift and go to state 15
    FOR             shift and go to state 16

    dataStruct                     shift and go to state 3
    expression                     shift and go to state 18
    variable                       shift and go to state 2
    controlStruct                  shift and go to state 4
    methodsSet                     shift and go to state 5
    type                           shift and go to state 6
    array                          shift and go to state 8
    set                            shift and go to state 9
    while                          shift and go to state 10
    for                            shift and go to state 11

state 4

    (5) expression -> controlStruct .
    (6) expression -> controlStruct . expression
    (1) expression -> . variable
    (2) expression -> . variable expression
    (3) expression -> . dataStruct
    (4) expression -> . dataStruct expression
    (5) expression -> . controlStruct
    (6) expression -> . controlStruct expression
    (7) expression -> . methodsSet
    (8) variable -> . type NAME IGUAL datatype SEMICOLON
    (11) dataStruct -> . array
    (12) dataStruct -> . set
    (9) controlStruct -> . while
    (10) controlStruct -> . for
    (51) methodsSet -> . NAME POINT ADD OPEN_PARENTHESIS element CLOSE_PARENTHESIS SEMICOLON
    (52) methodsSet -> . NAME POINT DELETE OPEN_PARENTHESIS element CLOSE_PARENTHESIS SEMICOLON
    (53) methodsSet -> . NAME POINT CLEAR OPEN_PARENTHESIS CLOSE_PARENTHESIS SEMICOLON
    (32) type -> . CONST
    (33) type -> . LET
    (34) type -> . VAR
    (43) array -> . type NAME IGUAL OPEN_BRACKET items CLOSE_BRACKET SEMICOLON
    (44) array -> . type NAME IGUAL NEW ARRAY OPEN_PARENTHESIS items CLOSE_PARENTHESIS SEMICOLON
    (45) set -> . type NAME IGUAL NEW SET OPEN_PARENTHESIS CLOSE_PARENTHESIS SEMICOLON
    (46) set -> . type NAME IGUAL NEW SET OPEN_PARENTHESIS OPEN_BRACKET items CLOSE_BRACKET CLOSE_PARENTHESIS SEMICOLON
    (47) set -> . type NAME IGUAL NEW SET OPEN_PARENTHESIS element CLOSE_PARENTHESIS SEMICOLON
    (48) set -> . NAME IGUAL NEW SET OPEN_PARENTHESIS CLOSE_PARENTHESIS SEMICOLON
    (49) set -> . NAME IGUAL NEW SET OPEN_PARENTHESIS OPEN_BRACKET items CLOSE_BRACKET CLOSE_PARENTHESIS SEMICOLON
    (50) set -> . NAME IGUAL NEW SET OPEN_PARENTHESIS element CLOSE_PARENTHESIS SEMICOLON
    (13) while -> . WHILE OPEN_PARENTHESIS expression CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE
    (14) while -> . WHILE OPEN_PARENTHESIS bool CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE
    (15) for -> . FOR OPEN_PARENTHESIS inicialization SEMICOLON condition SEMICOLON operations CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE

    $end            reduce using rule 5 (expression -> controlStruct .)
    CLOSE_PARENTHESIS reduce using rule 5 (expression -> controlStruct .)
    CLOSE_BRACE     reduce using rule 5 (expression -> controlStruct .)
    NAME            shift and go to state 7
    CONST           shift and go to state 12
    LET             shift and go to state 13
    VAR             shift and go to state 14
    WHILE           shift and go to state 15
    FOR             shift and go to state 16

    controlStruct                  shift and go to state 4
    expression                     shift and go to state 19
    variable                       shift and go to state 2
    dataStruct                     shift and go to state 3
    methodsSet                     shift and go to state 5
    type                           shift and go to state 6
    array                          shift and go to state 8
    set                            shift and go to state 9
    while                          shift and go to state 10
    for                            shift and go to state 11

state 5

    (7) expression -> methodsSet .

    $end            reduce using rule 7 (expression -> methodsSet .)
    CLOSE_PARENTHESIS reduce using rule 7 (expression -> methodsSet .)
    CLOSE_BRACE     reduce using rule 7 (expression -> methodsSet .)


state 6

    (8) variable -> type . NAME IGUAL datatype SEMICOLON
    (43) array -> type . NAME IGUAL OPEN_BRACKET items CLOSE_BRACKET SEMICOLON
    (44) array -> type . NAME IGUAL NEW ARRAY OPEN_PARENTHESIS items CLOSE_PARENTHESIS SEMICOLON
    (45) set -> type . NAME IGUAL NEW SET OPEN_PARENTHESIS CLOSE_PARENTHESIS SEMICOLON
    (46) set -> type . NAME IGUAL NEW SET OPEN_PARENTHESIS OPEN_BRACKET items CLOSE_BRACKET CLOSE_PARENTHESIS SEMICOLON
    (47) set -> type . NAME IGUAL NEW SET OPEN_PARENTHESIS element CLOSE_PARENTHESIS SEMICOLON

    NAME            shift and go to state 20


state 7

    (51) methodsSet -> NAME . POINT ADD OPEN_PARENTHESIS element CLOSE_PARENTHESIS SEMICOLON
    (52) methodsSet -> NAME . POINT DELETE OPEN_PARENTHESIS element CLOSE_PARENTHESIS SEMICOLON
    (53) methodsSet -> NAME . POINT CLEAR OPEN_PARENTHESIS CLOSE_PARENTHESIS SEMICOLON
    (48) set -> NAME . IGUAL NEW SET OPEN_PARENTHESIS CLOSE_PARENTHESIS SEMICOLON
    (49) set -> NAME . IGUAL NEW SET OPEN_PARENTHESIS OPEN_BRACKET items CLOSE_BRACKET CLOSE_PARENTHESIS SEMICOLON
    (50) set -> NAME . IGUAL NEW SET OPEN_PARENTHESIS element CLOSE_PARENTHESIS SEMICOLON

    POINT           shift and go to state 21
    IGUAL           shift and go to state 22


state 8

    (11) dataStruct -> array .

    NAME            reduce using rule 11 (dataStruct -> array .)
    CONST           reduce using rule 11 (dataStruct -> array .)
    LET             reduce using rule 11 (dataStruct -> array .)
    VAR             reduce using rule 11 (dataStruct -> array .)
    WHILE           reduce using rule 11 (dataStruct -> array .)
    FOR             reduce using rule 11 (dataStruct -> array .)
    $end            reduce using rule 11 (dataStruct -> array .)
    CLOSE_PARENTHESIS reduce using rule 11 (dataStruct -> array .)
    CLOSE_BRACE     reduce using rule 11 (dataStruct -> array .)


state 9

    (12) dataStruct -> set .

    NAME            reduce using rule 12 (dataStruct -> set .)
    CONST           reduce using rule 12 (dataStruct -> set .)
    LET             reduce using rule 12 (dataStruct -> set .)
    VAR             reduce using rule 12 (dataStruct -> set .)
    WHILE           reduce using rule 12 (dataStruct -> set .)
    FOR             reduce using rule 12 (dataStruct -> set .)
    $end            reduce using rule 12 (dataStruct -> set .)
    CLOSE_PARENTHESIS reduce using rule 12 (dataStruct -> set .)
    CLOSE_BRACE     reduce using rule 12 (dataStruct -> set .)


state 10

    (9) controlStruct -> while .

    NAME            reduce using rule 9 (controlStruct -> while .)
    CONST           reduce using rule 9 (controlStruct -> while .)
    LET             reduce using rule 9 (controlStruct -> while .)
    VAR             reduce using rule 9 (controlStruct -> while .)
    WHILE           reduce using rule 9 (controlStruct -> while .)
    FOR             reduce using rule 9 (controlStruct -> while .)
    $end            reduce using rule 9 (controlStruct -> while .)
    CLOSE_PARENTHESIS reduce using rule 9 (controlStruct -> while .)
    CLOSE_BRACE     reduce using rule 9 (controlStruct -> while .)


state 11

    (10) controlStruct -> for .

    NAME            reduce using rule 10 (controlStruct -> for .)
    CONST           reduce using rule 10 (controlStruct -> for .)
    LET             reduce using rule 10 (controlStruct -> for .)
    VAR             reduce using rule 10 (controlStruct -> for .)
    WHILE           reduce using rule 10 (controlStruct -> for .)
    FOR             reduce using rule 10 (controlStruct -> for .)
    $end            reduce using rule 10 (controlStruct -> for .)
    CLOSE_PARENTHESIS reduce using rule 10 (controlStruct -> for .)
    CLOSE_BRACE     reduce using rule 10 (controlStruct -> for .)


state 12

    (32) type -> CONST .

    NAME            reduce using rule 32 (type -> CONST .)


state 13

    (33) type -> LET .

    NAME            reduce using rule 33 (type -> LET .)


state 14

    (34) type -> VAR .

    NAME            reduce using rule 34 (type -> VAR .)


state 15

    (13) while -> WHILE . OPEN_PARENTHESIS expression CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE
    (14) while -> WHILE . OPEN_PARENTHESIS bool CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE

    OPEN_PARENTHESIS shift and go to state 23


state 16

    (15) for -> FOR . OPEN_PARENTHESIS inicialization SEMICOLON condition SEMICOLON operations CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE

    OPEN_PARENTHESIS shift and go to state 24


state 17

    (2) expression -> variable expression .

    $end            reduce using rule 2 (expression -> variable expression .)
    CLOSE_PARENTHESIS reduce using rule 2 (expression -> variable expression .)
    CLOSE_BRACE     reduce using rule 2 (expression -> variable expression .)


state 18

    (4) expression -> dataStruct expression .

    $end            reduce using rule 4 (expression -> dataStruct expression .)
    CLOSE_PARENTHESIS reduce using rule 4 (expression -> dataStruct expression .)
    CLOSE_BRACE     reduce using rule 4 (expression -> dataStruct expression .)


state 19

    (6) expression -> controlStruct expression .

    $end            reduce using rule 6 (expression -> controlStruct expression .)
    CLOSE_PARENTHESIS reduce using rule 6 (expression -> controlStruct expression .)
    CLOSE_BRACE     reduce using rule 6 (expression -> controlStruct expression .)


state 20

    (8) variable -> type NAME . IGUAL datatype SEMICOLON
    (43) array -> type NAME . IGUAL OPEN_BRACKET items CLOSE_BRACKET SEMICOLON
    (44) array -> type NAME . IGUAL NEW ARRAY OPEN_PARENTHESIS items CLOSE_PARENTHESIS SEMICOLON
    (45) set -> type NAME . IGUAL NEW SET OPEN_PARENTHESIS CLOSE_PARENTHESIS SEMICOLON
    (46) set -> type NAME . IGUAL NEW SET OPEN_PARENTHESIS OPEN_BRACKET items CLOSE_BRACKET CLOSE_PARENTHESIS SEMICOLON
    (47) set -> type NAME . IGUAL NEW SET OPEN_PARENTHESIS element CLOSE_PARENTHESIS SEMICOLON

    IGUAL           shift and go to state 25


state 21

    (51) methodsSet -> NAME POINT . ADD OPEN_PARENTHESIS element CLOSE_PARENTHESIS SEMICOLON
    (52) methodsSet -> NAME POINT . DELETE OPEN_PARENTHESIS element CLOSE_PARENTHESIS SEMICOLON
    (53) methodsSet -> NAME POINT . CLEAR OPEN_PARENTHESIS CLOSE_PARENTHESIS SEMICOLON

    ADD             shift and go to state 26
    DELETE          shift and go to state 27
    CLEAR           shift and go to state 28


state 22

    (48) set -> NAME IGUAL . NEW SET OPEN_PARENTHESIS CLOSE_PARENTHESIS SEMICOLON
    (49) set -> NAME IGUAL . NEW SET OPEN_PARENTHESIS OPEN_BRACKET items CLOSE_BRACKET CLOSE_PARENTHESIS SEMICOLON
    (50) set -> NAME IGUAL . NEW SET OPEN_PARENTHESIS element CLOSE_PARENTHESIS SEMICOLON

    NEW             shift and go to state 29


state 23

    (13) while -> WHILE OPEN_PARENTHESIS . expression CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE
    (14) while -> WHILE OPEN_PARENTHESIS . bool CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE
    (1) expression -> . variable
    (2) expression -> . variable expression
    (3) expression -> . dataStruct
    (4) expression -> . dataStruct expression
    (5) expression -> . controlStruct
    (6) expression -> . controlStruct expression
    (7) expression -> . methodsSet
    (30) bool -> . TRUE
    (31) bool -> . FALSE
    (8) variable -> . type NAME IGUAL datatype SEMICOLON
    (11) dataStruct -> . array
    (12) dataStruct -> . set
    (9) controlStruct -> . while
    (10) controlStruct -> . for
    (51) methodsSet -> . NAME POINT ADD OPEN_PARENTHESIS element CLOSE_PARENTHESIS SEMICOLON
    (52) methodsSet -> . NAME POINT DELETE OPEN_PARENTHESIS element CLOSE_PARENTHESIS SEMICOLON
    (53) methodsSet -> . NAME POINT CLEAR OPEN_PARENTHESIS CLOSE_PARENTHESIS SEMICOLON
    (32) type -> . CONST
    (33) type -> . LET
    (34) type -> . VAR
    (43) array -> . type NAME IGUAL OPEN_BRACKET items CLOSE_BRACKET SEMICOLON
    (44) array -> . type NAME IGUAL NEW ARRAY OPEN_PARENTHESIS items CLOSE_PARENTHESIS SEMICOLON
    (45) set -> . type NAME IGUAL NEW SET OPEN_PARENTHESIS CLOSE_PARENTHESIS SEMICOLON
    (46) set -> . type NAME IGUAL NEW SET OPEN_PARENTHESIS OPEN_BRACKET items CLOSE_BRACKET CLOSE_PARENTHESIS SEMICOLON
    (47) set -> . type NAME IGUAL NEW SET OPEN_PARENTHESIS element CLOSE_PARENTHESIS SEMICOLON
    (48) set -> . NAME IGUAL NEW SET OPEN_PARENTHESIS CLOSE_PARENTHESIS SEMICOLON
    (49) set -> . NAME IGUAL NEW SET OPEN_PARENTHESIS OPEN_BRACKET items CLOSE_BRACKET CLOSE_PARENTHESIS SEMICOLON
    (50) set -> . NAME IGUAL NEW SET OPEN_PARENTHESIS element CLOSE_PARENTHESIS SEMICOLON
    (13) while -> . WHILE OPEN_PARENTHESIS expression CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE
    (14) while -> . WHILE OPEN_PARENTHESIS bool CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE
    (15) for -> . FOR OPEN_PARENTHESIS inicialization SEMICOLON condition SEMICOLON operations CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE

    TRUE            shift and go to state 32
    FALSE           shift and go to state 33
    NAME            shift and go to state 7
    CONST           shift and go to state 12
    LET             shift and go to state 13
    VAR             shift and go to state 14
    WHILE           shift and go to state 15
    FOR             shift and go to state 16

    expression                     shift and go to state 30
    bool                           shift and go to state 31
    variable                       shift and go to state 2
    dataStruct                     shift and go to state 3
    controlStruct                  shift and go to state 4
    methodsSet                     shift and go to state 5
    type                           shift and go to state 6
    array                          shift and go to state 8
    set                            shift and go to state 9
    while                          shift and go to state 10
    for                            shift and go to state 11

state 24

    (15) for -> FOR OPEN_PARENTHESIS . inicialization SEMICOLON condition SEMICOLON operations CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE
    (16) inicialization -> . type NAME IGUAL NUMBER
    (17) inicialization -> . NAME IGUAL NUMBER
    (32) type -> . CONST
    (33) type -> . LET
    (34) type -> . VAR

    NAME            shift and go to state 36
    CONST           shift and go to state 12
    LET             shift and go to state 13
    VAR             shift and go to state 14

    inicialization                 shift and go to state 34
    type                           shift and go to state 35

state 25

    (8) variable -> type NAME IGUAL . datatype SEMICOLON
    (43) array -> type NAME IGUAL . OPEN_BRACKET items CLOSE_BRACKET SEMICOLON
    (44) array -> type NAME IGUAL . NEW ARRAY OPEN_PARENTHESIS items CLOSE_PARENTHESIS SEMICOLON
    (45) set -> type NAME IGUAL . NEW SET OPEN_PARENTHESIS CLOSE_PARENTHESIS SEMICOLON
    (46) set -> type NAME IGUAL . NEW SET OPEN_PARENTHESIS OPEN_BRACKET items CLOSE_BRACKET CLOSE_PARENTHESIS SEMICOLON
    (47) set -> type NAME IGUAL . NEW SET OPEN_PARENTHESIS element CLOSE_PARENTHESIS SEMICOLON
    (22) datatype -> . NUMBER
    (23) datatype -> . STRING
    (24) datatype -> . operations
    (25) datatype -> . CHAR
    (19) operations -> . NUMBER operand NUMBER
    (20) operations -> . NAME SUMA SUMA
    (21) operations -> . NAME RESTA RESTA

    OPEN_BRACKET    shift and go to state 39
    NEW             shift and go to state 40
    NUMBER          shift and go to state 41
    STRING          shift and go to state 42
    CHAR            shift and go to state 44
    NAME            shift and go to state 37

    datatype                       shift and go to state 38
    operations                     shift and go to state 43

state 26

    (51) methodsSet -> NAME POINT ADD . OPEN_PARENTHESIS element CLOSE_PARENTHESIS SEMICOLON

    OPEN_PARENTHESIS shift and go to state 45


state 27

    (52) methodsSet -> NAME POINT DELETE . OPEN_PARENTHESIS element CLOSE_PARENTHESIS SEMICOLON

    OPEN_PARENTHESIS shift and go to state 46


state 28

    (53) methodsSet -> NAME POINT CLEAR . OPEN_PARENTHESIS CLOSE_PARENTHESIS SEMICOLON

    OPEN_PARENTHESIS shift and go to state 47


state 29

    (48) set -> NAME IGUAL NEW . SET OPEN_PARENTHESIS CLOSE_PARENTHESIS SEMICOLON
    (49) set -> NAME IGUAL NEW . SET OPEN_PARENTHESIS OPEN_BRACKET items CLOSE_BRACKET CLOSE_PARENTHESIS SEMICOLON
    (50) set -> NAME IGUAL NEW . SET OPEN_PARENTHESIS element CLOSE_PARENTHESIS SEMICOLON

    SET             shift and go to state 48


state 30

    (13) while -> WHILE OPEN_PARENTHESIS expression . CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE

    CLOSE_PARENTHESIS shift and go to state 49


state 31

    (14) while -> WHILE OPEN_PARENTHESIS bool . CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE

    CLOSE_PARENTHESIS shift and go to state 50


state 32

    (30) bool -> TRUE .

    CLOSE_PARENTHESIS reduce using rule 30 (bool -> TRUE .)


state 33

    (31) bool -> FALSE .

    CLOSE_PARENTHESIS reduce using rule 31 (bool -> FALSE .)


state 34

    (15) for -> FOR OPEN_PARENTHESIS inicialization . SEMICOLON condition SEMICOLON operations CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE

    SEMICOLON       shift and go to state 51


state 35

    (16) inicialization -> type . NAME IGUAL NUMBER

    NAME            shift and go to state 52


state 36

    (17) inicialization -> NAME . IGUAL NUMBER

    IGUAL           shift and go to state 53


state 37

    (20) operations -> NAME . SUMA SUMA
    (21) operations -> NAME . RESTA RESTA

    SUMA            shift and go to state 54
    RESTA           shift and go to state 55


state 38

    (8) variable -> type NAME IGUAL datatype . SEMICOLON

    SEMICOLON       shift and go to state 56


state 39

    (43) array -> type NAME IGUAL OPEN_BRACKET . items CLOSE_BRACKET SEMICOLON
    (54) items -> . numeros
    (55) items -> . cadena
    (56) numeros -> . NUMBER
    (57) numeros -> . NUMBER COMMA numeros
    (58) cadena -> . STRING
    (59) cadena -> . STRING COMMA cadena

    NUMBER          shift and go to state 60
    STRING          shift and go to state 61

    items                          shift and go to state 57
    numeros                        shift and go to state 58
    cadena                         shift and go to state 59

state 40

    (44) array -> type NAME IGUAL NEW . ARRAY OPEN_PARENTHESIS items CLOSE_PARENTHESIS SEMICOLON
    (45) set -> type NAME IGUAL NEW . SET OPEN_PARENTHESIS CLOSE_PARENTHESIS SEMICOLON
    (46) set -> type NAME IGUAL NEW . SET OPEN_PARENTHESIS OPEN_BRACKET items CLOSE_BRACKET CLOSE_PARENTHESIS SEMICOLON
    (47) set -> type NAME IGUAL NEW . SET OPEN_PARENTHESIS element CLOSE_PARENTHESIS SEMICOLON

    ARRAY           shift and go to state 62
    SET             shift and go to state 63


state 41

    (22) datatype -> NUMBER .
    (19) operations -> NUMBER . operand NUMBER
    (26) operand -> . SUMA
    (27) operand -> . RESTA
    (28) operand -> . MULTIPLICACION
    (29) operand -> . DIVISION

    SEMICOLON       reduce using rule 22 (datatype -> NUMBER .)
    SUMA            shift and go to state 65
    RESTA           shift and go to state 66
    MULTIPLICACION  shift and go to state 67
    DIVISION        shift and go to state 68

    operand                        shift and go to state 64

state 42

    (23) datatype -> STRING .

    SEMICOLON       reduce using rule 23 (datatype -> STRING .)


state 43

    (24) datatype -> operations .

    SEMICOLON       reduce using rule 24 (datatype -> operations .)


state 44

    (25) datatype -> CHAR .

    SEMICOLON       reduce using rule 25 (datatype -> CHAR .)


state 45

    (51) methodsSet -> NAME POINT ADD OPEN_PARENTHESIS . element CLOSE_PARENTHESIS SEMICOLON
    (60) element -> . STRING
    (61) element -> . NUMBER
    (62) element -> . NAME

    STRING          shift and go to state 71
    NUMBER          shift and go to state 72
    NAME            shift and go to state 69

    element                        shift and go to state 70

state 46

    (52) methodsSet -> NAME POINT DELETE OPEN_PARENTHESIS . element CLOSE_PARENTHESIS SEMICOLON
    (60) element -> . STRING
    (61) element -> . NUMBER
    (62) element -> . NAME

    STRING          shift and go to state 71
    NUMBER          shift and go to state 72
    NAME            shift and go to state 69

    element                        shift and go to state 73

state 47

    (53) methodsSet -> NAME POINT CLEAR OPEN_PARENTHESIS . CLOSE_PARENTHESIS SEMICOLON

    CLOSE_PARENTHESIS shift and go to state 74


state 48

    (48) set -> NAME IGUAL NEW SET . OPEN_PARENTHESIS CLOSE_PARENTHESIS SEMICOLON
    (49) set -> NAME IGUAL NEW SET . OPEN_PARENTHESIS OPEN_BRACKET items CLOSE_BRACKET CLOSE_PARENTHESIS SEMICOLON
    (50) set -> NAME IGUAL NEW SET . OPEN_PARENTHESIS element CLOSE_PARENTHESIS SEMICOLON

    OPEN_PARENTHESIS shift and go to state 75


state 49

    (13) while -> WHILE OPEN_PARENTHESIS expression CLOSE_PARENTHESIS . OPEN_BRACE expression CLOSE_BRACE

    OPEN_BRACE      shift and go to state 76


state 50

    (14) while -> WHILE OPEN_PARENTHESIS bool CLOSE_PARENTHESIS . OPEN_BRACE expression CLOSE_BRACE

    OPEN_BRACE      shift and go to state 77


state 51

    (15) for -> FOR OPEN_PARENTHESIS inicialization SEMICOLON . condition SEMICOLON operations CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE
    (18) condition -> . NAME clause value

    NAME            shift and go to state 79

    condition                      shift and go to state 78

state 52

    (16) inicialization -> type NAME . IGUAL NUMBER

    IGUAL           shift and go to state 80


state 53

    (17) inicialization -> NAME IGUAL . NUMBER

    NUMBER          shift and go to state 81


state 54

    (20) operations -> NAME SUMA . SUMA

    SUMA            shift and go to state 82


state 55

    (21) operations -> NAME RESTA . RESTA

    RESTA           shift and go to state 83


state 56

    (8) variable -> type NAME IGUAL datatype SEMICOLON .

    NAME            reduce using rule 8 (variable -> type NAME IGUAL datatype SEMICOLON .)
    CONST           reduce using rule 8 (variable -> type NAME IGUAL datatype SEMICOLON .)
    LET             reduce using rule 8 (variable -> type NAME IGUAL datatype SEMICOLON .)
    VAR             reduce using rule 8 (variable -> type NAME IGUAL datatype SEMICOLON .)
    WHILE           reduce using rule 8 (variable -> type NAME IGUAL datatype SEMICOLON .)
    FOR             reduce using rule 8 (variable -> type NAME IGUAL datatype SEMICOLON .)
    $end            reduce using rule 8 (variable -> type NAME IGUAL datatype SEMICOLON .)
    CLOSE_PARENTHESIS reduce using rule 8 (variable -> type NAME IGUAL datatype SEMICOLON .)
    CLOSE_BRACE     reduce using rule 8 (variable -> type NAME IGUAL datatype SEMICOLON .)


state 57

    (43) array -> type NAME IGUAL OPEN_BRACKET items . CLOSE_BRACKET SEMICOLON

    CLOSE_BRACKET   shift and go to state 84


state 58

    (54) items -> numeros .

    CLOSE_BRACKET   reduce using rule 54 (items -> numeros .)
    CLOSE_PARENTHESIS reduce using rule 54 (items -> numeros .)


state 59

    (55) items -> cadena .

    CLOSE_BRACKET   reduce using rule 55 (items -> cadena .)
    CLOSE_PARENTHESIS reduce using rule 55 (items -> cadena .)


state 60

    (56) numeros -> NUMBER .
    (57) numeros -> NUMBER . COMMA numeros

    CLOSE_BRACKET   reduce using rule 56 (numeros -> NUMBER .)
    CLOSE_PARENTHESIS reduce using rule 56 (numeros -> NUMBER .)
    COMMA           shift and go to state 85


state 61

    (58) cadena -> STRING .
    (59) cadena -> STRING . COMMA cadena

    CLOSE_BRACKET   reduce using rule 58 (cadena -> STRING .)
    CLOSE_PARENTHESIS reduce using rule 58 (cadena -> STRING .)
    COMMA           shift and go to state 86


state 62

    (44) array -> type NAME IGUAL NEW ARRAY . OPEN_PARENTHESIS items CLOSE_PARENTHESIS SEMICOLON

    OPEN_PARENTHESIS shift and go to state 87


state 63

    (45) set -> type NAME IGUAL NEW SET . OPEN_PARENTHESIS CLOSE_PARENTHESIS SEMICOLON
    (46) set -> type NAME IGUAL NEW SET . OPEN_PARENTHESIS OPEN_BRACKET items CLOSE_BRACKET CLOSE_PARENTHESIS SEMICOLON
    (47) set -> type NAME IGUAL NEW SET . OPEN_PARENTHESIS element CLOSE_PARENTHESIS SEMICOLON

    OPEN_PARENTHESIS shift and go to state 88


state 64

    (19) operations -> NUMBER operand . NUMBER

    NUMBER          shift and go to state 89


state 65

    (26) operand -> SUMA .

    NUMBER          reduce using rule 26 (operand -> SUMA .)


state 66

    (27) operand -> RESTA .

    NUMBER          reduce using rule 27 (operand -> RESTA .)


state 67

    (28) operand -> MULTIPLICACION .

    NUMBER          reduce using rule 28 (operand -> MULTIPLICACION .)


state 68

    (29) operand -> DIVISION .

    NUMBER          reduce using rule 29 (operand -> DIVISION .)


state 69

    (62) element -> NAME .

    CLOSE_PARENTHESIS reduce using rule 62 (element -> NAME .)


state 70

    (51) methodsSet -> NAME POINT ADD OPEN_PARENTHESIS element . CLOSE_PARENTHESIS SEMICOLON

    CLOSE_PARENTHESIS shift and go to state 90


state 71

    (60) element -> STRING .

    CLOSE_PARENTHESIS reduce using rule 60 (element -> STRING .)


state 72

    (61) element -> NUMBER .

    CLOSE_PARENTHESIS reduce using rule 61 (element -> NUMBER .)


state 73

    (52) methodsSet -> NAME POINT DELETE OPEN_PARENTHESIS element . CLOSE_PARENTHESIS SEMICOLON

    CLOSE_PARENTHESIS shift and go to state 91


state 74

    (53) methodsSet -> NAME POINT CLEAR OPEN_PARENTHESIS CLOSE_PARENTHESIS . SEMICOLON

    SEMICOLON       shift and go to state 92


state 75

    (48) set -> NAME IGUAL NEW SET OPEN_PARENTHESIS . CLOSE_PARENTHESIS SEMICOLON
    (49) set -> NAME IGUAL NEW SET OPEN_PARENTHESIS . OPEN_BRACKET items CLOSE_BRACKET CLOSE_PARENTHESIS SEMICOLON
    (50) set -> NAME IGUAL NEW SET OPEN_PARENTHESIS . element CLOSE_PARENTHESIS SEMICOLON
    (60) element -> . STRING
    (61) element -> . NUMBER
    (62) element -> . NAME

    CLOSE_PARENTHESIS shift and go to state 93
    OPEN_BRACKET    shift and go to state 94
    STRING          shift and go to state 71
    NUMBER          shift and go to state 72
    NAME            shift and go to state 69

    element                        shift and go to state 95

state 76

    (13) while -> WHILE OPEN_PARENTHESIS expression CLOSE_PARENTHESIS OPEN_BRACE . expression CLOSE_BRACE
    (1) expression -> . variable
    (2) expression -> . variable expression
    (3) expression -> . dataStruct
    (4) expression -> . dataStruct expression
    (5) expression -> . controlStruct
    (6) expression -> . controlStruct expression
    (7) expression -> . methodsSet
    (8) variable -> . type NAME IGUAL datatype SEMICOLON
    (11) dataStruct -> . array
    (12) dataStruct -> . set
    (9) controlStruct -> . while
    (10) controlStruct -> . for
    (51) methodsSet -> . NAME POINT ADD OPEN_PARENTHESIS element CLOSE_PARENTHESIS SEMICOLON
    (52) methodsSet -> . NAME POINT DELETE OPEN_PARENTHESIS element CLOSE_PARENTHESIS SEMICOLON
    (53) methodsSet -> . NAME POINT CLEAR OPEN_PARENTHESIS CLOSE_PARENTHESIS SEMICOLON
    (32) type -> . CONST
    (33) type -> . LET
    (34) type -> . VAR
    (43) array -> . type NAME IGUAL OPEN_BRACKET items CLOSE_BRACKET SEMICOLON
    (44) array -> . type NAME IGUAL NEW ARRAY OPEN_PARENTHESIS items CLOSE_PARENTHESIS SEMICOLON
    (45) set -> . type NAME IGUAL NEW SET OPEN_PARENTHESIS CLOSE_PARENTHESIS SEMICOLON
    (46) set -> . type NAME IGUAL NEW SET OPEN_PARENTHESIS OPEN_BRACKET items CLOSE_BRACKET CLOSE_PARENTHESIS SEMICOLON
    (47) set -> . type NAME IGUAL NEW SET OPEN_PARENTHESIS element CLOSE_PARENTHESIS SEMICOLON
    (48) set -> . NAME IGUAL NEW SET OPEN_PARENTHESIS CLOSE_PARENTHESIS SEMICOLON
    (49) set -> . NAME IGUAL NEW SET OPEN_PARENTHESIS OPEN_BRACKET items CLOSE_BRACKET CLOSE_PARENTHESIS SEMICOLON
    (50) set -> . NAME IGUAL NEW SET OPEN_PARENTHESIS element CLOSE_PARENTHESIS SEMICOLON
    (13) while -> . WHILE OPEN_PARENTHESIS expression CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE
    (14) while -> . WHILE OPEN_PARENTHESIS bool CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE
    (15) for -> . FOR OPEN_PARENTHESIS inicialization SEMICOLON condition SEMICOLON operations CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE

    NAME            shift and go to state 7
    CONST           shift and go to state 12
    LET             shift and go to state 13
    VAR             shift and go to state 14
    WHILE           shift and go to state 15
    FOR             shift and go to state 16

    expression                     shift and go to state 96
    variable                       shift and go to state 2
    dataStruct                     shift and go to state 3
    controlStruct                  shift and go to state 4
    methodsSet                     shift and go to state 5
    type                           shift and go to state 6
    array                          shift and go to state 8
    set                            shift and go to state 9
    while                          shift and go to state 10
    for                            shift and go to state 11

state 77

    (14) while -> WHILE OPEN_PARENTHESIS bool CLOSE_PARENTHESIS OPEN_BRACE . expression CLOSE_BRACE
    (1) expression -> . variable
    (2) expression -> . variable expression
    (3) expression -> . dataStruct
    (4) expression -> . dataStruct expression
    (5) expression -> . controlStruct
    (6) expression -> . controlStruct expression
    (7) expression -> . methodsSet
    (8) variable -> . type NAME IGUAL datatype SEMICOLON
    (11) dataStruct -> . array
    (12) dataStruct -> . set
    (9) controlStruct -> . while
    (10) controlStruct -> . for
    (51) methodsSet -> . NAME POINT ADD OPEN_PARENTHESIS element CLOSE_PARENTHESIS SEMICOLON
    (52) methodsSet -> . NAME POINT DELETE OPEN_PARENTHESIS element CLOSE_PARENTHESIS SEMICOLON
    (53) methodsSet -> . NAME POINT CLEAR OPEN_PARENTHESIS CLOSE_PARENTHESIS SEMICOLON
    (32) type -> . CONST
    (33) type -> . LET
    (34) type -> . VAR
    (43) array -> . type NAME IGUAL OPEN_BRACKET items CLOSE_BRACKET SEMICOLON
    (44) array -> . type NAME IGUAL NEW ARRAY OPEN_PARENTHESIS items CLOSE_PARENTHESIS SEMICOLON
    (45) set -> . type NAME IGUAL NEW SET OPEN_PARENTHESIS CLOSE_PARENTHESIS SEMICOLON
    (46) set -> . type NAME IGUAL NEW SET OPEN_PARENTHESIS OPEN_BRACKET items CLOSE_BRACKET CLOSE_PARENTHESIS SEMICOLON
    (47) set -> . type NAME IGUAL NEW SET OPEN_PARENTHESIS element CLOSE_PARENTHESIS SEMICOLON
    (48) set -> . NAME IGUAL NEW SET OPEN_PARENTHESIS CLOSE_PARENTHESIS SEMICOLON
    (49) set -> . NAME IGUAL NEW SET OPEN_PARENTHESIS OPEN_BRACKET items CLOSE_BRACKET CLOSE_PARENTHESIS SEMICOLON
    (50) set -> . NAME IGUAL NEW SET OPEN_PARENTHESIS element CLOSE_PARENTHESIS SEMICOLON
    (13) while -> . WHILE OPEN_PARENTHESIS expression CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE
    (14) while -> . WHILE OPEN_PARENTHESIS bool CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE
    (15) for -> . FOR OPEN_PARENTHESIS inicialization SEMICOLON condition SEMICOLON operations CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE

    NAME            shift and go to state 7
    CONST           shift and go to state 12
    LET             shift and go to state 13
    VAR             shift and go to state 14
    WHILE           shift and go to state 15
    FOR             shift and go to state 16

    expression                     shift and go to state 97
    variable                       shift and go to state 2
    dataStruct                     shift and go to state 3
    controlStruct                  shift and go to state 4
    methodsSet                     shift and go to state 5
    type                           shift and go to state 6
    array                          shift and go to state 8
    set                            shift and go to state 9
    while                          shift and go to state 10
    for                            shift and go to state 11

state 78

    (15) for -> FOR OPEN_PARENTHESIS inicialization SEMICOLON condition . SEMICOLON operations CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE

    SEMICOLON       shift and go to state 98


state 79

    (18) condition -> NAME . clause value
    (35) clause -> . IGUALIGUAL
    (36) clause -> . DIFERENTE
    (37) clause -> . MAYORQUE
    (38) clause -> . MAYORIGUALQUE
    (39) clause -> . MENORQUE
    (40) clause -> . MENORIGUALQUE

    IGUALIGUAL      shift and go to state 100
    DIFERENTE       shift and go to state 101
    MAYORQUE        shift and go to state 102
    MAYORIGUALQUE   shift and go to state 103
    MENORQUE        shift and go to state 104
    MENORIGUALQUE   shift and go to state 105

    clause                         shift and go to state 99

state 80

    (16) inicialization -> type NAME IGUAL . NUMBER

    NUMBER          shift and go to state 106


state 81

    (17) inicialization -> NAME IGUAL NUMBER .

    SEMICOLON       reduce using rule 17 (inicialization -> NAME IGUAL NUMBER .)


state 82

    (20) operations -> NAME SUMA SUMA .

    SEMICOLON       reduce using rule 20 (operations -> NAME SUMA SUMA .)
    CLOSE_PARENTHESIS reduce using rule 20 (operations -> NAME SUMA SUMA .)


state 83

    (21) operations -> NAME RESTA RESTA .

    SEMICOLON       reduce using rule 21 (operations -> NAME RESTA RESTA .)
    CLOSE_PARENTHESIS reduce using rule 21 (operations -> NAME RESTA RESTA .)


state 84

    (43) array -> type NAME IGUAL OPEN_BRACKET items CLOSE_BRACKET . SEMICOLON

    SEMICOLON       shift and go to state 107


state 85

    (57) numeros -> NUMBER COMMA . numeros
    (56) numeros -> . NUMBER
    (57) numeros -> . NUMBER COMMA numeros

    NUMBER          shift and go to state 60

    numeros                        shift and go to state 108

state 86

    (59) cadena -> STRING COMMA . cadena
    (58) cadena -> . STRING
    (59) cadena -> . STRING COMMA cadena

    STRING          shift and go to state 61

    cadena                         shift and go to state 109

state 87

    (44) array -> type NAME IGUAL NEW ARRAY OPEN_PARENTHESIS . items CLOSE_PARENTHESIS SEMICOLON
    (54) items -> . numeros
    (55) items -> . cadena
    (56) numeros -> . NUMBER
    (57) numeros -> . NUMBER COMMA numeros
    (58) cadena -> . STRING
    (59) cadena -> . STRING COMMA cadena

    NUMBER          shift and go to state 60
    STRING          shift and go to state 61

    items                          shift and go to state 110
    numeros                        shift and go to state 58
    cadena                         shift and go to state 59

state 88

    (45) set -> type NAME IGUAL NEW SET OPEN_PARENTHESIS . CLOSE_PARENTHESIS SEMICOLON
    (46) set -> type NAME IGUAL NEW SET OPEN_PARENTHESIS . OPEN_BRACKET items CLOSE_BRACKET CLOSE_PARENTHESIS SEMICOLON
    (47) set -> type NAME IGUAL NEW SET OPEN_PARENTHESIS . element CLOSE_PARENTHESIS SEMICOLON
    (60) element -> . STRING
    (61) element -> . NUMBER
    (62) element -> . NAME

    CLOSE_PARENTHESIS shift and go to state 111
    OPEN_BRACKET    shift and go to state 112
    STRING          shift and go to state 71
    NUMBER          shift and go to state 72
    NAME            shift and go to state 69

    element                        shift and go to state 113

state 89

    (19) operations -> NUMBER operand NUMBER .

    SEMICOLON       reduce using rule 19 (operations -> NUMBER operand NUMBER .)
    CLOSE_PARENTHESIS reduce using rule 19 (operations -> NUMBER operand NUMBER .)


state 90

    (51) methodsSet -> NAME POINT ADD OPEN_PARENTHESIS element CLOSE_PARENTHESIS . SEMICOLON

    SEMICOLON       shift and go to state 114


state 91

    (52) methodsSet -> NAME POINT DELETE OPEN_PARENTHESIS element CLOSE_PARENTHESIS . SEMICOLON

    SEMICOLON       shift and go to state 115


state 92

    (53) methodsSet -> NAME POINT CLEAR OPEN_PARENTHESIS CLOSE_PARENTHESIS SEMICOLON .

    $end            reduce using rule 53 (methodsSet -> NAME POINT CLEAR OPEN_PARENTHESIS CLOSE_PARENTHESIS SEMICOLON .)
    CLOSE_PARENTHESIS reduce using rule 53 (methodsSet -> NAME POINT CLEAR OPEN_PARENTHESIS CLOSE_PARENTHESIS SEMICOLON .)
    CLOSE_BRACE     reduce using rule 53 (methodsSet -> NAME POINT CLEAR OPEN_PARENTHESIS CLOSE_PARENTHESIS SEMICOLON .)


state 93

    (48) set -> NAME IGUAL NEW SET OPEN_PARENTHESIS CLOSE_PARENTHESIS . SEMICOLON

    SEMICOLON       shift and go to state 116


state 94

    (49) set -> NAME IGUAL NEW SET OPEN_PARENTHESIS OPEN_BRACKET . items CLOSE_BRACKET CLOSE_PARENTHESIS SEMICOLON
    (54) items -> . numeros
    (55) items -> . cadena
    (56) numeros -> . NUMBER
    (57) numeros -> . NUMBER COMMA numeros
    (58) cadena -> . STRING
    (59) cadena -> . STRING COMMA cadena

    NUMBER          shift and go to state 60
    STRING          shift and go to state 61

    items                          shift and go to state 117
    numeros                        shift and go to state 58
    cadena                         shift and go to state 59

state 95

    (50) set -> NAME IGUAL NEW SET OPEN_PARENTHESIS element . CLOSE_PARENTHESIS SEMICOLON

    CLOSE_PARENTHESIS shift and go to state 118


state 96

    (13) while -> WHILE OPEN_PARENTHESIS expression CLOSE_PARENTHESIS OPEN_BRACE expression . CLOSE_BRACE

    CLOSE_BRACE     shift and go to state 119


state 97

    (14) while -> WHILE OPEN_PARENTHESIS bool CLOSE_PARENTHESIS OPEN_BRACE expression . CLOSE_BRACE

    CLOSE_BRACE     shift and go to state 120


state 98

    (15) for -> FOR OPEN_PARENTHESIS inicialization SEMICOLON condition SEMICOLON . operations CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE
    (19) operations -> . NUMBER operand NUMBER
    (20) operations -> . NAME SUMA SUMA
    (21) operations -> . NAME RESTA RESTA

    NUMBER          shift and go to state 122
    NAME            shift and go to state 37

    operations                     shift and go to state 121

state 99

    (18) condition -> NAME clause . value
    (41) value -> . NAME
    (42) value -> . NUMBER

    NAME            shift and go to state 123
    NUMBER          shift and go to state 125

    value                          shift and go to state 124

state 100

    (35) clause -> IGUALIGUAL .

    NAME            reduce using rule 35 (clause -> IGUALIGUAL .)
    NUMBER          reduce using rule 35 (clause -> IGUALIGUAL .)


state 101

    (36) clause -> DIFERENTE .

    NAME            reduce using rule 36 (clause -> DIFERENTE .)
    NUMBER          reduce using rule 36 (clause -> DIFERENTE .)


state 102

    (37) clause -> MAYORQUE .

    NAME            reduce using rule 37 (clause -> MAYORQUE .)
    NUMBER          reduce using rule 37 (clause -> MAYORQUE .)


state 103

    (38) clause -> MAYORIGUALQUE .

    NAME            reduce using rule 38 (clause -> MAYORIGUALQUE .)
    NUMBER          reduce using rule 38 (clause -> MAYORIGUALQUE .)


state 104

    (39) clause -> MENORQUE .

    NAME            reduce using rule 39 (clause -> MENORQUE .)
    NUMBER          reduce using rule 39 (clause -> MENORQUE .)


state 105

    (40) clause -> MENORIGUALQUE .

    NAME            reduce using rule 40 (clause -> MENORIGUALQUE .)
    NUMBER          reduce using rule 40 (clause -> MENORIGUALQUE .)


state 106

    (16) inicialization -> type NAME IGUAL NUMBER .

    SEMICOLON       reduce using rule 16 (inicialization -> type NAME IGUAL NUMBER .)


state 107

    (43) array -> type NAME IGUAL OPEN_BRACKET items CLOSE_BRACKET SEMICOLON .

    NAME            reduce using rule 43 (array -> type NAME IGUAL OPEN_BRACKET items CLOSE_BRACKET SEMICOLON .)
    CONST           reduce using rule 43 (array -> type NAME IGUAL OPEN_BRACKET items CLOSE_BRACKET SEMICOLON .)
    LET             reduce using rule 43 (array -> type NAME IGUAL OPEN_BRACKET items CLOSE_BRACKET SEMICOLON .)
    VAR             reduce using rule 43 (array -> type NAME IGUAL OPEN_BRACKET items CLOSE_BRACKET SEMICOLON .)
    WHILE           reduce using rule 43 (array -> type NAME IGUAL OPEN_BRACKET items CLOSE_BRACKET SEMICOLON .)
    FOR             reduce using rule 43 (array -> type NAME IGUAL OPEN_BRACKET items CLOSE_BRACKET SEMICOLON .)
    $end            reduce using rule 43 (array -> type NAME IGUAL OPEN_BRACKET items CLOSE_BRACKET SEMICOLON .)
    CLOSE_PARENTHESIS reduce using rule 43 (array -> type NAME IGUAL OPEN_BRACKET items CLOSE_BRACKET SEMICOLON .)
    CLOSE_BRACE     reduce using rule 43 (array -> type NAME IGUAL OPEN_BRACKET items CLOSE_BRACKET SEMICOLON .)


state 108

    (57) numeros -> NUMBER COMMA numeros .

    CLOSE_BRACKET   reduce using rule 57 (numeros -> NUMBER COMMA numeros .)
    CLOSE_PARENTHESIS reduce using rule 57 (numeros -> NUMBER COMMA numeros .)


state 109

    (59) cadena -> STRING COMMA cadena .

    CLOSE_BRACKET   reduce using rule 59 (cadena -> STRING COMMA cadena .)
    CLOSE_PARENTHESIS reduce using rule 59 (cadena -> STRING COMMA cadena .)


state 110

    (44) array -> type NAME IGUAL NEW ARRAY OPEN_PARENTHESIS items . CLOSE_PARENTHESIS SEMICOLON

    CLOSE_PARENTHESIS shift and go to state 126


state 111

    (45) set -> type NAME IGUAL NEW SET OPEN_PARENTHESIS CLOSE_PARENTHESIS . SEMICOLON

    SEMICOLON       shift and go to state 127


state 112

    (46) set -> type NAME IGUAL NEW SET OPEN_PARENTHESIS OPEN_BRACKET . items CLOSE_BRACKET CLOSE_PARENTHESIS SEMICOLON
    (54) items -> . numeros
    (55) items -> . cadena
    (56) numeros -> . NUMBER
    (57) numeros -> . NUMBER COMMA numeros
    (58) cadena -> . STRING
    (59) cadena -> . STRING COMMA cadena

    NUMBER          shift and go to state 60
    STRING          shift and go to state 61

    items                          shift and go to state 128
    numeros                        shift and go to state 58
    cadena                         shift and go to state 59

state 113

    (47) set -> type NAME IGUAL NEW SET OPEN_PARENTHESIS element . CLOSE_PARENTHESIS SEMICOLON

    CLOSE_PARENTHESIS shift and go to state 129


state 114

    (51) methodsSet -> NAME POINT ADD OPEN_PARENTHESIS element CLOSE_PARENTHESIS SEMICOLON .

    $end            reduce using rule 51 (methodsSet -> NAME POINT ADD OPEN_PARENTHESIS element CLOSE_PARENTHESIS SEMICOLON .)
    CLOSE_PARENTHESIS reduce using rule 51 (methodsSet -> NAME POINT ADD OPEN_PARENTHESIS element CLOSE_PARENTHESIS SEMICOLON .)
    CLOSE_BRACE     reduce using rule 51 (methodsSet -> NAME POINT ADD OPEN_PARENTHESIS element CLOSE_PARENTHESIS SEMICOLON .)


state 115

    (52) methodsSet -> NAME POINT DELETE OPEN_PARENTHESIS element CLOSE_PARENTHESIS SEMICOLON .

    $end            reduce using rule 52 (methodsSet -> NAME POINT DELETE OPEN_PARENTHESIS element CLOSE_PARENTHESIS SEMICOLON .)
    CLOSE_PARENTHESIS reduce using rule 52 (methodsSet -> NAME POINT DELETE OPEN_PARENTHESIS element CLOSE_PARENTHESIS SEMICOLON .)
    CLOSE_BRACE     reduce using rule 52 (methodsSet -> NAME POINT DELETE OPEN_PARENTHESIS element CLOSE_PARENTHESIS SEMICOLON .)


state 116

    (48) set -> NAME IGUAL NEW SET OPEN_PARENTHESIS CLOSE_PARENTHESIS SEMICOLON .

    NAME            reduce using rule 48 (set -> NAME IGUAL NEW SET OPEN_PARENTHESIS CLOSE_PARENTHESIS SEMICOLON .)
    CONST           reduce using rule 48 (set -> NAME IGUAL NEW SET OPEN_PARENTHESIS CLOSE_PARENTHESIS SEMICOLON .)
    LET             reduce using rule 48 (set -> NAME IGUAL NEW SET OPEN_PARENTHESIS CLOSE_PARENTHESIS SEMICOLON .)
    VAR             reduce using rule 48 (set -> NAME IGUAL NEW SET OPEN_PARENTHESIS CLOSE_PARENTHESIS SEMICOLON .)
    WHILE           reduce using rule 48 (set -> NAME IGUAL NEW SET OPEN_PARENTHESIS CLOSE_PARENTHESIS SEMICOLON .)
    FOR             reduce using rule 48 (set -> NAME IGUAL NEW SET OPEN_PARENTHESIS CLOSE_PARENTHESIS SEMICOLON .)
    $end            reduce using rule 48 (set -> NAME IGUAL NEW SET OPEN_PARENTHESIS CLOSE_PARENTHESIS SEMICOLON .)
    CLOSE_PARENTHESIS reduce using rule 48 (set -> NAME IGUAL NEW SET OPEN_PARENTHESIS CLOSE_PARENTHESIS SEMICOLON .)
    CLOSE_BRACE     reduce using rule 48 (set -> NAME IGUAL NEW SET OPEN_PARENTHESIS CLOSE_PARENTHESIS SEMICOLON .)


state 117

    (49) set -> NAME IGUAL NEW SET OPEN_PARENTHESIS OPEN_BRACKET items . CLOSE_BRACKET CLOSE_PARENTHESIS SEMICOLON

    CLOSE_BRACKET   shift and go to state 130


state 118

    (50) set -> NAME IGUAL NEW SET OPEN_PARENTHESIS element CLOSE_PARENTHESIS . SEMICOLON

    SEMICOLON       shift and go to state 131


state 119

    (13) while -> WHILE OPEN_PARENTHESIS expression CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE .

    NAME            reduce using rule 13 (while -> WHILE OPEN_PARENTHESIS expression CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE .)
    CONST           reduce using rule 13 (while -> WHILE OPEN_PARENTHESIS expression CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE .)
    LET             reduce using rule 13 (while -> WHILE OPEN_PARENTHESIS expression CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE .)
    VAR             reduce using rule 13 (while -> WHILE OPEN_PARENTHESIS expression CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE .)
    WHILE           reduce using rule 13 (while -> WHILE OPEN_PARENTHESIS expression CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE .)
    FOR             reduce using rule 13 (while -> WHILE OPEN_PARENTHESIS expression CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE .)
    $end            reduce using rule 13 (while -> WHILE OPEN_PARENTHESIS expression CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE .)
    CLOSE_PARENTHESIS reduce using rule 13 (while -> WHILE OPEN_PARENTHESIS expression CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE .)
    CLOSE_BRACE     reduce using rule 13 (while -> WHILE OPEN_PARENTHESIS expression CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE .)


state 120

    (14) while -> WHILE OPEN_PARENTHESIS bool CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE .

    NAME            reduce using rule 14 (while -> WHILE OPEN_PARENTHESIS bool CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE .)
    CONST           reduce using rule 14 (while -> WHILE OPEN_PARENTHESIS bool CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE .)
    LET             reduce using rule 14 (while -> WHILE OPEN_PARENTHESIS bool CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE .)
    VAR             reduce using rule 14 (while -> WHILE OPEN_PARENTHESIS bool CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE .)
    WHILE           reduce using rule 14 (while -> WHILE OPEN_PARENTHESIS bool CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE .)
    FOR             reduce using rule 14 (while -> WHILE OPEN_PARENTHESIS bool CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE .)
    $end            reduce using rule 14 (while -> WHILE OPEN_PARENTHESIS bool CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE .)
    CLOSE_PARENTHESIS reduce using rule 14 (while -> WHILE OPEN_PARENTHESIS bool CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE .)
    CLOSE_BRACE     reduce using rule 14 (while -> WHILE OPEN_PARENTHESIS bool CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE .)


state 121

    (15) for -> FOR OPEN_PARENTHESIS inicialization SEMICOLON condition SEMICOLON operations . CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE

    CLOSE_PARENTHESIS shift and go to state 132


state 122

    (19) operations -> NUMBER . operand NUMBER
    (26) operand -> . SUMA
    (27) operand -> . RESTA
    (28) operand -> . MULTIPLICACION
    (29) operand -> . DIVISION

    SUMA            shift and go to state 65
    RESTA           shift and go to state 66
    MULTIPLICACION  shift and go to state 67
    DIVISION        shift and go to state 68

    operand                        shift and go to state 64

state 123

    (41) value -> NAME .

    SEMICOLON       reduce using rule 41 (value -> NAME .)


state 124

    (18) condition -> NAME clause value .

    SEMICOLON       reduce using rule 18 (condition -> NAME clause value .)


state 125

    (42) value -> NUMBER .

    SEMICOLON       reduce using rule 42 (value -> NUMBER .)


state 126

    (44) array -> type NAME IGUAL NEW ARRAY OPEN_PARENTHESIS items CLOSE_PARENTHESIS . SEMICOLON

    SEMICOLON       shift and go to state 133


state 127

    (45) set -> type NAME IGUAL NEW SET OPEN_PARENTHESIS CLOSE_PARENTHESIS SEMICOLON .

    NAME            reduce using rule 45 (set -> type NAME IGUAL NEW SET OPEN_PARENTHESIS CLOSE_PARENTHESIS SEMICOLON .)
    CONST           reduce using rule 45 (set -> type NAME IGUAL NEW SET OPEN_PARENTHESIS CLOSE_PARENTHESIS SEMICOLON .)
    LET             reduce using rule 45 (set -> type NAME IGUAL NEW SET OPEN_PARENTHESIS CLOSE_PARENTHESIS SEMICOLON .)
    VAR             reduce using rule 45 (set -> type NAME IGUAL NEW SET OPEN_PARENTHESIS CLOSE_PARENTHESIS SEMICOLON .)
    WHILE           reduce using rule 45 (set -> type NAME IGUAL NEW SET OPEN_PARENTHESIS CLOSE_PARENTHESIS SEMICOLON .)
    FOR             reduce using rule 45 (set -> type NAME IGUAL NEW SET OPEN_PARENTHESIS CLOSE_PARENTHESIS SEMICOLON .)
    $end            reduce using rule 45 (set -> type NAME IGUAL NEW SET OPEN_PARENTHESIS CLOSE_PARENTHESIS SEMICOLON .)
    CLOSE_PARENTHESIS reduce using rule 45 (set -> type NAME IGUAL NEW SET OPEN_PARENTHESIS CLOSE_PARENTHESIS SEMICOLON .)
    CLOSE_BRACE     reduce using rule 45 (set -> type NAME IGUAL NEW SET OPEN_PARENTHESIS CLOSE_PARENTHESIS SEMICOLON .)


state 128

    (46) set -> type NAME IGUAL NEW SET OPEN_PARENTHESIS OPEN_BRACKET items . CLOSE_BRACKET CLOSE_PARENTHESIS SEMICOLON

    CLOSE_BRACKET   shift and go to state 134


state 129

    (47) set -> type NAME IGUAL NEW SET OPEN_PARENTHESIS element CLOSE_PARENTHESIS . SEMICOLON

    SEMICOLON       shift and go to state 135


state 130

    (49) set -> NAME IGUAL NEW SET OPEN_PARENTHESIS OPEN_BRACKET items CLOSE_BRACKET . CLOSE_PARENTHESIS SEMICOLON

    CLOSE_PARENTHESIS shift and go to state 136


state 131

    (50) set -> NAME IGUAL NEW SET OPEN_PARENTHESIS element CLOSE_PARENTHESIS SEMICOLON .

    NAME            reduce using rule 50 (set -> NAME IGUAL NEW SET OPEN_PARENTHESIS element CLOSE_PARENTHESIS SEMICOLON .)
    CONST           reduce using rule 50 (set -> NAME IGUAL NEW SET OPEN_PARENTHESIS element CLOSE_PARENTHESIS SEMICOLON .)
    LET             reduce using rule 50 (set -> NAME IGUAL NEW SET OPEN_PARENTHESIS element CLOSE_PARENTHESIS SEMICOLON .)
    VAR             reduce using rule 50 (set -> NAME IGUAL NEW SET OPEN_PARENTHESIS element CLOSE_PARENTHESIS SEMICOLON .)
    WHILE           reduce using rule 50 (set -> NAME IGUAL NEW SET OPEN_PARENTHESIS element CLOSE_PARENTHESIS SEMICOLON .)
    FOR             reduce using rule 50 (set -> NAME IGUAL NEW SET OPEN_PARENTHESIS element CLOSE_PARENTHESIS SEMICOLON .)
    $end            reduce using rule 50 (set -> NAME IGUAL NEW SET OPEN_PARENTHESIS element CLOSE_PARENTHESIS SEMICOLON .)
    CLOSE_PARENTHESIS reduce using rule 50 (set -> NAME IGUAL NEW SET OPEN_PARENTHESIS element CLOSE_PARENTHESIS SEMICOLON .)
    CLOSE_BRACE     reduce using rule 50 (set -> NAME IGUAL NEW SET OPEN_PARENTHESIS element CLOSE_PARENTHESIS SEMICOLON .)


state 132

    (15) for -> FOR OPEN_PARENTHESIS inicialization SEMICOLON condition SEMICOLON operations CLOSE_PARENTHESIS . OPEN_BRACE expression CLOSE_BRACE

    OPEN_BRACE      shift and go to state 137


state 133

    (44) array -> type NAME IGUAL NEW ARRAY OPEN_PARENTHESIS items CLOSE_PARENTHESIS SEMICOLON .

    NAME            reduce using rule 44 (array -> type NAME IGUAL NEW ARRAY OPEN_PARENTHESIS items CLOSE_PARENTHESIS SEMICOLON .)
    CONST           reduce using rule 44 (array -> type NAME IGUAL NEW ARRAY OPEN_PARENTHESIS items CLOSE_PARENTHESIS SEMICOLON .)
    LET             reduce using rule 44 (array -> type NAME IGUAL NEW ARRAY OPEN_PARENTHESIS items CLOSE_PARENTHESIS SEMICOLON .)
    VAR             reduce using rule 44 (array -> type NAME IGUAL NEW ARRAY OPEN_PARENTHESIS items CLOSE_PARENTHESIS SEMICOLON .)
    WHILE           reduce using rule 44 (array -> type NAME IGUAL NEW ARRAY OPEN_PARENTHESIS items CLOSE_PARENTHESIS SEMICOLON .)
    FOR             reduce using rule 44 (array -> type NAME IGUAL NEW ARRAY OPEN_PARENTHESIS items CLOSE_PARENTHESIS SEMICOLON .)
    $end            reduce using rule 44 (array -> type NAME IGUAL NEW ARRAY OPEN_PARENTHESIS items CLOSE_PARENTHESIS SEMICOLON .)
    CLOSE_PARENTHESIS reduce using rule 44 (array -> type NAME IGUAL NEW ARRAY OPEN_PARENTHESIS items CLOSE_PARENTHESIS SEMICOLON .)
    CLOSE_BRACE     reduce using rule 44 (array -> type NAME IGUAL NEW ARRAY OPEN_PARENTHESIS items CLOSE_PARENTHESIS SEMICOLON .)


state 134

    (46) set -> type NAME IGUAL NEW SET OPEN_PARENTHESIS OPEN_BRACKET items CLOSE_BRACKET . CLOSE_PARENTHESIS SEMICOLON

    CLOSE_PARENTHESIS shift and go to state 138


state 135

    (47) set -> type NAME IGUAL NEW SET OPEN_PARENTHESIS element CLOSE_PARENTHESIS SEMICOLON .

    NAME            reduce using rule 47 (set -> type NAME IGUAL NEW SET OPEN_PARENTHESIS element CLOSE_PARENTHESIS SEMICOLON .)
    CONST           reduce using rule 47 (set -> type NAME IGUAL NEW SET OPEN_PARENTHESIS element CLOSE_PARENTHESIS SEMICOLON .)
    LET             reduce using rule 47 (set -> type NAME IGUAL NEW SET OPEN_PARENTHESIS element CLOSE_PARENTHESIS SEMICOLON .)
    VAR             reduce using rule 47 (set -> type NAME IGUAL NEW SET OPEN_PARENTHESIS element CLOSE_PARENTHESIS SEMICOLON .)
    WHILE           reduce using rule 47 (set -> type NAME IGUAL NEW SET OPEN_PARENTHESIS element CLOSE_PARENTHESIS SEMICOLON .)
    FOR             reduce using rule 47 (set -> type NAME IGUAL NEW SET OPEN_PARENTHESIS element CLOSE_PARENTHESIS SEMICOLON .)
    $end            reduce using rule 47 (set -> type NAME IGUAL NEW SET OPEN_PARENTHESIS element CLOSE_PARENTHESIS SEMICOLON .)
    CLOSE_PARENTHESIS reduce using rule 47 (set -> type NAME IGUAL NEW SET OPEN_PARENTHESIS element CLOSE_PARENTHESIS SEMICOLON .)
    CLOSE_BRACE     reduce using rule 47 (set -> type NAME IGUAL NEW SET OPEN_PARENTHESIS element CLOSE_PARENTHESIS SEMICOLON .)


state 136

    (49) set -> NAME IGUAL NEW SET OPEN_PARENTHESIS OPEN_BRACKET items CLOSE_BRACKET CLOSE_PARENTHESIS . SEMICOLON

    SEMICOLON       shift and go to state 139


state 137

    (15) for -> FOR OPEN_PARENTHESIS inicialization SEMICOLON condition SEMICOLON operations CLOSE_PARENTHESIS OPEN_BRACE . expression CLOSE_BRACE
    (1) expression -> . variable
    (2) expression -> . variable expression
    (3) expression -> . dataStruct
    (4) expression -> . dataStruct expression
    (5) expression -> . controlStruct
    (6) expression -> . controlStruct expression
    (7) expression -> . methodsSet
    (8) variable -> . type NAME IGUAL datatype SEMICOLON
    (11) dataStruct -> . array
    (12) dataStruct -> . set
    (9) controlStruct -> . while
    (10) controlStruct -> . for
    (51) methodsSet -> . NAME POINT ADD OPEN_PARENTHESIS element CLOSE_PARENTHESIS SEMICOLON
    (52) methodsSet -> . NAME POINT DELETE OPEN_PARENTHESIS element CLOSE_PARENTHESIS SEMICOLON
    (53) methodsSet -> . NAME POINT CLEAR OPEN_PARENTHESIS CLOSE_PARENTHESIS SEMICOLON
    (32) type -> . CONST
    (33) type -> . LET
    (34) type -> . VAR
    (43) array -> . type NAME IGUAL OPEN_BRACKET items CLOSE_BRACKET SEMICOLON
    (44) array -> . type NAME IGUAL NEW ARRAY OPEN_PARENTHESIS items CLOSE_PARENTHESIS SEMICOLON
    (45) set -> . type NAME IGUAL NEW SET OPEN_PARENTHESIS CLOSE_PARENTHESIS SEMICOLON
    (46) set -> . type NAME IGUAL NEW SET OPEN_PARENTHESIS OPEN_BRACKET items CLOSE_BRACKET CLOSE_PARENTHESIS SEMICOLON
    (47) set -> . type NAME IGUAL NEW SET OPEN_PARENTHESIS element CLOSE_PARENTHESIS SEMICOLON
    (48) set -> . NAME IGUAL NEW SET OPEN_PARENTHESIS CLOSE_PARENTHESIS SEMICOLON
    (49) set -> . NAME IGUAL NEW SET OPEN_PARENTHESIS OPEN_BRACKET items CLOSE_BRACKET CLOSE_PARENTHESIS SEMICOLON
    (50) set -> . NAME IGUAL NEW SET OPEN_PARENTHESIS element CLOSE_PARENTHESIS SEMICOLON
    (13) while -> . WHILE OPEN_PARENTHESIS expression CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE
    (14) while -> . WHILE OPEN_PARENTHESIS bool CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE
    (15) for -> . FOR OPEN_PARENTHESIS inicialization SEMICOLON condition SEMICOLON operations CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE

    NAME            shift and go to state 7
    CONST           shift and go to state 12
    LET             shift and go to state 13
    VAR             shift and go to state 14
    WHILE           shift and go to state 15
    FOR             shift and go to state 16

    expression                     shift and go to state 140
    variable                       shift and go to state 2
    dataStruct                     shift and go to state 3
    controlStruct                  shift and go to state 4
    methodsSet                     shift and go to state 5
    type                           shift and go to state 6
    array                          shift and go to state 8
    set                            shift and go to state 9
    while                          shift and go to state 10
    for                            shift and go to state 11

state 138

    (46) set -> type NAME IGUAL NEW SET OPEN_PARENTHESIS OPEN_BRACKET items CLOSE_BRACKET CLOSE_PARENTHESIS . SEMICOLON

    SEMICOLON       shift and go to state 141


state 139

    (49) set -> NAME IGUAL NEW SET OPEN_PARENTHESIS OPEN_BRACKET items CLOSE_BRACKET CLOSE_PARENTHESIS SEMICOLON .

    NAME            reduce using rule 49 (set -> NAME IGUAL NEW SET OPEN_PARENTHESIS OPEN_BRACKET items CLOSE_BRACKET CLOSE_PARENTHESIS SEMICOLON .)
    CONST           reduce using rule 49 (set -> NAME IGUAL NEW SET OPEN_PARENTHESIS OPEN_BRACKET items CLOSE_BRACKET CLOSE_PARENTHESIS SEMICOLON .)
    LET             reduce using rule 49 (set -> NAME IGUAL NEW SET OPEN_PARENTHESIS OPEN_BRACKET items CLOSE_BRACKET CLOSE_PARENTHESIS SEMICOLON .)
    VAR             reduce using rule 49 (set -> NAME IGUAL NEW SET OPEN_PARENTHESIS OPEN_BRACKET items CLOSE_BRACKET CLOSE_PARENTHESIS SEMICOLON .)
    WHILE           reduce using rule 49 (set -> NAME IGUAL NEW SET OPEN_PARENTHESIS OPEN_BRACKET items CLOSE_BRACKET CLOSE_PARENTHESIS SEMICOLON .)
    FOR             reduce using rule 49 (set -> NAME IGUAL NEW SET OPEN_PARENTHESIS OPEN_BRACKET items CLOSE_BRACKET CLOSE_PARENTHESIS SEMICOLON .)
    $end            reduce using rule 49 (set -> NAME IGUAL NEW SET OPEN_PARENTHESIS OPEN_BRACKET items CLOSE_BRACKET CLOSE_PARENTHESIS SEMICOLON .)
    CLOSE_PARENTHESIS reduce using rule 49 (set -> NAME IGUAL NEW SET OPEN_PARENTHESIS OPEN_BRACKET items CLOSE_BRACKET CLOSE_PARENTHESIS SEMICOLON .)
    CLOSE_BRACE     reduce using rule 49 (set -> NAME IGUAL NEW SET OPEN_PARENTHESIS OPEN_BRACKET items CLOSE_BRACKET CLOSE_PARENTHESIS SEMICOLON .)


state 140

    (15) for -> FOR OPEN_PARENTHESIS inicialization SEMICOLON condition SEMICOLON operations CLOSE_PARENTHESIS OPEN_BRACE expression . CLOSE_BRACE

    CLOSE_BRACE     shift and go to state 142


state 141

    (46) set -> type NAME IGUAL NEW SET OPEN_PARENTHESIS OPEN_BRACKET items CLOSE_BRACKET CLOSE_PARENTHESIS SEMICOLON .

    NAME            reduce using rule 46 (set -> type NAME IGUAL NEW SET OPEN_PARENTHESIS OPEN_BRACKET items CLOSE_BRACKET CLOSE_PARENTHESIS SEMICOLON .)
    CONST           reduce using rule 46 (set -> type NAME IGUAL NEW SET OPEN_PARENTHESIS OPEN_BRACKET items CLOSE_BRACKET CLOSE_PARENTHESIS SEMICOLON .)
    LET             reduce using rule 46 (set -> type NAME IGUAL NEW SET OPEN_PARENTHESIS OPEN_BRACKET items CLOSE_BRACKET CLOSE_PARENTHESIS SEMICOLON .)
    VAR             reduce using rule 46 (set -> type NAME IGUAL NEW SET OPEN_PARENTHESIS OPEN_BRACKET items CLOSE_BRACKET CLOSE_PARENTHESIS SEMICOLON .)
    WHILE           reduce using rule 46 (set -> type NAME IGUAL NEW SET OPEN_PARENTHESIS OPEN_BRACKET items CLOSE_BRACKET CLOSE_PARENTHESIS SEMICOLON .)
    FOR             reduce using rule 46 (set -> type NAME IGUAL NEW SET OPEN_PARENTHESIS OPEN_BRACKET items CLOSE_BRACKET CLOSE_PARENTHESIS SEMICOLON .)
    $end            reduce using rule 46 (set -> type NAME IGUAL NEW SET OPEN_PARENTHESIS OPEN_BRACKET items CLOSE_BRACKET CLOSE_PARENTHESIS SEMICOLON .)
    CLOSE_PARENTHESIS reduce using rule 46 (set -> type NAME IGUAL NEW SET OPEN_PARENTHESIS OPEN_BRACKET items CLOSE_BRACKET CLOSE_PARENTHESIS SEMICOLON .)
    CLOSE_BRACE     reduce using rule 46 (set -> type NAME IGUAL NEW SET OPEN_PARENTHESIS OPEN_BRACKET items CLOSE_BRACKET CLOSE_PARENTHESIS SEMICOLON .)


state 142

    (15) for -> FOR OPEN_PARENTHESIS inicialization SEMICOLON condition SEMICOLON operations CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE .

    NAME            reduce using rule 15 (for -> FOR OPEN_PARENTHESIS inicialization SEMICOLON condition SEMICOLON operations CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE .)
    CONST           reduce using rule 15 (for -> FOR OPEN_PARENTHESIS inicialization SEMICOLON condition SEMICOLON operations CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE .)
    LET             reduce using rule 15 (for -> FOR OPEN_PARENTHESIS inicialization SEMICOLON condition SEMICOLON operations CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE .)
    VAR             reduce using rule 15 (for -> FOR OPEN_PARENTHESIS inicialization SEMICOLON condition SEMICOLON operations CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE .)
    WHILE           reduce using rule 15 (for -> FOR OPEN_PARENTHESIS inicialization SEMICOLON condition SEMICOLON operations CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE .)
    FOR             reduce using rule 15 (for -> FOR OPEN_PARENTHESIS inicialization SEMICOLON condition SEMICOLON operations CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE .)
    $end            reduce using rule 15 (for -> FOR OPEN_PARENTHESIS inicialization SEMICOLON condition SEMICOLON operations CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE .)
    CLOSE_PARENTHESIS reduce using rule 15 (for -> FOR OPEN_PARENTHESIS inicialization SEMICOLON condition SEMICOLON operations CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE .)
    CLOSE_BRACE     reduce using rule 15 (for -> FOR OPEN_PARENTHESIS inicialization SEMICOLON condition SEMICOLON operations CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE .)


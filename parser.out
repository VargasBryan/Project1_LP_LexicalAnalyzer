Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Grammar

Rule 0     S' -> expression
Rule 1     expression -> semiExpression
Rule 2     expression -> semiExpression expression
Rule 3     semiExpression -> variable
Rule 4     semiExpression -> dataStruct SEMICOLON
Rule 5     semiExpression -> controlStruct
Rule 6     semiExpression -> methodsSet
Rule 7     semiExpression -> mapFunctions
Rule 8     semiExpression -> arrayFn
Rule 9     semiExpression -> declaration
Rule 10    semiExpression -> print
Rule 11    semiExpression -> input
Rule 12    semiExpression -> return
Rule 13    semiExpression -> function
Rule 14    semiExpression -> COMMENTS
Rule 15    semiExpression -> LONGCOMMENT
Rule 16    semiExpression -> asigOp
Rule 17    number -> onlyNumber
Rule 18    number -> OPEN_PARENTHESIS RESTA INTEGER CLOSE_PARENTHESIS
Rule 19    number -> OPEN_PARENTHESIS RESTA FLOAT CLOSE_PARENTHESIS
Rule 20    onlyNumber -> INTEGER
Rule 21    onlyNumber -> FLOAT
Rule 22    bool -> TRUE
Rule 23    bool -> FALSE
Rule 24    variable -> type NAME IGUAL datatype SEMICOLON
Rule 25    variable -> NAME IGUAL datatype SEMICOLON
Rule 26    variable -> type NAME SEMICOLON
Rule 27    variable -> type NAME IGUAL input
Rule 28    variable -> NAME IGUAL input
Rule 29    type -> CONST
Rule 30    type -> LET
Rule 31    type -> VAR
Rule 32    datatype -> number
Rule 33    datatype -> NAME
Rule 34    datatype -> STRING
Rule 35    datatype -> CHAR
Rule 36    datatype -> operations
Rule 37    datatype -> dataStruct
Rule 38    operations -> number operand number
Rule 39    operations -> NAME
Rule 40    operations -> number
Rule 41    operations -> number operand NAME operations
Rule 42    operations -> NAME operand number operations
Rule 43    operations -> number operand NAME
Rule 44    operations -> NAME operand number
Rule 45    operations -> NAME operand NAME operations
Rule 46    operations -> number operand number operand operations
Rule 47    operations -> NAME SUMA SUMA
Rule 48    operations -> NAME operand NAME
Rule 49    operations -> NAME RESTA RESTA
Rule 50    operand -> SUMA
Rule 51    operand -> RESTA
Rule 52    operand -> MULTIPLICACION
Rule 53    operand -> DIVISION
Rule 54    operadorAsig -> MASIGUAL
Rule 55    operadorAsig -> MENOSIGUAL
Rule 56    operadorAsig -> PORIGUAL
Rule 57    operadorAsig -> DIVIGUAL
Rule 58    operadorAsig -> MODIGUAL
Rule 59    operadorAsig -> POTIGUAL
Rule 60    asigOp -> NAME operadorAsig number SEMICOLON
Rule 61    controlStruct -> while
Rule 62    controlStruct -> for
Rule 63    controlStruct -> if
Rule 64    dataStruct -> array
Rule 65    dataStruct -> set
Rule 66    dataStruct -> map
Rule 67    items -> item
Rule 68    items -> item COMMA items
Rule 69    item -> expBoolean
Rule 70    item -> datatype
Rule 71    element -> STRING
Rule 72    element -> number
Rule 73    element -> NAME
Rule 74    declaration -> NAME IGUAL element SEMICOLON
Rule 75    logicalOperator -> AND
Rule 76    logicalOperator -> OR
Rule 77    expBoolean -> controlArg
Rule 78    expBoolean -> bool
Rule 79    expBoolean -> NOT expBoolean
Rule 80    expBoolean -> expBoolean logicalOperator expBoolean
Rule 81    controlArg -> element clause element
Rule 82    clause -> IGUALIGUAL
Rule 83    clause -> DIFERENTE
Rule 84    clause -> MAYORQUE
Rule 85    clause -> MAYORIGUALQUE
Rule 86    clause -> MENORQUE
Rule 87    clause -> MENORIGUALQUE
Rule 88    while -> WHILE OPEN_PARENTHESIS expBoolean CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE
Rule 89    while -> WHILE OPEN_PARENTHESIS bool CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE
Rule 90    if -> soloIf
Rule 91    if -> soloIf elseIf
Rule 92    if -> soloIf elseIf else
Rule 93    if -> soloIf else
Rule 94    soloIf -> IF OPEN_PARENTHESIS expBoolean CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE
Rule 95    elseIf -> ELSEIF OPEN_PARENTHESIS expBoolean CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE
Rule 96    elseIf -> ELSEIF OPEN_PARENTHESIS expBoolean CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE elseIf
Rule 97    else -> ELSE OPEN_BRACE expression CLOSE_BRACE
Rule 98    for -> FOR OPEN_PARENTHESIS inicialization SEMICOLON expBoolean SEMICOLON operations CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE
Rule 99    inicialization -> type NAME IGUAL number
Rule 100   inicialization -> NAME IGUAL number
Rule 101   array -> OPEN_BRACKET items CLOSE_BRACKET
Rule 102   array -> NEW ARRAY OPEN_PARENTHESIS items CLOSE_PARENTHESIS
Rule 103   arrayFn -> NAME POINT POP OPEN_PARENTHESIS CLOSE_PARENTHESIS SEMICOLON
Rule 104   arrayFn -> NAME POINT PUSH OPEN_PARENTHESIS item CLOSE_PARENTHESIS SEMICOLON
Rule 105   arrayFn -> NAME POINT UNSHIFT OPEN_PARENTHESIS item CLOSE_PARENTHESIS SEMICOLON
Rule 106   map -> iniciarMap
Rule 107   map -> escribirMap
Rule 108   iniciarMap -> NEW MAP OPEN_PARENTHESIS CLOSE_PARENTHESIS
Rule 109   iniciarMap -> NEW MAP OPEN_PARENTHESIS tupla CLOSE_PARENTHESIS
Rule 110   escribirMap -> OPEN_BRACE claveValor CLOSE_BRACE
Rule 111   claveValor -> clave COLON datatype
Rule 112   claveValor -> clave COLON datatype COMMA claveValor
Rule 113   clave -> onlyNumber
Rule 114   clave -> STRING
Rule 115   clave -> CHAR
Rule 116   clave -> bool
Rule 117   tupla -> OPEN_BRACKET item COMMA item CLOSE_BRACKET
Rule 118   tupla -> OPEN_BRACKET item COMMA item CLOSE_BRACKET COMMA tupla
Rule 119   mapFunctions -> NAME POINT CLEAR OPEN_PARENTHESIS CLOSE_PARENTHESIS SEMICOLON
Rule 120   mapFunctions -> NAME POINT GET OPEN_PARENTHESIS clave CLOSE_PARENTHESIS SEMICOLON
Rule 121   mapFunctions -> NAME POINT HAS OPEN_PARENTHESIS clave CLOSE_PARENTHESIS SEMICOLON
Rule 122   set -> NEW SET OPEN_PARENTHESIS CLOSE_PARENTHESIS
Rule 123   set -> NEW SET OPEN_PARENTHESIS OPEN_BRACKET items CLOSE_BRACKET CLOSE_PARENTHESIS
Rule 124   set -> NEW SET OPEN_PARENTHESIS element CLOSE_PARENTHESIS
Rule 125   methodsSet -> NAME POINT ADD OPEN_PARENTHESIS element CLOSE_PARENTHESIS SEMICOLON
Rule 126   methodsSet -> NAME POINT DELETE OPEN_PARENTHESIS element CLOSE_PARENTHESIS SEMICOLON
Rule 127   methodsSet -> NAME POINT CLEAR OPEN_PARENTHESIS CLOSE_PARENTHESIS SEMICOLON
Rule 128   function -> FUNCTION NAME OPEN_PARENTHESIS CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE
Rule 129   function -> FUNCTION NAME OPEN_PARENTHESIS parameter CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE
Rule 130   parameter -> datatype
Rule 131   parameter -> datatype COMMA parameter
Rule 132   return -> RETURN datatype SEMICOLON
Rule 133   print -> PRINT OPEN_PARENTHESIS datatype CLOSE_PARENTHESIS SEMICOLON
Rule 134   print -> PRINT OPEN_PARENTHESIS CLOSE_PARENTHESIS SEMICOLON
Rule 135   input -> INPUT OPEN_PARENTHESIS element COMMA element CLOSE_PARENTHESIS SEMICOLON
Rule 136   input -> INPUT OPEN_PARENTHESIS element CLOSE_PARENTHESIS SEMICOLON
Rule 137   input -> INPUT OPEN_PARENTHESIS CLOSE_PARENTHESIS SEMICOLON

Terminals, with rules where they appear

ADD                  : 125
AND                  : 75
ARRAY                : 102
CHAR                 : 35 115
CLEAR                : 119 127
CLOSE_BRACE          : 88 89 94 95 96 97 98 110 128 129
CLOSE_BRACKET        : 101 117 118 123
CLOSE_PARENTHESIS    : 18 19 88 89 94 95 96 98 102 103 104 105 108 109 119 120 121 122 123 124 125 126 127 128 129 133 134 135 136 137
COLON                : 111 112
COMMA                : 68 112 117 118 118 131 135
COMMENTS             : 14
CONST                : 29
DELETE               : 126
DIFERENTE            : 83
DIVIGUAL             : 57
DIVISION             : 53
ELSE                 : 97
ELSEIF               : 95 96
FALSE                : 23
FLOAT                : 19 21
FOR                  : 98
FUNCTION             : 128 129
GET                  : 120
HAS                  : 121
IF                   : 94
IGUAL                : 24 25 27 28 74 99 100
IGUALIGUAL           : 82
INPUT                : 135 136 137
INTEGER              : 18 20
LET                  : 30
LONGCOMMENT          : 15
MAP                  : 108 109
MASIGUAL             : 54
MAYORIGUALQUE        : 85
MAYORQUE             : 84
MENORIGUALQUE        : 87
MENORQUE             : 86
MENOSIGUAL           : 55
MODIGUAL             : 58
MULTIPLICACION       : 52
NAME                 : 24 25 26 27 28 33 39 41 42 43 44 45 45 47 48 48 49 60 73 74 99 100 103 104 105 119 120 121 125 126 127 128 129
NEW                  : 102 108 109 122 123 124
NOT                  : 79
OPEN_BRACE           : 88 89 94 95 96 97 98 110 128 129
OPEN_BRACKET         : 101 117 118 123
OPEN_PARENTHESIS     : 18 19 88 89 94 95 96 98 102 103 104 105 108 109 119 120 121 122 123 124 125 126 127 128 129 133 134 135 136 137
OR                   : 76
POINT                : 103 104 105 119 120 121 125 126 127
POP                  : 103
PORIGUAL             : 56
POTIGUAL             : 59
PRINT                : 133 134
PUSH                 : 104
RESTA                : 18 19 49 49 51
RETURN               : 132
SEMICOLON            : 4 24 25 26 60 74 98 98 103 104 105 119 120 121 125 126 127 132 133 134 135 136 137
SET                  : 122 123 124
STRING               : 34 71 114
SUMA                 : 47 47 50
TRUE                 : 22
UNSHIFT              : 105
VAR                  : 31
WHILE                : 88 89
error                : 

Nonterminals, with rules where they appear

array                : 64
arrayFn              : 8
asigOp               : 16
bool                 : 78 89 116
clause               : 81
clave                : 111 112 120 121
claveValor           : 110 112
controlArg           : 77
controlStruct        : 5
dataStruct           : 4 37
datatype             : 24 25 70 111 112 130 131 132 133
declaration          : 9
element              : 74 81 81 124 125 126 135 135 136
else                 : 92 93
elseIf               : 91 92 96
escribirMap          : 107
expBoolean           : 69 79 80 80 88 94 95 96 98
expression           : 2 88 89 94 95 96 97 98 128 129 0
for                  : 62
function             : 13
if                   : 63
inicialization       : 98
iniciarMap           : 106
input                : 11 27 28
item                 : 67 68 104 105 117 117 118 118
items                : 68 101 102 123
logicalOperator      : 80
map                  : 66
mapFunctions         : 7
methodsSet           : 6
number               : 32 38 38 40 41 42 43 44 46 46 60 72 99 100
onlyNumber           : 17 113
operadorAsig         : 60
operand              : 38 41 42 43 44 45 46 46 48
operations           : 36 41 42 45 46 98
parameter            : 129 131
print                : 10
return               : 12
semiExpression       : 1 2
set                  : 65
soloIf               : 90 91 92 93
tupla                : 109 118
type                 : 24 26 27 99
variable             : 3
while                : 61

Parsing method: LALR

state 0

    (0) S' -> . expression
    (1) expression -> . semiExpression
    (2) expression -> . semiExpression expression
    (3) semiExpression -> . variable
    (4) semiExpression -> . dataStruct SEMICOLON
    (5) semiExpression -> . controlStruct
    (6) semiExpression -> . methodsSet
    (7) semiExpression -> . mapFunctions
    (8) semiExpression -> . arrayFn
    (9) semiExpression -> . declaration
    (10) semiExpression -> . print
    (11) semiExpression -> . input
    (12) semiExpression -> . return
    (13) semiExpression -> . function
    (14) semiExpression -> . COMMENTS
    (15) semiExpression -> . LONGCOMMENT
    (16) semiExpression -> . asigOp
    (24) variable -> . type NAME IGUAL datatype SEMICOLON
    (25) variable -> . NAME IGUAL datatype SEMICOLON
    (26) variable -> . type NAME SEMICOLON
    (27) variable -> . type NAME IGUAL input
    (28) variable -> . NAME IGUAL input
    (64) dataStruct -> . array
    (65) dataStruct -> . set
    (66) dataStruct -> . map
    (61) controlStruct -> . while
    (62) controlStruct -> . for
    (63) controlStruct -> . if
    (125) methodsSet -> . NAME POINT ADD OPEN_PARENTHESIS element CLOSE_PARENTHESIS SEMICOLON
    (126) methodsSet -> . NAME POINT DELETE OPEN_PARENTHESIS element CLOSE_PARENTHESIS SEMICOLON
    (127) methodsSet -> . NAME POINT CLEAR OPEN_PARENTHESIS CLOSE_PARENTHESIS SEMICOLON
    (119) mapFunctions -> . NAME POINT CLEAR OPEN_PARENTHESIS CLOSE_PARENTHESIS SEMICOLON
    (120) mapFunctions -> . NAME POINT GET OPEN_PARENTHESIS clave CLOSE_PARENTHESIS SEMICOLON
    (121) mapFunctions -> . NAME POINT HAS OPEN_PARENTHESIS clave CLOSE_PARENTHESIS SEMICOLON
    (103) arrayFn -> . NAME POINT POP OPEN_PARENTHESIS CLOSE_PARENTHESIS SEMICOLON
    (104) arrayFn -> . NAME POINT PUSH OPEN_PARENTHESIS item CLOSE_PARENTHESIS SEMICOLON
    (105) arrayFn -> . NAME POINT UNSHIFT OPEN_PARENTHESIS item CLOSE_PARENTHESIS SEMICOLON
    (74) declaration -> . NAME IGUAL element SEMICOLON
    (133) print -> . PRINT OPEN_PARENTHESIS datatype CLOSE_PARENTHESIS SEMICOLON
    (134) print -> . PRINT OPEN_PARENTHESIS CLOSE_PARENTHESIS SEMICOLON
    (135) input -> . INPUT OPEN_PARENTHESIS element COMMA element CLOSE_PARENTHESIS SEMICOLON
    (136) input -> . INPUT OPEN_PARENTHESIS element CLOSE_PARENTHESIS SEMICOLON
    (137) input -> . INPUT OPEN_PARENTHESIS CLOSE_PARENTHESIS SEMICOLON
    (132) return -> . RETURN datatype SEMICOLON
    (128) function -> . FUNCTION NAME OPEN_PARENTHESIS CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE
    (129) function -> . FUNCTION NAME OPEN_PARENTHESIS parameter CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE
    (60) asigOp -> . NAME operadorAsig number SEMICOLON
    (29) type -> . CONST
    (30) type -> . LET
    (31) type -> . VAR
    (101) array -> . OPEN_BRACKET items CLOSE_BRACKET
    (102) array -> . NEW ARRAY OPEN_PARENTHESIS items CLOSE_PARENTHESIS
    (122) set -> . NEW SET OPEN_PARENTHESIS CLOSE_PARENTHESIS
    (123) set -> . NEW SET OPEN_PARENTHESIS OPEN_BRACKET items CLOSE_BRACKET CLOSE_PARENTHESIS
    (124) set -> . NEW SET OPEN_PARENTHESIS element CLOSE_PARENTHESIS
    (106) map -> . iniciarMap
    (107) map -> . escribirMap
    (88) while -> . WHILE OPEN_PARENTHESIS expBoolean CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE
    (89) while -> . WHILE OPEN_PARENTHESIS bool CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE
    (98) for -> . FOR OPEN_PARENTHESIS inicialization SEMICOLON expBoolean SEMICOLON operations CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE
    (90) if -> . soloIf
    (91) if -> . soloIf elseIf
    (92) if -> . soloIf elseIf else
    (93) if -> . soloIf else
    (108) iniciarMap -> . NEW MAP OPEN_PARENTHESIS CLOSE_PARENTHESIS
    (109) iniciarMap -> . NEW MAP OPEN_PARENTHESIS tupla CLOSE_PARENTHESIS
    (110) escribirMap -> . OPEN_BRACE claveValor CLOSE_BRACE
    (94) soloIf -> . IF OPEN_PARENTHESIS expBoolean CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE

    COMMENTS        shift and go to state 14
    LONGCOMMENT     shift and go to state 15
    NAME            shift and go to state 18
    PRINT           shift and go to state 25
    INPUT           shift and go to state 26
    RETURN          shift and go to state 27
    FUNCTION        shift and go to state 28
    CONST           shift and go to state 30
    LET             shift and go to state 31
    VAR             shift and go to state 32
    OPEN_BRACKET    shift and go to state 33
    NEW             shift and go to state 34
    WHILE           shift and go to state 37
    FOR             shift and go to state 38
    OPEN_BRACE      shift and go to state 29
    IF              shift and go to state 40

    expression                     shift and go to state 1
    semiExpression                 shift and go to state 2
    variable                       shift and go to state 3
    dataStruct                     shift and go to state 4
    controlStruct                  shift and go to state 5
    methodsSet                     shift and go to state 6
    mapFunctions                   shift and go to state 7
    arrayFn                        shift and go to state 8
    declaration                    shift and go to state 9
    print                          shift and go to state 10
    input                          shift and go to state 11
    return                         shift and go to state 12
    function                       shift and go to state 13
    asigOp                         shift and go to state 16
    type                           shift and go to state 17
    array                          shift and go to state 19
    set                            shift and go to state 20
    map                            shift and go to state 21
    while                          shift and go to state 22
    for                            shift and go to state 23
    if                             shift and go to state 24
    iniciarMap                     shift and go to state 35
    escribirMap                    shift and go to state 36
    soloIf                         shift and go to state 39

state 1

    (0) S' -> expression .



state 2

    (1) expression -> semiExpression .
    (2) expression -> semiExpression . expression
    (1) expression -> . semiExpression
    (2) expression -> . semiExpression expression
    (3) semiExpression -> . variable
    (4) semiExpression -> . dataStruct SEMICOLON
    (5) semiExpression -> . controlStruct
    (6) semiExpression -> . methodsSet
    (7) semiExpression -> . mapFunctions
    (8) semiExpression -> . arrayFn
    (9) semiExpression -> . declaration
    (10) semiExpression -> . print
    (11) semiExpression -> . input
    (12) semiExpression -> . return
    (13) semiExpression -> . function
    (14) semiExpression -> . COMMENTS
    (15) semiExpression -> . LONGCOMMENT
    (16) semiExpression -> . asigOp
    (24) variable -> . type NAME IGUAL datatype SEMICOLON
    (25) variable -> . NAME IGUAL datatype SEMICOLON
    (26) variable -> . type NAME SEMICOLON
    (27) variable -> . type NAME IGUAL input
    (28) variable -> . NAME IGUAL input
    (64) dataStruct -> . array
    (65) dataStruct -> . set
    (66) dataStruct -> . map
    (61) controlStruct -> . while
    (62) controlStruct -> . for
    (63) controlStruct -> . if
    (125) methodsSet -> . NAME POINT ADD OPEN_PARENTHESIS element CLOSE_PARENTHESIS SEMICOLON
    (126) methodsSet -> . NAME POINT DELETE OPEN_PARENTHESIS element CLOSE_PARENTHESIS SEMICOLON
    (127) methodsSet -> . NAME POINT CLEAR OPEN_PARENTHESIS CLOSE_PARENTHESIS SEMICOLON
    (119) mapFunctions -> . NAME POINT CLEAR OPEN_PARENTHESIS CLOSE_PARENTHESIS SEMICOLON
    (120) mapFunctions -> . NAME POINT GET OPEN_PARENTHESIS clave CLOSE_PARENTHESIS SEMICOLON
    (121) mapFunctions -> . NAME POINT HAS OPEN_PARENTHESIS clave CLOSE_PARENTHESIS SEMICOLON
    (103) arrayFn -> . NAME POINT POP OPEN_PARENTHESIS CLOSE_PARENTHESIS SEMICOLON
    (104) arrayFn -> . NAME POINT PUSH OPEN_PARENTHESIS item CLOSE_PARENTHESIS SEMICOLON
    (105) arrayFn -> . NAME POINT UNSHIFT OPEN_PARENTHESIS item CLOSE_PARENTHESIS SEMICOLON
    (74) declaration -> . NAME IGUAL element SEMICOLON
    (133) print -> . PRINT OPEN_PARENTHESIS datatype CLOSE_PARENTHESIS SEMICOLON
    (134) print -> . PRINT OPEN_PARENTHESIS CLOSE_PARENTHESIS SEMICOLON
    (135) input -> . INPUT OPEN_PARENTHESIS element COMMA element CLOSE_PARENTHESIS SEMICOLON
    (136) input -> . INPUT OPEN_PARENTHESIS element CLOSE_PARENTHESIS SEMICOLON
    (137) input -> . INPUT OPEN_PARENTHESIS CLOSE_PARENTHESIS SEMICOLON
    (132) return -> . RETURN datatype SEMICOLON
    (128) function -> . FUNCTION NAME OPEN_PARENTHESIS CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE
    (129) function -> . FUNCTION NAME OPEN_PARENTHESIS parameter CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE
    (60) asigOp -> . NAME operadorAsig number SEMICOLON
    (29) type -> . CONST
    (30) type -> . LET
    (31) type -> . VAR
    (101) array -> . OPEN_BRACKET items CLOSE_BRACKET
    (102) array -> . NEW ARRAY OPEN_PARENTHESIS items CLOSE_PARENTHESIS
    (122) set -> . NEW SET OPEN_PARENTHESIS CLOSE_PARENTHESIS
    (123) set -> . NEW SET OPEN_PARENTHESIS OPEN_BRACKET items CLOSE_BRACKET CLOSE_PARENTHESIS
    (124) set -> . NEW SET OPEN_PARENTHESIS element CLOSE_PARENTHESIS
    (106) map -> . iniciarMap
    (107) map -> . escribirMap
    (88) while -> . WHILE OPEN_PARENTHESIS expBoolean CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE
    (89) while -> . WHILE OPEN_PARENTHESIS bool CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE
    (98) for -> . FOR OPEN_PARENTHESIS inicialization SEMICOLON expBoolean SEMICOLON operations CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE
    (90) if -> . soloIf
    (91) if -> . soloIf elseIf
    (92) if -> . soloIf elseIf else
    (93) if -> . soloIf else
    (108) iniciarMap -> . NEW MAP OPEN_PARENTHESIS CLOSE_PARENTHESIS
    (109) iniciarMap -> . NEW MAP OPEN_PARENTHESIS tupla CLOSE_PARENTHESIS
    (110) escribirMap -> . OPEN_BRACE claveValor CLOSE_BRACE
    (94) soloIf -> . IF OPEN_PARENTHESIS expBoolean CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE

    $end            reduce using rule 1 (expression -> semiExpression .)
    CLOSE_BRACE     reduce using rule 1 (expression -> semiExpression .)
    COMMENTS        shift and go to state 14
    LONGCOMMENT     shift and go to state 15
    NAME            shift and go to state 18
    PRINT           shift and go to state 25
    INPUT           shift and go to state 26
    RETURN          shift and go to state 27
    FUNCTION        shift and go to state 28
    CONST           shift and go to state 30
    LET             shift and go to state 31
    VAR             shift and go to state 32
    OPEN_BRACKET    shift and go to state 33
    NEW             shift and go to state 34
    WHILE           shift and go to state 37
    FOR             shift and go to state 38
    OPEN_BRACE      shift and go to state 29
    IF              shift and go to state 40

    semiExpression                 shift and go to state 2
    expression                     shift and go to state 41
    variable                       shift and go to state 3
    dataStruct                     shift and go to state 4
    controlStruct                  shift and go to state 5
    methodsSet                     shift and go to state 6
    mapFunctions                   shift and go to state 7
    arrayFn                        shift and go to state 8
    declaration                    shift and go to state 9
    print                          shift and go to state 10
    input                          shift and go to state 11
    return                         shift and go to state 12
    function                       shift and go to state 13
    asigOp                         shift and go to state 16
    type                           shift and go to state 17
    array                          shift and go to state 19
    set                            shift and go to state 20
    map                            shift and go to state 21
    while                          shift and go to state 22
    for                            shift and go to state 23
    if                             shift and go to state 24
    iniciarMap                     shift and go to state 35
    escribirMap                    shift and go to state 36
    soloIf                         shift and go to state 39

state 3

    (3) semiExpression -> variable .

    COMMENTS        reduce using rule 3 (semiExpression -> variable .)
    LONGCOMMENT     reduce using rule 3 (semiExpression -> variable .)
    NAME            reduce using rule 3 (semiExpression -> variable .)
    PRINT           reduce using rule 3 (semiExpression -> variable .)
    INPUT           reduce using rule 3 (semiExpression -> variable .)
    RETURN          reduce using rule 3 (semiExpression -> variable .)
    FUNCTION        reduce using rule 3 (semiExpression -> variable .)
    CONST           reduce using rule 3 (semiExpression -> variable .)
    LET             reduce using rule 3 (semiExpression -> variable .)
    VAR             reduce using rule 3 (semiExpression -> variable .)
    OPEN_BRACKET    reduce using rule 3 (semiExpression -> variable .)
    NEW             reduce using rule 3 (semiExpression -> variable .)
    WHILE           reduce using rule 3 (semiExpression -> variable .)
    FOR             reduce using rule 3 (semiExpression -> variable .)
    OPEN_BRACE      reduce using rule 3 (semiExpression -> variable .)
    IF              reduce using rule 3 (semiExpression -> variable .)
    $end            reduce using rule 3 (semiExpression -> variable .)
    CLOSE_BRACE     reduce using rule 3 (semiExpression -> variable .)


state 4

    (4) semiExpression -> dataStruct . SEMICOLON

    SEMICOLON       shift and go to state 42


state 5

    (5) semiExpression -> controlStruct .

    COMMENTS        reduce using rule 5 (semiExpression -> controlStruct .)
    LONGCOMMENT     reduce using rule 5 (semiExpression -> controlStruct .)
    NAME            reduce using rule 5 (semiExpression -> controlStruct .)
    PRINT           reduce using rule 5 (semiExpression -> controlStruct .)
    INPUT           reduce using rule 5 (semiExpression -> controlStruct .)
    RETURN          reduce using rule 5 (semiExpression -> controlStruct .)
    FUNCTION        reduce using rule 5 (semiExpression -> controlStruct .)
    CONST           reduce using rule 5 (semiExpression -> controlStruct .)
    LET             reduce using rule 5 (semiExpression -> controlStruct .)
    VAR             reduce using rule 5 (semiExpression -> controlStruct .)
    OPEN_BRACKET    reduce using rule 5 (semiExpression -> controlStruct .)
    NEW             reduce using rule 5 (semiExpression -> controlStruct .)
    WHILE           reduce using rule 5 (semiExpression -> controlStruct .)
    FOR             reduce using rule 5 (semiExpression -> controlStruct .)
    OPEN_BRACE      reduce using rule 5 (semiExpression -> controlStruct .)
    IF              reduce using rule 5 (semiExpression -> controlStruct .)
    $end            reduce using rule 5 (semiExpression -> controlStruct .)
    CLOSE_BRACE     reduce using rule 5 (semiExpression -> controlStruct .)


state 6

    (6) semiExpression -> methodsSet .

    COMMENTS        reduce using rule 6 (semiExpression -> methodsSet .)
    LONGCOMMENT     reduce using rule 6 (semiExpression -> methodsSet .)
    NAME            reduce using rule 6 (semiExpression -> methodsSet .)
    PRINT           reduce using rule 6 (semiExpression -> methodsSet .)
    INPUT           reduce using rule 6 (semiExpression -> methodsSet .)
    RETURN          reduce using rule 6 (semiExpression -> methodsSet .)
    FUNCTION        reduce using rule 6 (semiExpression -> methodsSet .)
    CONST           reduce using rule 6 (semiExpression -> methodsSet .)
    LET             reduce using rule 6 (semiExpression -> methodsSet .)
    VAR             reduce using rule 6 (semiExpression -> methodsSet .)
    OPEN_BRACKET    reduce using rule 6 (semiExpression -> methodsSet .)
    NEW             reduce using rule 6 (semiExpression -> methodsSet .)
    WHILE           reduce using rule 6 (semiExpression -> methodsSet .)
    FOR             reduce using rule 6 (semiExpression -> methodsSet .)
    OPEN_BRACE      reduce using rule 6 (semiExpression -> methodsSet .)
    IF              reduce using rule 6 (semiExpression -> methodsSet .)
    $end            reduce using rule 6 (semiExpression -> methodsSet .)
    CLOSE_BRACE     reduce using rule 6 (semiExpression -> methodsSet .)


state 7

    (7) semiExpression -> mapFunctions .

    COMMENTS        reduce using rule 7 (semiExpression -> mapFunctions .)
    LONGCOMMENT     reduce using rule 7 (semiExpression -> mapFunctions .)
    NAME            reduce using rule 7 (semiExpression -> mapFunctions .)
    PRINT           reduce using rule 7 (semiExpression -> mapFunctions .)
    INPUT           reduce using rule 7 (semiExpression -> mapFunctions .)
    RETURN          reduce using rule 7 (semiExpression -> mapFunctions .)
    FUNCTION        reduce using rule 7 (semiExpression -> mapFunctions .)
    CONST           reduce using rule 7 (semiExpression -> mapFunctions .)
    LET             reduce using rule 7 (semiExpression -> mapFunctions .)
    VAR             reduce using rule 7 (semiExpression -> mapFunctions .)
    OPEN_BRACKET    reduce using rule 7 (semiExpression -> mapFunctions .)
    NEW             reduce using rule 7 (semiExpression -> mapFunctions .)
    WHILE           reduce using rule 7 (semiExpression -> mapFunctions .)
    FOR             reduce using rule 7 (semiExpression -> mapFunctions .)
    OPEN_BRACE      reduce using rule 7 (semiExpression -> mapFunctions .)
    IF              reduce using rule 7 (semiExpression -> mapFunctions .)
    $end            reduce using rule 7 (semiExpression -> mapFunctions .)
    CLOSE_BRACE     reduce using rule 7 (semiExpression -> mapFunctions .)


state 8

    (8) semiExpression -> arrayFn .

    COMMENTS        reduce using rule 8 (semiExpression -> arrayFn .)
    LONGCOMMENT     reduce using rule 8 (semiExpression -> arrayFn .)
    NAME            reduce using rule 8 (semiExpression -> arrayFn .)
    PRINT           reduce using rule 8 (semiExpression -> arrayFn .)
    INPUT           reduce using rule 8 (semiExpression -> arrayFn .)
    RETURN          reduce using rule 8 (semiExpression -> arrayFn .)
    FUNCTION        reduce using rule 8 (semiExpression -> arrayFn .)
    CONST           reduce using rule 8 (semiExpression -> arrayFn .)
    LET             reduce using rule 8 (semiExpression -> arrayFn .)
    VAR             reduce using rule 8 (semiExpression -> arrayFn .)
    OPEN_BRACKET    reduce using rule 8 (semiExpression -> arrayFn .)
    NEW             reduce using rule 8 (semiExpression -> arrayFn .)
    WHILE           reduce using rule 8 (semiExpression -> arrayFn .)
    FOR             reduce using rule 8 (semiExpression -> arrayFn .)
    OPEN_BRACE      reduce using rule 8 (semiExpression -> arrayFn .)
    IF              reduce using rule 8 (semiExpression -> arrayFn .)
    $end            reduce using rule 8 (semiExpression -> arrayFn .)
    CLOSE_BRACE     reduce using rule 8 (semiExpression -> arrayFn .)


state 9

    (9) semiExpression -> declaration .

    COMMENTS        reduce using rule 9 (semiExpression -> declaration .)
    LONGCOMMENT     reduce using rule 9 (semiExpression -> declaration .)
    NAME            reduce using rule 9 (semiExpression -> declaration .)
    PRINT           reduce using rule 9 (semiExpression -> declaration .)
    INPUT           reduce using rule 9 (semiExpression -> declaration .)
    RETURN          reduce using rule 9 (semiExpression -> declaration .)
    FUNCTION        reduce using rule 9 (semiExpression -> declaration .)
    CONST           reduce using rule 9 (semiExpression -> declaration .)
    LET             reduce using rule 9 (semiExpression -> declaration .)
    VAR             reduce using rule 9 (semiExpression -> declaration .)
    OPEN_BRACKET    reduce using rule 9 (semiExpression -> declaration .)
    NEW             reduce using rule 9 (semiExpression -> declaration .)
    WHILE           reduce using rule 9 (semiExpression -> declaration .)
    FOR             reduce using rule 9 (semiExpression -> declaration .)
    OPEN_BRACE      reduce using rule 9 (semiExpression -> declaration .)
    IF              reduce using rule 9 (semiExpression -> declaration .)
    $end            reduce using rule 9 (semiExpression -> declaration .)
    CLOSE_BRACE     reduce using rule 9 (semiExpression -> declaration .)


state 10

    (10) semiExpression -> print .

    COMMENTS        reduce using rule 10 (semiExpression -> print .)
    LONGCOMMENT     reduce using rule 10 (semiExpression -> print .)
    NAME            reduce using rule 10 (semiExpression -> print .)
    PRINT           reduce using rule 10 (semiExpression -> print .)
    INPUT           reduce using rule 10 (semiExpression -> print .)
    RETURN          reduce using rule 10 (semiExpression -> print .)
    FUNCTION        reduce using rule 10 (semiExpression -> print .)
    CONST           reduce using rule 10 (semiExpression -> print .)
    LET             reduce using rule 10 (semiExpression -> print .)
    VAR             reduce using rule 10 (semiExpression -> print .)
    OPEN_BRACKET    reduce using rule 10 (semiExpression -> print .)
    NEW             reduce using rule 10 (semiExpression -> print .)
    WHILE           reduce using rule 10 (semiExpression -> print .)
    FOR             reduce using rule 10 (semiExpression -> print .)
    OPEN_BRACE      reduce using rule 10 (semiExpression -> print .)
    IF              reduce using rule 10 (semiExpression -> print .)
    $end            reduce using rule 10 (semiExpression -> print .)
    CLOSE_BRACE     reduce using rule 10 (semiExpression -> print .)


state 11

    (11) semiExpression -> input .

    COMMENTS        reduce using rule 11 (semiExpression -> input .)
    LONGCOMMENT     reduce using rule 11 (semiExpression -> input .)
    NAME            reduce using rule 11 (semiExpression -> input .)
    PRINT           reduce using rule 11 (semiExpression -> input .)
    INPUT           reduce using rule 11 (semiExpression -> input .)
    RETURN          reduce using rule 11 (semiExpression -> input .)
    FUNCTION        reduce using rule 11 (semiExpression -> input .)
    CONST           reduce using rule 11 (semiExpression -> input .)
    LET             reduce using rule 11 (semiExpression -> input .)
    VAR             reduce using rule 11 (semiExpression -> input .)
    OPEN_BRACKET    reduce using rule 11 (semiExpression -> input .)
    NEW             reduce using rule 11 (semiExpression -> input .)
    WHILE           reduce using rule 11 (semiExpression -> input .)
    FOR             reduce using rule 11 (semiExpression -> input .)
    OPEN_BRACE      reduce using rule 11 (semiExpression -> input .)
    IF              reduce using rule 11 (semiExpression -> input .)
    $end            reduce using rule 11 (semiExpression -> input .)
    CLOSE_BRACE     reduce using rule 11 (semiExpression -> input .)


state 12

    (12) semiExpression -> return .

    COMMENTS        reduce using rule 12 (semiExpression -> return .)
    LONGCOMMENT     reduce using rule 12 (semiExpression -> return .)
    NAME            reduce using rule 12 (semiExpression -> return .)
    PRINT           reduce using rule 12 (semiExpression -> return .)
    INPUT           reduce using rule 12 (semiExpression -> return .)
    RETURN          reduce using rule 12 (semiExpression -> return .)
    FUNCTION        reduce using rule 12 (semiExpression -> return .)
    CONST           reduce using rule 12 (semiExpression -> return .)
    LET             reduce using rule 12 (semiExpression -> return .)
    VAR             reduce using rule 12 (semiExpression -> return .)
    OPEN_BRACKET    reduce using rule 12 (semiExpression -> return .)
    NEW             reduce using rule 12 (semiExpression -> return .)
    WHILE           reduce using rule 12 (semiExpression -> return .)
    FOR             reduce using rule 12 (semiExpression -> return .)
    OPEN_BRACE      reduce using rule 12 (semiExpression -> return .)
    IF              reduce using rule 12 (semiExpression -> return .)
    $end            reduce using rule 12 (semiExpression -> return .)
    CLOSE_BRACE     reduce using rule 12 (semiExpression -> return .)


state 13

    (13) semiExpression -> function .

    COMMENTS        reduce using rule 13 (semiExpression -> function .)
    LONGCOMMENT     reduce using rule 13 (semiExpression -> function .)
    NAME            reduce using rule 13 (semiExpression -> function .)
    PRINT           reduce using rule 13 (semiExpression -> function .)
    INPUT           reduce using rule 13 (semiExpression -> function .)
    RETURN          reduce using rule 13 (semiExpression -> function .)
    FUNCTION        reduce using rule 13 (semiExpression -> function .)
    CONST           reduce using rule 13 (semiExpression -> function .)
    LET             reduce using rule 13 (semiExpression -> function .)
    VAR             reduce using rule 13 (semiExpression -> function .)
    OPEN_BRACKET    reduce using rule 13 (semiExpression -> function .)
    NEW             reduce using rule 13 (semiExpression -> function .)
    WHILE           reduce using rule 13 (semiExpression -> function .)
    FOR             reduce using rule 13 (semiExpression -> function .)
    OPEN_BRACE      reduce using rule 13 (semiExpression -> function .)
    IF              reduce using rule 13 (semiExpression -> function .)
    $end            reduce using rule 13 (semiExpression -> function .)
    CLOSE_BRACE     reduce using rule 13 (semiExpression -> function .)


state 14

    (14) semiExpression -> COMMENTS .

    COMMENTS        reduce using rule 14 (semiExpression -> COMMENTS .)
    LONGCOMMENT     reduce using rule 14 (semiExpression -> COMMENTS .)
    NAME            reduce using rule 14 (semiExpression -> COMMENTS .)
    PRINT           reduce using rule 14 (semiExpression -> COMMENTS .)
    INPUT           reduce using rule 14 (semiExpression -> COMMENTS .)
    RETURN          reduce using rule 14 (semiExpression -> COMMENTS .)
    FUNCTION        reduce using rule 14 (semiExpression -> COMMENTS .)
    CONST           reduce using rule 14 (semiExpression -> COMMENTS .)
    LET             reduce using rule 14 (semiExpression -> COMMENTS .)
    VAR             reduce using rule 14 (semiExpression -> COMMENTS .)
    OPEN_BRACKET    reduce using rule 14 (semiExpression -> COMMENTS .)
    NEW             reduce using rule 14 (semiExpression -> COMMENTS .)
    WHILE           reduce using rule 14 (semiExpression -> COMMENTS .)
    FOR             reduce using rule 14 (semiExpression -> COMMENTS .)
    OPEN_BRACE      reduce using rule 14 (semiExpression -> COMMENTS .)
    IF              reduce using rule 14 (semiExpression -> COMMENTS .)
    $end            reduce using rule 14 (semiExpression -> COMMENTS .)
    CLOSE_BRACE     reduce using rule 14 (semiExpression -> COMMENTS .)


state 15

    (15) semiExpression -> LONGCOMMENT .

    COMMENTS        reduce using rule 15 (semiExpression -> LONGCOMMENT .)
    LONGCOMMENT     reduce using rule 15 (semiExpression -> LONGCOMMENT .)
    NAME            reduce using rule 15 (semiExpression -> LONGCOMMENT .)
    PRINT           reduce using rule 15 (semiExpression -> LONGCOMMENT .)
    INPUT           reduce using rule 15 (semiExpression -> LONGCOMMENT .)
    RETURN          reduce using rule 15 (semiExpression -> LONGCOMMENT .)
    FUNCTION        reduce using rule 15 (semiExpression -> LONGCOMMENT .)
    CONST           reduce using rule 15 (semiExpression -> LONGCOMMENT .)
    LET             reduce using rule 15 (semiExpression -> LONGCOMMENT .)
    VAR             reduce using rule 15 (semiExpression -> LONGCOMMENT .)
    OPEN_BRACKET    reduce using rule 15 (semiExpression -> LONGCOMMENT .)
    NEW             reduce using rule 15 (semiExpression -> LONGCOMMENT .)
    WHILE           reduce using rule 15 (semiExpression -> LONGCOMMENT .)
    FOR             reduce using rule 15 (semiExpression -> LONGCOMMENT .)
    OPEN_BRACE      reduce using rule 15 (semiExpression -> LONGCOMMENT .)
    IF              reduce using rule 15 (semiExpression -> LONGCOMMENT .)
    $end            reduce using rule 15 (semiExpression -> LONGCOMMENT .)
    CLOSE_BRACE     reduce using rule 15 (semiExpression -> LONGCOMMENT .)


state 16

    (16) semiExpression -> asigOp .

    COMMENTS        reduce using rule 16 (semiExpression -> asigOp .)
    LONGCOMMENT     reduce using rule 16 (semiExpression -> asigOp .)
    NAME            reduce using rule 16 (semiExpression -> asigOp .)
    PRINT           reduce using rule 16 (semiExpression -> asigOp .)
    INPUT           reduce using rule 16 (semiExpression -> asigOp .)
    RETURN          reduce using rule 16 (semiExpression -> asigOp .)
    FUNCTION        reduce using rule 16 (semiExpression -> asigOp .)
    CONST           reduce using rule 16 (semiExpression -> asigOp .)
    LET             reduce using rule 16 (semiExpression -> asigOp .)
    VAR             reduce using rule 16 (semiExpression -> asigOp .)
    OPEN_BRACKET    reduce using rule 16 (semiExpression -> asigOp .)
    NEW             reduce using rule 16 (semiExpression -> asigOp .)
    WHILE           reduce using rule 16 (semiExpression -> asigOp .)
    FOR             reduce using rule 16 (semiExpression -> asigOp .)
    OPEN_BRACE      reduce using rule 16 (semiExpression -> asigOp .)
    IF              reduce using rule 16 (semiExpression -> asigOp .)
    $end            reduce using rule 16 (semiExpression -> asigOp .)
    CLOSE_BRACE     reduce using rule 16 (semiExpression -> asigOp .)


state 17

    (24) variable -> type . NAME IGUAL datatype SEMICOLON
    (26) variable -> type . NAME SEMICOLON
    (27) variable -> type . NAME IGUAL input

    NAME            shift and go to state 43


state 18

    (25) variable -> NAME . IGUAL datatype SEMICOLON
    (28) variable -> NAME . IGUAL input
    (125) methodsSet -> NAME . POINT ADD OPEN_PARENTHESIS element CLOSE_PARENTHESIS SEMICOLON
    (126) methodsSet -> NAME . POINT DELETE OPEN_PARENTHESIS element CLOSE_PARENTHESIS SEMICOLON
    (127) methodsSet -> NAME . POINT CLEAR OPEN_PARENTHESIS CLOSE_PARENTHESIS SEMICOLON
    (119) mapFunctions -> NAME . POINT CLEAR OPEN_PARENTHESIS CLOSE_PARENTHESIS SEMICOLON
    (120) mapFunctions -> NAME . POINT GET OPEN_PARENTHESIS clave CLOSE_PARENTHESIS SEMICOLON
    (121) mapFunctions -> NAME . POINT HAS OPEN_PARENTHESIS clave CLOSE_PARENTHESIS SEMICOLON
    (103) arrayFn -> NAME . POINT POP OPEN_PARENTHESIS CLOSE_PARENTHESIS SEMICOLON
    (104) arrayFn -> NAME . POINT PUSH OPEN_PARENTHESIS item CLOSE_PARENTHESIS SEMICOLON
    (105) arrayFn -> NAME . POINT UNSHIFT OPEN_PARENTHESIS item CLOSE_PARENTHESIS SEMICOLON
    (74) declaration -> NAME . IGUAL element SEMICOLON
    (60) asigOp -> NAME . operadorAsig number SEMICOLON
    (54) operadorAsig -> . MASIGUAL
    (55) operadorAsig -> . MENOSIGUAL
    (56) operadorAsig -> . PORIGUAL
    (57) operadorAsig -> . DIVIGUAL
    (58) operadorAsig -> . MODIGUAL
    (59) operadorAsig -> . POTIGUAL

    IGUAL           shift and go to state 44
    POINT           shift and go to state 45
    MASIGUAL        shift and go to state 47
    MENOSIGUAL      shift and go to state 48
    PORIGUAL        shift and go to state 49
    DIVIGUAL        shift and go to state 50
    MODIGUAL        shift and go to state 51
    POTIGUAL        shift and go to state 52

    operadorAsig                   shift and go to state 46

state 19

    (64) dataStruct -> array .

    SEMICOLON       reduce using rule 64 (dataStruct -> array .)
    COMMA           reduce using rule 64 (dataStruct -> array .)
    CLOSE_BRACKET   reduce using rule 64 (dataStruct -> array .)
    CLOSE_PARENTHESIS reduce using rule 64 (dataStruct -> array .)
    CLOSE_BRACE     reduce using rule 64 (dataStruct -> array .)


state 20

    (65) dataStruct -> set .

    SEMICOLON       reduce using rule 65 (dataStruct -> set .)
    COMMA           reduce using rule 65 (dataStruct -> set .)
    CLOSE_BRACKET   reduce using rule 65 (dataStruct -> set .)
    CLOSE_PARENTHESIS reduce using rule 65 (dataStruct -> set .)
    CLOSE_BRACE     reduce using rule 65 (dataStruct -> set .)


state 21

    (66) dataStruct -> map .

    SEMICOLON       reduce using rule 66 (dataStruct -> map .)
    COMMA           reduce using rule 66 (dataStruct -> map .)
    CLOSE_BRACKET   reduce using rule 66 (dataStruct -> map .)
    CLOSE_PARENTHESIS reduce using rule 66 (dataStruct -> map .)
    CLOSE_BRACE     reduce using rule 66 (dataStruct -> map .)


state 22

    (61) controlStruct -> while .

    COMMENTS        reduce using rule 61 (controlStruct -> while .)
    LONGCOMMENT     reduce using rule 61 (controlStruct -> while .)
    NAME            reduce using rule 61 (controlStruct -> while .)
    PRINT           reduce using rule 61 (controlStruct -> while .)
    INPUT           reduce using rule 61 (controlStruct -> while .)
    RETURN          reduce using rule 61 (controlStruct -> while .)
    FUNCTION        reduce using rule 61 (controlStruct -> while .)
    CONST           reduce using rule 61 (controlStruct -> while .)
    LET             reduce using rule 61 (controlStruct -> while .)
    VAR             reduce using rule 61 (controlStruct -> while .)
    OPEN_BRACKET    reduce using rule 61 (controlStruct -> while .)
    NEW             reduce using rule 61 (controlStruct -> while .)
    WHILE           reduce using rule 61 (controlStruct -> while .)
    FOR             reduce using rule 61 (controlStruct -> while .)
    OPEN_BRACE      reduce using rule 61 (controlStruct -> while .)
    IF              reduce using rule 61 (controlStruct -> while .)
    $end            reduce using rule 61 (controlStruct -> while .)
    CLOSE_BRACE     reduce using rule 61 (controlStruct -> while .)


state 23

    (62) controlStruct -> for .

    COMMENTS        reduce using rule 62 (controlStruct -> for .)
    LONGCOMMENT     reduce using rule 62 (controlStruct -> for .)
    NAME            reduce using rule 62 (controlStruct -> for .)
    PRINT           reduce using rule 62 (controlStruct -> for .)
    INPUT           reduce using rule 62 (controlStruct -> for .)
    RETURN          reduce using rule 62 (controlStruct -> for .)
    FUNCTION        reduce using rule 62 (controlStruct -> for .)
    CONST           reduce using rule 62 (controlStruct -> for .)
    LET             reduce using rule 62 (controlStruct -> for .)
    VAR             reduce using rule 62 (controlStruct -> for .)
    OPEN_BRACKET    reduce using rule 62 (controlStruct -> for .)
    NEW             reduce using rule 62 (controlStruct -> for .)
    WHILE           reduce using rule 62 (controlStruct -> for .)
    FOR             reduce using rule 62 (controlStruct -> for .)
    OPEN_BRACE      reduce using rule 62 (controlStruct -> for .)
    IF              reduce using rule 62 (controlStruct -> for .)
    $end            reduce using rule 62 (controlStruct -> for .)
    CLOSE_BRACE     reduce using rule 62 (controlStruct -> for .)


state 24

    (63) controlStruct -> if .

    COMMENTS        reduce using rule 63 (controlStruct -> if .)
    LONGCOMMENT     reduce using rule 63 (controlStruct -> if .)
    NAME            reduce using rule 63 (controlStruct -> if .)
    PRINT           reduce using rule 63 (controlStruct -> if .)
    INPUT           reduce using rule 63 (controlStruct -> if .)
    RETURN          reduce using rule 63 (controlStruct -> if .)
    FUNCTION        reduce using rule 63 (controlStruct -> if .)
    CONST           reduce using rule 63 (controlStruct -> if .)
    LET             reduce using rule 63 (controlStruct -> if .)
    VAR             reduce using rule 63 (controlStruct -> if .)
    OPEN_BRACKET    reduce using rule 63 (controlStruct -> if .)
    NEW             reduce using rule 63 (controlStruct -> if .)
    WHILE           reduce using rule 63 (controlStruct -> if .)
    FOR             reduce using rule 63 (controlStruct -> if .)
    OPEN_BRACE      reduce using rule 63 (controlStruct -> if .)
    IF              reduce using rule 63 (controlStruct -> if .)
    $end            reduce using rule 63 (controlStruct -> if .)
    CLOSE_BRACE     reduce using rule 63 (controlStruct -> if .)


state 25

    (133) print -> PRINT . OPEN_PARENTHESIS datatype CLOSE_PARENTHESIS SEMICOLON
    (134) print -> PRINT . OPEN_PARENTHESIS CLOSE_PARENTHESIS SEMICOLON

    OPEN_PARENTHESIS shift and go to state 53


state 26

    (135) input -> INPUT . OPEN_PARENTHESIS element COMMA element CLOSE_PARENTHESIS SEMICOLON
    (136) input -> INPUT . OPEN_PARENTHESIS element CLOSE_PARENTHESIS SEMICOLON
    (137) input -> INPUT . OPEN_PARENTHESIS CLOSE_PARENTHESIS SEMICOLON

    OPEN_PARENTHESIS shift and go to state 54


state 27

    (132) return -> RETURN . datatype SEMICOLON
    (32) datatype -> . number
    (33) datatype -> . NAME
    (34) datatype -> . STRING
    (35) datatype -> . CHAR
    (36) datatype -> . operations
    (37) datatype -> . dataStruct
    (17) number -> . onlyNumber
    (18) number -> . OPEN_PARENTHESIS RESTA INTEGER CLOSE_PARENTHESIS
    (19) number -> . OPEN_PARENTHESIS RESTA FLOAT CLOSE_PARENTHESIS
    (38) operations -> . number operand number
    (39) operations -> . NAME
    (40) operations -> . number
    (41) operations -> . number operand NAME operations
    (42) operations -> . NAME operand number operations
    (43) operations -> . number operand NAME
    (44) operations -> . NAME operand number
    (45) operations -> . NAME operand NAME operations
    (46) operations -> . number operand number operand operations
    (47) operations -> . NAME SUMA SUMA
    (48) operations -> . NAME operand NAME
    (49) operations -> . NAME RESTA RESTA
    (64) dataStruct -> . array
    (65) dataStruct -> . set
    (66) dataStruct -> . map
    (20) onlyNumber -> . INTEGER
    (21) onlyNumber -> . FLOAT
    (101) array -> . OPEN_BRACKET items CLOSE_BRACKET
    (102) array -> . NEW ARRAY OPEN_PARENTHESIS items CLOSE_PARENTHESIS
    (122) set -> . NEW SET OPEN_PARENTHESIS CLOSE_PARENTHESIS
    (123) set -> . NEW SET OPEN_PARENTHESIS OPEN_BRACKET items CLOSE_BRACKET CLOSE_PARENTHESIS
    (124) set -> . NEW SET OPEN_PARENTHESIS element CLOSE_PARENTHESIS
    (106) map -> . iniciarMap
    (107) map -> . escribirMap
    (108) iniciarMap -> . NEW MAP OPEN_PARENTHESIS CLOSE_PARENTHESIS
    (109) iniciarMap -> . NEW MAP OPEN_PARENTHESIS tupla CLOSE_PARENTHESIS
    (110) escribirMap -> . OPEN_BRACE claveValor CLOSE_BRACE

    NAME            shift and go to state 57
    STRING          shift and go to state 58
    CHAR            shift and go to state 59
    OPEN_PARENTHESIS shift and go to state 63
    INTEGER         shift and go to state 64
    FLOAT           shift and go to state 65
    OPEN_BRACKET    shift and go to state 33
    NEW             shift and go to state 34
    OPEN_BRACE      shift and go to state 29

    datatype                       shift and go to state 55
    number                         shift and go to state 56
    operations                     shift and go to state 60
    dataStruct                     shift and go to state 61
    onlyNumber                     shift and go to state 62
    array                          shift and go to state 19
    set                            shift and go to state 20
    map                            shift and go to state 21
    iniciarMap                     shift and go to state 35
    escribirMap                    shift and go to state 36

state 28

    (128) function -> FUNCTION . NAME OPEN_PARENTHESIS CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE
    (129) function -> FUNCTION . NAME OPEN_PARENTHESIS parameter CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE

    NAME            shift and go to state 66


state 29

    (110) escribirMap -> OPEN_BRACE . claveValor CLOSE_BRACE
    (111) claveValor -> . clave COLON datatype
    (112) claveValor -> . clave COLON datatype COMMA claveValor
    (113) clave -> . onlyNumber
    (114) clave -> . STRING
    (115) clave -> . CHAR
    (116) clave -> . bool
    (20) onlyNumber -> . INTEGER
    (21) onlyNumber -> . FLOAT
    (22) bool -> . TRUE
    (23) bool -> . FALSE

    STRING          shift and go to state 70
    CHAR            shift and go to state 71
    INTEGER         shift and go to state 64
    FLOAT           shift and go to state 65
    TRUE            shift and go to state 73
    FALSE           shift and go to state 74

    claveValor                     shift and go to state 67
    clave                          shift and go to state 68
    onlyNumber                     shift and go to state 69
    bool                           shift and go to state 72

state 30

    (29) type -> CONST .

    NAME            reduce using rule 29 (type -> CONST .)


state 31

    (30) type -> LET .

    NAME            reduce using rule 30 (type -> LET .)


state 32

    (31) type -> VAR .

    NAME            reduce using rule 31 (type -> VAR .)


state 33

    (101) array -> OPEN_BRACKET . items CLOSE_BRACKET
    (67) items -> . item
    (68) items -> . item COMMA items
    (69) item -> . expBoolean
    (70) item -> . datatype
    (77) expBoolean -> . controlArg
    (78) expBoolean -> . bool
    (79) expBoolean -> . NOT expBoolean
    (80) expBoolean -> . expBoolean logicalOperator expBoolean
    (32) datatype -> . number
    (33) datatype -> . NAME
    (34) datatype -> . STRING
    (35) datatype -> . CHAR
    (36) datatype -> . operations
    (37) datatype -> . dataStruct
    (81) controlArg -> . element clause element
    (22) bool -> . TRUE
    (23) bool -> . FALSE
    (17) number -> . onlyNumber
    (18) number -> . OPEN_PARENTHESIS RESTA INTEGER CLOSE_PARENTHESIS
    (19) number -> . OPEN_PARENTHESIS RESTA FLOAT CLOSE_PARENTHESIS
    (38) operations -> . number operand number
    (39) operations -> . NAME
    (40) operations -> . number
    (41) operations -> . number operand NAME operations
    (42) operations -> . NAME operand number operations
    (43) operations -> . number operand NAME
    (44) operations -> . NAME operand number
    (45) operations -> . NAME operand NAME operations
    (46) operations -> . number operand number operand operations
    (47) operations -> . NAME SUMA SUMA
    (48) operations -> . NAME operand NAME
    (49) operations -> . NAME RESTA RESTA
    (64) dataStruct -> . array
    (65) dataStruct -> . set
    (66) dataStruct -> . map
    (71) element -> . STRING
    (72) element -> . number
    (73) element -> . NAME
    (20) onlyNumber -> . INTEGER
    (21) onlyNumber -> . FLOAT
    (101) array -> . OPEN_BRACKET items CLOSE_BRACKET
    (102) array -> . NEW ARRAY OPEN_PARENTHESIS items CLOSE_PARENTHESIS
    (122) set -> . NEW SET OPEN_PARENTHESIS CLOSE_PARENTHESIS
    (123) set -> . NEW SET OPEN_PARENTHESIS OPEN_BRACKET items CLOSE_BRACKET CLOSE_PARENTHESIS
    (124) set -> . NEW SET OPEN_PARENTHESIS element CLOSE_PARENTHESIS
    (106) map -> . iniciarMap
    (107) map -> . escribirMap
    (108) iniciarMap -> . NEW MAP OPEN_PARENTHESIS CLOSE_PARENTHESIS
    (109) iniciarMap -> . NEW MAP OPEN_PARENTHESIS tupla CLOSE_PARENTHESIS
    (110) escribirMap -> . OPEN_BRACE claveValor CLOSE_BRACE

    NOT             shift and go to state 81
    NAME            shift and go to state 83
    STRING          shift and go to state 84
    CHAR            shift and go to state 59
    TRUE            shift and go to state 73
    FALSE           shift and go to state 74
    OPEN_PARENTHESIS shift and go to state 63
    INTEGER         shift and go to state 64
    FLOAT           shift and go to state 65
    OPEN_BRACKET    shift and go to state 33
    NEW             shift and go to state 34
    OPEN_BRACE      shift and go to state 29

    items                          shift and go to state 75
    item                           shift and go to state 76
    expBoolean                     shift and go to state 77
    datatype                       shift and go to state 78
    controlArg                     shift and go to state 79
    bool                           shift and go to state 80
    number                         shift and go to state 82
    operations                     shift and go to state 60
    dataStruct                     shift and go to state 61
    element                        shift and go to state 85
    onlyNumber                     shift and go to state 62
    array                          shift and go to state 19
    set                            shift and go to state 20
    map                            shift and go to state 21
    iniciarMap                     shift and go to state 35
    escribirMap                    shift and go to state 36

state 34

    (102) array -> NEW . ARRAY OPEN_PARENTHESIS items CLOSE_PARENTHESIS
    (122) set -> NEW . SET OPEN_PARENTHESIS CLOSE_PARENTHESIS
    (123) set -> NEW . SET OPEN_PARENTHESIS OPEN_BRACKET items CLOSE_BRACKET CLOSE_PARENTHESIS
    (124) set -> NEW . SET OPEN_PARENTHESIS element CLOSE_PARENTHESIS
    (108) iniciarMap -> NEW . MAP OPEN_PARENTHESIS CLOSE_PARENTHESIS
    (109) iniciarMap -> NEW . MAP OPEN_PARENTHESIS tupla CLOSE_PARENTHESIS

    ARRAY           shift and go to state 86
    SET             shift and go to state 87
    MAP             shift and go to state 88


state 35

    (106) map -> iniciarMap .

    SEMICOLON       reduce using rule 106 (map -> iniciarMap .)
    COMMA           reduce using rule 106 (map -> iniciarMap .)
    CLOSE_BRACKET   reduce using rule 106 (map -> iniciarMap .)
    CLOSE_PARENTHESIS reduce using rule 106 (map -> iniciarMap .)
    CLOSE_BRACE     reduce using rule 106 (map -> iniciarMap .)


state 36

    (107) map -> escribirMap .

    SEMICOLON       reduce using rule 107 (map -> escribirMap .)
    COMMA           reduce using rule 107 (map -> escribirMap .)
    CLOSE_BRACKET   reduce using rule 107 (map -> escribirMap .)
    CLOSE_PARENTHESIS reduce using rule 107 (map -> escribirMap .)
    CLOSE_BRACE     reduce using rule 107 (map -> escribirMap .)


state 37

    (88) while -> WHILE . OPEN_PARENTHESIS expBoolean CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE
    (89) while -> WHILE . OPEN_PARENTHESIS bool CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE

    OPEN_PARENTHESIS shift and go to state 89


state 38

    (98) for -> FOR . OPEN_PARENTHESIS inicialization SEMICOLON expBoolean SEMICOLON operations CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE

    OPEN_PARENTHESIS shift and go to state 90


state 39

    (90) if -> soloIf .
    (91) if -> soloIf . elseIf
    (92) if -> soloIf . elseIf else
    (93) if -> soloIf . else
    (95) elseIf -> . ELSEIF OPEN_PARENTHESIS expBoolean CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE
    (96) elseIf -> . ELSEIF OPEN_PARENTHESIS expBoolean CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE elseIf
    (97) else -> . ELSE OPEN_BRACE expression CLOSE_BRACE

    COMMENTS        reduce using rule 90 (if -> soloIf .)
    LONGCOMMENT     reduce using rule 90 (if -> soloIf .)
    NAME            reduce using rule 90 (if -> soloIf .)
    PRINT           reduce using rule 90 (if -> soloIf .)
    INPUT           reduce using rule 90 (if -> soloIf .)
    RETURN          reduce using rule 90 (if -> soloIf .)
    FUNCTION        reduce using rule 90 (if -> soloIf .)
    CONST           reduce using rule 90 (if -> soloIf .)
    LET             reduce using rule 90 (if -> soloIf .)
    VAR             reduce using rule 90 (if -> soloIf .)
    OPEN_BRACKET    reduce using rule 90 (if -> soloIf .)
    NEW             reduce using rule 90 (if -> soloIf .)
    WHILE           reduce using rule 90 (if -> soloIf .)
    FOR             reduce using rule 90 (if -> soloIf .)
    OPEN_BRACE      reduce using rule 90 (if -> soloIf .)
    IF              reduce using rule 90 (if -> soloIf .)
    $end            reduce using rule 90 (if -> soloIf .)
    CLOSE_BRACE     reduce using rule 90 (if -> soloIf .)
    ELSEIF          shift and go to state 93
    ELSE            shift and go to state 94

    elseIf                         shift and go to state 91
    else                           shift and go to state 92

state 40

    (94) soloIf -> IF . OPEN_PARENTHESIS expBoolean CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE

    OPEN_PARENTHESIS shift and go to state 95


state 41

    (2) expression -> semiExpression expression .

    $end            reduce using rule 2 (expression -> semiExpression expression .)
    CLOSE_BRACE     reduce using rule 2 (expression -> semiExpression expression .)


state 42

    (4) semiExpression -> dataStruct SEMICOLON .

    COMMENTS        reduce using rule 4 (semiExpression -> dataStruct SEMICOLON .)
    LONGCOMMENT     reduce using rule 4 (semiExpression -> dataStruct SEMICOLON .)
    NAME            reduce using rule 4 (semiExpression -> dataStruct SEMICOLON .)
    PRINT           reduce using rule 4 (semiExpression -> dataStruct SEMICOLON .)
    INPUT           reduce using rule 4 (semiExpression -> dataStruct SEMICOLON .)
    RETURN          reduce using rule 4 (semiExpression -> dataStruct SEMICOLON .)
    FUNCTION        reduce using rule 4 (semiExpression -> dataStruct SEMICOLON .)
    CONST           reduce using rule 4 (semiExpression -> dataStruct SEMICOLON .)
    LET             reduce using rule 4 (semiExpression -> dataStruct SEMICOLON .)
    VAR             reduce using rule 4 (semiExpression -> dataStruct SEMICOLON .)
    OPEN_BRACKET    reduce using rule 4 (semiExpression -> dataStruct SEMICOLON .)
    NEW             reduce using rule 4 (semiExpression -> dataStruct SEMICOLON .)
    WHILE           reduce using rule 4 (semiExpression -> dataStruct SEMICOLON .)
    FOR             reduce using rule 4 (semiExpression -> dataStruct SEMICOLON .)
    OPEN_BRACE      reduce using rule 4 (semiExpression -> dataStruct SEMICOLON .)
    IF              reduce using rule 4 (semiExpression -> dataStruct SEMICOLON .)
    $end            reduce using rule 4 (semiExpression -> dataStruct SEMICOLON .)
    CLOSE_BRACE     reduce using rule 4 (semiExpression -> dataStruct SEMICOLON .)


state 43

    (24) variable -> type NAME . IGUAL datatype SEMICOLON
    (26) variable -> type NAME . SEMICOLON
    (27) variable -> type NAME . IGUAL input

    IGUAL           shift and go to state 96
    SEMICOLON       shift and go to state 97


state 44

    (25) variable -> NAME IGUAL . datatype SEMICOLON
    (28) variable -> NAME IGUAL . input
    (74) declaration -> NAME IGUAL . element SEMICOLON
    (32) datatype -> . number
    (33) datatype -> . NAME
    (34) datatype -> . STRING
    (35) datatype -> . CHAR
    (36) datatype -> . operations
    (37) datatype -> . dataStruct
    (135) input -> . INPUT OPEN_PARENTHESIS element COMMA element CLOSE_PARENTHESIS SEMICOLON
    (136) input -> . INPUT OPEN_PARENTHESIS element CLOSE_PARENTHESIS SEMICOLON
    (137) input -> . INPUT OPEN_PARENTHESIS CLOSE_PARENTHESIS SEMICOLON
    (71) element -> . STRING
    (72) element -> . number
    (73) element -> . NAME
    (17) number -> . onlyNumber
    (18) number -> . OPEN_PARENTHESIS RESTA INTEGER CLOSE_PARENTHESIS
    (19) number -> . OPEN_PARENTHESIS RESTA FLOAT CLOSE_PARENTHESIS
    (38) operations -> . number operand number
    (39) operations -> . NAME
    (40) operations -> . number
    (41) operations -> . number operand NAME operations
    (42) operations -> . NAME operand number operations
    (43) operations -> . number operand NAME
    (44) operations -> . NAME operand number
    (45) operations -> . NAME operand NAME operations
    (46) operations -> . number operand number operand operations
    (47) operations -> . NAME SUMA SUMA
    (48) operations -> . NAME operand NAME
    (49) operations -> . NAME RESTA RESTA
    (64) dataStruct -> . array
    (65) dataStruct -> . set
    (66) dataStruct -> . map
    (20) onlyNumber -> . INTEGER
    (21) onlyNumber -> . FLOAT
    (101) array -> . OPEN_BRACKET items CLOSE_BRACKET
    (102) array -> . NEW ARRAY OPEN_PARENTHESIS items CLOSE_PARENTHESIS
    (122) set -> . NEW SET OPEN_PARENTHESIS CLOSE_PARENTHESIS
    (123) set -> . NEW SET OPEN_PARENTHESIS OPEN_BRACKET items CLOSE_BRACKET CLOSE_PARENTHESIS
    (124) set -> . NEW SET OPEN_PARENTHESIS element CLOSE_PARENTHESIS
    (106) map -> . iniciarMap
    (107) map -> . escribirMap
    (108) iniciarMap -> . NEW MAP OPEN_PARENTHESIS CLOSE_PARENTHESIS
    (109) iniciarMap -> . NEW MAP OPEN_PARENTHESIS tupla CLOSE_PARENTHESIS
    (110) escribirMap -> . OPEN_BRACE claveValor CLOSE_BRACE

    NAME            shift and go to state 98
    STRING          shift and go to state 84
    CHAR            shift and go to state 59
    INPUT           shift and go to state 26
    OPEN_PARENTHESIS shift and go to state 63
    INTEGER         shift and go to state 64
    FLOAT           shift and go to state 65
    OPEN_BRACKET    shift and go to state 33
    NEW             shift and go to state 34
    OPEN_BRACE      shift and go to state 29

    datatype                       shift and go to state 99
    input                          shift and go to state 100
    element                        shift and go to state 101
    number                         shift and go to state 102
    operations                     shift and go to state 60
    dataStruct                     shift and go to state 61
    onlyNumber                     shift and go to state 62
    array                          shift and go to state 19
    set                            shift and go to state 20
    map                            shift and go to state 21
    iniciarMap                     shift and go to state 35
    escribirMap                    shift and go to state 36

state 45

    (125) methodsSet -> NAME POINT . ADD OPEN_PARENTHESIS element CLOSE_PARENTHESIS SEMICOLON
    (126) methodsSet -> NAME POINT . DELETE OPEN_PARENTHESIS element CLOSE_PARENTHESIS SEMICOLON
    (127) methodsSet -> NAME POINT . CLEAR OPEN_PARENTHESIS CLOSE_PARENTHESIS SEMICOLON
    (119) mapFunctions -> NAME POINT . CLEAR OPEN_PARENTHESIS CLOSE_PARENTHESIS SEMICOLON
    (120) mapFunctions -> NAME POINT . GET OPEN_PARENTHESIS clave CLOSE_PARENTHESIS SEMICOLON
    (121) mapFunctions -> NAME POINT . HAS OPEN_PARENTHESIS clave CLOSE_PARENTHESIS SEMICOLON
    (103) arrayFn -> NAME POINT . POP OPEN_PARENTHESIS CLOSE_PARENTHESIS SEMICOLON
    (104) arrayFn -> NAME POINT . PUSH OPEN_PARENTHESIS item CLOSE_PARENTHESIS SEMICOLON
    (105) arrayFn -> NAME POINT . UNSHIFT OPEN_PARENTHESIS item CLOSE_PARENTHESIS SEMICOLON

    ADD             shift and go to state 103
    DELETE          shift and go to state 104
    CLEAR           shift and go to state 105
    GET             shift and go to state 106
    HAS             shift and go to state 107
    POP             shift and go to state 108
    PUSH            shift and go to state 109
    UNSHIFT         shift and go to state 110


state 46

    (60) asigOp -> NAME operadorAsig . number SEMICOLON
    (17) number -> . onlyNumber
    (18) number -> . OPEN_PARENTHESIS RESTA INTEGER CLOSE_PARENTHESIS
    (19) number -> . OPEN_PARENTHESIS RESTA FLOAT CLOSE_PARENTHESIS
    (20) onlyNumber -> . INTEGER
    (21) onlyNumber -> . FLOAT

    OPEN_PARENTHESIS shift and go to state 63
    INTEGER         shift and go to state 64
    FLOAT           shift and go to state 65

    number                         shift and go to state 111
    onlyNumber                     shift and go to state 62

state 47

    (54) operadorAsig -> MASIGUAL .

    OPEN_PARENTHESIS reduce using rule 54 (operadorAsig -> MASIGUAL .)
    INTEGER         reduce using rule 54 (operadorAsig -> MASIGUAL .)
    FLOAT           reduce using rule 54 (operadorAsig -> MASIGUAL .)


state 48

    (55) operadorAsig -> MENOSIGUAL .

    OPEN_PARENTHESIS reduce using rule 55 (operadorAsig -> MENOSIGUAL .)
    INTEGER         reduce using rule 55 (operadorAsig -> MENOSIGUAL .)
    FLOAT           reduce using rule 55 (operadorAsig -> MENOSIGUAL .)


state 49

    (56) operadorAsig -> PORIGUAL .

    OPEN_PARENTHESIS reduce using rule 56 (operadorAsig -> PORIGUAL .)
    INTEGER         reduce using rule 56 (operadorAsig -> PORIGUAL .)
    FLOAT           reduce using rule 56 (operadorAsig -> PORIGUAL .)


state 50

    (57) operadorAsig -> DIVIGUAL .

    OPEN_PARENTHESIS reduce using rule 57 (operadorAsig -> DIVIGUAL .)
    INTEGER         reduce using rule 57 (operadorAsig -> DIVIGUAL .)
    FLOAT           reduce using rule 57 (operadorAsig -> DIVIGUAL .)


state 51

    (58) operadorAsig -> MODIGUAL .

    OPEN_PARENTHESIS reduce using rule 58 (operadorAsig -> MODIGUAL .)
    INTEGER         reduce using rule 58 (operadorAsig -> MODIGUAL .)
    FLOAT           reduce using rule 58 (operadorAsig -> MODIGUAL .)


state 52

    (59) operadorAsig -> POTIGUAL .

    OPEN_PARENTHESIS reduce using rule 59 (operadorAsig -> POTIGUAL .)
    INTEGER         reduce using rule 59 (operadorAsig -> POTIGUAL .)
    FLOAT           reduce using rule 59 (operadorAsig -> POTIGUAL .)


state 53

    (133) print -> PRINT OPEN_PARENTHESIS . datatype CLOSE_PARENTHESIS SEMICOLON
    (134) print -> PRINT OPEN_PARENTHESIS . CLOSE_PARENTHESIS SEMICOLON
    (32) datatype -> . number
    (33) datatype -> . NAME
    (34) datatype -> . STRING
    (35) datatype -> . CHAR
    (36) datatype -> . operations
    (37) datatype -> . dataStruct
    (17) number -> . onlyNumber
    (18) number -> . OPEN_PARENTHESIS RESTA INTEGER CLOSE_PARENTHESIS
    (19) number -> . OPEN_PARENTHESIS RESTA FLOAT CLOSE_PARENTHESIS
    (38) operations -> . number operand number
    (39) operations -> . NAME
    (40) operations -> . number
    (41) operations -> . number operand NAME operations
    (42) operations -> . NAME operand number operations
    (43) operations -> . number operand NAME
    (44) operations -> . NAME operand number
    (45) operations -> . NAME operand NAME operations
    (46) operations -> . number operand number operand operations
    (47) operations -> . NAME SUMA SUMA
    (48) operations -> . NAME operand NAME
    (49) operations -> . NAME RESTA RESTA
    (64) dataStruct -> . array
    (65) dataStruct -> . set
    (66) dataStruct -> . map
    (20) onlyNumber -> . INTEGER
    (21) onlyNumber -> . FLOAT
    (101) array -> . OPEN_BRACKET items CLOSE_BRACKET
    (102) array -> . NEW ARRAY OPEN_PARENTHESIS items CLOSE_PARENTHESIS
    (122) set -> . NEW SET OPEN_PARENTHESIS CLOSE_PARENTHESIS
    (123) set -> . NEW SET OPEN_PARENTHESIS OPEN_BRACKET items CLOSE_BRACKET CLOSE_PARENTHESIS
    (124) set -> . NEW SET OPEN_PARENTHESIS element CLOSE_PARENTHESIS
    (106) map -> . iniciarMap
    (107) map -> . escribirMap
    (108) iniciarMap -> . NEW MAP OPEN_PARENTHESIS CLOSE_PARENTHESIS
    (109) iniciarMap -> . NEW MAP OPEN_PARENTHESIS tupla CLOSE_PARENTHESIS
    (110) escribirMap -> . OPEN_BRACE claveValor CLOSE_BRACE

    CLOSE_PARENTHESIS shift and go to state 113
    NAME            shift and go to state 57
    STRING          shift and go to state 58
    CHAR            shift and go to state 59
    OPEN_PARENTHESIS shift and go to state 63
    INTEGER         shift and go to state 64
    FLOAT           shift and go to state 65
    OPEN_BRACKET    shift and go to state 33
    NEW             shift and go to state 34
    OPEN_BRACE      shift and go to state 29

    datatype                       shift and go to state 112
    number                         shift and go to state 56
    operations                     shift and go to state 60
    dataStruct                     shift and go to state 61
    onlyNumber                     shift and go to state 62
    array                          shift and go to state 19
    set                            shift and go to state 20
    map                            shift and go to state 21
    iniciarMap                     shift and go to state 35
    escribirMap                    shift and go to state 36

state 54

    (135) input -> INPUT OPEN_PARENTHESIS . element COMMA element CLOSE_PARENTHESIS SEMICOLON
    (136) input -> INPUT OPEN_PARENTHESIS . element CLOSE_PARENTHESIS SEMICOLON
    (137) input -> INPUT OPEN_PARENTHESIS . CLOSE_PARENTHESIS SEMICOLON
    (71) element -> . STRING
    (72) element -> . number
    (73) element -> . NAME
    (17) number -> . onlyNumber
    (18) number -> . OPEN_PARENTHESIS RESTA INTEGER CLOSE_PARENTHESIS
    (19) number -> . OPEN_PARENTHESIS RESTA FLOAT CLOSE_PARENTHESIS
    (20) onlyNumber -> . INTEGER
    (21) onlyNumber -> . FLOAT

    CLOSE_PARENTHESIS shift and go to state 115
    STRING          shift and go to state 116
    NAME            shift and go to state 118
    OPEN_PARENTHESIS shift and go to state 63
    INTEGER         shift and go to state 64
    FLOAT           shift and go to state 65

    element                        shift and go to state 114
    number                         shift and go to state 117
    onlyNumber                     shift and go to state 62

state 55

    (132) return -> RETURN datatype . SEMICOLON

    SEMICOLON       shift and go to state 119


state 56

    (32) datatype -> number .
    (38) operations -> number . operand number
    (40) operations -> number .
    (41) operations -> number . operand NAME operations
    (43) operations -> number . operand NAME
    (46) operations -> number . operand number operand operations
    (50) operand -> . SUMA
    (51) operand -> . RESTA
    (52) operand -> . MULTIPLICACION
    (53) operand -> . DIVISION

  ! reduce/reduce conflict for SEMICOLON resolved using rule 32 (datatype -> number .)
  ! reduce/reduce conflict for CLOSE_PARENTHESIS resolved using rule 32 (datatype -> number .)
  ! reduce/reduce conflict for COMMA resolved using rule 32 (datatype -> number .)
  ! reduce/reduce conflict for CLOSE_BRACE resolved using rule 32 (datatype -> number .)
    SEMICOLON       reduce using rule 32 (datatype -> number .)
    CLOSE_PARENTHESIS reduce using rule 32 (datatype -> number .)
    COMMA           reduce using rule 32 (datatype -> number .)
    CLOSE_BRACE     reduce using rule 32 (datatype -> number .)
    SUMA            shift and go to state 121
    RESTA           shift and go to state 122
    MULTIPLICACION  shift and go to state 123
    DIVISION        shift and go to state 124

  ! SEMICOLON       [ reduce using rule 40 (operations -> number .) ]
  ! CLOSE_PARENTHESIS [ reduce using rule 40 (operations -> number .) ]
  ! COMMA           [ reduce using rule 40 (operations -> number .) ]
  ! CLOSE_BRACE     [ reduce using rule 40 (operations -> number .) ]

    operand                        shift and go to state 120

state 57

    (33) datatype -> NAME .
    (39) operations -> NAME .
    (42) operations -> NAME . operand number operations
    (44) operations -> NAME . operand number
    (45) operations -> NAME . operand NAME operations
    (47) operations -> NAME . SUMA SUMA
    (48) operations -> NAME . operand NAME
    (49) operations -> NAME . RESTA RESTA
    (50) operand -> . SUMA
    (51) operand -> . RESTA
    (52) operand -> . MULTIPLICACION
    (53) operand -> . DIVISION

  ! reduce/reduce conflict for SEMICOLON resolved using rule 33 (datatype -> NAME .)
  ! reduce/reduce conflict for CLOSE_PARENTHESIS resolved using rule 33 (datatype -> NAME .)
  ! reduce/reduce conflict for COMMA resolved using rule 33 (datatype -> NAME .)
  ! reduce/reduce conflict for CLOSE_BRACE resolved using rule 33 (datatype -> NAME .)
    SEMICOLON       reduce using rule 33 (datatype -> NAME .)
    CLOSE_PARENTHESIS reduce using rule 33 (datatype -> NAME .)
    COMMA           reduce using rule 33 (datatype -> NAME .)
    CLOSE_BRACE     reduce using rule 33 (datatype -> NAME .)
    SUMA            shift and go to state 126
    RESTA           shift and go to state 127
    MULTIPLICACION  shift and go to state 123
    DIVISION        shift and go to state 124

  ! SEMICOLON       [ reduce using rule 39 (operations -> NAME .) ]
  ! CLOSE_PARENTHESIS [ reduce using rule 39 (operations -> NAME .) ]
  ! COMMA           [ reduce using rule 39 (operations -> NAME .) ]
  ! CLOSE_BRACE     [ reduce using rule 39 (operations -> NAME .) ]

    operand                        shift and go to state 125

state 58

    (34) datatype -> STRING .

    SEMICOLON       reduce using rule 34 (datatype -> STRING .)
    CLOSE_PARENTHESIS reduce using rule 34 (datatype -> STRING .)
    COMMA           reduce using rule 34 (datatype -> STRING .)
    CLOSE_BRACE     reduce using rule 34 (datatype -> STRING .)


state 59

    (35) datatype -> CHAR .

    SEMICOLON       reduce using rule 35 (datatype -> CHAR .)
    COMMA           reduce using rule 35 (datatype -> CHAR .)
    CLOSE_BRACKET   reduce using rule 35 (datatype -> CHAR .)
    CLOSE_PARENTHESIS reduce using rule 35 (datatype -> CHAR .)
    CLOSE_BRACE     reduce using rule 35 (datatype -> CHAR .)


state 60

    (36) datatype -> operations .

    SEMICOLON       reduce using rule 36 (datatype -> operations .)
    COMMA           reduce using rule 36 (datatype -> operations .)
    CLOSE_BRACKET   reduce using rule 36 (datatype -> operations .)
    CLOSE_PARENTHESIS reduce using rule 36 (datatype -> operations .)
    CLOSE_BRACE     reduce using rule 36 (datatype -> operations .)


state 61

    (37) datatype -> dataStruct .

    SEMICOLON       reduce using rule 37 (datatype -> dataStruct .)
    COMMA           reduce using rule 37 (datatype -> dataStruct .)
    CLOSE_BRACKET   reduce using rule 37 (datatype -> dataStruct .)
    CLOSE_PARENTHESIS reduce using rule 37 (datatype -> dataStruct .)
    CLOSE_BRACE     reduce using rule 37 (datatype -> dataStruct .)


state 62

    (17) number -> onlyNumber .

    SUMA            reduce using rule 17 (number -> onlyNumber .)
    RESTA           reduce using rule 17 (number -> onlyNumber .)
    MULTIPLICACION  reduce using rule 17 (number -> onlyNumber .)
    DIVISION        reduce using rule 17 (number -> onlyNumber .)
    SEMICOLON       reduce using rule 17 (number -> onlyNumber .)
    COMMA           reduce using rule 17 (number -> onlyNumber .)
    CLOSE_BRACKET   reduce using rule 17 (number -> onlyNumber .)
    IGUALIGUAL      reduce using rule 17 (number -> onlyNumber .)
    DIFERENTE       reduce using rule 17 (number -> onlyNumber .)
    MAYORQUE        reduce using rule 17 (number -> onlyNumber .)
    MAYORIGUALQUE   reduce using rule 17 (number -> onlyNumber .)
    MENORQUE        reduce using rule 17 (number -> onlyNumber .)
    MENORIGUALQUE   reduce using rule 17 (number -> onlyNumber .)
    CLOSE_PARENTHESIS reduce using rule 17 (number -> onlyNumber .)
    CLOSE_BRACE     reduce using rule 17 (number -> onlyNumber .)
    NAME            reduce using rule 17 (number -> onlyNumber .)
    OPEN_PARENTHESIS reduce using rule 17 (number -> onlyNumber .)
    INTEGER         reduce using rule 17 (number -> onlyNumber .)
    FLOAT           reduce using rule 17 (number -> onlyNumber .)
    AND             reduce using rule 17 (number -> onlyNumber .)
    OR              reduce using rule 17 (number -> onlyNumber .)


state 63

    (18) number -> OPEN_PARENTHESIS . RESTA INTEGER CLOSE_PARENTHESIS
    (19) number -> OPEN_PARENTHESIS . RESTA FLOAT CLOSE_PARENTHESIS

    RESTA           shift and go to state 128


state 64

    (20) onlyNumber -> INTEGER .

    SUMA            reduce using rule 20 (onlyNumber -> INTEGER .)
    RESTA           reduce using rule 20 (onlyNumber -> INTEGER .)
    MULTIPLICACION  reduce using rule 20 (onlyNumber -> INTEGER .)
    DIVISION        reduce using rule 20 (onlyNumber -> INTEGER .)
    SEMICOLON       reduce using rule 20 (onlyNumber -> INTEGER .)
    COLON           reduce using rule 20 (onlyNumber -> INTEGER .)
    COMMA           reduce using rule 20 (onlyNumber -> INTEGER .)
    CLOSE_BRACKET   reduce using rule 20 (onlyNumber -> INTEGER .)
    IGUALIGUAL      reduce using rule 20 (onlyNumber -> INTEGER .)
    DIFERENTE       reduce using rule 20 (onlyNumber -> INTEGER .)
    MAYORQUE        reduce using rule 20 (onlyNumber -> INTEGER .)
    MAYORIGUALQUE   reduce using rule 20 (onlyNumber -> INTEGER .)
    MENORQUE        reduce using rule 20 (onlyNumber -> INTEGER .)
    MENORIGUALQUE   reduce using rule 20 (onlyNumber -> INTEGER .)
    CLOSE_PARENTHESIS reduce using rule 20 (onlyNumber -> INTEGER .)
    CLOSE_BRACE     reduce using rule 20 (onlyNumber -> INTEGER .)
    NAME            reduce using rule 20 (onlyNumber -> INTEGER .)
    OPEN_PARENTHESIS reduce using rule 20 (onlyNumber -> INTEGER .)
    INTEGER         reduce using rule 20 (onlyNumber -> INTEGER .)
    FLOAT           reduce using rule 20 (onlyNumber -> INTEGER .)
    AND             reduce using rule 20 (onlyNumber -> INTEGER .)
    OR              reduce using rule 20 (onlyNumber -> INTEGER .)


state 65

    (21) onlyNumber -> FLOAT .

    SUMA            reduce using rule 21 (onlyNumber -> FLOAT .)
    RESTA           reduce using rule 21 (onlyNumber -> FLOAT .)
    MULTIPLICACION  reduce using rule 21 (onlyNumber -> FLOAT .)
    DIVISION        reduce using rule 21 (onlyNumber -> FLOAT .)
    SEMICOLON       reduce using rule 21 (onlyNumber -> FLOAT .)
    COLON           reduce using rule 21 (onlyNumber -> FLOAT .)
    COMMA           reduce using rule 21 (onlyNumber -> FLOAT .)
    CLOSE_BRACKET   reduce using rule 21 (onlyNumber -> FLOAT .)
    IGUALIGUAL      reduce using rule 21 (onlyNumber -> FLOAT .)
    DIFERENTE       reduce using rule 21 (onlyNumber -> FLOAT .)
    MAYORQUE        reduce using rule 21 (onlyNumber -> FLOAT .)
    MAYORIGUALQUE   reduce using rule 21 (onlyNumber -> FLOAT .)
    MENORQUE        reduce using rule 21 (onlyNumber -> FLOAT .)
    MENORIGUALQUE   reduce using rule 21 (onlyNumber -> FLOAT .)
    CLOSE_PARENTHESIS reduce using rule 21 (onlyNumber -> FLOAT .)
    CLOSE_BRACE     reduce using rule 21 (onlyNumber -> FLOAT .)
    NAME            reduce using rule 21 (onlyNumber -> FLOAT .)
    OPEN_PARENTHESIS reduce using rule 21 (onlyNumber -> FLOAT .)
    INTEGER         reduce using rule 21 (onlyNumber -> FLOAT .)
    FLOAT           reduce using rule 21 (onlyNumber -> FLOAT .)
    AND             reduce using rule 21 (onlyNumber -> FLOAT .)
    OR              reduce using rule 21 (onlyNumber -> FLOAT .)


state 66

    (128) function -> FUNCTION NAME . OPEN_PARENTHESIS CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE
    (129) function -> FUNCTION NAME . OPEN_PARENTHESIS parameter CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE

    OPEN_PARENTHESIS shift and go to state 129


state 67

    (110) escribirMap -> OPEN_BRACE claveValor . CLOSE_BRACE

    CLOSE_BRACE     shift and go to state 130


state 68

    (111) claveValor -> clave . COLON datatype
    (112) claveValor -> clave . COLON datatype COMMA claveValor

    COLON           shift and go to state 131


state 69

    (113) clave -> onlyNumber .

    COLON           reduce using rule 113 (clave -> onlyNumber .)
    CLOSE_PARENTHESIS reduce using rule 113 (clave -> onlyNumber .)


state 70

    (114) clave -> STRING .

    COLON           reduce using rule 114 (clave -> STRING .)
    CLOSE_PARENTHESIS reduce using rule 114 (clave -> STRING .)


state 71

    (115) clave -> CHAR .

    COLON           reduce using rule 115 (clave -> CHAR .)
    CLOSE_PARENTHESIS reduce using rule 115 (clave -> CHAR .)


state 72

    (116) clave -> bool .

    COLON           reduce using rule 116 (clave -> bool .)
    CLOSE_PARENTHESIS reduce using rule 116 (clave -> bool .)


state 73

    (22) bool -> TRUE .

    COLON           reduce using rule 22 (bool -> TRUE .)
    AND             reduce using rule 22 (bool -> TRUE .)
    OR              reduce using rule 22 (bool -> TRUE .)
    COMMA           reduce using rule 22 (bool -> TRUE .)
    CLOSE_BRACKET   reduce using rule 22 (bool -> TRUE .)
    CLOSE_PARENTHESIS reduce using rule 22 (bool -> TRUE .)
    SEMICOLON       reduce using rule 22 (bool -> TRUE .)


state 74

    (23) bool -> FALSE .

    COLON           reduce using rule 23 (bool -> FALSE .)
    AND             reduce using rule 23 (bool -> FALSE .)
    OR              reduce using rule 23 (bool -> FALSE .)
    COMMA           reduce using rule 23 (bool -> FALSE .)
    CLOSE_BRACKET   reduce using rule 23 (bool -> FALSE .)
    CLOSE_PARENTHESIS reduce using rule 23 (bool -> FALSE .)
    SEMICOLON       reduce using rule 23 (bool -> FALSE .)


state 75

    (101) array -> OPEN_BRACKET items . CLOSE_BRACKET

    CLOSE_BRACKET   shift and go to state 132


state 76

    (67) items -> item .
    (68) items -> item . COMMA items

    CLOSE_BRACKET   reduce using rule 67 (items -> item .)
    CLOSE_PARENTHESIS reduce using rule 67 (items -> item .)
    COMMA           shift and go to state 133


state 77

    (69) item -> expBoolean .
    (80) expBoolean -> expBoolean . logicalOperator expBoolean
    (75) logicalOperator -> . AND
    (76) logicalOperator -> . OR

    COMMA           reduce using rule 69 (item -> expBoolean .)
    CLOSE_BRACKET   reduce using rule 69 (item -> expBoolean .)
    CLOSE_PARENTHESIS reduce using rule 69 (item -> expBoolean .)
    AND             shift and go to state 135
    OR              shift and go to state 136

    logicalOperator                shift and go to state 134

state 78

    (70) item -> datatype .

    COMMA           reduce using rule 70 (item -> datatype .)
    CLOSE_BRACKET   reduce using rule 70 (item -> datatype .)
    CLOSE_PARENTHESIS reduce using rule 70 (item -> datatype .)


state 79

    (77) expBoolean -> controlArg .

    AND             reduce using rule 77 (expBoolean -> controlArg .)
    OR              reduce using rule 77 (expBoolean -> controlArg .)
    COMMA           reduce using rule 77 (expBoolean -> controlArg .)
    CLOSE_BRACKET   reduce using rule 77 (expBoolean -> controlArg .)
    CLOSE_PARENTHESIS reduce using rule 77 (expBoolean -> controlArg .)
    SEMICOLON       reduce using rule 77 (expBoolean -> controlArg .)


state 80

    (78) expBoolean -> bool .

    AND             reduce using rule 78 (expBoolean -> bool .)
    OR              reduce using rule 78 (expBoolean -> bool .)
    COMMA           reduce using rule 78 (expBoolean -> bool .)
    CLOSE_BRACKET   reduce using rule 78 (expBoolean -> bool .)
    CLOSE_PARENTHESIS reduce using rule 78 (expBoolean -> bool .)
    SEMICOLON       reduce using rule 78 (expBoolean -> bool .)


state 81

    (79) expBoolean -> NOT . expBoolean
    (77) expBoolean -> . controlArg
    (78) expBoolean -> . bool
    (79) expBoolean -> . NOT expBoolean
    (80) expBoolean -> . expBoolean logicalOperator expBoolean
    (81) controlArg -> . element clause element
    (22) bool -> . TRUE
    (23) bool -> . FALSE
    (71) element -> . STRING
    (72) element -> . number
    (73) element -> . NAME
    (17) number -> . onlyNumber
    (18) number -> . OPEN_PARENTHESIS RESTA INTEGER CLOSE_PARENTHESIS
    (19) number -> . OPEN_PARENTHESIS RESTA FLOAT CLOSE_PARENTHESIS
    (20) onlyNumber -> . INTEGER
    (21) onlyNumber -> . FLOAT

    NOT             shift and go to state 81
    TRUE            shift and go to state 73
    FALSE           shift and go to state 74
    STRING          shift and go to state 116
    NAME            shift and go to state 118
    OPEN_PARENTHESIS shift and go to state 63
    INTEGER         shift and go to state 64
    FLOAT           shift and go to state 65

    expBoolean                     shift and go to state 137
    controlArg                     shift and go to state 79
    bool                           shift and go to state 80
    element                        shift and go to state 85
    number                         shift and go to state 117
    onlyNumber                     shift and go to state 62

state 82

    (32) datatype -> number .
    (38) operations -> number . operand number
    (40) operations -> number .
    (41) operations -> number . operand NAME operations
    (43) operations -> number . operand NAME
    (46) operations -> number . operand number operand operations
    (72) element -> number .
    (50) operand -> . SUMA
    (51) operand -> . RESTA
    (52) operand -> . MULTIPLICACION
    (53) operand -> . DIVISION

  ! reduce/reduce conflict for COMMA resolved using rule 32 (datatype -> number .)
  ! reduce/reduce conflict for CLOSE_BRACKET resolved using rule 32 (datatype -> number .)
  ! reduce/reduce conflict for CLOSE_PARENTHESIS resolved using rule 32 (datatype -> number .)
    COMMA           reduce using rule 32 (datatype -> number .)
    CLOSE_BRACKET   reduce using rule 32 (datatype -> number .)
    CLOSE_PARENTHESIS reduce using rule 32 (datatype -> number .)
    IGUALIGUAL      reduce using rule 72 (element -> number .)
    DIFERENTE       reduce using rule 72 (element -> number .)
    MAYORQUE        reduce using rule 72 (element -> number .)
    MAYORIGUALQUE   reduce using rule 72 (element -> number .)
    MENORQUE        reduce using rule 72 (element -> number .)
    MENORIGUALQUE   reduce using rule 72 (element -> number .)
    SUMA            shift and go to state 121
    RESTA           shift and go to state 122
    MULTIPLICACION  shift and go to state 123
    DIVISION        shift and go to state 124

  ! COMMA           [ reduce using rule 40 (operations -> number .) ]
  ! CLOSE_BRACKET   [ reduce using rule 40 (operations -> number .) ]
  ! CLOSE_PARENTHESIS [ reduce using rule 40 (operations -> number .) ]

    operand                        shift and go to state 120

state 83

    (33) datatype -> NAME .
    (39) operations -> NAME .
    (42) operations -> NAME . operand number operations
    (44) operations -> NAME . operand number
    (45) operations -> NAME . operand NAME operations
    (47) operations -> NAME . SUMA SUMA
    (48) operations -> NAME . operand NAME
    (49) operations -> NAME . RESTA RESTA
    (73) element -> NAME .
    (50) operand -> . SUMA
    (51) operand -> . RESTA
    (52) operand -> . MULTIPLICACION
    (53) operand -> . DIVISION

  ! reduce/reduce conflict for COMMA resolved using rule 33 (datatype -> NAME .)
  ! reduce/reduce conflict for CLOSE_BRACKET resolved using rule 33 (datatype -> NAME .)
  ! reduce/reduce conflict for CLOSE_PARENTHESIS resolved using rule 33 (datatype -> NAME .)
    COMMA           reduce using rule 33 (datatype -> NAME .)
    CLOSE_BRACKET   reduce using rule 33 (datatype -> NAME .)
    CLOSE_PARENTHESIS reduce using rule 33 (datatype -> NAME .)
    SUMA            shift and go to state 126
    RESTA           shift and go to state 127
    IGUALIGUAL      reduce using rule 73 (element -> NAME .)
    DIFERENTE       reduce using rule 73 (element -> NAME .)
    MAYORQUE        reduce using rule 73 (element -> NAME .)
    MAYORIGUALQUE   reduce using rule 73 (element -> NAME .)
    MENORQUE        reduce using rule 73 (element -> NAME .)
    MENORIGUALQUE   reduce using rule 73 (element -> NAME .)
    MULTIPLICACION  shift and go to state 123
    DIVISION        shift and go to state 124

  ! COMMA           [ reduce using rule 39 (operations -> NAME .) ]
  ! CLOSE_BRACKET   [ reduce using rule 39 (operations -> NAME .) ]
  ! CLOSE_PARENTHESIS [ reduce using rule 39 (operations -> NAME .) ]

    operand                        shift and go to state 125

state 84

    (34) datatype -> STRING .
    (71) element -> STRING .

  ! reduce/reduce conflict for SEMICOLON resolved using rule 34 (datatype -> STRING .)
    COMMA           reduce using rule 34 (datatype -> STRING .)
    CLOSE_BRACKET   reduce using rule 34 (datatype -> STRING .)
    SEMICOLON       reduce using rule 34 (datatype -> STRING .)
    CLOSE_PARENTHESIS reduce using rule 34 (datatype -> STRING .)
    IGUALIGUAL      reduce using rule 71 (element -> STRING .)
    DIFERENTE       reduce using rule 71 (element -> STRING .)
    MAYORQUE        reduce using rule 71 (element -> STRING .)
    MAYORIGUALQUE   reduce using rule 71 (element -> STRING .)
    MENORQUE        reduce using rule 71 (element -> STRING .)
    MENORIGUALQUE   reduce using rule 71 (element -> STRING .)

  ! SEMICOLON       [ reduce using rule 71 (element -> STRING .) ]


state 85

    (81) controlArg -> element . clause element
    (82) clause -> . IGUALIGUAL
    (83) clause -> . DIFERENTE
    (84) clause -> . MAYORQUE
    (85) clause -> . MAYORIGUALQUE
    (86) clause -> . MENORQUE
    (87) clause -> . MENORIGUALQUE

    IGUALIGUAL      shift and go to state 139
    DIFERENTE       shift and go to state 140
    MAYORQUE        shift and go to state 141
    MAYORIGUALQUE   shift and go to state 142
    MENORQUE        shift and go to state 143
    MENORIGUALQUE   shift and go to state 144

    clause                         shift and go to state 138

state 86

    (102) array -> NEW ARRAY . OPEN_PARENTHESIS items CLOSE_PARENTHESIS

    OPEN_PARENTHESIS shift and go to state 145


state 87

    (122) set -> NEW SET . OPEN_PARENTHESIS CLOSE_PARENTHESIS
    (123) set -> NEW SET . OPEN_PARENTHESIS OPEN_BRACKET items CLOSE_BRACKET CLOSE_PARENTHESIS
    (124) set -> NEW SET . OPEN_PARENTHESIS element CLOSE_PARENTHESIS

    OPEN_PARENTHESIS shift and go to state 146


state 88

    (108) iniciarMap -> NEW MAP . OPEN_PARENTHESIS CLOSE_PARENTHESIS
    (109) iniciarMap -> NEW MAP . OPEN_PARENTHESIS tupla CLOSE_PARENTHESIS

    OPEN_PARENTHESIS shift and go to state 147


state 89

    (88) while -> WHILE OPEN_PARENTHESIS . expBoolean CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE
    (89) while -> WHILE OPEN_PARENTHESIS . bool CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE
    (77) expBoolean -> . controlArg
    (78) expBoolean -> . bool
    (79) expBoolean -> . NOT expBoolean
    (80) expBoolean -> . expBoolean logicalOperator expBoolean
    (22) bool -> . TRUE
    (23) bool -> . FALSE
    (81) controlArg -> . element clause element
    (71) element -> . STRING
    (72) element -> . number
    (73) element -> . NAME
    (17) number -> . onlyNumber
    (18) number -> . OPEN_PARENTHESIS RESTA INTEGER CLOSE_PARENTHESIS
    (19) number -> . OPEN_PARENTHESIS RESTA FLOAT CLOSE_PARENTHESIS
    (20) onlyNumber -> . INTEGER
    (21) onlyNumber -> . FLOAT

    NOT             shift and go to state 81
    TRUE            shift and go to state 73
    FALSE           shift and go to state 74
    STRING          shift and go to state 116
    NAME            shift and go to state 118
    OPEN_PARENTHESIS shift and go to state 63
    INTEGER         shift and go to state 64
    FLOAT           shift and go to state 65

    expBoolean                     shift and go to state 148
    bool                           shift and go to state 149
    controlArg                     shift and go to state 79
    element                        shift and go to state 85
    number                         shift and go to state 117
    onlyNumber                     shift and go to state 62

state 90

    (98) for -> FOR OPEN_PARENTHESIS . inicialization SEMICOLON expBoolean SEMICOLON operations CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE
    (99) inicialization -> . type NAME IGUAL number
    (100) inicialization -> . NAME IGUAL number
    (29) type -> . CONST
    (30) type -> . LET
    (31) type -> . VAR

    NAME            shift and go to state 152
    CONST           shift and go to state 30
    LET             shift and go to state 31
    VAR             shift and go to state 32

    inicialization                 shift and go to state 150
    type                           shift and go to state 151

state 91

    (91) if -> soloIf elseIf .
    (92) if -> soloIf elseIf . else
    (97) else -> . ELSE OPEN_BRACE expression CLOSE_BRACE

    COMMENTS        reduce using rule 91 (if -> soloIf elseIf .)
    LONGCOMMENT     reduce using rule 91 (if -> soloIf elseIf .)
    NAME            reduce using rule 91 (if -> soloIf elseIf .)
    PRINT           reduce using rule 91 (if -> soloIf elseIf .)
    INPUT           reduce using rule 91 (if -> soloIf elseIf .)
    RETURN          reduce using rule 91 (if -> soloIf elseIf .)
    FUNCTION        reduce using rule 91 (if -> soloIf elseIf .)
    CONST           reduce using rule 91 (if -> soloIf elseIf .)
    LET             reduce using rule 91 (if -> soloIf elseIf .)
    VAR             reduce using rule 91 (if -> soloIf elseIf .)
    OPEN_BRACKET    reduce using rule 91 (if -> soloIf elseIf .)
    NEW             reduce using rule 91 (if -> soloIf elseIf .)
    WHILE           reduce using rule 91 (if -> soloIf elseIf .)
    FOR             reduce using rule 91 (if -> soloIf elseIf .)
    OPEN_BRACE      reduce using rule 91 (if -> soloIf elseIf .)
    IF              reduce using rule 91 (if -> soloIf elseIf .)
    $end            reduce using rule 91 (if -> soloIf elseIf .)
    CLOSE_BRACE     reduce using rule 91 (if -> soloIf elseIf .)
    ELSE            shift and go to state 94

    else                           shift and go to state 153

state 92

    (93) if -> soloIf else .

    COMMENTS        reduce using rule 93 (if -> soloIf else .)
    LONGCOMMENT     reduce using rule 93 (if -> soloIf else .)
    NAME            reduce using rule 93 (if -> soloIf else .)
    PRINT           reduce using rule 93 (if -> soloIf else .)
    INPUT           reduce using rule 93 (if -> soloIf else .)
    RETURN          reduce using rule 93 (if -> soloIf else .)
    FUNCTION        reduce using rule 93 (if -> soloIf else .)
    CONST           reduce using rule 93 (if -> soloIf else .)
    LET             reduce using rule 93 (if -> soloIf else .)
    VAR             reduce using rule 93 (if -> soloIf else .)
    OPEN_BRACKET    reduce using rule 93 (if -> soloIf else .)
    NEW             reduce using rule 93 (if -> soloIf else .)
    WHILE           reduce using rule 93 (if -> soloIf else .)
    FOR             reduce using rule 93 (if -> soloIf else .)
    OPEN_BRACE      reduce using rule 93 (if -> soloIf else .)
    IF              reduce using rule 93 (if -> soloIf else .)
    $end            reduce using rule 93 (if -> soloIf else .)
    CLOSE_BRACE     reduce using rule 93 (if -> soloIf else .)


state 93

    (95) elseIf -> ELSEIF . OPEN_PARENTHESIS expBoolean CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE
    (96) elseIf -> ELSEIF . OPEN_PARENTHESIS expBoolean CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE elseIf

    OPEN_PARENTHESIS shift and go to state 154


state 94

    (97) else -> ELSE . OPEN_BRACE expression CLOSE_BRACE

    OPEN_BRACE      shift and go to state 155


state 95

    (94) soloIf -> IF OPEN_PARENTHESIS . expBoolean CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE
    (77) expBoolean -> . controlArg
    (78) expBoolean -> . bool
    (79) expBoolean -> . NOT expBoolean
    (80) expBoolean -> . expBoolean logicalOperator expBoolean
    (81) controlArg -> . element clause element
    (22) bool -> . TRUE
    (23) bool -> . FALSE
    (71) element -> . STRING
    (72) element -> . number
    (73) element -> . NAME
    (17) number -> . onlyNumber
    (18) number -> . OPEN_PARENTHESIS RESTA INTEGER CLOSE_PARENTHESIS
    (19) number -> . OPEN_PARENTHESIS RESTA FLOAT CLOSE_PARENTHESIS
    (20) onlyNumber -> . INTEGER
    (21) onlyNumber -> . FLOAT

    NOT             shift and go to state 81
    TRUE            shift and go to state 73
    FALSE           shift and go to state 74
    STRING          shift and go to state 116
    NAME            shift and go to state 118
    OPEN_PARENTHESIS shift and go to state 63
    INTEGER         shift and go to state 64
    FLOAT           shift and go to state 65

    expBoolean                     shift and go to state 156
    controlArg                     shift and go to state 79
    bool                           shift and go to state 80
    element                        shift and go to state 85
    number                         shift and go to state 117
    onlyNumber                     shift and go to state 62

state 96

    (24) variable -> type NAME IGUAL . datatype SEMICOLON
    (27) variable -> type NAME IGUAL . input
    (32) datatype -> . number
    (33) datatype -> . NAME
    (34) datatype -> . STRING
    (35) datatype -> . CHAR
    (36) datatype -> . operations
    (37) datatype -> . dataStruct
    (135) input -> . INPUT OPEN_PARENTHESIS element COMMA element CLOSE_PARENTHESIS SEMICOLON
    (136) input -> . INPUT OPEN_PARENTHESIS element CLOSE_PARENTHESIS SEMICOLON
    (137) input -> . INPUT OPEN_PARENTHESIS CLOSE_PARENTHESIS SEMICOLON
    (17) number -> . onlyNumber
    (18) number -> . OPEN_PARENTHESIS RESTA INTEGER CLOSE_PARENTHESIS
    (19) number -> . OPEN_PARENTHESIS RESTA FLOAT CLOSE_PARENTHESIS
    (38) operations -> . number operand number
    (39) operations -> . NAME
    (40) operations -> . number
    (41) operations -> . number operand NAME operations
    (42) operations -> . NAME operand number operations
    (43) operations -> . number operand NAME
    (44) operations -> . NAME operand number
    (45) operations -> . NAME operand NAME operations
    (46) operations -> . number operand number operand operations
    (47) operations -> . NAME SUMA SUMA
    (48) operations -> . NAME operand NAME
    (49) operations -> . NAME RESTA RESTA
    (64) dataStruct -> . array
    (65) dataStruct -> . set
    (66) dataStruct -> . map
    (20) onlyNumber -> . INTEGER
    (21) onlyNumber -> . FLOAT
    (101) array -> . OPEN_BRACKET items CLOSE_BRACKET
    (102) array -> . NEW ARRAY OPEN_PARENTHESIS items CLOSE_PARENTHESIS
    (122) set -> . NEW SET OPEN_PARENTHESIS CLOSE_PARENTHESIS
    (123) set -> . NEW SET OPEN_PARENTHESIS OPEN_BRACKET items CLOSE_BRACKET CLOSE_PARENTHESIS
    (124) set -> . NEW SET OPEN_PARENTHESIS element CLOSE_PARENTHESIS
    (106) map -> . iniciarMap
    (107) map -> . escribirMap
    (108) iniciarMap -> . NEW MAP OPEN_PARENTHESIS CLOSE_PARENTHESIS
    (109) iniciarMap -> . NEW MAP OPEN_PARENTHESIS tupla CLOSE_PARENTHESIS
    (110) escribirMap -> . OPEN_BRACE claveValor CLOSE_BRACE

    NAME            shift and go to state 57
    STRING          shift and go to state 58
    CHAR            shift and go to state 59
    INPUT           shift and go to state 26
    OPEN_PARENTHESIS shift and go to state 63
    INTEGER         shift and go to state 64
    FLOAT           shift and go to state 65
    OPEN_BRACKET    shift and go to state 33
    NEW             shift and go to state 34
    OPEN_BRACE      shift and go to state 29

    datatype                       shift and go to state 157
    input                          shift and go to state 158
    number                         shift and go to state 56
    operations                     shift and go to state 60
    dataStruct                     shift and go to state 61
    onlyNumber                     shift and go to state 62
    array                          shift and go to state 19
    set                            shift and go to state 20
    map                            shift and go to state 21
    iniciarMap                     shift and go to state 35
    escribirMap                    shift and go to state 36

state 97

    (26) variable -> type NAME SEMICOLON .

    COMMENTS        reduce using rule 26 (variable -> type NAME SEMICOLON .)
    LONGCOMMENT     reduce using rule 26 (variable -> type NAME SEMICOLON .)
    NAME            reduce using rule 26 (variable -> type NAME SEMICOLON .)
    PRINT           reduce using rule 26 (variable -> type NAME SEMICOLON .)
    INPUT           reduce using rule 26 (variable -> type NAME SEMICOLON .)
    RETURN          reduce using rule 26 (variable -> type NAME SEMICOLON .)
    FUNCTION        reduce using rule 26 (variable -> type NAME SEMICOLON .)
    CONST           reduce using rule 26 (variable -> type NAME SEMICOLON .)
    LET             reduce using rule 26 (variable -> type NAME SEMICOLON .)
    VAR             reduce using rule 26 (variable -> type NAME SEMICOLON .)
    OPEN_BRACKET    reduce using rule 26 (variable -> type NAME SEMICOLON .)
    NEW             reduce using rule 26 (variable -> type NAME SEMICOLON .)
    WHILE           reduce using rule 26 (variable -> type NAME SEMICOLON .)
    FOR             reduce using rule 26 (variable -> type NAME SEMICOLON .)
    OPEN_BRACE      reduce using rule 26 (variable -> type NAME SEMICOLON .)
    IF              reduce using rule 26 (variable -> type NAME SEMICOLON .)
    $end            reduce using rule 26 (variable -> type NAME SEMICOLON .)
    CLOSE_BRACE     reduce using rule 26 (variable -> type NAME SEMICOLON .)


state 98

    (33) datatype -> NAME .
    (73) element -> NAME .
    (39) operations -> NAME .
    (42) operations -> NAME . operand number operations
    (44) operations -> NAME . operand number
    (45) operations -> NAME . operand NAME operations
    (47) operations -> NAME . SUMA SUMA
    (48) operations -> NAME . operand NAME
    (49) operations -> NAME . RESTA RESTA
    (50) operand -> . SUMA
    (51) operand -> . RESTA
    (52) operand -> . MULTIPLICACION
    (53) operand -> . DIVISION

  ! reduce/reduce conflict for SEMICOLON resolved using rule 33 (datatype -> NAME .)
  ! reduce/reduce conflict for SEMICOLON resolved using rule 33 (datatype -> NAME .)
    SEMICOLON       reduce using rule 33 (datatype -> NAME .)
    SUMA            shift and go to state 126
    RESTA           shift and go to state 127
    MULTIPLICACION  shift and go to state 123
    DIVISION        shift and go to state 124

  ! SEMICOLON       [ reduce using rule 73 (element -> NAME .) ]
  ! SEMICOLON       [ reduce using rule 39 (operations -> NAME .) ]

    operand                        shift and go to state 125

state 99

    (25) variable -> NAME IGUAL datatype . SEMICOLON

    SEMICOLON       shift and go to state 159


state 100

    (28) variable -> NAME IGUAL input .

    COMMENTS        reduce using rule 28 (variable -> NAME IGUAL input .)
    LONGCOMMENT     reduce using rule 28 (variable -> NAME IGUAL input .)
    NAME            reduce using rule 28 (variable -> NAME IGUAL input .)
    PRINT           reduce using rule 28 (variable -> NAME IGUAL input .)
    INPUT           reduce using rule 28 (variable -> NAME IGUAL input .)
    RETURN          reduce using rule 28 (variable -> NAME IGUAL input .)
    FUNCTION        reduce using rule 28 (variable -> NAME IGUAL input .)
    CONST           reduce using rule 28 (variable -> NAME IGUAL input .)
    LET             reduce using rule 28 (variable -> NAME IGUAL input .)
    VAR             reduce using rule 28 (variable -> NAME IGUAL input .)
    OPEN_BRACKET    reduce using rule 28 (variable -> NAME IGUAL input .)
    NEW             reduce using rule 28 (variable -> NAME IGUAL input .)
    WHILE           reduce using rule 28 (variable -> NAME IGUAL input .)
    FOR             reduce using rule 28 (variable -> NAME IGUAL input .)
    OPEN_BRACE      reduce using rule 28 (variable -> NAME IGUAL input .)
    IF              reduce using rule 28 (variable -> NAME IGUAL input .)
    $end            reduce using rule 28 (variable -> NAME IGUAL input .)
    CLOSE_BRACE     reduce using rule 28 (variable -> NAME IGUAL input .)


state 101

    (74) declaration -> NAME IGUAL element . SEMICOLON

    SEMICOLON       shift and go to state 160


state 102

    (32) datatype -> number .
    (72) element -> number .
    (38) operations -> number . operand number
    (40) operations -> number .
    (41) operations -> number . operand NAME operations
    (43) operations -> number . operand NAME
    (46) operations -> number . operand number operand operations
    (50) operand -> . SUMA
    (51) operand -> . RESTA
    (52) operand -> . MULTIPLICACION
    (53) operand -> . DIVISION

  ! reduce/reduce conflict for SEMICOLON resolved using rule 32 (datatype -> number .)
  ! reduce/reduce conflict for SEMICOLON resolved using rule 32 (datatype -> number .)
    SEMICOLON       reduce using rule 32 (datatype -> number .)
    SUMA            shift and go to state 121
    RESTA           shift and go to state 122
    MULTIPLICACION  shift and go to state 123
    DIVISION        shift and go to state 124

  ! SEMICOLON       [ reduce using rule 72 (element -> number .) ]
  ! SEMICOLON       [ reduce using rule 40 (operations -> number .) ]

    operand                        shift and go to state 120

state 103

    (125) methodsSet -> NAME POINT ADD . OPEN_PARENTHESIS element CLOSE_PARENTHESIS SEMICOLON

    OPEN_PARENTHESIS shift and go to state 161


state 104

    (126) methodsSet -> NAME POINT DELETE . OPEN_PARENTHESIS element CLOSE_PARENTHESIS SEMICOLON

    OPEN_PARENTHESIS shift and go to state 162


state 105

    (127) methodsSet -> NAME POINT CLEAR . OPEN_PARENTHESIS CLOSE_PARENTHESIS SEMICOLON
    (119) mapFunctions -> NAME POINT CLEAR . OPEN_PARENTHESIS CLOSE_PARENTHESIS SEMICOLON

    OPEN_PARENTHESIS shift and go to state 163


state 106

    (120) mapFunctions -> NAME POINT GET . OPEN_PARENTHESIS clave CLOSE_PARENTHESIS SEMICOLON

    OPEN_PARENTHESIS shift and go to state 164


state 107

    (121) mapFunctions -> NAME POINT HAS . OPEN_PARENTHESIS clave CLOSE_PARENTHESIS SEMICOLON

    OPEN_PARENTHESIS shift and go to state 165


state 108

    (103) arrayFn -> NAME POINT POP . OPEN_PARENTHESIS CLOSE_PARENTHESIS SEMICOLON

    OPEN_PARENTHESIS shift and go to state 166


state 109

    (104) arrayFn -> NAME POINT PUSH . OPEN_PARENTHESIS item CLOSE_PARENTHESIS SEMICOLON

    OPEN_PARENTHESIS shift and go to state 167


state 110

    (105) arrayFn -> NAME POINT UNSHIFT . OPEN_PARENTHESIS item CLOSE_PARENTHESIS SEMICOLON

    OPEN_PARENTHESIS shift and go to state 168


state 111

    (60) asigOp -> NAME operadorAsig number . SEMICOLON

    SEMICOLON       shift and go to state 169


state 112

    (133) print -> PRINT OPEN_PARENTHESIS datatype . CLOSE_PARENTHESIS SEMICOLON

    CLOSE_PARENTHESIS shift and go to state 170


state 113

    (134) print -> PRINT OPEN_PARENTHESIS CLOSE_PARENTHESIS . SEMICOLON

    SEMICOLON       shift and go to state 171


state 114

    (135) input -> INPUT OPEN_PARENTHESIS element . COMMA element CLOSE_PARENTHESIS SEMICOLON
    (136) input -> INPUT OPEN_PARENTHESIS element . CLOSE_PARENTHESIS SEMICOLON

    COMMA           shift and go to state 172
    CLOSE_PARENTHESIS shift and go to state 173


state 115

    (137) input -> INPUT OPEN_PARENTHESIS CLOSE_PARENTHESIS . SEMICOLON

    SEMICOLON       shift and go to state 174


state 116

    (71) element -> STRING .

    COMMA           reduce using rule 71 (element -> STRING .)
    CLOSE_PARENTHESIS reduce using rule 71 (element -> STRING .)
    IGUALIGUAL      reduce using rule 71 (element -> STRING .)
    DIFERENTE       reduce using rule 71 (element -> STRING .)
    MAYORQUE        reduce using rule 71 (element -> STRING .)
    MAYORIGUALQUE   reduce using rule 71 (element -> STRING .)
    MENORQUE        reduce using rule 71 (element -> STRING .)
    MENORIGUALQUE   reduce using rule 71 (element -> STRING .)
    AND             reduce using rule 71 (element -> STRING .)
    OR              reduce using rule 71 (element -> STRING .)
    CLOSE_BRACKET   reduce using rule 71 (element -> STRING .)
    SEMICOLON       reduce using rule 71 (element -> STRING .)


state 117

    (72) element -> number .

    COMMA           reduce using rule 72 (element -> number .)
    CLOSE_PARENTHESIS reduce using rule 72 (element -> number .)
    IGUALIGUAL      reduce using rule 72 (element -> number .)
    DIFERENTE       reduce using rule 72 (element -> number .)
    MAYORQUE        reduce using rule 72 (element -> number .)
    MAYORIGUALQUE   reduce using rule 72 (element -> number .)
    MENORQUE        reduce using rule 72 (element -> number .)
    MENORIGUALQUE   reduce using rule 72 (element -> number .)
    AND             reduce using rule 72 (element -> number .)
    OR              reduce using rule 72 (element -> number .)
    CLOSE_BRACKET   reduce using rule 72 (element -> number .)
    SEMICOLON       reduce using rule 72 (element -> number .)


state 118

    (73) element -> NAME .

    COMMA           reduce using rule 73 (element -> NAME .)
    CLOSE_PARENTHESIS reduce using rule 73 (element -> NAME .)
    IGUALIGUAL      reduce using rule 73 (element -> NAME .)
    DIFERENTE       reduce using rule 73 (element -> NAME .)
    MAYORQUE        reduce using rule 73 (element -> NAME .)
    MAYORIGUALQUE   reduce using rule 73 (element -> NAME .)
    MENORQUE        reduce using rule 73 (element -> NAME .)
    MENORIGUALQUE   reduce using rule 73 (element -> NAME .)
    AND             reduce using rule 73 (element -> NAME .)
    OR              reduce using rule 73 (element -> NAME .)
    CLOSE_BRACKET   reduce using rule 73 (element -> NAME .)
    SEMICOLON       reduce using rule 73 (element -> NAME .)


state 119

    (132) return -> RETURN datatype SEMICOLON .

    COMMENTS        reduce using rule 132 (return -> RETURN datatype SEMICOLON .)
    LONGCOMMENT     reduce using rule 132 (return -> RETURN datatype SEMICOLON .)
    NAME            reduce using rule 132 (return -> RETURN datatype SEMICOLON .)
    PRINT           reduce using rule 132 (return -> RETURN datatype SEMICOLON .)
    INPUT           reduce using rule 132 (return -> RETURN datatype SEMICOLON .)
    RETURN          reduce using rule 132 (return -> RETURN datatype SEMICOLON .)
    FUNCTION        reduce using rule 132 (return -> RETURN datatype SEMICOLON .)
    CONST           reduce using rule 132 (return -> RETURN datatype SEMICOLON .)
    LET             reduce using rule 132 (return -> RETURN datatype SEMICOLON .)
    VAR             reduce using rule 132 (return -> RETURN datatype SEMICOLON .)
    OPEN_BRACKET    reduce using rule 132 (return -> RETURN datatype SEMICOLON .)
    NEW             reduce using rule 132 (return -> RETURN datatype SEMICOLON .)
    WHILE           reduce using rule 132 (return -> RETURN datatype SEMICOLON .)
    FOR             reduce using rule 132 (return -> RETURN datatype SEMICOLON .)
    OPEN_BRACE      reduce using rule 132 (return -> RETURN datatype SEMICOLON .)
    IF              reduce using rule 132 (return -> RETURN datatype SEMICOLON .)
    $end            reduce using rule 132 (return -> RETURN datatype SEMICOLON .)
    CLOSE_BRACE     reduce using rule 132 (return -> RETURN datatype SEMICOLON .)


state 120

    (38) operations -> number operand . number
    (41) operations -> number operand . NAME operations
    (43) operations -> number operand . NAME
    (46) operations -> number operand . number operand operations
    (17) number -> . onlyNumber
    (18) number -> . OPEN_PARENTHESIS RESTA INTEGER CLOSE_PARENTHESIS
    (19) number -> . OPEN_PARENTHESIS RESTA FLOAT CLOSE_PARENTHESIS
    (20) onlyNumber -> . INTEGER
    (21) onlyNumber -> . FLOAT

    NAME            shift and go to state 176
    OPEN_PARENTHESIS shift and go to state 63
    INTEGER         shift and go to state 64
    FLOAT           shift and go to state 65

    number                         shift and go to state 175
    onlyNumber                     shift and go to state 62

state 121

    (50) operand -> SUMA .

    NAME            reduce using rule 50 (operand -> SUMA .)
    OPEN_PARENTHESIS reduce using rule 50 (operand -> SUMA .)
    INTEGER         reduce using rule 50 (operand -> SUMA .)
    FLOAT           reduce using rule 50 (operand -> SUMA .)


state 122

    (51) operand -> RESTA .

    NAME            reduce using rule 51 (operand -> RESTA .)
    OPEN_PARENTHESIS reduce using rule 51 (operand -> RESTA .)
    INTEGER         reduce using rule 51 (operand -> RESTA .)
    FLOAT           reduce using rule 51 (operand -> RESTA .)


state 123

    (52) operand -> MULTIPLICACION .

    NAME            reduce using rule 52 (operand -> MULTIPLICACION .)
    OPEN_PARENTHESIS reduce using rule 52 (operand -> MULTIPLICACION .)
    INTEGER         reduce using rule 52 (operand -> MULTIPLICACION .)
    FLOAT           reduce using rule 52 (operand -> MULTIPLICACION .)


state 124

    (53) operand -> DIVISION .

    NAME            reduce using rule 53 (operand -> DIVISION .)
    OPEN_PARENTHESIS reduce using rule 53 (operand -> DIVISION .)
    INTEGER         reduce using rule 53 (operand -> DIVISION .)
    FLOAT           reduce using rule 53 (operand -> DIVISION .)


state 125

    (42) operations -> NAME operand . number operations
    (44) operations -> NAME operand . number
    (45) operations -> NAME operand . NAME operations
    (48) operations -> NAME operand . NAME
    (17) number -> . onlyNumber
    (18) number -> . OPEN_PARENTHESIS RESTA INTEGER CLOSE_PARENTHESIS
    (19) number -> . OPEN_PARENTHESIS RESTA FLOAT CLOSE_PARENTHESIS
    (20) onlyNumber -> . INTEGER
    (21) onlyNumber -> . FLOAT

    NAME            shift and go to state 177
    OPEN_PARENTHESIS shift and go to state 63
    INTEGER         shift and go to state 64
    FLOAT           shift and go to state 65

    number                         shift and go to state 178
    onlyNumber                     shift and go to state 62

state 126

    (47) operations -> NAME SUMA . SUMA
    (50) operand -> SUMA .

    SUMA            shift and go to state 179
    NAME            reduce using rule 50 (operand -> SUMA .)
    OPEN_PARENTHESIS reduce using rule 50 (operand -> SUMA .)
    INTEGER         reduce using rule 50 (operand -> SUMA .)
    FLOAT           reduce using rule 50 (operand -> SUMA .)


state 127

    (49) operations -> NAME RESTA . RESTA
    (51) operand -> RESTA .

    RESTA           shift and go to state 180
    NAME            reduce using rule 51 (operand -> RESTA .)
    OPEN_PARENTHESIS reduce using rule 51 (operand -> RESTA .)
    INTEGER         reduce using rule 51 (operand -> RESTA .)
    FLOAT           reduce using rule 51 (operand -> RESTA .)


state 128

    (18) number -> OPEN_PARENTHESIS RESTA . INTEGER CLOSE_PARENTHESIS
    (19) number -> OPEN_PARENTHESIS RESTA . FLOAT CLOSE_PARENTHESIS

    INTEGER         shift and go to state 181
    FLOAT           shift and go to state 182


state 129

    (128) function -> FUNCTION NAME OPEN_PARENTHESIS . CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE
    (129) function -> FUNCTION NAME OPEN_PARENTHESIS . parameter CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE
    (130) parameter -> . datatype
    (131) parameter -> . datatype COMMA parameter
    (32) datatype -> . number
    (33) datatype -> . NAME
    (34) datatype -> . STRING
    (35) datatype -> . CHAR
    (36) datatype -> . operations
    (37) datatype -> . dataStruct
    (17) number -> . onlyNumber
    (18) number -> . OPEN_PARENTHESIS RESTA INTEGER CLOSE_PARENTHESIS
    (19) number -> . OPEN_PARENTHESIS RESTA FLOAT CLOSE_PARENTHESIS
    (38) operations -> . number operand number
    (39) operations -> . NAME
    (40) operations -> . number
    (41) operations -> . number operand NAME operations
    (42) operations -> . NAME operand number operations
    (43) operations -> . number operand NAME
    (44) operations -> . NAME operand number
    (45) operations -> . NAME operand NAME operations
    (46) operations -> . number operand number operand operations
    (47) operations -> . NAME SUMA SUMA
    (48) operations -> . NAME operand NAME
    (49) operations -> . NAME RESTA RESTA
    (64) dataStruct -> . array
    (65) dataStruct -> . set
    (66) dataStruct -> . map
    (20) onlyNumber -> . INTEGER
    (21) onlyNumber -> . FLOAT
    (101) array -> . OPEN_BRACKET items CLOSE_BRACKET
    (102) array -> . NEW ARRAY OPEN_PARENTHESIS items CLOSE_PARENTHESIS
    (122) set -> . NEW SET OPEN_PARENTHESIS CLOSE_PARENTHESIS
    (123) set -> . NEW SET OPEN_PARENTHESIS OPEN_BRACKET items CLOSE_BRACKET CLOSE_PARENTHESIS
    (124) set -> . NEW SET OPEN_PARENTHESIS element CLOSE_PARENTHESIS
    (106) map -> . iniciarMap
    (107) map -> . escribirMap
    (108) iniciarMap -> . NEW MAP OPEN_PARENTHESIS CLOSE_PARENTHESIS
    (109) iniciarMap -> . NEW MAP OPEN_PARENTHESIS tupla CLOSE_PARENTHESIS
    (110) escribirMap -> . OPEN_BRACE claveValor CLOSE_BRACE

    CLOSE_PARENTHESIS shift and go to state 183
    NAME            shift and go to state 57
    STRING          shift and go to state 58
    CHAR            shift and go to state 59
    OPEN_PARENTHESIS shift and go to state 63
    INTEGER         shift and go to state 64
    FLOAT           shift and go to state 65
    OPEN_BRACKET    shift and go to state 33
    NEW             shift and go to state 34
    OPEN_BRACE      shift and go to state 29

    parameter                      shift and go to state 184
    datatype                       shift and go to state 185
    number                         shift and go to state 56
    operations                     shift and go to state 60
    dataStruct                     shift and go to state 61
    onlyNumber                     shift and go to state 62
    array                          shift and go to state 19
    set                            shift and go to state 20
    map                            shift and go to state 21
    iniciarMap                     shift and go to state 35
    escribirMap                    shift and go to state 36

state 130

    (110) escribirMap -> OPEN_BRACE claveValor CLOSE_BRACE .

    SEMICOLON       reduce using rule 110 (escribirMap -> OPEN_BRACE claveValor CLOSE_BRACE .)
    COMMA           reduce using rule 110 (escribirMap -> OPEN_BRACE claveValor CLOSE_BRACE .)
    CLOSE_BRACKET   reduce using rule 110 (escribirMap -> OPEN_BRACE claveValor CLOSE_BRACE .)
    CLOSE_PARENTHESIS reduce using rule 110 (escribirMap -> OPEN_BRACE claveValor CLOSE_BRACE .)
    CLOSE_BRACE     reduce using rule 110 (escribirMap -> OPEN_BRACE claveValor CLOSE_BRACE .)


state 131

    (111) claveValor -> clave COLON . datatype
    (112) claveValor -> clave COLON . datatype COMMA claveValor
    (32) datatype -> . number
    (33) datatype -> . NAME
    (34) datatype -> . STRING
    (35) datatype -> . CHAR
    (36) datatype -> . operations
    (37) datatype -> . dataStruct
    (17) number -> . onlyNumber
    (18) number -> . OPEN_PARENTHESIS RESTA INTEGER CLOSE_PARENTHESIS
    (19) number -> . OPEN_PARENTHESIS RESTA FLOAT CLOSE_PARENTHESIS
    (38) operations -> . number operand number
    (39) operations -> . NAME
    (40) operations -> . number
    (41) operations -> . number operand NAME operations
    (42) operations -> . NAME operand number operations
    (43) operations -> . number operand NAME
    (44) operations -> . NAME operand number
    (45) operations -> . NAME operand NAME operations
    (46) operations -> . number operand number operand operations
    (47) operations -> . NAME SUMA SUMA
    (48) operations -> . NAME operand NAME
    (49) operations -> . NAME RESTA RESTA
    (64) dataStruct -> . array
    (65) dataStruct -> . set
    (66) dataStruct -> . map
    (20) onlyNumber -> . INTEGER
    (21) onlyNumber -> . FLOAT
    (101) array -> . OPEN_BRACKET items CLOSE_BRACKET
    (102) array -> . NEW ARRAY OPEN_PARENTHESIS items CLOSE_PARENTHESIS
    (122) set -> . NEW SET OPEN_PARENTHESIS CLOSE_PARENTHESIS
    (123) set -> . NEW SET OPEN_PARENTHESIS OPEN_BRACKET items CLOSE_BRACKET CLOSE_PARENTHESIS
    (124) set -> . NEW SET OPEN_PARENTHESIS element CLOSE_PARENTHESIS
    (106) map -> . iniciarMap
    (107) map -> . escribirMap
    (108) iniciarMap -> . NEW MAP OPEN_PARENTHESIS CLOSE_PARENTHESIS
    (109) iniciarMap -> . NEW MAP OPEN_PARENTHESIS tupla CLOSE_PARENTHESIS
    (110) escribirMap -> . OPEN_BRACE claveValor CLOSE_BRACE

    NAME            shift and go to state 57
    STRING          shift and go to state 58
    CHAR            shift and go to state 59
    OPEN_PARENTHESIS shift and go to state 63
    INTEGER         shift and go to state 64
    FLOAT           shift and go to state 65
    OPEN_BRACKET    shift and go to state 33
    NEW             shift and go to state 34
    OPEN_BRACE      shift and go to state 29

    datatype                       shift and go to state 186
    number                         shift and go to state 56
    operations                     shift and go to state 60
    dataStruct                     shift and go to state 61
    onlyNumber                     shift and go to state 62
    array                          shift and go to state 19
    set                            shift and go to state 20
    map                            shift and go to state 21
    iniciarMap                     shift and go to state 35
    escribirMap                    shift and go to state 36

state 132

    (101) array -> OPEN_BRACKET items CLOSE_BRACKET .

    SEMICOLON       reduce using rule 101 (array -> OPEN_BRACKET items CLOSE_BRACKET .)
    COMMA           reduce using rule 101 (array -> OPEN_BRACKET items CLOSE_BRACKET .)
    CLOSE_BRACKET   reduce using rule 101 (array -> OPEN_BRACKET items CLOSE_BRACKET .)
    CLOSE_PARENTHESIS reduce using rule 101 (array -> OPEN_BRACKET items CLOSE_BRACKET .)
    CLOSE_BRACE     reduce using rule 101 (array -> OPEN_BRACKET items CLOSE_BRACKET .)


state 133

    (68) items -> item COMMA . items
    (67) items -> . item
    (68) items -> . item COMMA items
    (69) item -> . expBoolean
    (70) item -> . datatype
    (77) expBoolean -> . controlArg
    (78) expBoolean -> . bool
    (79) expBoolean -> . NOT expBoolean
    (80) expBoolean -> . expBoolean logicalOperator expBoolean
    (32) datatype -> . number
    (33) datatype -> . NAME
    (34) datatype -> . STRING
    (35) datatype -> . CHAR
    (36) datatype -> . operations
    (37) datatype -> . dataStruct
    (81) controlArg -> . element clause element
    (22) bool -> . TRUE
    (23) bool -> . FALSE
    (17) number -> . onlyNumber
    (18) number -> . OPEN_PARENTHESIS RESTA INTEGER CLOSE_PARENTHESIS
    (19) number -> . OPEN_PARENTHESIS RESTA FLOAT CLOSE_PARENTHESIS
    (38) operations -> . number operand number
    (39) operations -> . NAME
    (40) operations -> . number
    (41) operations -> . number operand NAME operations
    (42) operations -> . NAME operand number operations
    (43) operations -> . number operand NAME
    (44) operations -> . NAME operand number
    (45) operations -> . NAME operand NAME operations
    (46) operations -> . number operand number operand operations
    (47) operations -> . NAME SUMA SUMA
    (48) operations -> . NAME operand NAME
    (49) operations -> . NAME RESTA RESTA
    (64) dataStruct -> . array
    (65) dataStruct -> . set
    (66) dataStruct -> . map
    (71) element -> . STRING
    (72) element -> . number
    (73) element -> . NAME
    (20) onlyNumber -> . INTEGER
    (21) onlyNumber -> . FLOAT
    (101) array -> . OPEN_BRACKET items CLOSE_BRACKET
    (102) array -> . NEW ARRAY OPEN_PARENTHESIS items CLOSE_PARENTHESIS
    (122) set -> . NEW SET OPEN_PARENTHESIS CLOSE_PARENTHESIS
    (123) set -> . NEW SET OPEN_PARENTHESIS OPEN_BRACKET items CLOSE_BRACKET CLOSE_PARENTHESIS
    (124) set -> . NEW SET OPEN_PARENTHESIS element CLOSE_PARENTHESIS
    (106) map -> . iniciarMap
    (107) map -> . escribirMap
    (108) iniciarMap -> . NEW MAP OPEN_PARENTHESIS CLOSE_PARENTHESIS
    (109) iniciarMap -> . NEW MAP OPEN_PARENTHESIS tupla CLOSE_PARENTHESIS
    (110) escribirMap -> . OPEN_BRACE claveValor CLOSE_BRACE

    NOT             shift and go to state 81
    NAME            shift and go to state 83
    STRING          shift and go to state 84
    CHAR            shift and go to state 59
    TRUE            shift and go to state 73
    FALSE           shift and go to state 74
    OPEN_PARENTHESIS shift and go to state 63
    INTEGER         shift and go to state 64
    FLOAT           shift and go to state 65
    OPEN_BRACKET    shift and go to state 33
    NEW             shift and go to state 34
    OPEN_BRACE      shift and go to state 29

    item                           shift and go to state 76
    items                          shift and go to state 187
    expBoolean                     shift and go to state 77
    datatype                       shift and go to state 78
    controlArg                     shift and go to state 79
    bool                           shift and go to state 80
    number                         shift and go to state 82
    operations                     shift and go to state 60
    dataStruct                     shift and go to state 61
    element                        shift and go to state 85
    onlyNumber                     shift and go to state 62
    array                          shift and go to state 19
    set                            shift and go to state 20
    map                            shift and go to state 21
    iniciarMap                     shift and go to state 35
    escribirMap                    shift and go to state 36

state 134

    (80) expBoolean -> expBoolean logicalOperator . expBoolean
    (77) expBoolean -> . controlArg
    (78) expBoolean -> . bool
    (79) expBoolean -> . NOT expBoolean
    (80) expBoolean -> . expBoolean logicalOperator expBoolean
    (81) controlArg -> . element clause element
    (22) bool -> . TRUE
    (23) bool -> . FALSE
    (71) element -> . STRING
    (72) element -> . number
    (73) element -> . NAME
    (17) number -> . onlyNumber
    (18) number -> . OPEN_PARENTHESIS RESTA INTEGER CLOSE_PARENTHESIS
    (19) number -> . OPEN_PARENTHESIS RESTA FLOAT CLOSE_PARENTHESIS
    (20) onlyNumber -> . INTEGER
    (21) onlyNumber -> . FLOAT

    NOT             shift and go to state 81
    TRUE            shift and go to state 73
    FALSE           shift and go to state 74
    STRING          shift and go to state 116
    NAME            shift and go to state 118
    OPEN_PARENTHESIS shift and go to state 63
    INTEGER         shift and go to state 64
    FLOAT           shift and go to state 65

    expBoolean                     shift and go to state 188
    controlArg                     shift and go to state 79
    bool                           shift and go to state 80
    element                        shift and go to state 85
    number                         shift and go to state 117
    onlyNumber                     shift and go to state 62

state 135

    (75) logicalOperator -> AND .

    NOT             reduce using rule 75 (logicalOperator -> AND .)
    TRUE            reduce using rule 75 (logicalOperator -> AND .)
    FALSE           reduce using rule 75 (logicalOperator -> AND .)
    STRING          reduce using rule 75 (logicalOperator -> AND .)
    NAME            reduce using rule 75 (logicalOperator -> AND .)
    OPEN_PARENTHESIS reduce using rule 75 (logicalOperator -> AND .)
    INTEGER         reduce using rule 75 (logicalOperator -> AND .)
    FLOAT           reduce using rule 75 (logicalOperator -> AND .)


state 136

    (76) logicalOperator -> OR .

    NOT             reduce using rule 76 (logicalOperator -> OR .)
    TRUE            reduce using rule 76 (logicalOperator -> OR .)
    FALSE           reduce using rule 76 (logicalOperator -> OR .)
    STRING          reduce using rule 76 (logicalOperator -> OR .)
    NAME            reduce using rule 76 (logicalOperator -> OR .)
    OPEN_PARENTHESIS reduce using rule 76 (logicalOperator -> OR .)
    INTEGER         reduce using rule 76 (logicalOperator -> OR .)
    FLOAT           reduce using rule 76 (logicalOperator -> OR .)


state 137

    (79) expBoolean -> NOT expBoolean .
    (80) expBoolean -> expBoolean . logicalOperator expBoolean
    (75) logicalOperator -> . AND
    (76) logicalOperator -> . OR

  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
    COMMA           reduce using rule 79 (expBoolean -> NOT expBoolean .)
    CLOSE_BRACKET   reduce using rule 79 (expBoolean -> NOT expBoolean .)
    CLOSE_PARENTHESIS reduce using rule 79 (expBoolean -> NOT expBoolean .)
    SEMICOLON       reduce using rule 79 (expBoolean -> NOT expBoolean .)
    AND             shift and go to state 135
    OR              shift and go to state 136

  ! AND             [ reduce using rule 79 (expBoolean -> NOT expBoolean .) ]
  ! OR              [ reduce using rule 79 (expBoolean -> NOT expBoolean .) ]

    logicalOperator                shift and go to state 134

state 138

    (81) controlArg -> element clause . element
    (71) element -> . STRING
    (72) element -> . number
    (73) element -> . NAME
    (17) number -> . onlyNumber
    (18) number -> . OPEN_PARENTHESIS RESTA INTEGER CLOSE_PARENTHESIS
    (19) number -> . OPEN_PARENTHESIS RESTA FLOAT CLOSE_PARENTHESIS
    (20) onlyNumber -> . INTEGER
    (21) onlyNumber -> . FLOAT

    STRING          shift and go to state 116
    NAME            shift and go to state 118
    OPEN_PARENTHESIS shift and go to state 63
    INTEGER         shift and go to state 64
    FLOAT           shift and go to state 65

    element                        shift and go to state 189
    number                         shift and go to state 117
    onlyNumber                     shift and go to state 62

state 139

    (82) clause -> IGUALIGUAL .

    STRING          reduce using rule 82 (clause -> IGUALIGUAL .)
    NAME            reduce using rule 82 (clause -> IGUALIGUAL .)
    OPEN_PARENTHESIS reduce using rule 82 (clause -> IGUALIGUAL .)
    INTEGER         reduce using rule 82 (clause -> IGUALIGUAL .)
    FLOAT           reduce using rule 82 (clause -> IGUALIGUAL .)


state 140

    (83) clause -> DIFERENTE .

    STRING          reduce using rule 83 (clause -> DIFERENTE .)
    NAME            reduce using rule 83 (clause -> DIFERENTE .)
    OPEN_PARENTHESIS reduce using rule 83 (clause -> DIFERENTE .)
    INTEGER         reduce using rule 83 (clause -> DIFERENTE .)
    FLOAT           reduce using rule 83 (clause -> DIFERENTE .)


state 141

    (84) clause -> MAYORQUE .

    STRING          reduce using rule 84 (clause -> MAYORQUE .)
    NAME            reduce using rule 84 (clause -> MAYORQUE .)
    OPEN_PARENTHESIS reduce using rule 84 (clause -> MAYORQUE .)
    INTEGER         reduce using rule 84 (clause -> MAYORQUE .)
    FLOAT           reduce using rule 84 (clause -> MAYORQUE .)


state 142

    (85) clause -> MAYORIGUALQUE .

    STRING          reduce using rule 85 (clause -> MAYORIGUALQUE .)
    NAME            reduce using rule 85 (clause -> MAYORIGUALQUE .)
    OPEN_PARENTHESIS reduce using rule 85 (clause -> MAYORIGUALQUE .)
    INTEGER         reduce using rule 85 (clause -> MAYORIGUALQUE .)
    FLOAT           reduce using rule 85 (clause -> MAYORIGUALQUE .)


state 143

    (86) clause -> MENORQUE .

    STRING          reduce using rule 86 (clause -> MENORQUE .)
    NAME            reduce using rule 86 (clause -> MENORQUE .)
    OPEN_PARENTHESIS reduce using rule 86 (clause -> MENORQUE .)
    INTEGER         reduce using rule 86 (clause -> MENORQUE .)
    FLOAT           reduce using rule 86 (clause -> MENORQUE .)


state 144

    (87) clause -> MENORIGUALQUE .

    STRING          reduce using rule 87 (clause -> MENORIGUALQUE .)
    NAME            reduce using rule 87 (clause -> MENORIGUALQUE .)
    OPEN_PARENTHESIS reduce using rule 87 (clause -> MENORIGUALQUE .)
    INTEGER         reduce using rule 87 (clause -> MENORIGUALQUE .)
    FLOAT           reduce using rule 87 (clause -> MENORIGUALQUE .)


state 145

    (102) array -> NEW ARRAY OPEN_PARENTHESIS . items CLOSE_PARENTHESIS
    (67) items -> . item
    (68) items -> . item COMMA items
    (69) item -> . expBoolean
    (70) item -> . datatype
    (77) expBoolean -> . controlArg
    (78) expBoolean -> . bool
    (79) expBoolean -> . NOT expBoolean
    (80) expBoolean -> . expBoolean logicalOperator expBoolean
    (32) datatype -> . number
    (33) datatype -> . NAME
    (34) datatype -> . STRING
    (35) datatype -> . CHAR
    (36) datatype -> . operations
    (37) datatype -> . dataStruct
    (81) controlArg -> . element clause element
    (22) bool -> . TRUE
    (23) bool -> . FALSE
    (17) number -> . onlyNumber
    (18) number -> . OPEN_PARENTHESIS RESTA INTEGER CLOSE_PARENTHESIS
    (19) number -> . OPEN_PARENTHESIS RESTA FLOAT CLOSE_PARENTHESIS
    (38) operations -> . number operand number
    (39) operations -> . NAME
    (40) operations -> . number
    (41) operations -> . number operand NAME operations
    (42) operations -> . NAME operand number operations
    (43) operations -> . number operand NAME
    (44) operations -> . NAME operand number
    (45) operations -> . NAME operand NAME operations
    (46) operations -> . number operand number operand operations
    (47) operations -> . NAME SUMA SUMA
    (48) operations -> . NAME operand NAME
    (49) operations -> . NAME RESTA RESTA
    (64) dataStruct -> . array
    (65) dataStruct -> . set
    (66) dataStruct -> . map
    (71) element -> . STRING
    (72) element -> . number
    (73) element -> . NAME
    (20) onlyNumber -> . INTEGER
    (21) onlyNumber -> . FLOAT
    (101) array -> . OPEN_BRACKET items CLOSE_BRACKET
    (102) array -> . NEW ARRAY OPEN_PARENTHESIS items CLOSE_PARENTHESIS
    (122) set -> . NEW SET OPEN_PARENTHESIS CLOSE_PARENTHESIS
    (123) set -> . NEW SET OPEN_PARENTHESIS OPEN_BRACKET items CLOSE_BRACKET CLOSE_PARENTHESIS
    (124) set -> . NEW SET OPEN_PARENTHESIS element CLOSE_PARENTHESIS
    (106) map -> . iniciarMap
    (107) map -> . escribirMap
    (108) iniciarMap -> . NEW MAP OPEN_PARENTHESIS CLOSE_PARENTHESIS
    (109) iniciarMap -> . NEW MAP OPEN_PARENTHESIS tupla CLOSE_PARENTHESIS
    (110) escribirMap -> . OPEN_BRACE claveValor CLOSE_BRACE

    NOT             shift and go to state 81
    NAME            shift and go to state 83
    STRING          shift and go to state 84
    CHAR            shift and go to state 59
    TRUE            shift and go to state 73
    FALSE           shift and go to state 74
    OPEN_PARENTHESIS shift and go to state 63
    INTEGER         shift and go to state 64
    FLOAT           shift and go to state 65
    OPEN_BRACKET    shift and go to state 33
    NEW             shift and go to state 34
    OPEN_BRACE      shift and go to state 29

    items                          shift and go to state 190
    item                           shift and go to state 76
    expBoolean                     shift and go to state 77
    datatype                       shift and go to state 78
    controlArg                     shift and go to state 79
    bool                           shift and go to state 80
    number                         shift and go to state 82
    operations                     shift and go to state 60
    dataStruct                     shift and go to state 61
    element                        shift and go to state 85
    onlyNumber                     shift and go to state 62
    array                          shift and go to state 19
    set                            shift and go to state 20
    map                            shift and go to state 21
    iniciarMap                     shift and go to state 35
    escribirMap                    shift and go to state 36

state 146

    (122) set -> NEW SET OPEN_PARENTHESIS . CLOSE_PARENTHESIS
    (123) set -> NEW SET OPEN_PARENTHESIS . OPEN_BRACKET items CLOSE_BRACKET CLOSE_PARENTHESIS
    (124) set -> NEW SET OPEN_PARENTHESIS . element CLOSE_PARENTHESIS
    (71) element -> . STRING
    (72) element -> . number
    (73) element -> . NAME
    (17) number -> . onlyNumber
    (18) number -> . OPEN_PARENTHESIS RESTA INTEGER CLOSE_PARENTHESIS
    (19) number -> . OPEN_PARENTHESIS RESTA FLOAT CLOSE_PARENTHESIS
    (20) onlyNumber -> . INTEGER
    (21) onlyNumber -> . FLOAT

    CLOSE_PARENTHESIS shift and go to state 191
    OPEN_BRACKET    shift and go to state 192
    STRING          shift and go to state 116
    NAME            shift and go to state 118
    OPEN_PARENTHESIS shift and go to state 63
    INTEGER         shift and go to state 64
    FLOAT           shift and go to state 65

    element                        shift and go to state 193
    number                         shift and go to state 117
    onlyNumber                     shift and go to state 62

state 147

    (108) iniciarMap -> NEW MAP OPEN_PARENTHESIS . CLOSE_PARENTHESIS
    (109) iniciarMap -> NEW MAP OPEN_PARENTHESIS . tupla CLOSE_PARENTHESIS
    (117) tupla -> . OPEN_BRACKET item COMMA item CLOSE_BRACKET
    (118) tupla -> . OPEN_BRACKET item COMMA item CLOSE_BRACKET COMMA tupla

    CLOSE_PARENTHESIS shift and go to state 194
    OPEN_BRACKET    shift and go to state 196

    tupla                          shift and go to state 195

state 148

    (88) while -> WHILE OPEN_PARENTHESIS expBoolean . CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE
    (80) expBoolean -> expBoolean . logicalOperator expBoolean
    (75) logicalOperator -> . AND
    (76) logicalOperator -> . OR

    CLOSE_PARENTHESIS shift and go to state 197
    AND             shift and go to state 135
    OR              shift and go to state 136

    logicalOperator                shift and go to state 134

state 149

    (89) while -> WHILE OPEN_PARENTHESIS bool . CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE
    (78) expBoolean -> bool .

  ! shift/reduce conflict for CLOSE_PARENTHESIS resolved as shift
    CLOSE_PARENTHESIS shift and go to state 198
    AND             reduce using rule 78 (expBoolean -> bool .)
    OR              reduce using rule 78 (expBoolean -> bool .)

  ! CLOSE_PARENTHESIS [ reduce using rule 78 (expBoolean -> bool .) ]


state 150

    (98) for -> FOR OPEN_PARENTHESIS inicialization . SEMICOLON expBoolean SEMICOLON operations CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE

    SEMICOLON       shift and go to state 199


state 151

    (99) inicialization -> type . NAME IGUAL number

    NAME            shift and go to state 200


state 152

    (100) inicialization -> NAME . IGUAL number

    IGUAL           shift and go to state 201


state 153

    (92) if -> soloIf elseIf else .

    COMMENTS        reduce using rule 92 (if -> soloIf elseIf else .)
    LONGCOMMENT     reduce using rule 92 (if -> soloIf elseIf else .)
    NAME            reduce using rule 92 (if -> soloIf elseIf else .)
    PRINT           reduce using rule 92 (if -> soloIf elseIf else .)
    INPUT           reduce using rule 92 (if -> soloIf elseIf else .)
    RETURN          reduce using rule 92 (if -> soloIf elseIf else .)
    FUNCTION        reduce using rule 92 (if -> soloIf elseIf else .)
    CONST           reduce using rule 92 (if -> soloIf elseIf else .)
    LET             reduce using rule 92 (if -> soloIf elseIf else .)
    VAR             reduce using rule 92 (if -> soloIf elseIf else .)
    OPEN_BRACKET    reduce using rule 92 (if -> soloIf elseIf else .)
    NEW             reduce using rule 92 (if -> soloIf elseIf else .)
    WHILE           reduce using rule 92 (if -> soloIf elseIf else .)
    FOR             reduce using rule 92 (if -> soloIf elseIf else .)
    OPEN_BRACE      reduce using rule 92 (if -> soloIf elseIf else .)
    IF              reduce using rule 92 (if -> soloIf elseIf else .)
    $end            reduce using rule 92 (if -> soloIf elseIf else .)
    CLOSE_BRACE     reduce using rule 92 (if -> soloIf elseIf else .)


state 154

    (95) elseIf -> ELSEIF OPEN_PARENTHESIS . expBoolean CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE
    (96) elseIf -> ELSEIF OPEN_PARENTHESIS . expBoolean CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE elseIf
    (77) expBoolean -> . controlArg
    (78) expBoolean -> . bool
    (79) expBoolean -> . NOT expBoolean
    (80) expBoolean -> . expBoolean logicalOperator expBoolean
    (81) controlArg -> . element clause element
    (22) bool -> . TRUE
    (23) bool -> . FALSE
    (71) element -> . STRING
    (72) element -> . number
    (73) element -> . NAME
    (17) number -> . onlyNumber
    (18) number -> . OPEN_PARENTHESIS RESTA INTEGER CLOSE_PARENTHESIS
    (19) number -> . OPEN_PARENTHESIS RESTA FLOAT CLOSE_PARENTHESIS
    (20) onlyNumber -> . INTEGER
    (21) onlyNumber -> . FLOAT

    NOT             shift and go to state 81
    TRUE            shift and go to state 73
    FALSE           shift and go to state 74
    STRING          shift and go to state 116
    NAME            shift and go to state 118
    OPEN_PARENTHESIS shift and go to state 63
    INTEGER         shift and go to state 64
    FLOAT           shift and go to state 65

    expBoolean                     shift and go to state 202
    controlArg                     shift and go to state 79
    bool                           shift and go to state 80
    element                        shift and go to state 85
    number                         shift and go to state 117
    onlyNumber                     shift and go to state 62

state 155

    (97) else -> ELSE OPEN_BRACE . expression CLOSE_BRACE
    (1) expression -> . semiExpression
    (2) expression -> . semiExpression expression
    (3) semiExpression -> . variable
    (4) semiExpression -> . dataStruct SEMICOLON
    (5) semiExpression -> . controlStruct
    (6) semiExpression -> . methodsSet
    (7) semiExpression -> . mapFunctions
    (8) semiExpression -> . arrayFn
    (9) semiExpression -> . declaration
    (10) semiExpression -> . print
    (11) semiExpression -> . input
    (12) semiExpression -> . return
    (13) semiExpression -> . function
    (14) semiExpression -> . COMMENTS
    (15) semiExpression -> . LONGCOMMENT
    (16) semiExpression -> . asigOp
    (24) variable -> . type NAME IGUAL datatype SEMICOLON
    (25) variable -> . NAME IGUAL datatype SEMICOLON
    (26) variable -> . type NAME SEMICOLON
    (27) variable -> . type NAME IGUAL input
    (28) variable -> . NAME IGUAL input
    (64) dataStruct -> . array
    (65) dataStruct -> . set
    (66) dataStruct -> . map
    (61) controlStruct -> . while
    (62) controlStruct -> . for
    (63) controlStruct -> . if
    (125) methodsSet -> . NAME POINT ADD OPEN_PARENTHESIS element CLOSE_PARENTHESIS SEMICOLON
    (126) methodsSet -> . NAME POINT DELETE OPEN_PARENTHESIS element CLOSE_PARENTHESIS SEMICOLON
    (127) methodsSet -> . NAME POINT CLEAR OPEN_PARENTHESIS CLOSE_PARENTHESIS SEMICOLON
    (119) mapFunctions -> . NAME POINT CLEAR OPEN_PARENTHESIS CLOSE_PARENTHESIS SEMICOLON
    (120) mapFunctions -> . NAME POINT GET OPEN_PARENTHESIS clave CLOSE_PARENTHESIS SEMICOLON
    (121) mapFunctions -> . NAME POINT HAS OPEN_PARENTHESIS clave CLOSE_PARENTHESIS SEMICOLON
    (103) arrayFn -> . NAME POINT POP OPEN_PARENTHESIS CLOSE_PARENTHESIS SEMICOLON
    (104) arrayFn -> . NAME POINT PUSH OPEN_PARENTHESIS item CLOSE_PARENTHESIS SEMICOLON
    (105) arrayFn -> . NAME POINT UNSHIFT OPEN_PARENTHESIS item CLOSE_PARENTHESIS SEMICOLON
    (74) declaration -> . NAME IGUAL element SEMICOLON
    (133) print -> . PRINT OPEN_PARENTHESIS datatype CLOSE_PARENTHESIS SEMICOLON
    (134) print -> . PRINT OPEN_PARENTHESIS CLOSE_PARENTHESIS SEMICOLON
    (135) input -> . INPUT OPEN_PARENTHESIS element COMMA element CLOSE_PARENTHESIS SEMICOLON
    (136) input -> . INPUT OPEN_PARENTHESIS element CLOSE_PARENTHESIS SEMICOLON
    (137) input -> . INPUT OPEN_PARENTHESIS CLOSE_PARENTHESIS SEMICOLON
    (132) return -> . RETURN datatype SEMICOLON
    (128) function -> . FUNCTION NAME OPEN_PARENTHESIS CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE
    (129) function -> . FUNCTION NAME OPEN_PARENTHESIS parameter CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE
    (60) asigOp -> . NAME operadorAsig number SEMICOLON
    (29) type -> . CONST
    (30) type -> . LET
    (31) type -> . VAR
    (101) array -> . OPEN_BRACKET items CLOSE_BRACKET
    (102) array -> . NEW ARRAY OPEN_PARENTHESIS items CLOSE_PARENTHESIS
    (122) set -> . NEW SET OPEN_PARENTHESIS CLOSE_PARENTHESIS
    (123) set -> . NEW SET OPEN_PARENTHESIS OPEN_BRACKET items CLOSE_BRACKET CLOSE_PARENTHESIS
    (124) set -> . NEW SET OPEN_PARENTHESIS element CLOSE_PARENTHESIS
    (106) map -> . iniciarMap
    (107) map -> . escribirMap
    (88) while -> . WHILE OPEN_PARENTHESIS expBoolean CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE
    (89) while -> . WHILE OPEN_PARENTHESIS bool CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE
    (98) for -> . FOR OPEN_PARENTHESIS inicialization SEMICOLON expBoolean SEMICOLON operations CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE
    (90) if -> . soloIf
    (91) if -> . soloIf elseIf
    (92) if -> . soloIf elseIf else
    (93) if -> . soloIf else
    (108) iniciarMap -> . NEW MAP OPEN_PARENTHESIS CLOSE_PARENTHESIS
    (109) iniciarMap -> . NEW MAP OPEN_PARENTHESIS tupla CLOSE_PARENTHESIS
    (110) escribirMap -> . OPEN_BRACE claveValor CLOSE_BRACE
    (94) soloIf -> . IF OPEN_PARENTHESIS expBoolean CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE

    COMMENTS        shift and go to state 14
    LONGCOMMENT     shift and go to state 15
    NAME            shift and go to state 18
    PRINT           shift and go to state 25
    INPUT           shift and go to state 26
    RETURN          shift and go to state 27
    FUNCTION        shift and go to state 28
    CONST           shift and go to state 30
    LET             shift and go to state 31
    VAR             shift and go to state 32
    OPEN_BRACKET    shift and go to state 33
    NEW             shift and go to state 34
    WHILE           shift and go to state 37
    FOR             shift and go to state 38
    OPEN_BRACE      shift and go to state 29
    IF              shift and go to state 40

    expression                     shift and go to state 203
    semiExpression                 shift and go to state 2
    variable                       shift and go to state 3
    dataStruct                     shift and go to state 4
    controlStruct                  shift and go to state 5
    methodsSet                     shift and go to state 6
    mapFunctions                   shift and go to state 7
    arrayFn                        shift and go to state 8
    declaration                    shift and go to state 9
    print                          shift and go to state 10
    input                          shift and go to state 11
    return                         shift and go to state 12
    function                       shift and go to state 13
    asigOp                         shift and go to state 16
    type                           shift and go to state 17
    array                          shift and go to state 19
    set                            shift and go to state 20
    map                            shift and go to state 21
    while                          shift and go to state 22
    for                            shift and go to state 23
    if                             shift and go to state 24
    iniciarMap                     shift and go to state 35
    escribirMap                    shift and go to state 36
    soloIf                         shift and go to state 39

state 156

    (94) soloIf -> IF OPEN_PARENTHESIS expBoolean . CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE
    (80) expBoolean -> expBoolean . logicalOperator expBoolean
    (75) logicalOperator -> . AND
    (76) logicalOperator -> . OR

    CLOSE_PARENTHESIS shift and go to state 204
    AND             shift and go to state 135
    OR              shift and go to state 136

    logicalOperator                shift and go to state 134

state 157

    (24) variable -> type NAME IGUAL datatype . SEMICOLON

    SEMICOLON       shift and go to state 205


state 158

    (27) variable -> type NAME IGUAL input .

    COMMENTS        reduce using rule 27 (variable -> type NAME IGUAL input .)
    LONGCOMMENT     reduce using rule 27 (variable -> type NAME IGUAL input .)
    NAME            reduce using rule 27 (variable -> type NAME IGUAL input .)
    PRINT           reduce using rule 27 (variable -> type NAME IGUAL input .)
    INPUT           reduce using rule 27 (variable -> type NAME IGUAL input .)
    RETURN          reduce using rule 27 (variable -> type NAME IGUAL input .)
    FUNCTION        reduce using rule 27 (variable -> type NAME IGUAL input .)
    CONST           reduce using rule 27 (variable -> type NAME IGUAL input .)
    LET             reduce using rule 27 (variable -> type NAME IGUAL input .)
    VAR             reduce using rule 27 (variable -> type NAME IGUAL input .)
    OPEN_BRACKET    reduce using rule 27 (variable -> type NAME IGUAL input .)
    NEW             reduce using rule 27 (variable -> type NAME IGUAL input .)
    WHILE           reduce using rule 27 (variable -> type NAME IGUAL input .)
    FOR             reduce using rule 27 (variable -> type NAME IGUAL input .)
    OPEN_BRACE      reduce using rule 27 (variable -> type NAME IGUAL input .)
    IF              reduce using rule 27 (variable -> type NAME IGUAL input .)
    $end            reduce using rule 27 (variable -> type NAME IGUAL input .)
    CLOSE_BRACE     reduce using rule 27 (variable -> type NAME IGUAL input .)


state 159

    (25) variable -> NAME IGUAL datatype SEMICOLON .

    COMMENTS        reduce using rule 25 (variable -> NAME IGUAL datatype SEMICOLON .)
    LONGCOMMENT     reduce using rule 25 (variable -> NAME IGUAL datatype SEMICOLON .)
    NAME            reduce using rule 25 (variable -> NAME IGUAL datatype SEMICOLON .)
    PRINT           reduce using rule 25 (variable -> NAME IGUAL datatype SEMICOLON .)
    INPUT           reduce using rule 25 (variable -> NAME IGUAL datatype SEMICOLON .)
    RETURN          reduce using rule 25 (variable -> NAME IGUAL datatype SEMICOLON .)
    FUNCTION        reduce using rule 25 (variable -> NAME IGUAL datatype SEMICOLON .)
    CONST           reduce using rule 25 (variable -> NAME IGUAL datatype SEMICOLON .)
    LET             reduce using rule 25 (variable -> NAME IGUAL datatype SEMICOLON .)
    VAR             reduce using rule 25 (variable -> NAME IGUAL datatype SEMICOLON .)
    OPEN_BRACKET    reduce using rule 25 (variable -> NAME IGUAL datatype SEMICOLON .)
    NEW             reduce using rule 25 (variable -> NAME IGUAL datatype SEMICOLON .)
    WHILE           reduce using rule 25 (variable -> NAME IGUAL datatype SEMICOLON .)
    FOR             reduce using rule 25 (variable -> NAME IGUAL datatype SEMICOLON .)
    OPEN_BRACE      reduce using rule 25 (variable -> NAME IGUAL datatype SEMICOLON .)
    IF              reduce using rule 25 (variable -> NAME IGUAL datatype SEMICOLON .)
    $end            reduce using rule 25 (variable -> NAME IGUAL datatype SEMICOLON .)
    CLOSE_BRACE     reduce using rule 25 (variable -> NAME IGUAL datatype SEMICOLON .)


state 160

    (74) declaration -> NAME IGUAL element SEMICOLON .

    COMMENTS        reduce using rule 74 (declaration -> NAME IGUAL element SEMICOLON .)
    LONGCOMMENT     reduce using rule 74 (declaration -> NAME IGUAL element SEMICOLON .)
    NAME            reduce using rule 74 (declaration -> NAME IGUAL element SEMICOLON .)
    PRINT           reduce using rule 74 (declaration -> NAME IGUAL element SEMICOLON .)
    INPUT           reduce using rule 74 (declaration -> NAME IGUAL element SEMICOLON .)
    RETURN          reduce using rule 74 (declaration -> NAME IGUAL element SEMICOLON .)
    FUNCTION        reduce using rule 74 (declaration -> NAME IGUAL element SEMICOLON .)
    CONST           reduce using rule 74 (declaration -> NAME IGUAL element SEMICOLON .)
    LET             reduce using rule 74 (declaration -> NAME IGUAL element SEMICOLON .)
    VAR             reduce using rule 74 (declaration -> NAME IGUAL element SEMICOLON .)
    OPEN_BRACKET    reduce using rule 74 (declaration -> NAME IGUAL element SEMICOLON .)
    NEW             reduce using rule 74 (declaration -> NAME IGUAL element SEMICOLON .)
    WHILE           reduce using rule 74 (declaration -> NAME IGUAL element SEMICOLON .)
    FOR             reduce using rule 74 (declaration -> NAME IGUAL element SEMICOLON .)
    OPEN_BRACE      reduce using rule 74 (declaration -> NAME IGUAL element SEMICOLON .)
    IF              reduce using rule 74 (declaration -> NAME IGUAL element SEMICOLON .)
    $end            reduce using rule 74 (declaration -> NAME IGUAL element SEMICOLON .)
    CLOSE_BRACE     reduce using rule 74 (declaration -> NAME IGUAL element SEMICOLON .)


state 161

    (125) methodsSet -> NAME POINT ADD OPEN_PARENTHESIS . element CLOSE_PARENTHESIS SEMICOLON
    (71) element -> . STRING
    (72) element -> . number
    (73) element -> . NAME
    (17) number -> . onlyNumber
    (18) number -> . OPEN_PARENTHESIS RESTA INTEGER CLOSE_PARENTHESIS
    (19) number -> . OPEN_PARENTHESIS RESTA FLOAT CLOSE_PARENTHESIS
    (20) onlyNumber -> . INTEGER
    (21) onlyNumber -> . FLOAT

    STRING          shift and go to state 116
    NAME            shift and go to state 118
    OPEN_PARENTHESIS shift and go to state 63
    INTEGER         shift and go to state 64
    FLOAT           shift and go to state 65

    element                        shift and go to state 206
    number                         shift and go to state 117
    onlyNumber                     shift and go to state 62

state 162

    (126) methodsSet -> NAME POINT DELETE OPEN_PARENTHESIS . element CLOSE_PARENTHESIS SEMICOLON
    (71) element -> . STRING
    (72) element -> . number
    (73) element -> . NAME
    (17) number -> . onlyNumber
    (18) number -> . OPEN_PARENTHESIS RESTA INTEGER CLOSE_PARENTHESIS
    (19) number -> . OPEN_PARENTHESIS RESTA FLOAT CLOSE_PARENTHESIS
    (20) onlyNumber -> . INTEGER
    (21) onlyNumber -> . FLOAT

    STRING          shift and go to state 116
    NAME            shift and go to state 118
    OPEN_PARENTHESIS shift and go to state 63
    INTEGER         shift and go to state 64
    FLOAT           shift and go to state 65

    element                        shift and go to state 207
    number                         shift and go to state 117
    onlyNumber                     shift and go to state 62

state 163

    (127) methodsSet -> NAME POINT CLEAR OPEN_PARENTHESIS . CLOSE_PARENTHESIS SEMICOLON
    (119) mapFunctions -> NAME POINT CLEAR OPEN_PARENTHESIS . CLOSE_PARENTHESIS SEMICOLON

    CLOSE_PARENTHESIS shift and go to state 208


state 164

    (120) mapFunctions -> NAME POINT GET OPEN_PARENTHESIS . clave CLOSE_PARENTHESIS SEMICOLON
    (113) clave -> . onlyNumber
    (114) clave -> . STRING
    (115) clave -> . CHAR
    (116) clave -> . bool
    (20) onlyNumber -> . INTEGER
    (21) onlyNumber -> . FLOAT
    (22) bool -> . TRUE
    (23) bool -> . FALSE

    STRING          shift and go to state 70
    CHAR            shift and go to state 71
    INTEGER         shift and go to state 64
    FLOAT           shift and go to state 65
    TRUE            shift and go to state 73
    FALSE           shift and go to state 74

    clave                          shift and go to state 209
    onlyNumber                     shift and go to state 69
    bool                           shift and go to state 72

state 165

    (121) mapFunctions -> NAME POINT HAS OPEN_PARENTHESIS . clave CLOSE_PARENTHESIS SEMICOLON
    (113) clave -> . onlyNumber
    (114) clave -> . STRING
    (115) clave -> . CHAR
    (116) clave -> . bool
    (20) onlyNumber -> . INTEGER
    (21) onlyNumber -> . FLOAT
    (22) bool -> . TRUE
    (23) bool -> . FALSE

    STRING          shift and go to state 70
    CHAR            shift and go to state 71
    INTEGER         shift and go to state 64
    FLOAT           shift and go to state 65
    TRUE            shift and go to state 73
    FALSE           shift and go to state 74

    clave                          shift and go to state 210
    onlyNumber                     shift and go to state 69
    bool                           shift and go to state 72

state 166

    (103) arrayFn -> NAME POINT POP OPEN_PARENTHESIS . CLOSE_PARENTHESIS SEMICOLON

    CLOSE_PARENTHESIS shift and go to state 211


state 167

    (104) arrayFn -> NAME POINT PUSH OPEN_PARENTHESIS . item CLOSE_PARENTHESIS SEMICOLON
    (69) item -> . expBoolean
    (70) item -> . datatype
    (77) expBoolean -> . controlArg
    (78) expBoolean -> . bool
    (79) expBoolean -> . NOT expBoolean
    (80) expBoolean -> . expBoolean logicalOperator expBoolean
    (32) datatype -> . number
    (33) datatype -> . NAME
    (34) datatype -> . STRING
    (35) datatype -> . CHAR
    (36) datatype -> . operations
    (37) datatype -> . dataStruct
    (81) controlArg -> . element clause element
    (22) bool -> . TRUE
    (23) bool -> . FALSE
    (17) number -> . onlyNumber
    (18) number -> . OPEN_PARENTHESIS RESTA INTEGER CLOSE_PARENTHESIS
    (19) number -> . OPEN_PARENTHESIS RESTA FLOAT CLOSE_PARENTHESIS
    (38) operations -> . number operand number
    (39) operations -> . NAME
    (40) operations -> . number
    (41) operations -> . number operand NAME operations
    (42) operations -> . NAME operand number operations
    (43) operations -> . number operand NAME
    (44) operations -> . NAME operand number
    (45) operations -> . NAME operand NAME operations
    (46) operations -> . number operand number operand operations
    (47) operations -> . NAME SUMA SUMA
    (48) operations -> . NAME operand NAME
    (49) operations -> . NAME RESTA RESTA
    (64) dataStruct -> . array
    (65) dataStruct -> . set
    (66) dataStruct -> . map
    (71) element -> . STRING
    (72) element -> . number
    (73) element -> . NAME
    (20) onlyNumber -> . INTEGER
    (21) onlyNumber -> . FLOAT
    (101) array -> . OPEN_BRACKET items CLOSE_BRACKET
    (102) array -> . NEW ARRAY OPEN_PARENTHESIS items CLOSE_PARENTHESIS
    (122) set -> . NEW SET OPEN_PARENTHESIS CLOSE_PARENTHESIS
    (123) set -> . NEW SET OPEN_PARENTHESIS OPEN_BRACKET items CLOSE_BRACKET CLOSE_PARENTHESIS
    (124) set -> . NEW SET OPEN_PARENTHESIS element CLOSE_PARENTHESIS
    (106) map -> . iniciarMap
    (107) map -> . escribirMap
    (108) iniciarMap -> . NEW MAP OPEN_PARENTHESIS CLOSE_PARENTHESIS
    (109) iniciarMap -> . NEW MAP OPEN_PARENTHESIS tupla CLOSE_PARENTHESIS
    (110) escribirMap -> . OPEN_BRACE claveValor CLOSE_BRACE

    NOT             shift and go to state 81
    NAME            shift and go to state 83
    STRING          shift and go to state 84
    CHAR            shift and go to state 59
    TRUE            shift and go to state 73
    FALSE           shift and go to state 74
    OPEN_PARENTHESIS shift and go to state 63
    INTEGER         shift and go to state 64
    FLOAT           shift and go to state 65
    OPEN_BRACKET    shift and go to state 33
    NEW             shift and go to state 34
    OPEN_BRACE      shift and go to state 29

    item                           shift and go to state 212
    expBoolean                     shift and go to state 77
    datatype                       shift and go to state 78
    controlArg                     shift and go to state 79
    bool                           shift and go to state 80
    number                         shift and go to state 82
    operations                     shift and go to state 60
    dataStruct                     shift and go to state 61
    element                        shift and go to state 85
    onlyNumber                     shift and go to state 62
    array                          shift and go to state 19
    set                            shift and go to state 20
    map                            shift and go to state 21
    iniciarMap                     shift and go to state 35
    escribirMap                    shift and go to state 36

state 168

    (105) arrayFn -> NAME POINT UNSHIFT OPEN_PARENTHESIS . item CLOSE_PARENTHESIS SEMICOLON
    (69) item -> . expBoolean
    (70) item -> . datatype
    (77) expBoolean -> . controlArg
    (78) expBoolean -> . bool
    (79) expBoolean -> . NOT expBoolean
    (80) expBoolean -> . expBoolean logicalOperator expBoolean
    (32) datatype -> . number
    (33) datatype -> . NAME
    (34) datatype -> . STRING
    (35) datatype -> . CHAR
    (36) datatype -> . operations
    (37) datatype -> . dataStruct
    (81) controlArg -> . element clause element
    (22) bool -> . TRUE
    (23) bool -> . FALSE
    (17) number -> . onlyNumber
    (18) number -> . OPEN_PARENTHESIS RESTA INTEGER CLOSE_PARENTHESIS
    (19) number -> . OPEN_PARENTHESIS RESTA FLOAT CLOSE_PARENTHESIS
    (38) operations -> . number operand number
    (39) operations -> . NAME
    (40) operations -> . number
    (41) operations -> . number operand NAME operations
    (42) operations -> . NAME operand number operations
    (43) operations -> . number operand NAME
    (44) operations -> . NAME operand number
    (45) operations -> . NAME operand NAME operations
    (46) operations -> . number operand number operand operations
    (47) operations -> . NAME SUMA SUMA
    (48) operations -> . NAME operand NAME
    (49) operations -> . NAME RESTA RESTA
    (64) dataStruct -> . array
    (65) dataStruct -> . set
    (66) dataStruct -> . map
    (71) element -> . STRING
    (72) element -> . number
    (73) element -> . NAME
    (20) onlyNumber -> . INTEGER
    (21) onlyNumber -> . FLOAT
    (101) array -> . OPEN_BRACKET items CLOSE_BRACKET
    (102) array -> . NEW ARRAY OPEN_PARENTHESIS items CLOSE_PARENTHESIS
    (122) set -> . NEW SET OPEN_PARENTHESIS CLOSE_PARENTHESIS
    (123) set -> . NEW SET OPEN_PARENTHESIS OPEN_BRACKET items CLOSE_BRACKET CLOSE_PARENTHESIS
    (124) set -> . NEW SET OPEN_PARENTHESIS element CLOSE_PARENTHESIS
    (106) map -> . iniciarMap
    (107) map -> . escribirMap
    (108) iniciarMap -> . NEW MAP OPEN_PARENTHESIS CLOSE_PARENTHESIS
    (109) iniciarMap -> . NEW MAP OPEN_PARENTHESIS tupla CLOSE_PARENTHESIS
    (110) escribirMap -> . OPEN_BRACE claveValor CLOSE_BRACE

    NOT             shift and go to state 81
    NAME            shift and go to state 83
    STRING          shift and go to state 84
    CHAR            shift and go to state 59
    TRUE            shift and go to state 73
    FALSE           shift and go to state 74
    OPEN_PARENTHESIS shift and go to state 63
    INTEGER         shift and go to state 64
    FLOAT           shift and go to state 65
    OPEN_BRACKET    shift and go to state 33
    NEW             shift and go to state 34
    OPEN_BRACE      shift and go to state 29

    item                           shift and go to state 213
    expBoolean                     shift and go to state 77
    datatype                       shift and go to state 78
    controlArg                     shift and go to state 79
    bool                           shift and go to state 80
    number                         shift and go to state 82
    operations                     shift and go to state 60
    dataStruct                     shift and go to state 61
    element                        shift and go to state 85
    onlyNumber                     shift and go to state 62
    array                          shift and go to state 19
    set                            shift and go to state 20
    map                            shift and go to state 21
    iniciarMap                     shift and go to state 35
    escribirMap                    shift and go to state 36

state 169

    (60) asigOp -> NAME operadorAsig number SEMICOLON .

    COMMENTS        reduce using rule 60 (asigOp -> NAME operadorAsig number SEMICOLON .)
    LONGCOMMENT     reduce using rule 60 (asigOp -> NAME operadorAsig number SEMICOLON .)
    NAME            reduce using rule 60 (asigOp -> NAME operadorAsig number SEMICOLON .)
    PRINT           reduce using rule 60 (asigOp -> NAME operadorAsig number SEMICOLON .)
    INPUT           reduce using rule 60 (asigOp -> NAME operadorAsig number SEMICOLON .)
    RETURN          reduce using rule 60 (asigOp -> NAME operadorAsig number SEMICOLON .)
    FUNCTION        reduce using rule 60 (asigOp -> NAME operadorAsig number SEMICOLON .)
    CONST           reduce using rule 60 (asigOp -> NAME operadorAsig number SEMICOLON .)
    LET             reduce using rule 60 (asigOp -> NAME operadorAsig number SEMICOLON .)
    VAR             reduce using rule 60 (asigOp -> NAME operadorAsig number SEMICOLON .)
    OPEN_BRACKET    reduce using rule 60 (asigOp -> NAME operadorAsig number SEMICOLON .)
    NEW             reduce using rule 60 (asigOp -> NAME operadorAsig number SEMICOLON .)
    WHILE           reduce using rule 60 (asigOp -> NAME operadorAsig number SEMICOLON .)
    FOR             reduce using rule 60 (asigOp -> NAME operadorAsig number SEMICOLON .)
    OPEN_BRACE      reduce using rule 60 (asigOp -> NAME operadorAsig number SEMICOLON .)
    IF              reduce using rule 60 (asigOp -> NAME operadorAsig number SEMICOLON .)
    $end            reduce using rule 60 (asigOp -> NAME operadorAsig number SEMICOLON .)
    CLOSE_BRACE     reduce using rule 60 (asigOp -> NAME operadorAsig number SEMICOLON .)


state 170

    (133) print -> PRINT OPEN_PARENTHESIS datatype CLOSE_PARENTHESIS . SEMICOLON

    SEMICOLON       shift and go to state 214


state 171

    (134) print -> PRINT OPEN_PARENTHESIS CLOSE_PARENTHESIS SEMICOLON .

    COMMENTS        reduce using rule 134 (print -> PRINT OPEN_PARENTHESIS CLOSE_PARENTHESIS SEMICOLON .)
    LONGCOMMENT     reduce using rule 134 (print -> PRINT OPEN_PARENTHESIS CLOSE_PARENTHESIS SEMICOLON .)
    NAME            reduce using rule 134 (print -> PRINT OPEN_PARENTHESIS CLOSE_PARENTHESIS SEMICOLON .)
    PRINT           reduce using rule 134 (print -> PRINT OPEN_PARENTHESIS CLOSE_PARENTHESIS SEMICOLON .)
    INPUT           reduce using rule 134 (print -> PRINT OPEN_PARENTHESIS CLOSE_PARENTHESIS SEMICOLON .)
    RETURN          reduce using rule 134 (print -> PRINT OPEN_PARENTHESIS CLOSE_PARENTHESIS SEMICOLON .)
    FUNCTION        reduce using rule 134 (print -> PRINT OPEN_PARENTHESIS CLOSE_PARENTHESIS SEMICOLON .)
    CONST           reduce using rule 134 (print -> PRINT OPEN_PARENTHESIS CLOSE_PARENTHESIS SEMICOLON .)
    LET             reduce using rule 134 (print -> PRINT OPEN_PARENTHESIS CLOSE_PARENTHESIS SEMICOLON .)
    VAR             reduce using rule 134 (print -> PRINT OPEN_PARENTHESIS CLOSE_PARENTHESIS SEMICOLON .)
    OPEN_BRACKET    reduce using rule 134 (print -> PRINT OPEN_PARENTHESIS CLOSE_PARENTHESIS SEMICOLON .)
    NEW             reduce using rule 134 (print -> PRINT OPEN_PARENTHESIS CLOSE_PARENTHESIS SEMICOLON .)
    WHILE           reduce using rule 134 (print -> PRINT OPEN_PARENTHESIS CLOSE_PARENTHESIS SEMICOLON .)
    FOR             reduce using rule 134 (print -> PRINT OPEN_PARENTHESIS CLOSE_PARENTHESIS SEMICOLON .)
    OPEN_BRACE      reduce using rule 134 (print -> PRINT OPEN_PARENTHESIS CLOSE_PARENTHESIS SEMICOLON .)
    IF              reduce using rule 134 (print -> PRINT OPEN_PARENTHESIS CLOSE_PARENTHESIS SEMICOLON .)
    $end            reduce using rule 134 (print -> PRINT OPEN_PARENTHESIS CLOSE_PARENTHESIS SEMICOLON .)
    CLOSE_BRACE     reduce using rule 134 (print -> PRINT OPEN_PARENTHESIS CLOSE_PARENTHESIS SEMICOLON .)


state 172

    (135) input -> INPUT OPEN_PARENTHESIS element COMMA . element CLOSE_PARENTHESIS SEMICOLON
    (71) element -> . STRING
    (72) element -> . number
    (73) element -> . NAME
    (17) number -> . onlyNumber
    (18) number -> . OPEN_PARENTHESIS RESTA INTEGER CLOSE_PARENTHESIS
    (19) number -> . OPEN_PARENTHESIS RESTA FLOAT CLOSE_PARENTHESIS
    (20) onlyNumber -> . INTEGER
    (21) onlyNumber -> . FLOAT

    STRING          shift and go to state 116
    NAME            shift and go to state 118
    OPEN_PARENTHESIS shift and go to state 63
    INTEGER         shift and go to state 64
    FLOAT           shift and go to state 65

    element                        shift and go to state 215
    number                         shift and go to state 117
    onlyNumber                     shift and go to state 62

state 173

    (136) input -> INPUT OPEN_PARENTHESIS element CLOSE_PARENTHESIS . SEMICOLON

    SEMICOLON       shift and go to state 216


state 174

    (137) input -> INPUT OPEN_PARENTHESIS CLOSE_PARENTHESIS SEMICOLON .

    COMMENTS        reduce using rule 137 (input -> INPUT OPEN_PARENTHESIS CLOSE_PARENTHESIS SEMICOLON .)
    LONGCOMMENT     reduce using rule 137 (input -> INPUT OPEN_PARENTHESIS CLOSE_PARENTHESIS SEMICOLON .)
    NAME            reduce using rule 137 (input -> INPUT OPEN_PARENTHESIS CLOSE_PARENTHESIS SEMICOLON .)
    PRINT           reduce using rule 137 (input -> INPUT OPEN_PARENTHESIS CLOSE_PARENTHESIS SEMICOLON .)
    INPUT           reduce using rule 137 (input -> INPUT OPEN_PARENTHESIS CLOSE_PARENTHESIS SEMICOLON .)
    RETURN          reduce using rule 137 (input -> INPUT OPEN_PARENTHESIS CLOSE_PARENTHESIS SEMICOLON .)
    FUNCTION        reduce using rule 137 (input -> INPUT OPEN_PARENTHESIS CLOSE_PARENTHESIS SEMICOLON .)
    CONST           reduce using rule 137 (input -> INPUT OPEN_PARENTHESIS CLOSE_PARENTHESIS SEMICOLON .)
    LET             reduce using rule 137 (input -> INPUT OPEN_PARENTHESIS CLOSE_PARENTHESIS SEMICOLON .)
    VAR             reduce using rule 137 (input -> INPUT OPEN_PARENTHESIS CLOSE_PARENTHESIS SEMICOLON .)
    OPEN_BRACKET    reduce using rule 137 (input -> INPUT OPEN_PARENTHESIS CLOSE_PARENTHESIS SEMICOLON .)
    NEW             reduce using rule 137 (input -> INPUT OPEN_PARENTHESIS CLOSE_PARENTHESIS SEMICOLON .)
    WHILE           reduce using rule 137 (input -> INPUT OPEN_PARENTHESIS CLOSE_PARENTHESIS SEMICOLON .)
    FOR             reduce using rule 137 (input -> INPUT OPEN_PARENTHESIS CLOSE_PARENTHESIS SEMICOLON .)
    OPEN_BRACE      reduce using rule 137 (input -> INPUT OPEN_PARENTHESIS CLOSE_PARENTHESIS SEMICOLON .)
    IF              reduce using rule 137 (input -> INPUT OPEN_PARENTHESIS CLOSE_PARENTHESIS SEMICOLON .)
    $end            reduce using rule 137 (input -> INPUT OPEN_PARENTHESIS CLOSE_PARENTHESIS SEMICOLON .)
    CLOSE_BRACE     reduce using rule 137 (input -> INPUT OPEN_PARENTHESIS CLOSE_PARENTHESIS SEMICOLON .)


state 175

    (38) operations -> number operand number .
    (46) operations -> number operand number . operand operations
    (50) operand -> . SUMA
    (51) operand -> . RESTA
    (52) operand -> . MULTIPLICACION
    (53) operand -> . DIVISION

    SEMICOLON       reduce using rule 38 (operations -> number operand number .)
    COMMA           reduce using rule 38 (operations -> number operand number .)
    CLOSE_BRACKET   reduce using rule 38 (operations -> number operand number .)
    CLOSE_PARENTHESIS reduce using rule 38 (operations -> number operand number .)
    CLOSE_BRACE     reduce using rule 38 (operations -> number operand number .)
    SUMA            shift and go to state 121
    RESTA           shift and go to state 122
    MULTIPLICACION  shift and go to state 123
    DIVISION        shift and go to state 124

    operand                        shift and go to state 217

state 176

    (41) operations -> number operand NAME . operations
    (43) operations -> number operand NAME .
    (38) operations -> . number operand number
    (39) operations -> . NAME
    (40) operations -> . number
    (41) operations -> . number operand NAME operations
    (42) operations -> . NAME operand number operations
    (43) operations -> . number operand NAME
    (44) operations -> . NAME operand number
    (45) operations -> . NAME operand NAME operations
    (46) operations -> . number operand number operand operations
    (47) operations -> . NAME SUMA SUMA
    (48) operations -> . NAME operand NAME
    (49) operations -> . NAME RESTA RESTA
    (17) number -> . onlyNumber
    (18) number -> . OPEN_PARENTHESIS RESTA INTEGER CLOSE_PARENTHESIS
    (19) number -> . OPEN_PARENTHESIS RESTA FLOAT CLOSE_PARENTHESIS
    (20) onlyNumber -> . INTEGER
    (21) onlyNumber -> . FLOAT

    SEMICOLON       reduce using rule 43 (operations -> number operand NAME .)
    COMMA           reduce using rule 43 (operations -> number operand NAME .)
    CLOSE_BRACKET   reduce using rule 43 (operations -> number operand NAME .)
    CLOSE_PARENTHESIS reduce using rule 43 (operations -> number operand NAME .)
    CLOSE_BRACE     reduce using rule 43 (operations -> number operand NAME .)
    NAME            shift and go to state 219
    OPEN_PARENTHESIS shift and go to state 63
    INTEGER         shift and go to state 64
    FLOAT           shift and go to state 65

    number                         shift and go to state 218
    operations                     shift and go to state 220
    onlyNumber                     shift and go to state 62

state 177

    (45) operations -> NAME operand NAME . operations
    (48) operations -> NAME operand NAME .
    (38) operations -> . number operand number
    (39) operations -> . NAME
    (40) operations -> . number
    (41) operations -> . number operand NAME operations
    (42) operations -> . NAME operand number operations
    (43) operations -> . number operand NAME
    (44) operations -> . NAME operand number
    (45) operations -> . NAME operand NAME operations
    (46) operations -> . number operand number operand operations
    (47) operations -> . NAME SUMA SUMA
    (48) operations -> . NAME operand NAME
    (49) operations -> . NAME RESTA RESTA
    (17) number -> . onlyNumber
    (18) number -> . OPEN_PARENTHESIS RESTA INTEGER CLOSE_PARENTHESIS
    (19) number -> . OPEN_PARENTHESIS RESTA FLOAT CLOSE_PARENTHESIS
    (20) onlyNumber -> . INTEGER
    (21) onlyNumber -> . FLOAT

    SEMICOLON       reduce using rule 48 (operations -> NAME operand NAME .)
    COMMA           reduce using rule 48 (operations -> NAME operand NAME .)
    CLOSE_BRACKET   reduce using rule 48 (operations -> NAME operand NAME .)
    CLOSE_PARENTHESIS reduce using rule 48 (operations -> NAME operand NAME .)
    CLOSE_BRACE     reduce using rule 48 (operations -> NAME operand NAME .)
    NAME            shift and go to state 219
    OPEN_PARENTHESIS shift and go to state 63
    INTEGER         shift and go to state 64
    FLOAT           shift and go to state 65

    operations                     shift and go to state 221
    number                         shift and go to state 218
    onlyNumber                     shift and go to state 62

state 178

    (42) operations -> NAME operand number . operations
    (44) operations -> NAME operand number .
    (38) operations -> . number operand number
    (39) operations -> . NAME
    (40) operations -> . number
    (41) operations -> . number operand NAME operations
    (42) operations -> . NAME operand number operations
    (43) operations -> . number operand NAME
    (44) operations -> . NAME operand number
    (45) operations -> . NAME operand NAME operations
    (46) operations -> . number operand number operand operations
    (47) operations -> . NAME SUMA SUMA
    (48) operations -> . NAME operand NAME
    (49) operations -> . NAME RESTA RESTA
    (17) number -> . onlyNumber
    (18) number -> . OPEN_PARENTHESIS RESTA INTEGER CLOSE_PARENTHESIS
    (19) number -> . OPEN_PARENTHESIS RESTA FLOAT CLOSE_PARENTHESIS
    (20) onlyNumber -> . INTEGER
    (21) onlyNumber -> . FLOAT

    SEMICOLON       reduce using rule 44 (operations -> NAME operand number .)
    COMMA           reduce using rule 44 (operations -> NAME operand number .)
    CLOSE_BRACKET   reduce using rule 44 (operations -> NAME operand number .)
    CLOSE_PARENTHESIS reduce using rule 44 (operations -> NAME operand number .)
    CLOSE_BRACE     reduce using rule 44 (operations -> NAME operand number .)
    NAME            shift and go to state 219
    OPEN_PARENTHESIS shift and go to state 63
    INTEGER         shift and go to state 64
    FLOAT           shift and go to state 65

    number                         shift and go to state 218
    operations                     shift and go to state 222
    onlyNumber                     shift and go to state 62

state 179

    (47) operations -> NAME SUMA SUMA .

    SEMICOLON       reduce using rule 47 (operations -> NAME SUMA SUMA .)
    COMMA           reduce using rule 47 (operations -> NAME SUMA SUMA .)
    CLOSE_BRACKET   reduce using rule 47 (operations -> NAME SUMA SUMA .)
    CLOSE_PARENTHESIS reduce using rule 47 (operations -> NAME SUMA SUMA .)
    CLOSE_BRACE     reduce using rule 47 (operations -> NAME SUMA SUMA .)


state 180

    (49) operations -> NAME RESTA RESTA .

    SEMICOLON       reduce using rule 49 (operations -> NAME RESTA RESTA .)
    COMMA           reduce using rule 49 (operations -> NAME RESTA RESTA .)
    CLOSE_BRACKET   reduce using rule 49 (operations -> NAME RESTA RESTA .)
    CLOSE_PARENTHESIS reduce using rule 49 (operations -> NAME RESTA RESTA .)
    CLOSE_BRACE     reduce using rule 49 (operations -> NAME RESTA RESTA .)


state 181

    (18) number -> OPEN_PARENTHESIS RESTA INTEGER . CLOSE_PARENTHESIS

    CLOSE_PARENTHESIS shift and go to state 223


state 182

    (19) number -> OPEN_PARENTHESIS RESTA FLOAT . CLOSE_PARENTHESIS

    CLOSE_PARENTHESIS shift and go to state 224


state 183

    (128) function -> FUNCTION NAME OPEN_PARENTHESIS CLOSE_PARENTHESIS . OPEN_BRACE expression CLOSE_BRACE

    OPEN_BRACE      shift and go to state 225


state 184

    (129) function -> FUNCTION NAME OPEN_PARENTHESIS parameter . CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE

    CLOSE_PARENTHESIS shift and go to state 226


state 185

    (130) parameter -> datatype .
    (131) parameter -> datatype . COMMA parameter

    CLOSE_PARENTHESIS reduce using rule 130 (parameter -> datatype .)
    COMMA           shift and go to state 227


state 186

    (111) claveValor -> clave COLON datatype .
    (112) claveValor -> clave COLON datatype . COMMA claveValor

    CLOSE_BRACE     reduce using rule 111 (claveValor -> clave COLON datatype .)
    COMMA           shift and go to state 228


state 187

    (68) items -> item COMMA items .

    CLOSE_BRACKET   reduce using rule 68 (items -> item COMMA items .)
    CLOSE_PARENTHESIS reduce using rule 68 (items -> item COMMA items .)


state 188

    (80) expBoolean -> expBoolean logicalOperator expBoolean .
    (80) expBoolean -> expBoolean . logicalOperator expBoolean
    (75) logicalOperator -> . AND
    (76) logicalOperator -> . OR

  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
    COMMA           reduce using rule 80 (expBoolean -> expBoolean logicalOperator expBoolean .)
    CLOSE_BRACKET   reduce using rule 80 (expBoolean -> expBoolean logicalOperator expBoolean .)
    CLOSE_PARENTHESIS reduce using rule 80 (expBoolean -> expBoolean logicalOperator expBoolean .)
    SEMICOLON       reduce using rule 80 (expBoolean -> expBoolean logicalOperator expBoolean .)
    AND             shift and go to state 135
    OR              shift and go to state 136

  ! AND             [ reduce using rule 80 (expBoolean -> expBoolean logicalOperator expBoolean .) ]
  ! OR              [ reduce using rule 80 (expBoolean -> expBoolean logicalOperator expBoolean .) ]

    logicalOperator                shift and go to state 134

state 189

    (81) controlArg -> element clause element .

    AND             reduce using rule 81 (controlArg -> element clause element .)
    OR              reduce using rule 81 (controlArg -> element clause element .)
    COMMA           reduce using rule 81 (controlArg -> element clause element .)
    CLOSE_BRACKET   reduce using rule 81 (controlArg -> element clause element .)
    CLOSE_PARENTHESIS reduce using rule 81 (controlArg -> element clause element .)
    SEMICOLON       reduce using rule 81 (controlArg -> element clause element .)


state 190

    (102) array -> NEW ARRAY OPEN_PARENTHESIS items . CLOSE_PARENTHESIS

    CLOSE_PARENTHESIS shift and go to state 229


state 191

    (122) set -> NEW SET OPEN_PARENTHESIS CLOSE_PARENTHESIS .

    SEMICOLON       reduce using rule 122 (set -> NEW SET OPEN_PARENTHESIS CLOSE_PARENTHESIS .)
    COMMA           reduce using rule 122 (set -> NEW SET OPEN_PARENTHESIS CLOSE_PARENTHESIS .)
    CLOSE_BRACKET   reduce using rule 122 (set -> NEW SET OPEN_PARENTHESIS CLOSE_PARENTHESIS .)
    CLOSE_PARENTHESIS reduce using rule 122 (set -> NEW SET OPEN_PARENTHESIS CLOSE_PARENTHESIS .)
    CLOSE_BRACE     reduce using rule 122 (set -> NEW SET OPEN_PARENTHESIS CLOSE_PARENTHESIS .)


state 192

    (123) set -> NEW SET OPEN_PARENTHESIS OPEN_BRACKET . items CLOSE_BRACKET CLOSE_PARENTHESIS
    (67) items -> . item
    (68) items -> . item COMMA items
    (69) item -> . expBoolean
    (70) item -> . datatype
    (77) expBoolean -> . controlArg
    (78) expBoolean -> . bool
    (79) expBoolean -> . NOT expBoolean
    (80) expBoolean -> . expBoolean logicalOperator expBoolean
    (32) datatype -> . number
    (33) datatype -> . NAME
    (34) datatype -> . STRING
    (35) datatype -> . CHAR
    (36) datatype -> . operations
    (37) datatype -> . dataStruct
    (81) controlArg -> . element clause element
    (22) bool -> . TRUE
    (23) bool -> . FALSE
    (17) number -> . onlyNumber
    (18) number -> . OPEN_PARENTHESIS RESTA INTEGER CLOSE_PARENTHESIS
    (19) number -> . OPEN_PARENTHESIS RESTA FLOAT CLOSE_PARENTHESIS
    (38) operations -> . number operand number
    (39) operations -> . NAME
    (40) operations -> . number
    (41) operations -> . number operand NAME operations
    (42) operations -> . NAME operand number operations
    (43) operations -> . number operand NAME
    (44) operations -> . NAME operand number
    (45) operations -> . NAME operand NAME operations
    (46) operations -> . number operand number operand operations
    (47) operations -> . NAME SUMA SUMA
    (48) operations -> . NAME operand NAME
    (49) operations -> . NAME RESTA RESTA
    (64) dataStruct -> . array
    (65) dataStruct -> . set
    (66) dataStruct -> . map
    (71) element -> . STRING
    (72) element -> . number
    (73) element -> . NAME
    (20) onlyNumber -> . INTEGER
    (21) onlyNumber -> . FLOAT
    (101) array -> . OPEN_BRACKET items CLOSE_BRACKET
    (102) array -> . NEW ARRAY OPEN_PARENTHESIS items CLOSE_PARENTHESIS
    (122) set -> . NEW SET OPEN_PARENTHESIS CLOSE_PARENTHESIS
    (123) set -> . NEW SET OPEN_PARENTHESIS OPEN_BRACKET items CLOSE_BRACKET CLOSE_PARENTHESIS
    (124) set -> . NEW SET OPEN_PARENTHESIS element CLOSE_PARENTHESIS
    (106) map -> . iniciarMap
    (107) map -> . escribirMap
    (108) iniciarMap -> . NEW MAP OPEN_PARENTHESIS CLOSE_PARENTHESIS
    (109) iniciarMap -> . NEW MAP OPEN_PARENTHESIS tupla CLOSE_PARENTHESIS
    (110) escribirMap -> . OPEN_BRACE claveValor CLOSE_BRACE

    NOT             shift and go to state 81
    NAME            shift and go to state 83
    STRING          shift and go to state 84
    CHAR            shift and go to state 59
    TRUE            shift and go to state 73
    FALSE           shift and go to state 74
    OPEN_PARENTHESIS shift and go to state 63
    INTEGER         shift and go to state 64
    FLOAT           shift and go to state 65
    OPEN_BRACKET    shift and go to state 33
    NEW             shift and go to state 34
    OPEN_BRACE      shift and go to state 29

    items                          shift and go to state 230
    item                           shift and go to state 76
    expBoolean                     shift and go to state 77
    datatype                       shift and go to state 78
    controlArg                     shift and go to state 79
    bool                           shift and go to state 80
    number                         shift and go to state 82
    operations                     shift and go to state 60
    dataStruct                     shift and go to state 61
    element                        shift and go to state 85
    onlyNumber                     shift and go to state 62
    array                          shift and go to state 19
    set                            shift and go to state 20
    map                            shift and go to state 21
    iniciarMap                     shift and go to state 35
    escribirMap                    shift and go to state 36

state 193

    (124) set -> NEW SET OPEN_PARENTHESIS element . CLOSE_PARENTHESIS

    CLOSE_PARENTHESIS shift and go to state 231


state 194

    (108) iniciarMap -> NEW MAP OPEN_PARENTHESIS CLOSE_PARENTHESIS .

    SEMICOLON       reduce using rule 108 (iniciarMap -> NEW MAP OPEN_PARENTHESIS CLOSE_PARENTHESIS .)
    COMMA           reduce using rule 108 (iniciarMap -> NEW MAP OPEN_PARENTHESIS CLOSE_PARENTHESIS .)
    CLOSE_BRACKET   reduce using rule 108 (iniciarMap -> NEW MAP OPEN_PARENTHESIS CLOSE_PARENTHESIS .)
    CLOSE_PARENTHESIS reduce using rule 108 (iniciarMap -> NEW MAP OPEN_PARENTHESIS CLOSE_PARENTHESIS .)
    CLOSE_BRACE     reduce using rule 108 (iniciarMap -> NEW MAP OPEN_PARENTHESIS CLOSE_PARENTHESIS .)


state 195

    (109) iniciarMap -> NEW MAP OPEN_PARENTHESIS tupla . CLOSE_PARENTHESIS

    CLOSE_PARENTHESIS shift and go to state 232


state 196

    (117) tupla -> OPEN_BRACKET . item COMMA item CLOSE_BRACKET
    (118) tupla -> OPEN_BRACKET . item COMMA item CLOSE_BRACKET COMMA tupla
    (69) item -> . expBoolean
    (70) item -> . datatype
    (77) expBoolean -> . controlArg
    (78) expBoolean -> . bool
    (79) expBoolean -> . NOT expBoolean
    (80) expBoolean -> . expBoolean logicalOperator expBoolean
    (32) datatype -> . number
    (33) datatype -> . NAME
    (34) datatype -> . STRING
    (35) datatype -> . CHAR
    (36) datatype -> . operations
    (37) datatype -> . dataStruct
    (81) controlArg -> . element clause element
    (22) bool -> . TRUE
    (23) bool -> . FALSE
    (17) number -> . onlyNumber
    (18) number -> . OPEN_PARENTHESIS RESTA INTEGER CLOSE_PARENTHESIS
    (19) number -> . OPEN_PARENTHESIS RESTA FLOAT CLOSE_PARENTHESIS
    (38) operations -> . number operand number
    (39) operations -> . NAME
    (40) operations -> . number
    (41) operations -> . number operand NAME operations
    (42) operations -> . NAME operand number operations
    (43) operations -> . number operand NAME
    (44) operations -> . NAME operand number
    (45) operations -> . NAME operand NAME operations
    (46) operations -> . number operand number operand operations
    (47) operations -> . NAME SUMA SUMA
    (48) operations -> . NAME operand NAME
    (49) operations -> . NAME RESTA RESTA
    (64) dataStruct -> . array
    (65) dataStruct -> . set
    (66) dataStruct -> . map
    (71) element -> . STRING
    (72) element -> . number
    (73) element -> . NAME
    (20) onlyNumber -> . INTEGER
    (21) onlyNumber -> . FLOAT
    (101) array -> . OPEN_BRACKET items CLOSE_BRACKET
    (102) array -> . NEW ARRAY OPEN_PARENTHESIS items CLOSE_PARENTHESIS
    (122) set -> . NEW SET OPEN_PARENTHESIS CLOSE_PARENTHESIS
    (123) set -> . NEW SET OPEN_PARENTHESIS OPEN_BRACKET items CLOSE_BRACKET CLOSE_PARENTHESIS
    (124) set -> . NEW SET OPEN_PARENTHESIS element CLOSE_PARENTHESIS
    (106) map -> . iniciarMap
    (107) map -> . escribirMap
    (108) iniciarMap -> . NEW MAP OPEN_PARENTHESIS CLOSE_PARENTHESIS
    (109) iniciarMap -> . NEW MAP OPEN_PARENTHESIS tupla CLOSE_PARENTHESIS
    (110) escribirMap -> . OPEN_BRACE claveValor CLOSE_BRACE

    NOT             shift and go to state 81
    NAME            shift and go to state 83
    STRING          shift and go to state 84
    CHAR            shift and go to state 59
    TRUE            shift and go to state 73
    FALSE           shift and go to state 74
    OPEN_PARENTHESIS shift and go to state 63
    INTEGER         shift and go to state 64
    FLOAT           shift and go to state 65
    OPEN_BRACKET    shift and go to state 33
    NEW             shift and go to state 34
    OPEN_BRACE      shift and go to state 29

    item                           shift and go to state 233
    expBoolean                     shift and go to state 77
    datatype                       shift and go to state 78
    controlArg                     shift and go to state 79
    bool                           shift and go to state 80
    number                         shift and go to state 82
    operations                     shift and go to state 60
    dataStruct                     shift and go to state 61
    element                        shift and go to state 85
    onlyNumber                     shift and go to state 62
    array                          shift and go to state 19
    set                            shift and go to state 20
    map                            shift and go to state 21
    iniciarMap                     shift and go to state 35
    escribirMap                    shift and go to state 36

state 197

    (88) while -> WHILE OPEN_PARENTHESIS expBoolean CLOSE_PARENTHESIS . OPEN_BRACE expression CLOSE_BRACE

    OPEN_BRACE      shift and go to state 234


state 198

    (89) while -> WHILE OPEN_PARENTHESIS bool CLOSE_PARENTHESIS . OPEN_BRACE expression CLOSE_BRACE

    OPEN_BRACE      shift and go to state 235


state 199

    (98) for -> FOR OPEN_PARENTHESIS inicialization SEMICOLON . expBoolean SEMICOLON operations CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE
    (77) expBoolean -> . controlArg
    (78) expBoolean -> . bool
    (79) expBoolean -> . NOT expBoolean
    (80) expBoolean -> . expBoolean logicalOperator expBoolean
    (81) controlArg -> . element clause element
    (22) bool -> . TRUE
    (23) bool -> . FALSE
    (71) element -> . STRING
    (72) element -> . number
    (73) element -> . NAME
    (17) number -> . onlyNumber
    (18) number -> . OPEN_PARENTHESIS RESTA INTEGER CLOSE_PARENTHESIS
    (19) number -> . OPEN_PARENTHESIS RESTA FLOAT CLOSE_PARENTHESIS
    (20) onlyNumber -> . INTEGER
    (21) onlyNumber -> . FLOAT

    NOT             shift and go to state 81
    TRUE            shift and go to state 73
    FALSE           shift and go to state 74
    STRING          shift and go to state 116
    NAME            shift and go to state 118
    OPEN_PARENTHESIS shift and go to state 63
    INTEGER         shift and go to state 64
    FLOAT           shift and go to state 65

    expBoolean                     shift and go to state 236
    controlArg                     shift and go to state 79
    bool                           shift and go to state 80
    element                        shift and go to state 85
    number                         shift and go to state 117
    onlyNumber                     shift and go to state 62

state 200

    (99) inicialization -> type NAME . IGUAL number

    IGUAL           shift and go to state 237


state 201

    (100) inicialization -> NAME IGUAL . number
    (17) number -> . onlyNumber
    (18) number -> . OPEN_PARENTHESIS RESTA INTEGER CLOSE_PARENTHESIS
    (19) number -> . OPEN_PARENTHESIS RESTA FLOAT CLOSE_PARENTHESIS
    (20) onlyNumber -> . INTEGER
    (21) onlyNumber -> . FLOAT

    OPEN_PARENTHESIS shift and go to state 63
    INTEGER         shift and go to state 64
    FLOAT           shift and go to state 65

    number                         shift and go to state 238
    onlyNumber                     shift and go to state 62

state 202

    (95) elseIf -> ELSEIF OPEN_PARENTHESIS expBoolean . CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE
    (96) elseIf -> ELSEIF OPEN_PARENTHESIS expBoolean . CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE elseIf
    (80) expBoolean -> expBoolean . logicalOperator expBoolean
    (75) logicalOperator -> . AND
    (76) logicalOperator -> . OR

    CLOSE_PARENTHESIS shift and go to state 239
    AND             shift and go to state 135
    OR              shift and go to state 136

    logicalOperator                shift and go to state 134

state 203

    (97) else -> ELSE OPEN_BRACE expression . CLOSE_BRACE

    CLOSE_BRACE     shift and go to state 240


state 204

    (94) soloIf -> IF OPEN_PARENTHESIS expBoolean CLOSE_PARENTHESIS . OPEN_BRACE expression CLOSE_BRACE

    OPEN_BRACE      shift and go to state 241


state 205

    (24) variable -> type NAME IGUAL datatype SEMICOLON .

    COMMENTS        reduce using rule 24 (variable -> type NAME IGUAL datatype SEMICOLON .)
    LONGCOMMENT     reduce using rule 24 (variable -> type NAME IGUAL datatype SEMICOLON .)
    NAME            reduce using rule 24 (variable -> type NAME IGUAL datatype SEMICOLON .)
    PRINT           reduce using rule 24 (variable -> type NAME IGUAL datatype SEMICOLON .)
    INPUT           reduce using rule 24 (variable -> type NAME IGUAL datatype SEMICOLON .)
    RETURN          reduce using rule 24 (variable -> type NAME IGUAL datatype SEMICOLON .)
    FUNCTION        reduce using rule 24 (variable -> type NAME IGUAL datatype SEMICOLON .)
    CONST           reduce using rule 24 (variable -> type NAME IGUAL datatype SEMICOLON .)
    LET             reduce using rule 24 (variable -> type NAME IGUAL datatype SEMICOLON .)
    VAR             reduce using rule 24 (variable -> type NAME IGUAL datatype SEMICOLON .)
    OPEN_BRACKET    reduce using rule 24 (variable -> type NAME IGUAL datatype SEMICOLON .)
    NEW             reduce using rule 24 (variable -> type NAME IGUAL datatype SEMICOLON .)
    WHILE           reduce using rule 24 (variable -> type NAME IGUAL datatype SEMICOLON .)
    FOR             reduce using rule 24 (variable -> type NAME IGUAL datatype SEMICOLON .)
    OPEN_BRACE      reduce using rule 24 (variable -> type NAME IGUAL datatype SEMICOLON .)
    IF              reduce using rule 24 (variable -> type NAME IGUAL datatype SEMICOLON .)
    $end            reduce using rule 24 (variable -> type NAME IGUAL datatype SEMICOLON .)
    CLOSE_BRACE     reduce using rule 24 (variable -> type NAME IGUAL datatype SEMICOLON .)


state 206

    (125) methodsSet -> NAME POINT ADD OPEN_PARENTHESIS element . CLOSE_PARENTHESIS SEMICOLON

    CLOSE_PARENTHESIS shift and go to state 242


state 207

    (126) methodsSet -> NAME POINT DELETE OPEN_PARENTHESIS element . CLOSE_PARENTHESIS SEMICOLON

    CLOSE_PARENTHESIS shift and go to state 243


state 208

    (127) methodsSet -> NAME POINT CLEAR OPEN_PARENTHESIS CLOSE_PARENTHESIS . SEMICOLON
    (119) mapFunctions -> NAME POINT CLEAR OPEN_PARENTHESIS CLOSE_PARENTHESIS . SEMICOLON

    SEMICOLON       shift and go to state 244


state 209

    (120) mapFunctions -> NAME POINT GET OPEN_PARENTHESIS clave . CLOSE_PARENTHESIS SEMICOLON

    CLOSE_PARENTHESIS shift and go to state 245


state 210

    (121) mapFunctions -> NAME POINT HAS OPEN_PARENTHESIS clave . CLOSE_PARENTHESIS SEMICOLON

    CLOSE_PARENTHESIS shift and go to state 246


state 211

    (103) arrayFn -> NAME POINT POP OPEN_PARENTHESIS CLOSE_PARENTHESIS . SEMICOLON

    SEMICOLON       shift and go to state 247


state 212

    (104) arrayFn -> NAME POINT PUSH OPEN_PARENTHESIS item . CLOSE_PARENTHESIS SEMICOLON

    CLOSE_PARENTHESIS shift and go to state 248


state 213

    (105) arrayFn -> NAME POINT UNSHIFT OPEN_PARENTHESIS item . CLOSE_PARENTHESIS SEMICOLON

    CLOSE_PARENTHESIS shift and go to state 249


state 214

    (133) print -> PRINT OPEN_PARENTHESIS datatype CLOSE_PARENTHESIS SEMICOLON .

    COMMENTS        reduce using rule 133 (print -> PRINT OPEN_PARENTHESIS datatype CLOSE_PARENTHESIS SEMICOLON .)
    LONGCOMMENT     reduce using rule 133 (print -> PRINT OPEN_PARENTHESIS datatype CLOSE_PARENTHESIS SEMICOLON .)
    NAME            reduce using rule 133 (print -> PRINT OPEN_PARENTHESIS datatype CLOSE_PARENTHESIS SEMICOLON .)
    PRINT           reduce using rule 133 (print -> PRINT OPEN_PARENTHESIS datatype CLOSE_PARENTHESIS SEMICOLON .)
    INPUT           reduce using rule 133 (print -> PRINT OPEN_PARENTHESIS datatype CLOSE_PARENTHESIS SEMICOLON .)
    RETURN          reduce using rule 133 (print -> PRINT OPEN_PARENTHESIS datatype CLOSE_PARENTHESIS SEMICOLON .)
    FUNCTION        reduce using rule 133 (print -> PRINT OPEN_PARENTHESIS datatype CLOSE_PARENTHESIS SEMICOLON .)
    CONST           reduce using rule 133 (print -> PRINT OPEN_PARENTHESIS datatype CLOSE_PARENTHESIS SEMICOLON .)
    LET             reduce using rule 133 (print -> PRINT OPEN_PARENTHESIS datatype CLOSE_PARENTHESIS SEMICOLON .)
    VAR             reduce using rule 133 (print -> PRINT OPEN_PARENTHESIS datatype CLOSE_PARENTHESIS SEMICOLON .)
    OPEN_BRACKET    reduce using rule 133 (print -> PRINT OPEN_PARENTHESIS datatype CLOSE_PARENTHESIS SEMICOLON .)
    NEW             reduce using rule 133 (print -> PRINT OPEN_PARENTHESIS datatype CLOSE_PARENTHESIS SEMICOLON .)
    WHILE           reduce using rule 133 (print -> PRINT OPEN_PARENTHESIS datatype CLOSE_PARENTHESIS SEMICOLON .)
    FOR             reduce using rule 133 (print -> PRINT OPEN_PARENTHESIS datatype CLOSE_PARENTHESIS SEMICOLON .)
    OPEN_BRACE      reduce using rule 133 (print -> PRINT OPEN_PARENTHESIS datatype CLOSE_PARENTHESIS SEMICOLON .)
    IF              reduce using rule 133 (print -> PRINT OPEN_PARENTHESIS datatype CLOSE_PARENTHESIS SEMICOLON .)
    $end            reduce using rule 133 (print -> PRINT OPEN_PARENTHESIS datatype CLOSE_PARENTHESIS SEMICOLON .)
    CLOSE_BRACE     reduce using rule 133 (print -> PRINT OPEN_PARENTHESIS datatype CLOSE_PARENTHESIS SEMICOLON .)


state 215

    (135) input -> INPUT OPEN_PARENTHESIS element COMMA element . CLOSE_PARENTHESIS SEMICOLON

    CLOSE_PARENTHESIS shift and go to state 250


state 216

    (136) input -> INPUT OPEN_PARENTHESIS element CLOSE_PARENTHESIS SEMICOLON .

    COMMENTS        reduce using rule 136 (input -> INPUT OPEN_PARENTHESIS element CLOSE_PARENTHESIS SEMICOLON .)
    LONGCOMMENT     reduce using rule 136 (input -> INPUT OPEN_PARENTHESIS element CLOSE_PARENTHESIS SEMICOLON .)
    NAME            reduce using rule 136 (input -> INPUT OPEN_PARENTHESIS element CLOSE_PARENTHESIS SEMICOLON .)
    PRINT           reduce using rule 136 (input -> INPUT OPEN_PARENTHESIS element CLOSE_PARENTHESIS SEMICOLON .)
    INPUT           reduce using rule 136 (input -> INPUT OPEN_PARENTHESIS element CLOSE_PARENTHESIS SEMICOLON .)
    RETURN          reduce using rule 136 (input -> INPUT OPEN_PARENTHESIS element CLOSE_PARENTHESIS SEMICOLON .)
    FUNCTION        reduce using rule 136 (input -> INPUT OPEN_PARENTHESIS element CLOSE_PARENTHESIS SEMICOLON .)
    CONST           reduce using rule 136 (input -> INPUT OPEN_PARENTHESIS element CLOSE_PARENTHESIS SEMICOLON .)
    LET             reduce using rule 136 (input -> INPUT OPEN_PARENTHESIS element CLOSE_PARENTHESIS SEMICOLON .)
    VAR             reduce using rule 136 (input -> INPUT OPEN_PARENTHESIS element CLOSE_PARENTHESIS SEMICOLON .)
    OPEN_BRACKET    reduce using rule 136 (input -> INPUT OPEN_PARENTHESIS element CLOSE_PARENTHESIS SEMICOLON .)
    NEW             reduce using rule 136 (input -> INPUT OPEN_PARENTHESIS element CLOSE_PARENTHESIS SEMICOLON .)
    WHILE           reduce using rule 136 (input -> INPUT OPEN_PARENTHESIS element CLOSE_PARENTHESIS SEMICOLON .)
    FOR             reduce using rule 136 (input -> INPUT OPEN_PARENTHESIS element CLOSE_PARENTHESIS SEMICOLON .)
    OPEN_BRACE      reduce using rule 136 (input -> INPUT OPEN_PARENTHESIS element CLOSE_PARENTHESIS SEMICOLON .)
    IF              reduce using rule 136 (input -> INPUT OPEN_PARENTHESIS element CLOSE_PARENTHESIS SEMICOLON .)
    $end            reduce using rule 136 (input -> INPUT OPEN_PARENTHESIS element CLOSE_PARENTHESIS SEMICOLON .)
    CLOSE_BRACE     reduce using rule 136 (input -> INPUT OPEN_PARENTHESIS element CLOSE_PARENTHESIS SEMICOLON .)


state 217

    (46) operations -> number operand number operand . operations
    (38) operations -> . number operand number
    (39) operations -> . NAME
    (40) operations -> . number
    (41) operations -> . number operand NAME operations
    (42) operations -> . NAME operand number operations
    (43) operations -> . number operand NAME
    (44) operations -> . NAME operand number
    (45) operations -> . NAME operand NAME operations
    (46) operations -> . number operand number operand operations
    (47) operations -> . NAME SUMA SUMA
    (48) operations -> . NAME operand NAME
    (49) operations -> . NAME RESTA RESTA
    (17) number -> . onlyNumber
    (18) number -> . OPEN_PARENTHESIS RESTA INTEGER CLOSE_PARENTHESIS
    (19) number -> . OPEN_PARENTHESIS RESTA FLOAT CLOSE_PARENTHESIS
    (20) onlyNumber -> . INTEGER
    (21) onlyNumber -> . FLOAT

    NAME            shift and go to state 219
    OPEN_PARENTHESIS shift and go to state 63
    INTEGER         shift and go to state 64
    FLOAT           shift and go to state 65

    number                         shift and go to state 218
    operations                     shift and go to state 251
    onlyNumber                     shift and go to state 62

state 218

    (38) operations -> number . operand number
    (40) operations -> number .
    (41) operations -> number . operand NAME operations
    (43) operations -> number . operand NAME
    (46) operations -> number . operand number operand operations
    (50) operand -> . SUMA
    (51) operand -> . RESTA
    (52) operand -> . MULTIPLICACION
    (53) operand -> . DIVISION

    SEMICOLON       reduce using rule 40 (operations -> number .)
    COMMA           reduce using rule 40 (operations -> number .)
    CLOSE_BRACKET   reduce using rule 40 (operations -> number .)
    CLOSE_PARENTHESIS reduce using rule 40 (operations -> number .)
    CLOSE_BRACE     reduce using rule 40 (operations -> number .)
    SUMA            shift and go to state 121
    RESTA           shift and go to state 122
    MULTIPLICACION  shift and go to state 123
    DIVISION        shift and go to state 124

    operand                        shift and go to state 120

state 219

    (39) operations -> NAME .
    (42) operations -> NAME . operand number operations
    (44) operations -> NAME . operand number
    (45) operations -> NAME . operand NAME operations
    (47) operations -> NAME . SUMA SUMA
    (48) operations -> NAME . operand NAME
    (49) operations -> NAME . RESTA RESTA
    (50) operand -> . SUMA
    (51) operand -> . RESTA
    (52) operand -> . MULTIPLICACION
    (53) operand -> . DIVISION

    SEMICOLON       reduce using rule 39 (operations -> NAME .)
    COMMA           reduce using rule 39 (operations -> NAME .)
    CLOSE_BRACKET   reduce using rule 39 (operations -> NAME .)
    CLOSE_PARENTHESIS reduce using rule 39 (operations -> NAME .)
    CLOSE_BRACE     reduce using rule 39 (operations -> NAME .)
    SUMA            shift and go to state 126
    RESTA           shift and go to state 127
    MULTIPLICACION  shift and go to state 123
    DIVISION        shift and go to state 124

    operand                        shift and go to state 125

state 220

    (41) operations -> number operand NAME operations .

    SEMICOLON       reduce using rule 41 (operations -> number operand NAME operations .)
    COMMA           reduce using rule 41 (operations -> number operand NAME operations .)
    CLOSE_BRACKET   reduce using rule 41 (operations -> number operand NAME operations .)
    CLOSE_PARENTHESIS reduce using rule 41 (operations -> number operand NAME operations .)
    CLOSE_BRACE     reduce using rule 41 (operations -> number operand NAME operations .)


state 221

    (45) operations -> NAME operand NAME operations .

    SEMICOLON       reduce using rule 45 (operations -> NAME operand NAME operations .)
    COMMA           reduce using rule 45 (operations -> NAME operand NAME operations .)
    CLOSE_BRACKET   reduce using rule 45 (operations -> NAME operand NAME operations .)
    CLOSE_PARENTHESIS reduce using rule 45 (operations -> NAME operand NAME operations .)
    CLOSE_BRACE     reduce using rule 45 (operations -> NAME operand NAME operations .)


state 222

    (42) operations -> NAME operand number operations .

    SEMICOLON       reduce using rule 42 (operations -> NAME operand number operations .)
    COMMA           reduce using rule 42 (operations -> NAME operand number operations .)
    CLOSE_BRACKET   reduce using rule 42 (operations -> NAME operand number operations .)
    CLOSE_PARENTHESIS reduce using rule 42 (operations -> NAME operand number operations .)
    CLOSE_BRACE     reduce using rule 42 (operations -> NAME operand number operations .)


state 223

    (18) number -> OPEN_PARENTHESIS RESTA INTEGER CLOSE_PARENTHESIS .

    SUMA            reduce using rule 18 (number -> OPEN_PARENTHESIS RESTA INTEGER CLOSE_PARENTHESIS .)
    RESTA           reduce using rule 18 (number -> OPEN_PARENTHESIS RESTA INTEGER CLOSE_PARENTHESIS .)
    MULTIPLICACION  reduce using rule 18 (number -> OPEN_PARENTHESIS RESTA INTEGER CLOSE_PARENTHESIS .)
    DIVISION        reduce using rule 18 (number -> OPEN_PARENTHESIS RESTA INTEGER CLOSE_PARENTHESIS .)
    SEMICOLON       reduce using rule 18 (number -> OPEN_PARENTHESIS RESTA INTEGER CLOSE_PARENTHESIS .)
    COMMA           reduce using rule 18 (number -> OPEN_PARENTHESIS RESTA INTEGER CLOSE_PARENTHESIS .)
    CLOSE_BRACKET   reduce using rule 18 (number -> OPEN_PARENTHESIS RESTA INTEGER CLOSE_PARENTHESIS .)
    IGUALIGUAL      reduce using rule 18 (number -> OPEN_PARENTHESIS RESTA INTEGER CLOSE_PARENTHESIS .)
    DIFERENTE       reduce using rule 18 (number -> OPEN_PARENTHESIS RESTA INTEGER CLOSE_PARENTHESIS .)
    MAYORQUE        reduce using rule 18 (number -> OPEN_PARENTHESIS RESTA INTEGER CLOSE_PARENTHESIS .)
    MAYORIGUALQUE   reduce using rule 18 (number -> OPEN_PARENTHESIS RESTA INTEGER CLOSE_PARENTHESIS .)
    MENORQUE        reduce using rule 18 (number -> OPEN_PARENTHESIS RESTA INTEGER CLOSE_PARENTHESIS .)
    MENORIGUALQUE   reduce using rule 18 (number -> OPEN_PARENTHESIS RESTA INTEGER CLOSE_PARENTHESIS .)
    CLOSE_PARENTHESIS reduce using rule 18 (number -> OPEN_PARENTHESIS RESTA INTEGER CLOSE_PARENTHESIS .)
    CLOSE_BRACE     reduce using rule 18 (number -> OPEN_PARENTHESIS RESTA INTEGER CLOSE_PARENTHESIS .)
    NAME            reduce using rule 18 (number -> OPEN_PARENTHESIS RESTA INTEGER CLOSE_PARENTHESIS .)
    OPEN_PARENTHESIS reduce using rule 18 (number -> OPEN_PARENTHESIS RESTA INTEGER CLOSE_PARENTHESIS .)
    INTEGER         reduce using rule 18 (number -> OPEN_PARENTHESIS RESTA INTEGER CLOSE_PARENTHESIS .)
    FLOAT           reduce using rule 18 (number -> OPEN_PARENTHESIS RESTA INTEGER CLOSE_PARENTHESIS .)
    AND             reduce using rule 18 (number -> OPEN_PARENTHESIS RESTA INTEGER CLOSE_PARENTHESIS .)
    OR              reduce using rule 18 (number -> OPEN_PARENTHESIS RESTA INTEGER CLOSE_PARENTHESIS .)


state 224

    (19) number -> OPEN_PARENTHESIS RESTA FLOAT CLOSE_PARENTHESIS .

    SUMA            reduce using rule 19 (number -> OPEN_PARENTHESIS RESTA FLOAT CLOSE_PARENTHESIS .)
    RESTA           reduce using rule 19 (number -> OPEN_PARENTHESIS RESTA FLOAT CLOSE_PARENTHESIS .)
    MULTIPLICACION  reduce using rule 19 (number -> OPEN_PARENTHESIS RESTA FLOAT CLOSE_PARENTHESIS .)
    DIVISION        reduce using rule 19 (number -> OPEN_PARENTHESIS RESTA FLOAT CLOSE_PARENTHESIS .)
    SEMICOLON       reduce using rule 19 (number -> OPEN_PARENTHESIS RESTA FLOAT CLOSE_PARENTHESIS .)
    COMMA           reduce using rule 19 (number -> OPEN_PARENTHESIS RESTA FLOAT CLOSE_PARENTHESIS .)
    CLOSE_BRACKET   reduce using rule 19 (number -> OPEN_PARENTHESIS RESTA FLOAT CLOSE_PARENTHESIS .)
    IGUALIGUAL      reduce using rule 19 (number -> OPEN_PARENTHESIS RESTA FLOAT CLOSE_PARENTHESIS .)
    DIFERENTE       reduce using rule 19 (number -> OPEN_PARENTHESIS RESTA FLOAT CLOSE_PARENTHESIS .)
    MAYORQUE        reduce using rule 19 (number -> OPEN_PARENTHESIS RESTA FLOAT CLOSE_PARENTHESIS .)
    MAYORIGUALQUE   reduce using rule 19 (number -> OPEN_PARENTHESIS RESTA FLOAT CLOSE_PARENTHESIS .)
    MENORQUE        reduce using rule 19 (number -> OPEN_PARENTHESIS RESTA FLOAT CLOSE_PARENTHESIS .)
    MENORIGUALQUE   reduce using rule 19 (number -> OPEN_PARENTHESIS RESTA FLOAT CLOSE_PARENTHESIS .)
    CLOSE_PARENTHESIS reduce using rule 19 (number -> OPEN_PARENTHESIS RESTA FLOAT CLOSE_PARENTHESIS .)
    CLOSE_BRACE     reduce using rule 19 (number -> OPEN_PARENTHESIS RESTA FLOAT CLOSE_PARENTHESIS .)
    NAME            reduce using rule 19 (number -> OPEN_PARENTHESIS RESTA FLOAT CLOSE_PARENTHESIS .)
    OPEN_PARENTHESIS reduce using rule 19 (number -> OPEN_PARENTHESIS RESTA FLOAT CLOSE_PARENTHESIS .)
    INTEGER         reduce using rule 19 (number -> OPEN_PARENTHESIS RESTA FLOAT CLOSE_PARENTHESIS .)
    FLOAT           reduce using rule 19 (number -> OPEN_PARENTHESIS RESTA FLOAT CLOSE_PARENTHESIS .)
    AND             reduce using rule 19 (number -> OPEN_PARENTHESIS RESTA FLOAT CLOSE_PARENTHESIS .)
    OR              reduce using rule 19 (number -> OPEN_PARENTHESIS RESTA FLOAT CLOSE_PARENTHESIS .)


state 225

    (128) function -> FUNCTION NAME OPEN_PARENTHESIS CLOSE_PARENTHESIS OPEN_BRACE . expression CLOSE_BRACE
    (1) expression -> . semiExpression
    (2) expression -> . semiExpression expression
    (3) semiExpression -> . variable
    (4) semiExpression -> . dataStruct SEMICOLON
    (5) semiExpression -> . controlStruct
    (6) semiExpression -> . methodsSet
    (7) semiExpression -> . mapFunctions
    (8) semiExpression -> . arrayFn
    (9) semiExpression -> . declaration
    (10) semiExpression -> . print
    (11) semiExpression -> . input
    (12) semiExpression -> . return
    (13) semiExpression -> . function
    (14) semiExpression -> . COMMENTS
    (15) semiExpression -> . LONGCOMMENT
    (16) semiExpression -> . asigOp
    (24) variable -> . type NAME IGUAL datatype SEMICOLON
    (25) variable -> . NAME IGUAL datatype SEMICOLON
    (26) variable -> . type NAME SEMICOLON
    (27) variable -> . type NAME IGUAL input
    (28) variable -> . NAME IGUAL input
    (64) dataStruct -> . array
    (65) dataStruct -> . set
    (66) dataStruct -> . map
    (61) controlStruct -> . while
    (62) controlStruct -> . for
    (63) controlStruct -> . if
    (125) methodsSet -> . NAME POINT ADD OPEN_PARENTHESIS element CLOSE_PARENTHESIS SEMICOLON
    (126) methodsSet -> . NAME POINT DELETE OPEN_PARENTHESIS element CLOSE_PARENTHESIS SEMICOLON
    (127) methodsSet -> . NAME POINT CLEAR OPEN_PARENTHESIS CLOSE_PARENTHESIS SEMICOLON
    (119) mapFunctions -> . NAME POINT CLEAR OPEN_PARENTHESIS CLOSE_PARENTHESIS SEMICOLON
    (120) mapFunctions -> . NAME POINT GET OPEN_PARENTHESIS clave CLOSE_PARENTHESIS SEMICOLON
    (121) mapFunctions -> . NAME POINT HAS OPEN_PARENTHESIS clave CLOSE_PARENTHESIS SEMICOLON
    (103) arrayFn -> . NAME POINT POP OPEN_PARENTHESIS CLOSE_PARENTHESIS SEMICOLON
    (104) arrayFn -> . NAME POINT PUSH OPEN_PARENTHESIS item CLOSE_PARENTHESIS SEMICOLON
    (105) arrayFn -> . NAME POINT UNSHIFT OPEN_PARENTHESIS item CLOSE_PARENTHESIS SEMICOLON
    (74) declaration -> . NAME IGUAL element SEMICOLON
    (133) print -> . PRINT OPEN_PARENTHESIS datatype CLOSE_PARENTHESIS SEMICOLON
    (134) print -> . PRINT OPEN_PARENTHESIS CLOSE_PARENTHESIS SEMICOLON
    (135) input -> . INPUT OPEN_PARENTHESIS element COMMA element CLOSE_PARENTHESIS SEMICOLON
    (136) input -> . INPUT OPEN_PARENTHESIS element CLOSE_PARENTHESIS SEMICOLON
    (137) input -> . INPUT OPEN_PARENTHESIS CLOSE_PARENTHESIS SEMICOLON
    (132) return -> . RETURN datatype SEMICOLON
    (128) function -> . FUNCTION NAME OPEN_PARENTHESIS CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE
    (129) function -> . FUNCTION NAME OPEN_PARENTHESIS parameter CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE
    (60) asigOp -> . NAME operadorAsig number SEMICOLON
    (29) type -> . CONST
    (30) type -> . LET
    (31) type -> . VAR
    (101) array -> . OPEN_BRACKET items CLOSE_BRACKET
    (102) array -> . NEW ARRAY OPEN_PARENTHESIS items CLOSE_PARENTHESIS
    (122) set -> . NEW SET OPEN_PARENTHESIS CLOSE_PARENTHESIS
    (123) set -> . NEW SET OPEN_PARENTHESIS OPEN_BRACKET items CLOSE_BRACKET CLOSE_PARENTHESIS
    (124) set -> . NEW SET OPEN_PARENTHESIS element CLOSE_PARENTHESIS
    (106) map -> . iniciarMap
    (107) map -> . escribirMap
    (88) while -> . WHILE OPEN_PARENTHESIS expBoolean CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE
    (89) while -> . WHILE OPEN_PARENTHESIS bool CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE
    (98) for -> . FOR OPEN_PARENTHESIS inicialization SEMICOLON expBoolean SEMICOLON operations CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE
    (90) if -> . soloIf
    (91) if -> . soloIf elseIf
    (92) if -> . soloIf elseIf else
    (93) if -> . soloIf else
    (108) iniciarMap -> . NEW MAP OPEN_PARENTHESIS CLOSE_PARENTHESIS
    (109) iniciarMap -> . NEW MAP OPEN_PARENTHESIS tupla CLOSE_PARENTHESIS
    (110) escribirMap -> . OPEN_BRACE claveValor CLOSE_BRACE
    (94) soloIf -> . IF OPEN_PARENTHESIS expBoolean CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE

    COMMENTS        shift and go to state 14
    LONGCOMMENT     shift and go to state 15
    NAME            shift and go to state 18
    PRINT           shift and go to state 25
    INPUT           shift and go to state 26
    RETURN          shift and go to state 27
    FUNCTION        shift and go to state 28
    CONST           shift and go to state 30
    LET             shift and go to state 31
    VAR             shift and go to state 32
    OPEN_BRACKET    shift and go to state 33
    NEW             shift and go to state 34
    WHILE           shift and go to state 37
    FOR             shift and go to state 38
    OPEN_BRACE      shift and go to state 29
    IF              shift and go to state 40

    expression                     shift and go to state 252
    semiExpression                 shift and go to state 2
    variable                       shift and go to state 3
    dataStruct                     shift and go to state 4
    controlStruct                  shift and go to state 5
    methodsSet                     shift and go to state 6
    mapFunctions                   shift and go to state 7
    arrayFn                        shift and go to state 8
    declaration                    shift and go to state 9
    print                          shift and go to state 10
    input                          shift and go to state 11
    return                         shift and go to state 12
    function                       shift and go to state 13
    asigOp                         shift and go to state 16
    type                           shift and go to state 17
    array                          shift and go to state 19
    set                            shift and go to state 20
    map                            shift and go to state 21
    while                          shift and go to state 22
    for                            shift and go to state 23
    if                             shift and go to state 24
    iniciarMap                     shift and go to state 35
    escribirMap                    shift and go to state 36
    soloIf                         shift and go to state 39

state 226

    (129) function -> FUNCTION NAME OPEN_PARENTHESIS parameter CLOSE_PARENTHESIS . OPEN_BRACE expression CLOSE_BRACE

    OPEN_BRACE      shift and go to state 253


state 227

    (131) parameter -> datatype COMMA . parameter
    (130) parameter -> . datatype
    (131) parameter -> . datatype COMMA parameter
    (32) datatype -> . number
    (33) datatype -> . NAME
    (34) datatype -> . STRING
    (35) datatype -> . CHAR
    (36) datatype -> . operations
    (37) datatype -> . dataStruct
    (17) number -> . onlyNumber
    (18) number -> . OPEN_PARENTHESIS RESTA INTEGER CLOSE_PARENTHESIS
    (19) number -> . OPEN_PARENTHESIS RESTA FLOAT CLOSE_PARENTHESIS
    (38) operations -> . number operand number
    (39) operations -> . NAME
    (40) operations -> . number
    (41) operations -> . number operand NAME operations
    (42) operations -> . NAME operand number operations
    (43) operations -> . number operand NAME
    (44) operations -> . NAME operand number
    (45) operations -> . NAME operand NAME operations
    (46) operations -> . number operand number operand operations
    (47) operations -> . NAME SUMA SUMA
    (48) operations -> . NAME operand NAME
    (49) operations -> . NAME RESTA RESTA
    (64) dataStruct -> . array
    (65) dataStruct -> . set
    (66) dataStruct -> . map
    (20) onlyNumber -> . INTEGER
    (21) onlyNumber -> . FLOAT
    (101) array -> . OPEN_BRACKET items CLOSE_BRACKET
    (102) array -> . NEW ARRAY OPEN_PARENTHESIS items CLOSE_PARENTHESIS
    (122) set -> . NEW SET OPEN_PARENTHESIS CLOSE_PARENTHESIS
    (123) set -> . NEW SET OPEN_PARENTHESIS OPEN_BRACKET items CLOSE_BRACKET CLOSE_PARENTHESIS
    (124) set -> . NEW SET OPEN_PARENTHESIS element CLOSE_PARENTHESIS
    (106) map -> . iniciarMap
    (107) map -> . escribirMap
    (108) iniciarMap -> . NEW MAP OPEN_PARENTHESIS CLOSE_PARENTHESIS
    (109) iniciarMap -> . NEW MAP OPEN_PARENTHESIS tupla CLOSE_PARENTHESIS
    (110) escribirMap -> . OPEN_BRACE claveValor CLOSE_BRACE

    NAME            shift and go to state 57
    STRING          shift and go to state 58
    CHAR            shift and go to state 59
    OPEN_PARENTHESIS shift and go to state 63
    INTEGER         shift and go to state 64
    FLOAT           shift and go to state 65
    OPEN_BRACKET    shift and go to state 33
    NEW             shift and go to state 34
    OPEN_BRACE      shift and go to state 29

    datatype                       shift and go to state 185
    parameter                      shift and go to state 254
    number                         shift and go to state 56
    operations                     shift and go to state 60
    dataStruct                     shift and go to state 61
    onlyNumber                     shift and go to state 62
    array                          shift and go to state 19
    set                            shift and go to state 20
    map                            shift and go to state 21
    iniciarMap                     shift and go to state 35
    escribirMap                    shift and go to state 36

state 228

    (112) claveValor -> clave COLON datatype COMMA . claveValor
    (111) claveValor -> . clave COLON datatype
    (112) claveValor -> . clave COLON datatype COMMA claveValor
    (113) clave -> . onlyNumber
    (114) clave -> . STRING
    (115) clave -> . CHAR
    (116) clave -> . bool
    (20) onlyNumber -> . INTEGER
    (21) onlyNumber -> . FLOAT
    (22) bool -> . TRUE
    (23) bool -> . FALSE

    STRING          shift and go to state 70
    CHAR            shift and go to state 71
    INTEGER         shift and go to state 64
    FLOAT           shift and go to state 65
    TRUE            shift and go to state 73
    FALSE           shift and go to state 74

    clave                          shift and go to state 68
    claveValor                     shift and go to state 255
    onlyNumber                     shift and go to state 69
    bool                           shift and go to state 72

state 229

    (102) array -> NEW ARRAY OPEN_PARENTHESIS items CLOSE_PARENTHESIS .

    SEMICOLON       reduce using rule 102 (array -> NEW ARRAY OPEN_PARENTHESIS items CLOSE_PARENTHESIS .)
    COMMA           reduce using rule 102 (array -> NEW ARRAY OPEN_PARENTHESIS items CLOSE_PARENTHESIS .)
    CLOSE_BRACKET   reduce using rule 102 (array -> NEW ARRAY OPEN_PARENTHESIS items CLOSE_PARENTHESIS .)
    CLOSE_PARENTHESIS reduce using rule 102 (array -> NEW ARRAY OPEN_PARENTHESIS items CLOSE_PARENTHESIS .)
    CLOSE_BRACE     reduce using rule 102 (array -> NEW ARRAY OPEN_PARENTHESIS items CLOSE_PARENTHESIS .)


state 230

    (123) set -> NEW SET OPEN_PARENTHESIS OPEN_BRACKET items . CLOSE_BRACKET CLOSE_PARENTHESIS

    CLOSE_BRACKET   shift and go to state 256


state 231

    (124) set -> NEW SET OPEN_PARENTHESIS element CLOSE_PARENTHESIS .

    SEMICOLON       reduce using rule 124 (set -> NEW SET OPEN_PARENTHESIS element CLOSE_PARENTHESIS .)
    COMMA           reduce using rule 124 (set -> NEW SET OPEN_PARENTHESIS element CLOSE_PARENTHESIS .)
    CLOSE_BRACKET   reduce using rule 124 (set -> NEW SET OPEN_PARENTHESIS element CLOSE_PARENTHESIS .)
    CLOSE_PARENTHESIS reduce using rule 124 (set -> NEW SET OPEN_PARENTHESIS element CLOSE_PARENTHESIS .)
    CLOSE_BRACE     reduce using rule 124 (set -> NEW SET OPEN_PARENTHESIS element CLOSE_PARENTHESIS .)


state 232

    (109) iniciarMap -> NEW MAP OPEN_PARENTHESIS tupla CLOSE_PARENTHESIS .

    SEMICOLON       reduce using rule 109 (iniciarMap -> NEW MAP OPEN_PARENTHESIS tupla CLOSE_PARENTHESIS .)
    COMMA           reduce using rule 109 (iniciarMap -> NEW MAP OPEN_PARENTHESIS tupla CLOSE_PARENTHESIS .)
    CLOSE_BRACKET   reduce using rule 109 (iniciarMap -> NEW MAP OPEN_PARENTHESIS tupla CLOSE_PARENTHESIS .)
    CLOSE_PARENTHESIS reduce using rule 109 (iniciarMap -> NEW MAP OPEN_PARENTHESIS tupla CLOSE_PARENTHESIS .)
    CLOSE_BRACE     reduce using rule 109 (iniciarMap -> NEW MAP OPEN_PARENTHESIS tupla CLOSE_PARENTHESIS .)


state 233

    (117) tupla -> OPEN_BRACKET item . COMMA item CLOSE_BRACKET
    (118) tupla -> OPEN_BRACKET item . COMMA item CLOSE_BRACKET COMMA tupla

    COMMA           shift and go to state 257


state 234

    (88) while -> WHILE OPEN_PARENTHESIS expBoolean CLOSE_PARENTHESIS OPEN_BRACE . expression CLOSE_BRACE
    (1) expression -> . semiExpression
    (2) expression -> . semiExpression expression
    (3) semiExpression -> . variable
    (4) semiExpression -> . dataStruct SEMICOLON
    (5) semiExpression -> . controlStruct
    (6) semiExpression -> . methodsSet
    (7) semiExpression -> . mapFunctions
    (8) semiExpression -> . arrayFn
    (9) semiExpression -> . declaration
    (10) semiExpression -> . print
    (11) semiExpression -> . input
    (12) semiExpression -> . return
    (13) semiExpression -> . function
    (14) semiExpression -> . COMMENTS
    (15) semiExpression -> . LONGCOMMENT
    (16) semiExpression -> . asigOp
    (24) variable -> . type NAME IGUAL datatype SEMICOLON
    (25) variable -> . NAME IGUAL datatype SEMICOLON
    (26) variable -> . type NAME SEMICOLON
    (27) variable -> . type NAME IGUAL input
    (28) variable -> . NAME IGUAL input
    (64) dataStruct -> . array
    (65) dataStruct -> . set
    (66) dataStruct -> . map
    (61) controlStruct -> . while
    (62) controlStruct -> . for
    (63) controlStruct -> . if
    (125) methodsSet -> . NAME POINT ADD OPEN_PARENTHESIS element CLOSE_PARENTHESIS SEMICOLON
    (126) methodsSet -> . NAME POINT DELETE OPEN_PARENTHESIS element CLOSE_PARENTHESIS SEMICOLON
    (127) methodsSet -> . NAME POINT CLEAR OPEN_PARENTHESIS CLOSE_PARENTHESIS SEMICOLON
    (119) mapFunctions -> . NAME POINT CLEAR OPEN_PARENTHESIS CLOSE_PARENTHESIS SEMICOLON
    (120) mapFunctions -> . NAME POINT GET OPEN_PARENTHESIS clave CLOSE_PARENTHESIS SEMICOLON
    (121) mapFunctions -> . NAME POINT HAS OPEN_PARENTHESIS clave CLOSE_PARENTHESIS SEMICOLON
    (103) arrayFn -> . NAME POINT POP OPEN_PARENTHESIS CLOSE_PARENTHESIS SEMICOLON
    (104) arrayFn -> . NAME POINT PUSH OPEN_PARENTHESIS item CLOSE_PARENTHESIS SEMICOLON
    (105) arrayFn -> . NAME POINT UNSHIFT OPEN_PARENTHESIS item CLOSE_PARENTHESIS SEMICOLON
    (74) declaration -> . NAME IGUAL element SEMICOLON
    (133) print -> . PRINT OPEN_PARENTHESIS datatype CLOSE_PARENTHESIS SEMICOLON
    (134) print -> . PRINT OPEN_PARENTHESIS CLOSE_PARENTHESIS SEMICOLON
    (135) input -> . INPUT OPEN_PARENTHESIS element COMMA element CLOSE_PARENTHESIS SEMICOLON
    (136) input -> . INPUT OPEN_PARENTHESIS element CLOSE_PARENTHESIS SEMICOLON
    (137) input -> . INPUT OPEN_PARENTHESIS CLOSE_PARENTHESIS SEMICOLON
    (132) return -> . RETURN datatype SEMICOLON
    (128) function -> . FUNCTION NAME OPEN_PARENTHESIS CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE
    (129) function -> . FUNCTION NAME OPEN_PARENTHESIS parameter CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE
    (60) asigOp -> . NAME operadorAsig number SEMICOLON
    (29) type -> . CONST
    (30) type -> . LET
    (31) type -> . VAR
    (101) array -> . OPEN_BRACKET items CLOSE_BRACKET
    (102) array -> . NEW ARRAY OPEN_PARENTHESIS items CLOSE_PARENTHESIS
    (122) set -> . NEW SET OPEN_PARENTHESIS CLOSE_PARENTHESIS
    (123) set -> . NEW SET OPEN_PARENTHESIS OPEN_BRACKET items CLOSE_BRACKET CLOSE_PARENTHESIS
    (124) set -> . NEW SET OPEN_PARENTHESIS element CLOSE_PARENTHESIS
    (106) map -> . iniciarMap
    (107) map -> . escribirMap
    (88) while -> . WHILE OPEN_PARENTHESIS expBoolean CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE
    (89) while -> . WHILE OPEN_PARENTHESIS bool CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE
    (98) for -> . FOR OPEN_PARENTHESIS inicialization SEMICOLON expBoolean SEMICOLON operations CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE
    (90) if -> . soloIf
    (91) if -> . soloIf elseIf
    (92) if -> . soloIf elseIf else
    (93) if -> . soloIf else
    (108) iniciarMap -> . NEW MAP OPEN_PARENTHESIS CLOSE_PARENTHESIS
    (109) iniciarMap -> . NEW MAP OPEN_PARENTHESIS tupla CLOSE_PARENTHESIS
    (110) escribirMap -> . OPEN_BRACE claveValor CLOSE_BRACE
    (94) soloIf -> . IF OPEN_PARENTHESIS expBoolean CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE

    COMMENTS        shift and go to state 14
    LONGCOMMENT     shift and go to state 15
    NAME            shift and go to state 18
    PRINT           shift and go to state 25
    INPUT           shift and go to state 26
    RETURN          shift and go to state 27
    FUNCTION        shift and go to state 28
    CONST           shift and go to state 30
    LET             shift and go to state 31
    VAR             shift and go to state 32
    OPEN_BRACKET    shift and go to state 33
    NEW             shift and go to state 34
    WHILE           shift and go to state 37
    FOR             shift and go to state 38
    OPEN_BRACE      shift and go to state 29
    IF              shift and go to state 40

    expression                     shift and go to state 258
    semiExpression                 shift and go to state 2
    variable                       shift and go to state 3
    dataStruct                     shift and go to state 4
    controlStruct                  shift and go to state 5
    methodsSet                     shift and go to state 6
    mapFunctions                   shift and go to state 7
    arrayFn                        shift and go to state 8
    declaration                    shift and go to state 9
    print                          shift and go to state 10
    input                          shift and go to state 11
    return                         shift and go to state 12
    function                       shift and go to state 13
    asigOp                         shift and go to state 16
    type                           shift and go to state 17
    array                          shift and go to state 19
    set                            shift and go to state 20
    map                            shift and go to state 21
    while                          shift and go to state 22
    for                            shift and go to state 23
    if                             shift and go to state 24
    iniciarMap                     shift and go to state 35
    escribirMap                    shift and go to state 36
    soloIf                         shift and go to state 39

state 235

    (89) while -> WHILE OPEN_PARENTHESIS bool CLOSE_PARENTHESIS OPEN_BRACE . expression CLOSE_BRACE
    (1) expression -> . semiExpression
    (2) expression -> . semiExpression expression
    (3) semiExpression -> . variable
    (4) semiExpression -> . dataStruct SEMICOLON
    (5) semiExpression -> . controlStruct
    (6) semiExpression -> . methodsSet
    (7) semiExpression -> . mapFunctions
    (8) semiExpression -> . arrayFn
    (9) semiExpression -> . declaration
    (10) semiExpression -> . print
    (11) semiExpression -> . input
    (12) semiExpression -> . return
    (13) semiExpression -> . function
    (14) semiExpression -> . COMMENTS
    (15) semiExpression -> . LONGCOMMENT
    (16) semiExpression -> . asigOp
    (24) variable -> . type NAME IGUAL datatype SEMICOLON
    (25) variable -> . NAME IGUAL datatype SEMICOLON
    (26) variable -> . type NAME SEMICOLON
    (27) variable -> . type NAME IGUAL input
    (28) variable -> . NAME IGUAL input
    (64) dataStruct -> . array
    (65) dataStruct -> . set
    (66) dataStruct -> . map
    (61) controlStruct -> . while
    (62) controlStruct -> . for
    (63) controlStruct -> . if
    (125) methodsSet -> . NAME POINT ADD OPEN_PARENTHESIS element CLOSE_PARENTHESIS SEMICOLON
    (126) methodsSet -> . NAME POINT DELETE OPEN_PARENTHESIS element CLOSE_PARENTHESIS SEMICOLON
    (127) methodsSet -> . NAME POINT CLEAR OPEN_PARENTHESIS CLOSE_PARENTHESIS SEMICOLON
    (119) mapFunctions -> . NAME POINT CLEAR OPEN_PARENTHESIS CLOSE_PARENTHESIS SEMICOLON
    (120) mapFunctions -> . NAME POINT GET OPEN_PARENTHESIS clave CLOSE_PARENTHESIS SEMICOLON
    (121) mapFunctions -> . NAME POINT HAS OPEN_PARENTHESIS clave CLOSE_PARENTHESIS SEMICOLON
    (103) arrayFn -> . NAME POINT POP OPEN_PARENTHESIS CLOSE_PARENTHESIS SEMICOLON
    (104) arrayFn -> . NAME POINT PUSH OPEN_PARENTHESIS item CLOSE_PARENTHESIS SEMICOLON
    (105) arrayFn -> . NAME POINT UNSHIFT OPEN_PARENTHESIS item CLOSE_PARENTHESIS SEMICOLON
    (74) declaration -> . NAME IGUAL element SEMICOLON
    (133) print -> . PRINT OPEN_PARENTHESIS datatype CLOSE_PARENTHESIS SEMICOLON
    (134) print -> . PRINT OPEN_PARENTHESIS CLOSE_PARENTHESIS SEMICOLON
    (135) input -> . INPUT OPEN_PARENTHESIS element COMMA element CLOSE_PARENTHESIS SEMICOLON
    (136) input -> . INPUT OPEN_PARENTHESIS element CLOSE_PARENTHESIS SEMICOLON
    (137) input -> . INPUT OPEN_PARENTHESIS CLOSE_PARENTHESIS SEMICOLON
    (132) return -> . RETURN datatype SEMICOLON
    (128) function -> . FUNCTION NAME OPEN_PARENTHESIS CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE
    (129) function -> . FUNCTION NAME OPEN_PARENTHESIS parameter CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE
    (60) asigOp -> . NAME operadorAsig number SEMICOLON
    (29) type -> . CONST
    (30) type -> . LET
    (31) type -> . VAR
    (101) array -> . OPEN_BRACKET items CLOSE_BRACKET
    (102) array -> . NEW ARRAY OPEN_PARENTHESIS items CLOSE_PARENTHESIS
    (122) set -> . NEW SET OPEN_PARENTHESIS CLOSE_PARENTHESIS
    (123) set -> . NEW SET OPEN_PARENTHESIS OPEN_BRACKET items CLOSE_BRACKET CLOSE_PARENTHESIS
    (124) set -> . NEW SET OPEN_PARENTHESIS element CLOSE_PARENTHESIS
    (106) map -> . iniciarMap
    (107) map -> . escribirMap
    (88) while -> . WHILE OPEN_PARENTHESIS expBoolean CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE
    (89) while -> . WHILE OPEN_PARENTHESIS bool CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE
    (98) for -> . FOR OPEN_PARENTHESIS inicialization SEMICOLON expBoolean SEMICOLON operations CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE
    (90) if -> . soloIf
    (91) if -> . soloIf elseIf
    (92) if -> . soloIf elseIf else
    (93) if -> . soloIf else
    (108) iniciarMap -> . NEW MAP OPEN_PARENTHESIS CLOSE_PARENTHESIS
    (109) iniciarMap -> . NEW MAP OPEN_PARENTHESIS tupla CLOSE_PARENTHESIS
    (110) escribirMap -> . OPEN_BRACE claveValor CLOSE_BRACE
    (94) soloIf -> . IF OPEN_PARENTHESIS expBoolean CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE

    COMMENTS        shift and go to state 14
    LONGCOMMENT     shift and go to state 15
    NAME            shift and go to state 18
    PRINT           shift and go to state 25
    INPUT           shift and go to state 26
    RETURN          shift and go to state 27
    FUNCTION        shift and go to state 28
    CONST           shift and go to state 30
    LET             shift and go to state 31
    VAR             shift and go to state 32
    OPEN_BRACKET    shift and go to state 33
    NEW             shift and go to state 34
    WHILE           shift and go to state 37
    FOR             shift and go to state 38
    OPEN_BRACE      shift and go to state 29
    IF              shift and go to state 40

    expression                     shift and go to state 259
    semiExpression                 shift and go to state 2
    variable                       shift and go to state 3
    dataStruct                     shift and go to state 4
    controlStruct                  shift and go to state 5
    methodsSet                     shift and go to state 6
    mapFunctions                   shift and go to state 7
    arrayFn                        shift and go to state 8
    declaration                    shift and go to state 9
    print                          shift and go to state 10
    input                          shift and go to state 11
    return                         shift and go to state 12
    function                       shift and go to state 13
    asigOp                         shift and go to state 16
    type                           shift and go to state 17
    array                          shift and go to state 19
    set                            shift and go to state 20
    map                            shift and go to state 21
    while                          shift and go to state 22
    for                            shift and go to state 23
    if                             shift and go to state 24
    iniciarMap                     shift and go to state 35
    escribirMap                    shift and go to state 36
    soloIf                         shift and go to state 39

state 236

    (98) for -> FOR OPEN_PARENTHESIS inicialization SEMICOLON expBoolean . SEMICOLON operations CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE
    (80) expBoolean -> expBoolean . logicalOperator expBoolean
    (75) logicalOperator -> . AND
    (76) logicalOperator -> . OR

    SEMICOLON       shift and go to state 260
    AND             shift and go to state 135
    OR              shift and go to state 136

    logicalOperator                shift and go to state 134

state 237

    (99) inicialization -> type NAME IGUAL . number
    (17) number -> . onlyNumber
    (18) number -> . OPEN_PARENTHESIS RESTA INTEGER CLOSE_PARENTHESIS
    (19) number -> . OPEN_PARENTHESIS RESTA FLOAT CLOSE_PARENTHESIS
    (20) onlyNumber -> . INTEGER
    (21) onlyNumber -> . FLOAT

    OPEN_PARENTHESIS shift and go to state 63
    INTEGER         shift and go to state 64
    FLOAT           shift and go to state 65

    number                         shift and go to state 261
    onlyNumber                     shift and go to state 62

state 238

    (100) inicialization -> NAME IGUAL number .

    SEMICOLON       reduce using rule 100 (inicialization -> NAME IGUAL number .)


state 239

    (95) elseIf -> ELSEIF OPEN_PARENTHESIS expBoolean CLOSE_PARENTHESIS . OPEN_BRACE expression CLOSE_BRACE
    (96) elseIf -> ELSEIF OPEN_PARENTHESIS expBoolean CLOSE_PARENTHESIS . OPEN_BRACE expression CLOSE_BRACE elseIf

    OPEN_BRACE      shift and go to state 262


state 240

    (97) else -> ELSE OPEN_BRACE expression CLOSE_BRACE .

    COMMENTS        reduce using rule 97 (else -> ELSE OPEN_BRACE expression CLOSE_BRACE .)
    LONGCOMMENT     reduce using rule 97 (else -> ELSE OPEN_BRACE expression CLOSE_BRACE .)
    NAME            reduce using rule 97 (else -> ELSE OPEN_BRACE expression CLOSE_BRACE .)
    PRINT           reduce using rule 97 (else -> ELSE OPEN_BRACE expression CLOSE_BRACE .)
    INPUT           reduce using rule 97 (else -> ELSE OPEN_BRACE expression CLOSE_BRACE .)
    RETURN          reduce using rule 97 (else -> ELSE OPEN_BRACE expression CLOSE_BRACE .)
    FUNCTION        reduce using rule 97 (else -> ELSE OPEN_BRACE expression CLOSE_BRACE .)
    CONST           reduce using rule 97 (else -> ELSE OPEN_BRACE expression CLOSE_BRACE .)
    LET             reduce using rule 97 (else -> ELSE OPEN_BRACE expression CLOSE_BRACE .)
    VAR             reduce using rule 97 (else -> ELSE OPEN_BRACE expression CLOSE_BRACE .)
    OPEN_BRACKET    reduce using rule 97 (else -> ELSE OPEN_BRACE expression CLOSE_BRACE .)
    NEW             reduce using rule 97 (else -> ELSE OPEN_BRACE expression CLOSE_BRACE .)
    WHILE           reduce using rule 97 (else -> ELSE OPEN_BRACE expression CLOSE_BRACE .)
    FOR             reduce using rule 97 (else -> ELSE OPEN_BRACE expression CLOSE_BRACE .)
    OPEN_BRACE      reduce using rule 97 (else -> ELSE OPEN_BRACE expression CLOSE_BRACE .)
    IF              reduce using rule 97 (else -> ELSE OPEN_BRACE expression CLOSE_BRACE .)
    $end            reduce using rule 97 (else -> ELSE OPEN_BRACE expression CLOSE_BRACE .)
    CLOSE_BRACE     reduce using rule 97 (else -> ELSE OPEN_BRACE expression CLOSE_BRACE .)


state 241

    (94) soloIf -> IF OPEN_PARENTHESIS expBoolean CLOSE_PARENTHESIS OPEN_BRACE . expression CLOSE_BRACE
    (1) expression -> . semiExpression
    (2) expression -> . semiExpression expression
    (3) semiExpression -> . variable
    (4) semiExpression -> . dataStruct SEMICOLON
    (5) semiExpression -> . controlStruct
    (6) semiExpression -> . methodsSet
    (7) semiExpression -> . mapFunctions
    (8) semiExpression -> . arrayFn
    (9) semiExpression -> . declaration
    (10) semiExpression -> . print
    (11) semiExpression -> . input
    (12) semiExpression -> . return
    (13) semiExpression -> . function
    (14) semiExpression -> . COMMENTS
    (15) semiExpression -> . LONGCOMMENT
    (16) semiExpression -> . asigOp
    (24) variable -> . type NAME IGUAL datatype SEMICOLON
    (25) variable -> . NAME IGUAL datatype SEMICOLON
    (26) variable -> . type NAME SEMICOLON
    (27) variable -> . type NAME IGUAL input
    (28) variable -> . NAME IGUAL input
    (64) dataStruct -> . array
    (65) dataStruct -> . set
    (66) dataStruct -> . map
    (61) controlStruct -> . while
    (62) controlStruct -> . for
    (63) controlStruct -> . if
    (125) methodsSet -> . NAME POINT ADD OPEN_PARENTHESIS element CLOSE_PARENTHESIS SEMICOLON
    (126) methodsSet -> . NAME POINT DELETE OPEN_PARENTHESIS element CLOSE_PARENTHESIS SEMICOLON
    (127) methodsSet -> . NAME POINT CLEAR OPEN_PARENTHESIS CLOSE_PARENTHESIS SEMICOLON
    (119) mapFunctions -> . NAME POINT CLEAR OPEN_PARENTHESIS CLOSE_PARENTHESIS SEMICOLON
    (120) mapFunctions -> . NAME POINT GET OPEN_PARENTHESIS clave CLOSE_PARENTHESIS SEMICOLON
    (121) mapFunctions -> . NAME POINT HAS OPEN_PARENTHESIS clave CLOSE_PARENTHESIS SEMICOLON
    (103) arrayFn -> . NAME POINT POP OPEN_PARENTHESIS CLOSE_PARENTHESIS SEMICOLON
    (104) arrayFn -> . NAME POINT PUSH OPEN_PARENTHESIS item CLOSE_PARENTHESIS SEMICOLON
    (105) arrayFn -> . NAME POINT UNSHIFT OPEN_PARENTHESIS item CLOSE_PARENTHESIS SEMICOLON
    (74) declaration -> . NAME IGUAL element SEMICOLON
    (133) print -> . PRINT OPEN_PARENTHESIS datatype CLOSE_PARENTHESIS SEMICOLON
    (134) print -> . PRINT OPEN_PARENTHESIS CLOSE_PARENTHESIS SEMICOLON
    (135) input -> . INPUT OPEN_PARENTHESIS element COMMA element CLOSE_PARENTHESIS SEMICOLON
    (136) input -> . INPUT OPEN_PARENTHESIS element CLOSE_PARENTHESIS SEMICOLON
    (137) input -> . INPUT OPEN_PARENTHESIS CLOSE_PARENTHESIS SEMICOLON
    (132) return -> . RETURN datatype SEMICOLON
    (128) function -> . FUNCTION NAME OPEN_PARENTHESIS CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE
    (129) function -> . FUNCTION NAME OPEN_PARENTHESIS parameter CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE
    (60) asigOp -> . NAME operadorAsig number SEMICOLON
    (29) type -> . CONST
    (30) type -> . LET
    (31) type -> . VAR
    (101) array -> . OPEN_BRACKET items CLOSE_BRACKET
    (102) array -> . NEW ARRAY OPEN_PARENTHESIS items CLOSE_PARENTHESIS
    (122) set -> . NEW SET OPEN_PARENTHESIS CLOSE_PARENTHESIS
    (123) set -> . NEW SET OPEN_PARENTHESIS OPEN_BRACKET items CLOSE_BRACKET CLOSE_PARENTHESIS
    (124) set -> . NEW SET OPEN_PARENTHESIS element CLOSE_PARENTHESIS
    (106) map -> . iniciarMap
    (107) map -> . escribirMap
    (88) while -> . WHILE OPEN_PARENTHESIS expBoolean CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE
    (89) while -> . WHILE OPEN_PARENTHESIS bool CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE
    (98) for -> . FOR OPEN_PARENTHESIS inicialization SEMICOLON expBoolean SEMICOLON operations CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE
    (90) if -> . soloIf
    (91) if -> . soloIf elseIf
    (92) if -> . soloIf elseIf else
    (93) if -> . soloIf else
    (108) iniciarMap -> . NEW MAP OPEN_PARENTHESIS CLOSE_PARENTHESIS
    (109) iniciarMap -> . NEW MAP OPEN_PARENTHESIS tupla CLOSE_PARENTHESIS
    (110) escribirMap -> . OPEN_BRACE claveValor CLOSE_BRACE
    (94) soloIf -> . IF OPEN_PARENTHESIS expBoolean CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE

    COMMENTS        shift and go to state 14
    LONGCOMMENT     shift and go to state 15
    NAME            shift and go to state 18
    PRINT           shift and go to state 25
    INPUT           shift and go to state 26
    RETURN          shift and go to state 27
    FUNCTION        shift and go to state 28
    CONST           shift and go to state 30
    LET             shift and go to state 31
    VAR             shift and go to state 32
    OPEN_BRACKET    shift and go to state 33
    NEW             shift and go to state 34
    WHILE           shift and go to state 37
    FOR             shift and go to state 38
    OPEN_BRACE      shift and go to state 29
    IF              shift and go to state 40

    expression                     shift and go to state 263
    semiExpression                 shift and go to state 2
    variable                       shift and go to state 3
    dataStruct                     shift and go to state 4
    controlStruct                  shift and go to state 5
    methodsSet                     shift and go to state 6
    mapFunctions                   shift and go to state 7
    arrayFn                        shift and go to state 8
    declaration                    shift and go to state 9
    print                          shift and go to state 10
    input                          shift and go to state 11
    return                         shift and go to state 12
    function                       shift and go to state 13
    asigOp                         shift and go to state 16
    type                           shift and go to state 17
    array                          shift and go to state 19
    set                            shift and go to state 20
    map                            shift and go to state 21
    while                          shift and go to state 22
    for                            shift and go to state 23
    if                             shift and go to state 24
    iniciarMap                     shift and go to state 35
    escribirMap                    shift and go to state 36
    soloIf                         shift and go to state 39

state 242

    (125) methodsSet -> NAME POINT ADD OPEN_PARENTHESIS element CLOSE_PARENTHESIS . SEMICOLON

    SEMICOLON       shift and go to state 264


state 243

    (126) methodsSet -> NAME POINT DELETE OPEN_PARENTHESIS element CLOSE_PARENTHESIS . SEMICOLON

    SEMICOLON       shift and go to state 265


state 244

    (127) methodsSet -> NAME POINT CLEAR OPEN_PARENTHESIS CLOSE_PARENTHESIS SEMICOLON .
    (119) mapFunctions -> NAME POINT CLEAR OPEN_PARENTHESIS CLOSE_PARENTHESIS SEMICOLON .

  ! reduce/reduce conflict for COMMENTS resolved using rule 119 (mapFunctions -> NAME POINT CLEAR OPEN_PARENTHESIS CLOSE_PARENTHESIS SEMICOLON .)
  ! reduce/reduce conflict for LONGCOMMENT resolved using rule 119 (mapFunctions -> NAME POINT CLEAR OPEN_PARENTHESIS CLOSE_PARENTHESIS SEMICOLON .)
  ! reduce/reduce conflict for NAME resolved using rule 119 (mapFunctions -> NAME POINT CLEAR OPEN_PARENTHESIS CLOSE_PARENTHESIS SEMICOLON .)
  ! reduce/reduce conflict for PRINT resolved using rule 119 (mapFunctions -> NAME POINT CLEAR OPEN_PARENTHESIS CLOSE_PARENTHESIS SEMICOLON .)
  ! reduce/reduce conflict for INPUT resolved using rule 119 (mapFunctions -> NAME POINT CLEAR OPEN_PARENTHESIS CLOSE_PARENTHESIS SEMICOLON .)
  ! reduce/reduce conflict for RETURN resolved using rule 119 (mapFunctions -> NAME POINT CLEAR OPEN_PARENTHESIS CLOSE_PARENTHESIS SEMICOLON .)
  ! reduce/reduce conflict for FUNCTION resolved using rule 119 (mapFunctions -> NAME POINT CLEAR OPEN_PARENTHESIS CLOSE_PARENTHESIS SEMICOLON .)
  ! reduce/reduce conflict for CONST resolved using rule 119 (mapFunctions -> NAME POINT CLEAR OPEN_PARENTHESIS CLOSE_PARENTHESIS SEMICOLON .)
  ! reduce/reduce conflict for LET resolved using rule 119 (mapFunctions -> NAME POINT CLEAR OPEN_PARENTHESIS CLOSE_PARENTHESIS SEMICOLON .)
  ! reduce/reduce conflict for VAR resolved using rule 119 (mapFunctions -> NAME POINT CLEAR OPEN_PARENTHESIS CLOSE_PARENTHESIS SEMICOLON .)
  ! reduce/reduce conflict for OPEN_BRACKET resolved using rule 119 (mapFunctions -> NAME POINT CLEAR OPEN_PARENTHESIS CLOSE_PARENTHESIS SEMICOLON .)
  ! reduce/reduce conflict for NEW resolved using rule 119 (mapFunctions -> NAME POINT CLEAR OPEN_PARENTHESIS CLOSE_PARENTHESIS SEMICOLON .)
  ! reduce/reduce conflict for WHILE resolved using rule 119 (mapFunctions -> NAME POINT CLEAR OPEN_PARENTHESIS CLOSE_PARENTHESIS SEMICOLON .)
  ! reduce/reduce conflict for FOR resolved using rule 119 (mapFunctions -> NAME POINT CLEAR OPEN_PARENTHESIS CLOSE_PARENTHESIS SEMICOLON .)
  ! reduce/reduce conflict for OPEN_BRACE resolved using rule 119 (mapFunctions -> NAME POINT CLEAR OPEN_PARENTHESIS CLOSE_PARENTHESIS SEMICOLON .)
  ! reduce/reduce conflict for IF resolved using rule 119 (mapFunctions -> NAME POINT CLEAR OPEN_PARENTHESIS CLOSE_PARENTHESIS SEMICOLON .)
  ! reduce/reduce conflict for $end resolved using rule 119 (mapFunctions -> NAME POINT CLEAR OPEN_PARENTHESIS CLOSE_PARENTHESIS SEMICOLON .)
  ! reduce/reduce conflict for CLOSE_BRACE resolved using rule 119 (mapFunctions -> NAME POINT CLEAR OPEN_PARENTHESIS CLOSE_PARENTHESIS SEMICOLON .)
    COMMENTS        reduce using rule 119 (mapFunctions -> NAME POINT CLEAR OPEN_PARENTHESIS CLOSE_PARENTHESIS SEMICOLON .)
    LONGCOMMENT     reduce using rule 119 (mapFunctions -> NAME POINT CLEAR OPEN_PARENTHESIS CLOSE_PARENTHESIS SEMICOLON .)
    NAME            reduce using rule 119 (mapFunctions -> NAME POINT CLEAR OPEN_PARENTHESIS CLOSE_PARENTHESIS SEMICOLON .)
    PRINT           reduce using rule 119 (mapFunctions -> NAME POINT CLEAR OPEN_PARENTHESIS CLOSE_PARENTHESIS SEMICOLON .)
    INPUT           reduce using rule 119 (mapFunctions -> NAME POINT CLEAR OPEN_PARENTHESIS CLOSE_PARENTHESIS SEMICOLON .)
    RETURN          reduce using rule 119 (mapFunctions -> NAME POINT CLEAR OPEN_PARENTHESIS CLOSE_PARENTHESIS SEMICOLON .)
    FUNCTION        reduce using rule 119 (mapFunctions -> NAME POINT CLEAR OPEN_PARENTHESIS CLOSE_PARENTHESIS SEMICOLON .)
    CONST           reduce using rule 119 (mapFunctions -> NAME POINT CLEAR OPEN_PARENTHESIS CLOSE_PARENTHESIS SEMICOLON .)
    LET             reduce using rule 119 (mapFunctions -> NAME POINT CLEAR OPEN_PARENTHESIS CLOSE_PARENTHESIS SEMICOLON .)
    VAR             reduce using rule 119 (mapFunctions -> NAME POINT CLEAR OPEN_PARENTHESIS CLOSE_PARENTHESIS SEMICOLON .)
    OPEN_BRACKET    reduce using rule 119 (mapFunctions -> NAME POINT CLEAR OPEN_PARENTHESIS CLOSE_PARENTHESIS SEMICOLON .)
    NEW             reduce using rule 119 (mapFunctions -> NAME POINT CLEAR OPEN_PARENTHESIS CLOSE_PARENTHESIS SEMICOLON .)
    WHILE           reduce using rule 119 (mapFunctions -> NAME POINT CLEAR OPEN_PARENTHESIS CLOSE_PARENTHESIS SEMICOLON .)
    FOR             reduce using rule 119 (mapFunctions -> NAME POINT CLEAR OPEN_PARENTHESIS CLOSE_PARENTHESIS SEMICOLON .)
    OPEN_BRACE      reduce using rule 119 (mapFunctions -> NAME POINT CLEAR OPEN_PARENTHESIS CLOSE_PARENTHESIS SEMICOLON .)
    IF              reduce using rule 119 (mapFunctions -> NAME POINT CLEAR OPEN_PARENTHESIS CLOSE_PARENTHESIS SEMICOLON .)
    $end            reduce using rule 119 (mapFunctions -> NAME POINT CLEAR OPEN_PARENTHESIS CLOSE_PARENTHESIS SEMICOLON .)
    CLOSE_BRACE     reduce using rule 119 (mapFunctions -> NAME POINT CLEAR OPEN_PARENTHESIS CLOSE_PARENTHESIS SEMICOLON .)

  ! COMMENTS        [ reduce using rule 127 (methodsSet -> NAME POINT CLEAR OPEN_PARENTHESIS CLOSE_PARENTHESIS SEMICOLON .) ]
  ! LONGCOMMENT     [ reduce using rule 127 (methodsSet -> NAME POINT CLEAR OPEN_PARENTHESIS CLOSE_PARENTHESIS SEMICOLON .) ]
  ! NAME            [ reduce using rule 127 (methodsSet -> NAME POINT CLEAR OPEN_PARENTHESIS CLOSE_PARENTHESIS SEMICOLON .) ]
  ! PRINT           [ reduce using rule 127 (methodsSet -> NAME POINT CLEAR OPEN_PARENTHESIS CLOSE_PARENTHESIS SEMICOLON .) ]
  ! INPUT           [ reduce using rule 127 (methodsSet -> NAME POINT CLEAR OPEN_PARENTHESIS CLOSE_PARENTHESIS SEMICOLON .) ]
  ! RETURN          [ reduce using rule 127 (methodsSet -> NAME POINT CLEAR OPEN_PARENTHESIS CLOSE_PARENTHESIS SEMICOLON .) ]
  ! FUNCTION        [ reduce using rule 127 (methodsSet -> NAME POINT CLEAR OPEN_PARENTHESIS CLOSE_PARENTHESIS SEMICOLON .) ]
  ! CONST           [ reduce using rule 127 (methodsSet -> NAME POINT CLEAR OPEN_PARENTHESIS CLOSE_PARENTHESIS SEMICOLON .) ]
  ! LET             [ reduce using rule 127 (methodsSet -> NAME POINT CLEAR OPEN_PARENTHESIS CLOSE_PARENTHESIS SEMICOLON .) ]
  ! VAR             [ reduce using rule 127 (methodsSet -> NAME POINT CLEAR OPEN_PARENTHESIS CLOSE_PARENTHESIS SEMICOLON .) ]
  ! OPEN_BRACKET    [ reduce using rule 127 (methodsSet -> NAME POINT CLEAR OPEN_PARENTHESIS CLOSE_PARENTHESIS SEMICOLON .) ]
  ! NEW             [ reduce using rule 127 (methodsSet -> NAME POINT CLEAR OPEN_PARENTHESIS CLOSE_PARENTHESIS SEMICOLON .) ]
  ! WHILE           [ reduce using rule 127 (methodsSet -> NAME POINT CLEAR OPEN_PARENTHESIS CLOSE_PARENTHESIS SEMICOLON .) ]
  ! FOR             [ reduce using rule 127 (methodsSet -> NAME POINT CLEAR OPEN_PARENTHESIS CLOSE_PARENTHESIS SEMICOLON .) ]
  ! OPEN_BRACE      [ reduce using rule 127 (methodsSet -> NAME POINT CLEAR OPEN_PARENTHESIS CLOSE_PARENTHESIS SEMICOLON .) ]
  ! IF              [ reduce using rule 127 (methodsSet -> NAME POINT CLEAR OPEN_PARENTHESIS CLOSE_PARENTHESIS SEMICOLON .) ]
  ! $end            [ reduce using rule 127 (methodsSet -> NAME POINT CLEAR OPEN_PARENTHESIS CLOSE_PARENTHESIS SEMICOLON .) ]
  ! CLOSE_BRACE     [ reduce using rule 127 (methodsSet -> NAME POINT CLEAR OPEN_PARENTHESIS CLOSE_PARENTHESIS SEMICOLON .) ]


state 245

    (120) mapFunctions -> NAME POINT GET OPEN_PARENTHESIS clave CLOSE_PARENTHESIS . SEMICOLON

    SEMICOLON       shift and go to state 266


state 246

    (121) mapFunctions -> NAME POINT HAS OPEN_PARENTHESIS clave CLOSE_PARENTHESIS . SEMICOLON

    SEMICOLON       shift and go to state 267


state 247

    (103) arrayFn -> NAME POINT POP OPEN_PARENTHESIS CLOSE_PARENTHESIS SEMICOLON .

    COMMENTS        reduce using rule 103 (arrayFn -> NAME POINT POP OPEN_PARENTHESIS CLOSE_PARENTHESIS SEMICOLON .)
    LONGCOMMENT     reduce using rule 103 (arrayFn -> NAME POINT POP OPEN_PARENTHESIS CLOSE_PARENTHESIS SEMICOLON .)
    NAME            reduce using rule 103 (arrayFn -> NAME POINT POP OPEN_PARENTHESIS CLOSE_PARENTHESIS SEMICOLON .)
    PRINT           reduce using rule 103 (arrayFn -> NAME POINT POP OPEN_PARENTHESIS CLOSE_PARENTHESIS SEMICOLON .)
    INPUT           reduce using rule 103 (arrayFn -> NAME POINT POP OPEN_PARENTHESIS CLOSE_PARENTHESIS SEMICOLON .)
    RETURN          reduce using rule 103 (arrayFn -> NAME POINT POP OPEN_PARENTHESIS CLOSE_PARENTHESIS SEMICOLON .)
    FUNCTION        reduce using rule 103 (arrayFn -> NAME POINT POP OPEN_PARENTHESIS CLOSE_PARENTHESIS SEMICOLON .)
    CONST           reduce using rule 103 (arrayFn -> NAME POINT POP OPEN_PARENTHESIS CLOSE_PARENTHESIS SEMICOLON .)
    LET             reduce using rule 103 (arrayFn -> NAME POINT POP OPEN_PARENTHESIS CLOSE_PARENTHESIS SEMICOLON .)
    VAR             reduce using rule 103 (arrayFn -> NAME POINT POP OPEN_PARENTHESIS CLOSE_PARENTHESIS SEMICOLON .)
    OPEN_BRACKET    reduce using rule 103 (arrayFn -> NAME POINT POP OPEN_PARENTHESIS CLOSE_PARENTHESIS SEMICOLON .)
    NEW             reduce using rule 103 (arrayFn -> NAME POINT POP OPEN_PARENTHESIS CLOSE_PARENTHESIS SEMICOLON .)
    WHILE           reduce using rule 103 (arrayFn -> NAME POINT POP OPEN_PARENTHESIS CLOSE_PARENTHESIS SEMICOLON .)
    FOR             reduce using rule 103 (arrayFn -> NAME POINT POP OPEN_PARENTHESIS CLOSE_PARENTHESIS SEMICOLON .)
    OPEN_BRACE      reduce using rule 103 (arrayFn -> NAME POINT POP OPEN_PARENTHESIS CLOSE_PARENTHESIS SEMICOLON .)
    IF              reduce using rule 103 (arrayFn -> NAME POINT POP OPEN_PARENTHESIS CLOSE_PARENTHESIS SEMICOLON .)
    $end            reduce using rule 103 (arrayFn -> NAME POINT POP OPEN_PARENTHESIS CLOSE_PARENTHESIS SEMICOLON .)
    CLOSE_BRACE     reduce using rule 103 (arrayFn -> NAME POINT POP OPEN_PARENTHESIS CLOSE_PARENTHESIS SEMICOLON .)


state 248

    (104) arrayFn -> NAME POINT PUSH OPEN_PARENTHESIS item CLOSE_PARENTHESIS . SEMICOLON

    SEMICOLON       shift and go to state 268


state 249

    (105) arrayFn -> NAME POINT UNSHIFT OPEN_PARENTHESIS item CLOSE_PARENTHESIS . SEMICOLON

    SEMICOLON       shift and go to state 269


state 250

    (135) input -> INPUT OPEN_PARENTHESIS element COMMA element CLOSE_PARENTHESIS . SEMICOLON

    SEMICOLON       shift and go to state 270


state 251

    (46) operations -> number operand number operand operations .

    SEMICOLON       reduce using rule 46 (operations -> number operand number operand operations .)
    COMMA           reduce using rule 46 (operations -> number operand number operand operations .)
    CLOSE_BRACKET   reduce using rule 46 (operations -> number operand number operand operations .)
    CLOSE_PARENTHESIS reduce using rule 46 (operations -> number operand number operand operations .)
    CLOSE_BRACE     reduce using rule 46 (operations -> number operand number operand operations .)


state 252

    (128) function -> FUNCTION NAME OPEN_PARENTHESIS CLOSE_PARENTHESIS OPEN_BRACE expression . CLOSE_BRACE

    CLOSE_BRACE     shift and go to state 271


state 253

    (129) function -> FUNCTION NAME OPEN_PARENTHESIS parameter CLOSE_PARENTHESIS OPEN_BRACE . expression CLOSE_BRACE
    (1) expression -> . semiExpression
    (2) expression -> . semiExpression expression
    (3) semiExpression -> . variable
    (4) semiExpression -> . dataStruct SEMICOLON
    (5) semiExpression -> . controlStruct
    (6) semiExpression -> . methodsSet
    (7) semiExpression -> . mapFunctions
    (8) semiExpression -> . arrayFn
    (9) semiExpression -> . declaration
    (10) semiExpression -> . print
    (11) semiExpression -> . input
    (12) semiExpression -> . return
    (13) semiExpression -> . function
    (14) semiExpression -> . COMMENTS
    (15) semiExpression -> . LONGCOMMENT
    (16) semiExpression -> . asigOp
    (24) variable -> . type NAME IGUAL datatype SEMICOLON
    (25) variable -> . NAME IGUAL datatype SEMICOLON
    (26) variable -> . type NAME SEMICOLON
    (27) variable -> . type NAME IGUAL input
    (28) variable -> . NAME IGUAL input
    (64) dataStruct -> . array
    (65) dataStruct -> . set
    (66) dataStruct -> . map
    (61) controlStruct -> . while
    (62) controlStruct -> . for
    (63) controlStruct -> . if
    (125) methodsSet -> . NAME POINT ADD OPEN_PARENTHESIS element CLOSE_PARENTHESIS SEMICOLON
    (126) methodsSet -> . NAME POINT DELETE OPEN_PARENTHESIS element CLOSE_PARENTHESIS SEMICOLON
    (127) methodsSet -> . NAME POINT CLEAR OPEN_PARENTHESIS CLOSE_PARENTHESIS SEMICOLON
    (119) mapFunctions -> . NAME POINT CLEAR OPEN_PARENTHESIS CLOSE_PARENTHESIS SEMICOLON
    (120) mapFunctions -> . NAME POINT GET OPEN_PARENTHESIS clave CLOSE_PARENTHESIS SEMICOLON
    (121) mapFunctions -> . NAME POINT HAS OPEN_PARENTHESIS clave CLOSE_PARENTHESIS SEMICOLON
    (103) arrayFn -> . NAME POINT POP OPEN_PARENTHESIS CLOSE_PARENTHESIS SEMICOLON
    (104) arrayFn -> . NAME POINT PUSH OPEN_PARENTHESIS item CLOSE_PARENTHESIS SEMICOLON
    (105) arrayFn -> . NAME POINT UNSHIFT OPEN_PARENTHESIS item CLOSE_PARENTHESIS SEMICOLON
    (74) declaration -> . NAME IGUAL element SEMICOLON
    (133) print -> . PRINT OPEN_PARENTHESIS datatype CLOSE_PARENTHESIS SEMICOLON
    (134) print -> . PRINT OPEN_PARENTHESIS CLOSE_PARENTHESIS SEMICOLON
    (135) input -> . INPUT OPEN_PARENTHESIS element COMMA element CLOSE_PARENTHESIS SEMICOLON
    (136) input -> . INPUT OPEN_PARENTHESIS element CLOSE_PARENTHESIS SEMICOLON
    (137) input -> . INPUT OPEN_PARENTHESIS CLOSE_PARENTHESIS SEMICOLON
    (132) return -> . RETURN datatype SEMICOLON
    (128) function -> . FUNCTION NAME OPEN_PARENTHESIS CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE
    (129) function -> . FUNCTION NAME OPEN_PARENTHESIS parameter CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE
    (60) asigOp -> . NAME operadorAsig number SEMICOLON
    (29) type -> . CONST
    (30) type -> . LET
    (31) type -> . VAR
    (101) array -> . OPEN_BRACKET items CLOSE_BRACKET
    (102) array -> . NEW ARRAY OPEN_PARENTHESIS items CLOSE_PARENTHESIS
    (122) set -> . NEW SET OPEN_PARENTHESIS CLOSE_PARENTHESIS
    (123) set -> . NEW SET OPEN_PARENTHESIS OPEN_BRACKET items CLOSE_BRACKET CLOSE_PARENTHESIS
    (124) set -> . NEW SET OPEN_PARENTHESIS element CLOSE_PARENTHESIS
    (106) map -> . iniciarMap
    (107) map -> . escribirMap
    (88) while -> . WHILE OPEN_PARENTHESIS expBoolean CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE
    (89) while -> . WHILE OPEN_PARENTHESIS bool CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE
    (98) for -> . FOR OPEN_PARENTHESIS inicialization SEMICOLON expBoolean SEMICOLON operations CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE
    (90) if -> . soloIf
    (91) if -> . soloIf elseIf
    (92) if -> . soloIf elseIf else
    (93) if -> . soloIf else
    (108) iniciarMap -> . NEW MAP OPEN_PARENTHESIS CLOSE_PARENTHESIS
    (109) iniciarMap -> . NEW MAP OPEN_PARENTHESIS tupla CLOSE_PARENTHESIS
    (110) escribirMap -> . OPEN_BRACE claveValor CLOSE_BRACE
    (94) soloIf -> . IF OPEN_PARENTHESIS expBoolean CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE

    COMMENTS        shift and go to state 14
    LONGCOMMENT     shift and go to state 15
    NAME            shift and go to state 18
    PRINT           shift and go to state 25
    INPUT           shift and go to state 26
    RETURN          shift and go to state 27
    FUNCTION        shift and go to state 28
    CONST           shift and go to state 30
    LET             shift and go to state 31
    VAR             shift and go to state 32
    OPEN_BRACKET    shift and go to state 33
    NEW             shift and go to state 34
    WHILE           shift and go to state 37
    FOR             shift and go to state 38
    OPEN_BRACE      shift and go to state 29
    IF              shift and go to state 40

    expression                     shift and go to state 272
    semiExpression                 shift and go to state 2
    variable                       shift and go to state 3
    dataStruct                     shift and go to state 4
    controlStruct                  shift and go to state 5
    methodsSet                     shift and go to state 6
    mapFunctions                   shift and go to state 7
    arrayFn                        shift and go to state 8
    declaration                    shift and go to state 9
    print                          shift and go to state 10
    input                          shift and go to state 11
    return                         shift and go to state 12
    function                       shift and go to state 13
    asigOp                         shift and go to state 16
    type                           shift and go to state 17
    array                          shift and go to state 19
    set                            shift and go to state 20
    map                            shift and go to state 21
    while                          shift and go to state 22
    for                            shift and go to state 23
    if                             shift and go to state 24
    iniciarMap                     shift and go to state 35
    escribirMap                    shift and go to state 36
    soloIf                         shift and go to state 39

state 254

    (131) parameter -> datatype COMMA parameter .

    CLOSE_PARENTHESIS reduce using rule 131 (parameter -> datatype COMMA parameter .)


state 255

    (112) claveValor -> clave COLON datatype COMMA claveValor .

    CLOSE_BRACE     reduce using rule 112 (claveValor -> clave COLON datatype COMMA claveValor .)


state 256

    (123) set -> NEW SET OPEN_PARENTHESIS OPEN_BRACKET items CLOSE_BRACKET . CLOSE_PARENTHESIS

    CLOSE_PARENTHESIS shift and go to state 273


state 257

    (117) tupla -> OPEN_BRACKET item COMMA . item CLOSE_BRACKET
    (118) tupla -> OPEN_BRACKET item COMMA . item CLOSE_BRACKET COMMA tupla
    (69) item -> . expBoolean
    (70) item -> . datatype
    (77) expBoolean -> . controlArg
    (78) expBoolean -> . bool
    (79) expBoolean -> . NOT expBoolean
    (80) expBoolean -> . expBoolean logicalOperator expBoolean
    (32) datatype -> . number
    (33) datatype -> . NAME
    (34) datatype -> . STRING
    (35) datatype -> . CHAR
    (36) datatype -> . operations
    (37) datatype -> . dataStruct
    (81) controlArg -> . element clause element
    (22) bool -> . TRUE
    (23) bool -> . FALSE
    (17) number -> . onlyNumber
    (18) number -> . OPEN_PARENTHESIS RESTA INTEGER CLOSE_PARENTHESIS
    (19) number -> . OPEN_PARENTHESIS RESTA FLOAT CLOSE_PARENTHESIS
    (38) operations -> . number operand number
    (39) operations -> . NAME
    (40) operations -> . number
    (41) operations -> . number operand NAME operations
    (42) operations -> . NAME operand number operations
    (43) operations -> . number operand NAME
    (44) operations -> . NAME operand number
    (45) operations -> . NAME operand NAME operations
    (46) operations -> . number operand number operand operations
    (47) operations -> . NAME SUMA SUMA
    (48) operations -> . NAME operand NAME
    (49) operations -> . NAME RESTA RESTA
    (64) dataStruct -> . array
    (65) dataStruct -> . set
    (66) dataStruct -> . map
    (71) element -> . STRING
    (72) element -> . number
    (73) element -> . NAME
    (20) onlyNumber -> . INTEGER
    (21) onlyNumber -> . FLOAT
    (101) array -> . OPEN_BRACKET items CLOSE_BRACKET
    (102) array -> . NEW ARRAY OPEN_PARENTHESIS items CLOSE_PARENTHESIS
    (122) set -> . NEW SET OPEN_PARENTHESIS CLOSE_PARENTHESIS
    (123) set -> . NEW SET OPEN_PARENTHESIS OPEN_BRACKET items CLOSE_BRACKET CLOSE_PARENTHESIS
    (124) set -> . NEW SET OPEN_PARENTHESIS element CLOSE_PARENTHESIS
    (106) map -> . iniciarMap
    (107) map -> . escribirMap
    (108) iniciarMap -> . NEW MAP OPEN_PARENTHESIS CLOSE_PARENTHESIS
    (109) iniciarMap -> . NEW MAP OPEN_PARENTHESIS tupla CLOSE_PARENTHESIS
    (110) escribirMap -> . OPEN_BRACE claveValor CLOSE_BRACE

    NOT             shift and go to state 81
    NAME            shift and go to state 83
    STRING          shift and go to state 84
    CHAR            shift and go to state 59
    TRUE            shift and go to state 73
    FALSE           shift and go to state 74
    OPEN_PARENTHESIS shift and go to state 63
    INTEGER         shift and go to state 64
    FLOAT           shift and go to state 65
    OPEN_BRACKET    shift and go to state 33
    NEW             shift and go to state 34
    OPEN_BRACE      shift and go to state 29

    item                           shift and go to state 274
    expBoolean                     shift and go to state 77
    datatype                       shift and go to state 78
    controlArg                     shift and go to state 79
    bool                           shift and go to state 80
    number                         shift and go to state 82
    operations                     shift and go to state 60
    dataStruct                     shift and go to state 61
    element                        shift and go to state 85
    onlyNumber                     shift and go to state 62
    array                          shift and go to state 19
    set                            shift and go to state 20
    map                            shift and go to state 21
    iniciarMap                     shift and go to state 35
    escribirMap                    shift and go to state 36

state 258

    (88) while -> WHILE OPEN_PARENTHESIS expBoolean CLOSE_PARENTHESIS OPEN_BRACE expression . CLOSE_BRACE

    CLOSE_BRACE     shift and go to state 275


state 259

    (89) while -> WHILE OPEN_PARENTHESIS bool CLOSE_PARENTHESIS OPEN_BRACE expression . CLOSE_BRACE

    CLOSE_BRACE     shift and go to state 276


state 260

    (98) for -> FOR OPEN_PARENTHESIS inicialization SEMICOLON expBoolean SEMICOLON . operations CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE
    (38) operations -> . number operand number
    (39) operations -> . NAME
    (40) operations -> . number
    (41) operations -> . number operand NAME operations
    (42) operations -> . NAME operand number operations
    (43) operations -> . number operand NAME
    (44) operations -> . NAME operand number
    (45) operations -> . NAME operand NAME operations
    (46) operations -> . number operand number operand operations
    (47) operations -> . NAME SUMA SUMA
    (48) operations -> . NAME operand NAME
    (49) operations -> . NAME RESTA RESTA
    (17) number -> . onlyNumber
    (18) number -> . OPEN_PARENTHESIS RESTA INTEGER CLOSE_PARENTHESIS
    (19) number -> . OPEN_PARENTHESIS RESTA FLOAT CLOSE_PARENTHESIS
    (20) onlyNumber -> . INTEGER
    (21) onlyNumber -> . FLOAT

    NAME            shift and go to state 219
    OPEN_PARENTHESIS shift and go to state 63
    INTEGER         shift and go to state 64
    FLOAT           shift and go to state 65

    operations                     shift and go to state 277
    number                         shift and go to state 218
    onlyNumber                     shift and go to state 62

state 261

    (99) inicialization -> type NAME IGUAL number .

    SEMICOLON       reduce using rule 99 (inicialization -> type NAME IGUAL number .)


state 262

    (95) elseIf -> ELSEIF OPEN_PARENTHESIS expBoolean CLOSE_PARENTHESIS OPEN_BRACE . expression CLOSE_BRACE
    (96) elseIf -> ELSEIF OPEN_PARENTHESIS expBoolean CLOSE_PARENTHESIS OPEN_BRACE . expression CLOSE_BRACE elseIf
    (1) expression -> . semiExpression
    (2) expression -> . semiExpression expression
    (3) semiExpression -> . variable
    (4) semiExpression -> . dataStruct SEMICOLON
    (5) semiExpression -> . controlStruct
    (6) semiExpression -> . methodsSet
    (7) semiExpression -> . mapFunctions
    (8) semiExpression -> . arrayFn
    (9) semiExpression -> . declaration
    (10) semiExpression -> . print
    (11) semiExpression -> . input
    (12) semiExpression -> . return
    (13) semiExpression -> . function
    (14) semiExpression -> . COMMENTS
    (15) semiExpression -> . LONGCOMMENT
    (16) semiExpression -> . asigOp
    (24) variable -> . type NAME IGUAL datatype SEMICOLON
    (25) variable -> . NAME IGUAL datatype SEMICOLON
    (26) variable -> . type NAME SEMICOLON
    (27) variable -> . type NAME IGUAL input
    (28) variable -> . NAME IGUAL input
    (64) dataStruct -> . array
    (65) dataStruct -> . set
    (66) dataStruct -> . map
    (61) controlStruct -> . while
    (62) controlStruct -> . for
    (63) controlStruct -> . if
    (125) methodsSet -> . NAME POINT ADD OPEN_PARENTHESIS element CLOSE_PARENTHESIS SEMICOLON
    (126) methodsSet -> . NAME POINT DELETE OPEN_PARENTHESIS element CLOSE_PARENTHESIS SEMICOLON
    (127) methodsSet -> . NAME POINT CLEAR OPEN_PARENTHESIS CLOSE_PARENTHESIS SEMICOLON
    (119) mapFunctions -> . NAME POINT CLEAR OPEN_PARENTHESIS CLOSE_PARENTHESIS SEMICOLON
    (120) mapFunctions -> . NAME POINT GET OPEN_PARENTHESIS clave CLOSE_PARENTHESIS SEMICOLON
    (121) mapFunctions -> . NAME POINT HAS OPEN_PARENTHESIS clave CLOSE_PARENTHESIS SEMICOLON
    (103) arrayFn -> . NAME POINT POP OPEN_PARENTHESIS CLOSE_PARENTHESIS SEMICOLON
    (104) arrayFn -> . NAME POINT PUSH OPEN_PARENTHESIS item CLOSE_PARENTHESIS SEMICOLON
    (105) arrayFn -> . NAME POINT UNSHIFT OPEN_PARENTHESIS item CLOSE_PARENTHESIS SEMICOLON
    (74) declaration -> . NAME IGUAL element SEMICOLON
    (133) print -> . PRINT OPEN_PARENTHESIS datatype CLOSE_PARENTHESIS SEMICOLON
    (134) print -> . PRINT OPEN_PARENTHESIS CLOSE_PARENTHESIS SEMICOLON
    (135) input -> . INPUT OPEN_PARENTHESIS element COMMA element CLOSE_PARENTHESIS SEMICOLON
    (136) input -> . INPUT OPEN_PARENTHESIS element CLOSE_PARENTHESIS SEMICOLON
    (137) input -> . INPUT OPEN_PARENTHESIS CLOSE_PARENTHESIS SEMICOLON
    (132) return -> . RETURN datatype SEMICOLON
    (128) function -> . FUNCTION NAME OPEN_PARENTHESIS CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE
    (129) function -> . FUNCTION NAME OPEN_PARENTHESIS parameter CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE
    (60) asigOp -> . NAME operadorAsig number SEMICOLON
    (29) type -> . CONST
    (30) type -> . LET
    (31) type -> . VAR
    (101) array -> . OPEN_BRACKET items CLOSE_BRACKET
    (102) array -> . NEW ARRAY OPEN_PARENTHESIS items CLOSE_PARENTHESIS
    (122) set -> . NEW SET OPEN_PARENTHESIS CLOSE_PARENTHESIS
    (123) set -> . NEW SET OPEN_PARENTHESIS OPEN_BRACKET items CLOSE_BRACKET CLOSE_PARENTHESIS
    (124) set -> . NEW SET OPEN_PARENTHESIS element CLOSE_PARENTHESIS
    (106) map -> . iniciarMap
    (107) map -> . escribirMap
    (88) while -> . WHILE OPEN_PARENTHESIS expBoolean CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE
    (89) while -> . WHILE OPEN_PARENTHESIS bool CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE
    (98) for -> . FOR OPEN_PARENTHESIS inicialization SEMICOLON expBoolean SEMICOLON operations CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE
    (90) if -> . soloIf
    (91) if -> . soloIf elseIf
    (92) if -> . soloIf elseIf else
    (93) if -> . soloIf else
    (108) iniciarMap -> . NEW MAP OPEN_PARENTHESIS CLOSE_PARENTHESIS
    (109) iniciarMap -> . NEW MAP OPEN_PARENTHESIS tupla CLOSE_PARENTHESIS
    (110) escribirMap -> . OPEN_BRACE claveValor CLOSE_BRACE
    (94) soloIf -> . IF OPEN_PARENTHESIS expBoolean CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE

    COMMENTS        shift and go to state 14
    LONGCOMMENT     shift and go to state 15
    NAME            shift and go to state 18
    PRINT           shift and go to state 25
    INPUT           shift and go to state 26
    RETURN          shift and go to state 27
    FUNCTION        shift and go to state 28
    CONST           shift and go to state 30
    LET             shift and go to state 31
    VAR             shift and go to state 32
    OPEN_BRACKET    shift and go to state 33
    NEW             shift and go to state 34
    WHILE           shift and go to state 37
    FOR             shift and go to state 38
    OPEN_BRACE      shift and go to state 29
    IF              shift and go to state 40

    expression                     shift and go to state 278
    semiExpression                 shift and go to state 2
    variable                       shift and go to state 3
    dataStruct                     shift and go to state 4
    controlStruct                  shift and go to state 5
    methodsSet                     shift and go to state 6
    mapFunctions                   shift and go to state 7
    arrayFn                        shift and go to state 8
    declaration                    shift and go to state 9
    print                          shift and go to state 10
    input                          shift and go to state 11
    return                         shift and go to state 12
    function                       shift and go to state 13
    asigOp                         shift and go to state 16
    type                           shift and go to state 17
    array                          shift and go to state 19
    set                            shift and go to state 20
    map                            shift and go to state 21
    while                          shift and go to state 22
    for                            shift and go to state 23
    if                             shift and go to state 24
    iniciarMap                     shift and go to state 35
    escribirMap                    shift and go to state 36
    soloIf                         shift and go to state 39

state 263

    (94) soloIf -> IF OPEN_PARENTHESIS expBoolean CLOSE_PARENTHESIS OPEN_BRACE expression . CLOSE_BRACE

    CLOSE_BRACE     shift and go to state 279


state 264

    (125) methodsSet -> NAME POINT ADD OPEN_PARENTHESIS element CLOSE_PARENTHESIS SEMICOLON .

    COMMENTS        reduce using rule 125 (methodsSet -> NAME POINT ADD OPEN_PARENTHESIS element CLOSE_PARENTHESIS SEMICOLON .)
    LONGCOMMENT     reduce using rule 125 (methodsSet -> NAME POINT ADD OPEN_PARENTHESIS element CLOSE_PARENTHESIS SEMICOLON .)
    NAME            reduce using rule 125 (methodsSet -> NAME POINT ADD OPEN_PARENTHESIS element CLOSE_PARENTHESIS SEMICOLON .)
    PRINT           reduce using rule 125 (methodsSet -> NAME POINT ADD OPEN_PARENTHESIS element CLOSE_PARENTHESIS SEMICOLON .)
    INPUT           reduce using rule 125 (methodsSet -> NAME POINT ADD OPEN_PARENTHESIS element CLOSE_PARENTHESIS SEMICOLON .)
    RETURN          reduce using rule 125 (methodsSet -> NAME POINT ADD OPEN_PARENTHESIS element CLOSE_PARENTHESIS SEMICOLON .)
    FUNCTION        reduce using rule 125 (methodsSet -> NAME POINT ADD OPEN_PARENTHESIS element CLOSE_PARENTHESIS SEMICOLON .)
    CONST           reduce using rule 125 (methodsSet -> NAME POINT ADD OPEN_PARENTHESIS element CLOSE_PARENTHESIS SEMICOLON .)
    LET             reduce using rule 125 (methodsSet -> NAME POINT ADD OPEN_PARENTHESIS element CLOSE_PARENTHESIS SEMICOLON .)
    VAR             reduce using rule 125 (methodsSet -> NAME POINT ADD OPEN_PARENTHESIS element CLOSE_PARENTHESIS SEMICOLON .)
    OPEN_BRACKET    reduce using rule 125 (methodsSet -> NAME POINT ADD OPEN_PARENTHESIS element CLOSE_PARENTHESIS SEMICOLON .)
    NEW             reduce using rule 125 (methodsSet -> NAME POINT ADD OPEN_PARENTHESIS element CLOSE_PARENTHESIS SEMICOLON .)
    WHILE           reduce using rule 125 (methodsSet -> NAME POINT ADD OPEN_PARENTHESIS element CLOSE_PARENTHESIS SEMICOLON .)
    FOR             reduce using rule 125 (methodsSet -> NAME POINT ADD OPEN_PARENTHESIS element CLOSE_PARENTHESIS SEMICOLON .)
    OPEN_BRACE      reduce using rule 125 (methodsSet -> NAME POINT ADD OPEN_PARENTHESIS element CLOSE_PARENTHESIS SEMICOLON .)
    IF              reduce using rule 125 (methodsSet -> NAME POINT ADD OPEN_PARENTHESIS element CLOSE_PARENTHESIS SEMICOLON .)
    $end            reduce using rule 125 (methodsSet -> NAME POINT ADD OPEN_PARENTHESIS element CLOSE_PARENTHESIS SEMICOLON .)
    CLOSE_BRACE     reduce using rule 125 (methodsSet -> NAME POINT ADD OPEN_PARENTHESIS element CLOSE_PARENTHESIS SEMICOLON .)


state 265

    (126) methodsSet -> NAME POINT DELETE OPEN_PARENTHESIS element CLOSE_PARENTHESIS SEMICOLON .

    COMMENTS        reduce using rule 126 (methodsSet -> NAME POINT DELETE OPEN_PARENTHESIS element CLOSE_PARENTHESIS SEMICOLON .)
    LONGCOMMENT     reduce using rule 126 (methodsSet -> NAME POINT DELETE OPEN_PARENTHESIS element CLOSE_PARENTHESIS SEMICOLON .)
    NAME            reduce using rule 126 (methodsSet -> NAME POINT DELETE OPEN_PARENTHESIS element CLOSE_PARENTHESIS SEMICOLON .)
    PRINT           reduce using rule 126 (methodsSet -> NAME POINT DELETE OPEN_PARENTHESIS element CLOSE_PARENTHESIS SEMICOLON .)
    INPUT           reduce using rule 126 (methodsSet -> NAME POINT DELETE OPEN_PARENTHESIS element CLOSE_PARENTHESIS SEMICOLON .)
    RETURN          reduce using rule 126 (methodsSet -> NAME POINT DELETE OPEN_PARENTHESIS element CLOSE_PARENTHESIS SEMICOLON .)
    FUNCTION        reduce using rule 126 (methodsSet -> NAME POINT DELETE OPEN_PARENTHESIS element CLOSE_PARENTHESIS SEMICOLON .)
    CONST           reduce using rule 126 (methodsSet -> NAME POINT DELETE OPEN_PARENTHESIS element CLOSE_PARENTHESIS SEMICOLON .)
    LET             reduce using rule 126 (methodsSet -> NAME POINT DELETE OPEN_PARENTHESIS element CLOSE_PARENTHESIS SEMICOLON .)
    VAR             reduce using rule 126 (methodsSet -> NAME POINT DELETE OPEN_PARENTHESIS element CLOSE_PARENTHESIS SEMICOLON .)
    OPEN_BRACKET    reduce using rule 126 (methodsSet -> NAME POINT DELETE OPEN_PARENTHESIS element CLOSE_PARENTHESIS SEMICOLON .)
    NEW             reduce using rule 126 (methodsSet -> NAME POINT DELETE OPEN_PARENTHESIS element CLOSE_PARENTHESIS SEMICOLON .)
    WHILE           reduce using rule 126 (methodsSet -> NAME POINT DELETE OPEN_PARENTHESIS element CLOSE_PARENTHESIS SEMICOLON .)
    FOR             reduce using rule 126 (methodsSet -> NAME POINT DELETE OPEN_PARENTHESIS element CLOSE_PARENTHESIS SEMICOLON .)
    OPEN_BRACE      reduce using rule 126 (methodsSet -> NAME POINT DELETE OPEN_PARENTHESIS element CLOSE_PARENTHESIS SEMICOLON .)
    IF              reduce using rule 126 (methodsSet -> NAME POINT DELETE OPEN_PARENTHESIS element CLOSE_PARENTHESIS SEMICOLON .)
    $end            reduce using rule 126 (methodsSet -> NAME POINT DELETE OPEN_PARENTHESIS element CLOSE_PARENTHESIS SEMICOLON .)
    CLOSE_BRACE     reduce using rule 126 (methodsSet -> NAME POINT DELETE OPEN_PARENTHESIS element CLOSE_PARENTHESIS SEMICOLON .)


state 266

    (120) mapFunctions -> NAME POINT GET OPEN_PARENTHESIS clave CLOSE_PARENTHESIS SEMICOLON .

    COMMENTS        reduce using rule 120 (mapFunctions -> NAME POINT GET OPEN_PARENTHESIS clave CLOSE_PARENTHESIS SEMICOLON .)
    LONGCOMMENT     reduce using rule 120 (mapFunctions -> NAME POINT GET OPEN_PARENTHESIS clave CLOSE_PARENTHESIS SEMICOLON .)
    NAME            reduce using rule 120 (mapFunctions -> NAME POINT GET OPEN_PARENTHESIS clave CLOSE_PARENTHESIS SEMICOLON .)
    PRINT           reduce using rule 120 (mapFunctions -> NAME POINT GET OPEN_PARENTHESIS clave CLOSE_PARENTHESIS SEMICOLON .)
    INPUT           reduce using rule 120 (mapFunctions -> NAME POINT GET OPEN_PARENTHESIS clave CLOSE_PARENTHESIS SEMICOLON .)
    RETURN          reduce using rule 120 (mapFunctions -> NAME POINT GET OPEN_PARENTHESIS clave CLOSE_PARENTHESIS SEMICOLON .)
    FUNCTION        reduce using rule 120 (mapFunctions -> NAME POINT GET OPEN_PARENTHESIS clave CLOSE_PARENTHESIS SEMICOLON .)
    CONST           reduce using rule 120 (mapFunctions -> NAME POINT GET OPEN_PARENTHESIS clave CLOSE_PARENTHESIS SEMICOLON .)
    LET             reduce using rule 120 (mapFunctions -> NAME POINT GET OPEN_PARENTHESIS clave CLOSE_PARENTHESIS SEMICOLON .)
    VAR             reduce using rule 120 (mapFunctions -> NAME POINT GET OPEN_PARENTHESIS clave CLOSE_PARENTHESIS SEMICOLON .)
    OPEN_BRACKET    reduce using rule 120 (mapFunctions -> NAME POINT GET OPEN_PARENTHESIS clave CLOSE_PARENTHESIS SEMICOLON .)
    NEW             reduce using rule 120 (mapFunctions -> NAME POINT GET OPEN_PARENTHESIS clave CLOSE_PARENTHESIS SEMICOLON .)
    WHILE           reduce using rule 120 (mapFunctions -> NAME POINT GET OPEN_PARENTHESIS clave CLOSE_PARENTHESIS SEMICOLON .)
    FOR             reduce using rule 120 (mapFunctions -> NAME POINT GET OPEN_PARENTHESIS clave CLOSE_PARENTHESIS SEMICOLON .)
    OPEN_BRACE      reduce using rule 120 (mapFunctions -> NAME POINT GET OPEN_PARENTHESIS clave CLOSE_PARENTHESIS SEMICOLON .)
    IF              reduce using rule 120 (mapFunctions -> NAME POINT GET OPEN_PARENTHESIS clave CLOSE_PARENTHESIS SEMICOLON .)
    $end            reduce using rule 120 (mapFunctions -> NAME POINT GET OPEN_PARENTHESIS clave CLOSE_PARENTHESIS SEMICOLON .)
    CLOSE_BRACE     reduce using rule 120 (mapFunctions -> NAME POINT GET OPEN_PARENTHESIS clave CLOSE_PARENTHESIS SEMICOLON .)


state 267

    (121) mapFunctions -> NAME POINT HAS OPEN_PARENTHESIS clave CLOSE_PARENTHESIS SEMICOLON .

    COMMENTS        reduce using rule 121 (mapFunctions -> NAME POINT HAS OPEN_PARENTHESIS clave CLOSE_PARENTHESIS SEMICOLON .)
    LONGCOMMENT     reduce using rule 121 (mapFunctions -> NAME POINT HAS OPEN_PARENTHESIS clave CLOSE_PARENTHESIS SEMICOLON .)
    NAME            reduce using rule 121 (mapFunctions -> NAME POINT HAS OPEN_PARENTHESIS clave CLOSE_PARENTHESIS SEMICOLON .)
    PRINT           reduce using rule 121 (mapFunctions -> NAME POINT HAS OPEN_PARENTHESIS clave CLOSE_PARENTHESIS SEMICOLON .)
    INPUT           reduce using rule 121 (mapFunctions -> NAME POINT HAS OPEN_PARENTHESIS clave CLOSE_PARENTHESIS SEMICOLON .)
    RETURN          reduce using rule 121 (mapFunctions -> NAME POINT HAS OPEN_PARENTHESIS clave CLOSE_PARENTHESIS SEMICOLON .)
    FUNCTION        reduce using rule 121 (mapFunctions -> NAME POINT HAS OPEN_PARENTHESIS clave CLOSE_PARENTHESIS SEMICOLON .)
    CONST           reduce using rule 121 (mapFunctions -> NAME POINT HAS OPEN_PARENTHESIS clave CLOSE_PARENTHESIS SEMICOLON .)
    LET             reduce using rule 121 (mapFunctions -> NAME POINT HAS OPEN_PARENTHESIS clave CLOSE_PARENTHESIS SEMICOLON .)
    VAR             reduce using rule 121 (mapFunctions -> NAME POINT HAS OPEN_PARENTHESIS clave CLOSE_PARENTHESIS SEMICOLON .)
    OPEN_BRACKET    reduce using rule 121 (mapFunctions -> NAME POINT HAS OPEN_PARENTHESIS clave CLOSE_PARENTHESIS SEMICOLON .)
    NEW             reduce using rule 121 (mapFunctions -> NAME POINT HAS OPEN_PARENTHESIS clave CLOSE_PARENTHESIS SEMICOLON .)
    WHILE           reduce using rule 121 (mapFunctions -> NAME POINT HAS OPEN_PARENTHESIS clave CLOSE_PARENTHESIS SEMICOLON .)
    FOR             reduce using rule 121 (mapFunctions -> NAME POINT HAS OPEN_PARENTHESIS clave CLOSE_PARENTHESIS SEMICOLON .)
    OPEN_BRACE      reduce using rule 121 (mapFunctions -> NAME POINT HAS OPEN_PARENTHESIS clave CLOSE_PARENTHESIS SEMICOLON .)
    IF              reduce using rule 121 (mapFunctions -> NAME POINT HAS OPEN_PARENTHESIS clave CLOSE_PARENTHESIS SEMICOLON .)
    $end            reduce using rule 121 (mapFunctions -> NAME POINT HAS OPEN_PARENTHESIS clave CLOSE_PARENTHESIS SEMICOLON .)
    CLOSE_BRACE     reduce using rule 121 (mapFunctions -> NAME POINT HAS OPEN_PARENTHESIS clave CLOSE_PARENTHESIS SEMICOLON .)


state 268

    (104) arrayFn -> NAME POINT PUSH OPEN_PARENTHESIS item CLOSE_PARENTHESIS SEMICOLON .

    COMMENTS        reduce using rule 104 (arrayFn -> NAME POINT PUSH OPEN_PARENTHESIS item CLOSE_PARENTHESIS SEMICOLON .)
    LONGCOMMENT     reduce using rule 104 (arrayFn -> NAME POINT PUSH OPEN_PARENTHESIS item CLOSE_PARENTHESIS SEMICOLON .)
    NAME            reduce using rule 104 (arrayFn -> NAME POINT PUSH OPEN_PARENTHESIS item CLOSE_PARENTHESIS SEMICOLON .)
    PRINT           reduce using rule 104 (arrayFn -> NAME POINT PUSH OPEN_PARENTHESIS item CLOSE_PARENTHESIS SEMICOLON .)
    INPUT           reduce using rule 104 (arrayFn -> NAME POINT PUSH OPEN_PARENTHESIS item CLOSE_PARENTHESIS SEMICOLON .)
    RETURN          reduce using rule 104 (arrayFn -> NAME POINT PUSH OPEN_PARENTHESIS item CLOSE_PARENTHESIS SEMICOLON .)
    FUNCTION        reduce using rule 104 (arrayFn -> NAME POINT PUSH OPEN_PARENTHESIS item CLOSE_PARENTHESIS SEMICOLON .)
    CONST           reduce using rule 104 (arrayFn -> NAME POINT PUSH OPEN_PARENTHESIS item CLOSE_PARENTHESIS SEMICOLON .)
    LET             reduce using rule 104 (arrayFn -> NAME POINT PUSH OPEN_PARENTHESIS item CLOSE_PARENTHESIS SEMICOLON .)
    VAR             reduce using rule 104 (arrayFn -> NAME POINT PUSH OPEN_PARENTHESIS item CLOSE_PARENTHESIS SEMICOLON .)
    OPEN_BRACKET    reduce using rule 104 (arrayFn -> NAME POINT PUSH OPEN_PARENTHESIS item CLOSE_PARENTHESIS SEMICOLON .)
    NEW             reduce using rule 104 (arrayFn -> NAME POINT PUSH OPEN_PARENTHESIS item CLOSE_PARENTHESIS SEMICOLON .)
    WHILE           reduce using rule 104 (arrayFn -> NAME POINT PUSH OPEN_PARENTHESIS item CLOSE_PARENTHESIS SEMICOLON .)
    FOR             reduce using rule 104 (arrayFn -> NAME POINT PUSH OPEN_PARENTHESIS item CLOSE_PARENTHESIS SEMICOLON .)
    OPEN_BRACE      reduce using rule 104 (arrayFn -> NAME POINT PUSH OPEN_PARENTHESIS item CLOSE_PARENTHESIS SEMICOLON .)
    IF              reduce using rule 104 (arrayFn -> NAME POINT PUSH OPEN_PARENTHESIS item CLOSE_PARENTHESIS SEMICOLON .)
    $end            reduce using rule 104 (arrayFn -> NAME POINT PUSH OPEN_PARENTHESIS item CLOSE_PARENTHESIS SEMICOLON .)
    CLOSE_BRACE     reduce using rule 104 (arrayFn -> NAME POINT PUSH OPEN_PARENTHESIS item CLOSE_PARENTHESIS SEMICOLON .)


state 269

    (105) arrayFn -> NAME POINT UNSHIFT OPEN_PARENTHESIS item CLOSE_PARENTHESIS SEMICOLON .

    COMMENTS        reduce using rule 105 (arrayFn -> NAME POINT UNSHIFT OPEN_PARENTHESIS item CLOSE_PARENTHESIS SEMICOLON .)
    LONGCOMMENT     reduce using rule 105 (arrayFn -> NAME POINT UNSHIFT OPEN_PARENTHESIS item CLOSE_PARENTHESIS SEMICOLON .)
    NAME            reduce using rule 105 (arrayFn -> NAME POINT UNSHIFT OPEN_PARENTHESIS item CLOSE_PARENTHESIS SEMICOLON .)
    PRINT           reduce using rule 105 (arrayFn -> NAME POINT UNSHIFT OPEN_PARENTHESIS item CLOSE_PARENTHESIS SEMICOLON .)
    INPUT           reduce using rule 105 (arrayFn -> NAME POINT UNSHIFT OPEN_PARENTHESIS item CLOSE_PARENTHESIS SEMICOLON .)
    RETURN          reduce using rule 105 (arrayFn -> NAME POINT UNSHIFT OPEN_PARENTHESIS item CLOSE_PARENTHESIS SEMICOLON .)
    FUNCTION        reduce using rule 105 (arrayFn -> NAME POINT UNSHIFT OPEN_PARENTHESIS item CLOSE_PARENTHESIS SEMICOLON .)
    CONST           reduce using rule 105 (arrayFn -> NAME POINT UNSHIFT OPEN_PARENTHESIS item CLOSE_PARENTHESIS SEMICOLON .)
    LET             reduce using rule 105 (arrayFn -> NAME POINT UNSHIFT OPEN_PARENTHESIS item CLOSE_PARENTHESIS SEMICOLON .)
    VAR             reduce using rule 105 (arrayFn -> NAME POINT UNSHIFT OPEN_PARENTHESIS item CLOSE_PARENTHESIS SEMICOLON .)
    OPEN_BRACKET    reduce using rule 105 (arrayFn -> NAME POINT UNSHIFT OPEN_PARENTHESIS item CLOSE_PARENTHESIS SEMICOLON .)
    NEW             reduce using rule 105 (arrayFn -> NAME POINT UNSHIFT OPEN_PARENTHESIS item CLOSE_PARENTHESIS SEMICOLON .)
    WHILE           reduce using rule 105 (arrayFn -> NAME POINT UNSHIFT OPEN_PARENTHESIS item CLOSE_PARENTHESIS SEMICOLON .)
    FOR             reduce using rule 105 (arrayFn -> NAME POINT UNSHIFT OPEN_PARENTHESIS item CLOSE_PARENTHESIS SEMICOLON .)
    OPEN_BRACE      reduce using rule 105 (arrayFn -> NAME POINT UNSHIFT OPEN_PARENTHESIS item CLOSE_PARENTHESIS SEMICOLON .)
    IF              reduce using rule 105 (arrayFn -> NAME POINT UNSHIFT OPEN_PARENTHESIS item CLOSE_PARENTHESIS SEMICOLON .)
    $end            reduce using rule 105 (arrayFn -> NAME POINT UNSHIFT OPEN_PARENTHESIS item CLOSE_PARENTHESIS SEMICOLON .)
    CLOSE_BRACE     reduce using rule 105 (arrayFn -> NAME POINT UNSHIFT OPEN_PARENTHESIS item CLOSE_PARENTHESIS SEMICOLON .)


state 270

    (135) input -> INPUT OPEN_PARENTHESIS element COMMA element CLOSE_PARENTHESIS SEMICOLON .

    COMMENTS        reduce using rule 135 (input -> INPUT OPEN_PARENTHESIS element COMMA element CLOSE_PARENTHESIS SEMICOLON .)
    LONGCOMMENT     reduce using rule 135 (input -> INPUT OPEN_PARENTHESIS element COMMA element CLOSE_PARENTHESIS SEMICOLON .)
    NAME            reduce using rule 135 (input -> INPUT OPEN_PARENTHESIS element COMMA element CLOSE_PARENTHESIS SEMICOLON .)
    PRINT           reduce using rule 135 (input -> INPUT OPEN_PARENTHESIS element COMMA element CLOSE_PARENTHESIS SEMICOLON .)
    INPUT           reduce using rule 135 (input -> INPUT OPEN_PARENTHESIS element COMMA element CLOSE_PARENTHESIS SEMICOLON .)
    RETURN          reduce using rule 135 (input -> INPUT OPEN_PARENTHESIS element COMMA element CLOSE_PARENTHESIS SEMICOLON .)
    FUNCTION        reduce using rule 135 (input -> INPUT OPEN_PARENTHESIS element COMMA element CLOSE_PARENTHESIS SEMICOLON .)
    CONST           reduce using rule 135 (input -> INPUT OPEN_PARENTHESIS element COMMA element CLOSE_PARENTHESIS SEMICOLON .)
    LET             reduce using rule 135 (input -> INPUT OPEN_PARENTHESIS element COMMA element CLOSE_PARENTHESIS SEMICOLON .)
    VAR             reduce using rule 135 (input -> INPUT OPEN_PARENTHESIS element COMMA element CLOSE_PARENTHESIS SEMICOLON .)
    OPEN_BRACKET    reduce using rule 135 (input -> INPUT OPEN_PARENTHESIS element COMMA element CLOSE_PARENTHESIS SEMICOLON .)
    NEW             reduce using rule 135 (input -> INPUT OPEN_PARENTHESIS element COMMA element CLOSE_PARENTHESIS SEMICOLON .)
    WHILE           reduce using rule 135 (input -> INPUT OPEN_PARENTHESIS element COMMA element CLOSE_PARENTHESIS SEMICOLON .)
    FOR             reduce using rule 135 (input -> INPUT OPEN_PARENTHESIS element COMMA element CLOSE_PARENTHESIS SEMICOLON .)
    OPEN_BRACE      reduce using rule 135 (input -> INPUT OPEN_PARENTHESIS element COMMA element CLOSE_PARENTHESIS SEMICOLON .)
    IF              reduce using rule 135 (input -> INPUT OPEN_PARENTHESIS element COMMA element CLOSE_PARENTHESIS SEMICOLON .)
    $end            reduce using rule 135 (input -> INPUT OPEN_PARENTHESIS element COMMA element CLOSE_PARENTHESIS SEMICOLON .)
    CLOSE_BRACE     reduce using rule 135 (input -> INPUT OPEN_PARENTHESIS element COMMA element CLOSE_PARENTHESIS SEMICOLON .)


state 271

    (128) function -> FUNCTION NAME OPEN_PARENTHESIS CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE .

    COMMENTS        reduce using rule 128 (function -> FUNCTION NAME OPEN_PARENTHESIS CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE .)
    LONGCOMMENT     reduce using rule 128 (function -> FUNCTION NAME OPEN_PARENTHESIS CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE .)
    NAME            reduce using rule 128 (function -> FUNCTION NAME OPEN_PARENTHESIS CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE .)
    PRINT           reduce using rule 128 (function -> FUNCTION NAME OPEN_PARENTHESIS CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE .)
    INPUT           reduce using rule 128 (function -> FUNCTION NAME OPEN_PARENTHESIS CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE .)
    RETURN          reduce using rule 128 (function -> FUNCTION NAME OPEN_PARENTHESIS CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE .)
    FUNCTION        reduce using rule 128 (function -> FUNCTION NAME OPEN_PARENTHESIS CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE .)
    CONST           reduce using rule 128 (function -> FUNCTION NAME OPEN_PARENTHESIS CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE .)
    LET             reduce using rule 128 (function -> FUNCTION NAME OPEN_PARENTHESIS CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE .)
    VAR             reduce using rule 128 (function -> FUNCTION NAME OPEN_PARENTHESIS CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE .)
    OPEN_BRACKET    reduce using rule 128 (function -> FUNCTION NAME OPEN_PARENTHESIS CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE .)
    NEW             reduce using rule 128 (function -> FUNCTION NAME OPEN_PARENTHESIS CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE .)
    WHILE           reduce using rule 128 (function -> FUNCTION NAME OPEN_PARENTHESIS CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE .)
    FOR             reduce using rule 128 (function -> FUNCTION NAME OPEN_PARENTHESIS CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE .)
    OPEN_BRACE      reduce using rule 128 (function -> FUNCTION NAME OPEN_PARENTHESIS CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE .)
    IF              reduce using rule 128 (function -> FUNCTION NAME OPEN_PARENTHESIS CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE .)
    $end            reduce using rule 128 (function -> FUNCTION NAME OPEN_PARENTHESIS CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE .)
    CLOSE_BRACE     reduce using rule 128 (function -> FUNCTION NAME OPEN_PARENTHESIS CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE .)


state 272

    (129) function -> FUNCTION NAME OPEN_PARENTHESIS parameter CLOSE_PARENTHESIS OPEN_BRACE expression . CLOSE_BRACE

    CLOSE_BRACE     shift and go to state 280


state 273

    (123) set -> NEW SET OPEN_PARENTHESIS OPEN_BRACKET items CLOSE_BRACKET CLOSE_PARENTHESIS .

    SEMICOLON       reduce using rule 123 (set -> NEW SET OPEN_PARENTHESIS OPEN_BRACKET items CLOSE_BRACKET CLOSE_PARENTHESIS .)
    COMMA           reduce using rule 123 (set -> NEW SET OPEN_PARENTHESIS OPEN_BRACKET items CLOSE_BRACKET CLOSE_PARENTHESIS .)
    CLOSE_BRACKET   reduce using rule 123 (set -> NEW SET OPEN_PARENTHESIS OPEN_BRACKET items CLOSE_BRACKET CLOSE_PARENTHESIS .)
    CLOSE_PARENTHESIS reduce using rule 123 (set -> NEW SET OPEN_PARENTHESIS OPEN_BRACKET items CLOSE_BRACKET CLOSE_PARENTHESIS .)
    CLOSE_BRACE     reduce using rule 123 (set -> NEW SET OPEN_PARENTHESIS OPEN_BRACKET items CLOSE_BRACKET CLOSE_PARENTHESIS .)


state 274

    (117) tupla -> OPEN_BRACKET item COMMA item . CLOSE_BRACKET
    (118) tupla -> OPEN_BRACKET item COMMA item . CLOSE_BRACKET COMMA tupla

    CLOSE_BRACKET   shift and go to state 281


state 275

    (88) while -> WHILE OPEN_PARENTHESIS expBoolean CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE .

    COMMENTS        reduce using rule 88 (while -> WHILE OPEN_PARENTHESIS expBoolean CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE .)
    LONGCOMMENT     reduce using rule 88 (while -> WHILE OPEN_PARENTHESIS expBoolean CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE .)
    NAME            reduce using rule 88 (while -> WHILE OPEN_PARENTHESIS expBoolean CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE .)
    PRINT           reduce using rule 88 (while -> WHILE OPEN_PARENTHESIS expBoolean CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE .)
    INPUT           reduce using rule 88 (while -> WHILE OPEN_PARENTHESIS expBoolean CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE .)
    RETURN          reduce using rule 88 (while -> WHILE OPEN_PARENTHESIS expBoolean CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE .)
    FUNCTION        reduce using rule 88 (while -> WHILE OPEN_PARENTHESIS expBoolean CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE .)
    CONST           reduce using rule 88 (while -> WHILE OPEN_PARENTHESIS expBoolean CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE .)
    LET             reduce using rule 88 (while -> WHILE OPEN_PARENTHESIS expBoolean CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE .)
    VAR             reduce using rule 88 (while -> WHILE OPEN_PARENTHESIS expBoolean CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE .)
    OPEN_BRACKET    reduce using rule 88 (while -> WHILE OPEN_PARENTHESIS expBoolean CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE .)
    NEW             reduce using rule 88 (while -> WHILE OPEN_PARENTHESIS expBoolean CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE .)
    WHILE           reduce using rule 88 (while -> WHILE OPEN_PARENTHESIS expBoolean CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE .)
    FOR             reduce using rule 88 (while -> WHILE OPEN_PARENTHESIS expBoolean CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE .)
    OPEN_BRACE      reduce using rule 88 (while -> WHILE OPEN_PARENTHESIS expBoolean CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE .)
    IF              reduce using rule 88 (while -> WHILE OPEN_PARENTHESIS expBoolean CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE .)
    $end            reduce using rule 88 (while -> WHILE OPEN_PARENTHESIS expBoolean CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE .)
    CLOSE_BRACE     reduce using rule 88 (while -> WHILE OPEN_PARENTHESIS expBoolean CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE .)


state 276

    (89) while -> WHILE OPEN_PARENTHESIS bool CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE .

    COMMENTS        reduce using rule 89 (while -> WHILE OPEN_PARENTHESIS bool CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE .)
    LONGCOMMENT     reduce using rule 89 (while -> WHILE OPEN_PARENTHESIS bool CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE .)
    NAME            reduce using rule 89 (while -> WHILE OPEN_PARENTHESIS bool CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE .)
    PRINT           reduce using rule 89 (while -> WHILE OPEN_PARENTHESIS bool CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE .)
    INPUT           reduce using rule 89 (while -> WHILE OPEN_PARENTHESIS bool CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE .)
    RETURN          reduce using rule 89 (while -> WHILE OPEN_PARENTHESIS bool CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE .)
    FUNCTION        reduce using rule 89 (while -> WHILE OPEN_PARENTHESIS bool CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE .)
    CONST           reduce using rule 89 (while -> WHILE OPEN_PARENTHESIS bool CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE .)
    LET             reduce using rule 89 (while -> WHILE OPEN_PARENTHESIS bool CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE .)
    VAR             reduce using rule 89 (while -> WHILE OPEN_PARENTHESIS bool CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE .)
    OPEN_BRACKET    reduce using rule 89 (while -> WHILE OPEN_PARENTHESIS bool CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE .)
    NEW             reduce using rule 89 (while -> WHILE OPEN_PARENTHESIS bool CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE .)
    WHILE           reduce using rule 89 (while -> WHILE OPEN_PARENTHESIS bool CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE .)
    FOR             reduce using rule 89 (while -> WHILE OPEN_PARENTHESIS bool CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE .)
    OPEN_BRACE      reduce using rule 89 (while -> WHILE OPEN_PARENTHESIS bool CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE .)
    IF              reduce using rule 89 (while -> WHILE OPEN_PARENTHESIS bool CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE .)
    $end            reduce using rule 89 (while -> WHILE OPEN_PARENTHESIS bool CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE .)
    CLOSE_BRACE     reduce using rule 89 (while -> WHILE OPEN_PARENTHESIS bool CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE .)


state 277

    (98) for -> FOR OPEN_PARENTHESIS inicialization SEMICOLON expBoolean SEMICOLON operations . CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE

    CLOSE_PARENTHESIS shift and go to state 282


state 278

    (95) elseIf -> ELSEIF OPEN_PARENTHESIS expBoolean CLOSE_PARENTHESIS OPEN_BRACE expression . CLOSE_BRACE
    (96) elseIf -> ELSEIF OPEN_PARENTHESIS expBoolean CLOSE_PARENTHESIS OPEN_BRACE expression . CLOSE_BRACE elseIf

    CLOSE_BRACE     shift and go to state 283


state 279

    (94) soloIf -> IF OPEN_PARENTHESIS expBoolean CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE .

    ELSEIF          reduce using rule 94 (soloIf -> IF OPEN_PARENTHESIS expBoolean CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE .)
    ELSE            reduce using rule 94 (soloIf -> IF OPEN_PARENTHESIS expBoolean CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE .)
    COMMENTS        reduce using rule 94 (soloIf -> IF OPEN_PARENTHESIS expBoolean CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE .)
    LONGCOMMENT     reduce using rule 94 (soloIf -> IF OPEN_PARENTHESIS expBoolean CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE .)
    NAME            reduce using rule 94 (soloIf -> IF OPEN_PARENTHESIS expBoolean CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE .)
    PRINT           reduce using rule 94 (soloIf -> IF OPEN_PARENTHESIS expBoolean CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE .)
    INPUT           reduce using rule 94 (soloIf -> IF OPEN_PARENTHESIS expBoolean CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE .)
    RETURN          reduce using rule 94 (soloIf -> IF OPEN_PARENTHESIS expBoolean CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE .)
    FUNCTION        reduce using rule 94 (soloIf -> IF OPEN_PARENTHESIS expBoolean CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE .)
    CONST           reduce using rule 94 (soloIf -> IF OPEN_PARENTHESIS expBoolean CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE .)
    LET             reduce using rule 94 (soloIf -> IF OPEN_PARENTHESIS expBoolean CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE .)
    VAR             reduce using rule 94 (soloIf -> IF OPEN_PARENTHESIS expBoolean CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE .)
    OPEN_BRACKET    reduce using rule 94 (soloIf -> IF OPEN_PARENTHESIS expBoolean CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE .)
    NEW             reduce using rule 94 (soloIf -> IF OPEN_PARENTHESIS expBoolean CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE .)
    WHILE           reduce using rule 94 (soloIf -> IF OPEN_PARENTHESIS expBoolean CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE .)
    FOR             reduce using rule 94 (soloIf -> IF OPEN_PARENTHESIS expBoolean CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE .)
    OPEN_BRACE      reduce using rule 94 (soloIf -> IF OPEN_PARENTHESIS expBoolean CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE .)
    IF              reduce using rule 94 (soloIf -> IF OPEN_PARENTHESIS expBoolean CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE .)
    $end            reduce using rule 94 (soloIf -> IF OPEN_PARENTHESIS expBoolean CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE .)
    CLOSE_BRACE     reduce using rule 94 (soloIf -> IF OPEN_PARENTHESIS expBoolean CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE .)


state 280

    (129) function -> FUNCTION NAME OPEN_PARENTHESIS parameter CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE .

    COMMENTS        reduce using rule 129 (function -> FUNCTION NAME OPEN_PARENTHESIS parameter CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE .)
    LONGCOMMENT     reduce using rule 129 (function -> FUNCTION NAME OPEN_PARENTHESIS parameter CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE .)
    NAME            reduce using rule 129 (function -> FUNCTION NAME OPEN_PARENTHESIS parameter CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE .)
    PRINT           reduce using rule 129 (function -> FUNCTION NAME OPEN_PARENTHESIS parameter CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE .)
    INPUT           reduce using rule 129 (function -> FUNCTION NAME OPEN_PARENTHESIS parameter CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE .)
    RETURN          reduce using rule 129 (function -> FUNCTION NAME OPEN_PARENTHESIS parameter CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE .)
    FUNCTION        reduce using rule 129 (function -> FUNCTION NAME OPEN_PARENTHESIS parameter CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE .)
    CONST           reduce using rule 129 (function -> FUNCTION NAME OPEN_PARENTHESIS parameter CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE .)
    LET             reduce using rule 129 (function -> FUNCTION NAME OPEN_PARENTHESIS parameter CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE .)
    VAR             reduce using rule 129 (function -> FUNCTION NAME OPEN_PARENTHESIS parameter CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE .)
    OPEN_BRACKET    reduce using rule 129 (function -> FUNCTION NAME OPEN_PARENTHESIS parameter CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE .)
    NEW             reduce using rule 129 (function -> FUNCTION NAME OPEN_PARENTHESIS parameter CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE .)
    WHILE           reduce using rule 129 (function -> FUNCTION NAME OPEN_PARENTHESIS parameter CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE .)
    FOR             reduce using rule 129 (function -> FUNCTION NAME OPEN_PARENTHESIS parameter CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE .)
    OPEN_BRACE      reduce using rule 129 (function -> FUNCTION NAME OPEN_PARENTHESIS parameter CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE .)
    IF              reduce using rule 129 (function -> FUNCTION NAME OPEN_PARENTHESIS parameter CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE .)
    $end            reduce using rule 129 (function -> FUNCTION NAME OPEN_PARENTHESIS parameter CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE .)
    CLOSE_BRACE     reduce using rule 129 (function -> FUNCTION NAME OPEN_PARENTHESIS parameter CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE .)


state 281

    (117) tupla -> OPEN_BRACKET item COMMA item CLOSE_BRACKET .
    (118) tupla -> OPEN_BRACKET item COMMA item CLOSE_BRACKET . COMMA tupla

    CLOSE_PARENTHESIS reduce using rule 117 (tupla -> OPEN_BRACKET item COMMA item CLOSE_BRACKET .)
    COMMA           shift and go to state 284


state 282

    (98) for -> FOR OPEN_PARENTHESIS inicialization SEMICOLON expBoolean SEMICOLON operations CLOSE_PARENTHESIS . OPEN_BRACE expression CLOSE_BRACE

    OPEN_BRACE      shift and go to state 285


state 283

    (95) elseIf -> ELSEIF OPEN_PARENTHESIS expBoolean CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE .
    (96) elseIf -> ELSEIF OPEN_PARENTHESIS expBoolean CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE . elseIf
    (95) elseIf -> . ELSEIF OPEN_PARENTHESIS expBoolean CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE
    (96) elseIf -> . ELSEIF OPEN_PARENTHESIS expBoolean CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE elseIf

    ELSE            reduce using rule 95 (elseIf -> ELSEIF OPEN_PARENTHESIS expBoolean CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE .)
    COMMENTS        reduce using rule 95 (elseIf -> ELSEIF OPEN_PARENTHESIS expBoolean CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE .)
    LONGCOMMENT     reduce using rule 95 (elseIf -> ELSEIF OPEN_PARENTHESIS expBoolean CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE .)
    NAME            reduce using rule 95 (elseIf -> ELSEIF OPEN_PARENTHESIS expBoolean CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE .)
    PRINT           reduce using rule 95 (elseIf -> ELSEIF OPEN_PARENTHESIS expBoolean CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE .)
    INPUT           reduce using rule 95 (elseIf -> ELSEIF OPEN_PARENTHESIS expBoolean CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE .)
    RETURN          reduce using rule 95 (elseIf -> ELSEIF OPEN_PARENTHESIS expBoolean CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE .)
    FUNCTION        reduce using rule 95 (elseIf -> ELSEIF OPEN_PARENTHESIS expBoolean CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE .)
    CONST           reduce using rule 95 (elseIf -> ELSEIF OPEN_PARENTHESIS expBoolean CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE .)
    LET             reduce using rule 95 (elseIf -> ELSEIF OPEN_PARENTHESIS expBoolean CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE .)
    VAR             reduce using rule 95 (elseIf -> ELSEIF OPEN_PARENTHESIS expBoolean CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE .)
    OPEN_BRACKET    reduce using rule 95 (elseIf -> ELSEIF OPEN_PARENTHESIS expBoolean CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE .)
    NEW             reduce using rule 95 (elseIf -> ELSEIF OPEN_PARENTHESIS expBoolean CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE .)
    WHILE           reduce using rule 95 (elseIf -> ELSEIF OPEN_PARENTHESIS expBoolean CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE .)
    FOR             reduce using rule 95 (elseIf -> ELSEIF OPEN_PARENTHESIS expBoolean CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE .)
    OPEN_BRACE      reduce using rule 95 (elseIf -> ELSEIF OPEN_PARENTHESIS expBoolean CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE .)
    IF              reduce using rule 95 (elseIf -> ELSEIF OPEN_PARENTHESIS expBoolean CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE .)
    $end            reduce using rule 95 (elseIf -> ELSEIF OPEN_PARENTHESIS expBoolean CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE .)
    CLOSE_BRACE     reduce using rule 95 (elseIf -> ELSEIF OPEN_PARENTHESIS expBoolean CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE .)
    ELSEIF          shift and go to state 93

    elseIf                         shift and go to state 286

state 284

    (118) tupla -> OPEN_BRACKET item COMMA item CLOSE_BRACKET COMMA . tupla
    (117) tupla -> . OPEN_BRACKET item COMMA item CLOSE_BRACKET
    (118) tupla -> . OPEN_BRACKET item COMMA item CLOSE_BRACKET COMMA tupla

    OPEN_BRACKET    shift and go to state 196

    tupla                          shift and go to state 287

state 285

    (98) for -> FOR OPEN_PARENTHESIS inicialization SEMICOLON expBoolean SEMICOLON operations CLOSE_PARENTHESIS OPEN_BRACE . expression CLOSE_BRACE
    (1) expression -> . semiExpression
    (2) expression -> . semiExpression expression
    (3) semiExpression -> . variable
    (4) semiExpression -> . dataStruct SEMICOLON
    (5) semiExpression -> . controlStruct
    (6) semiExpression -> . methodsSet
    (7) semiExpression -> . mapFunctions
    (8) semiExpression -> . arrayFn
    (9) semiExpression -> . declaration
    (10) semiExpression -> . print
    (11) semiExpression -> . input
    (12) semiExpression -> . return
    (13) semiExpression -> . function
    (14) semiExpression -> . COMMENTS
    (15) semiExpression -> . LONGCOMMENT
    (16) semiExpression -> . asigOp
    (24) variable -> . type NAME IGUAL datatype SEMICOLON
    (25) variable -> . NAME IGUAL datatype SEMICOLON
    (26) variable -> . type NAME SEMICOLON
    (27) variable -> . type NAME IGUAL input
    (28) variable -> . NAME IGUAL input
    (64) dataStruct -> . array
    (65) dataStruct -> . set
    (66) dataStruct -> . map
    (61) controlStruct -> . while
    (62) controlStruct -> . for
    (63) controlStruct -> . if
    (125) methodsSet -> . NAME POINT ADD OPEN_PARENTHESIS element CLOSE_PARENTHESIS SEMICOLON
    (126) methodsSet -> . NAME POINT DELETE OPEN_PARENTHESIS element CLOSE_PARENTHESIS SEMICOLON
    (127) methodsSet -> . NAME POINT CLEAR OPEN_PARENTHESIS CLOSE_PARENTHESIS SEMICOLON
    (119) mapFunctions -> . NAME POINT CLEAR OPEN_PARENTHESIS CLOSE_PARENTHESIS SEMICOLON
    (120) mapFunctions -> . NAME POINT GET OPEN_PARENTHESIS clave CLOSE_PARENTHESIS SEMICOLON
    (121) mapFunctions -> . NAME POINT HAS OPEN_PARENTHESIS clave CLOSE_PARENTHESIS SEMICOLON
    (103) arrayFn -> . NAME POINT POP OPEN_PARENTHESIS CLOSE_PARENTHESIS SEMICOLON
    (104) arrayFn -> . NAME POINT PUSH OPEN_PARENTHESIS item CLOSE_PARENTHESIS SEMICOLON
    (105) arrayFn -> . NAME POINT UNSHIFT OPEN_PARENTHESIS item CLOSE_PARENTHESIS SEMICOLON
    (74) declaration -> . NAME IGUAL element SEMICOLON
    (133) print -> . PRINT OPEN_PARENTHESIS datatype CLOSE_PARENTHESIS SEMICOLON
    (134) print -> . PRINT OPEN_PARENTHESIS CLOSE_PARENTHESIS SEMICOLON
    (135) input -> . INPUT OPEN_PARENTHESIS element COMMA element CLOSE_PARENTHESIS SEMICOLON
    (136) input -> . INPUT OPEN_PARENTHESIS element CLOSE_PARENTHESIS SEMICOLON
    (137) input -> . INPUT OPEN_PARENTHESIS CLOSE_PARENTHESIS SEMICOLON
    (132) return -> . RETURN datatype SEMICOLON
    (128) function -> . FUNCTION NAME OPEN_PARENTHESIS CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE
    (129) function -> . FUNCTION NAME OPEN_PARENTHESIS parameter CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE
    (60) asigOp -> . NAME operadorAsig number SEMICOLON
    (29) type -> . CONST
    (30) type -> . LET
    (31) type -> . VAR
    (101) array -> . OPEN_BRACKET items CLOSE_BRACKET
    (102) array -> . NEW ARRAY OPEN_PARENTHESIS items CLOSE_PARENTHESIS
    (122) set -> . NEW SET OPEN_PARENTHESIS CLOSE_PARENTHESIS
    (123) set -> . NEW SET OPEN_PARENTHESIS OPEN_BRACKET items CLOSE_BRACKET CLOSE_PARENTHESIS
    (124) set -> . NEW SET OPEN_PARENTHESIS element CLOSE_PARENTHESIS
    (106) map -> . iniciarMap
    (107) map -> . escribirMap
    (88) while -> . WHILE OPEN_PARENTHESIS expBoolean CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE
    (89) while -> . WHILE OPEN_PARENTHESIS bool CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE
    (98) for -> . FOR OPEN_PARENTHESIS inicialization SEMICOLON expBoolean SEMICOLON operations CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE
    (90) if -> . soloIf
    (91) if -> . soloIf elseIf
    (92) if -> . soloIf elseIf else
    (93) if -> . soloIf else
    (108) iniciarMap -> . NEW MAP OPEN_PARENTHESIS CLOSE_PARENTHESIS
    (109) iniciarMap -> . NEW MAP OPEN_PARENTHESIS tupla CLOSE_PARENTHESIS
    (110) escribirMap -> . OPEN_BRACE claveValor CLOSE_BRACE
    (94) soloIf -> . IF OPEN_PARENTHESIS expBoolean CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE

    COMMENTS        shift and go to state 14
    LONGCOMMENT     shift and go to state 15
    NAME            shift and go to state 18
    PRINT           shift and go to state 25
    INPUT           shift and go to state 26
    RETURN          shift and go to state 27
    FUNCTION        shift and go to state 28
    CONST           shift and go to state 30
    LET             shift and go to state 31
    VAR             shift and go to state 32
    OPEN_BRACKET    shift and go to state 33
    NEW             shift and go to state 34
    WHILE           shift and go to state 37
    FOR             shift and go to state 38
    OPEN_BRACE      shift and go to state 29
    IF              shift and go to state 40

    expression                     shift and go to state 288
    semiExpression                 shift and go to state 2
    variable                       shift and go to state 3
    dataStruct                     shift and go to state 4
    controlStruct                  shift and go to state 5
    methodsSet                     shift and go to state 6
    mapFunctions                   shift and go to state 7
    arrayFn                        shift and go to state 8
    declaration                    shift and go to state 9
    print                          shift and go to state 10
    input                          shift and go to state 11
    return                         shift and go to state 12
    function                       shift and go to state 13
    asigOp                         shift and go to state 16
    type                           shift and go to state 17
    array                          shift and go to state 19
    set                            shift and go to state 20
    map                            shift and go to state 21
    while                          shift and go to state 22
    for                            shift and go to state 23
    if                             shift and go to state 24
    iniciarMap                     shift and go to state 35
    escribirMap                    shift and go to state 36
    soloIf                         shift and go to state 39

state 286

    (96) elseIf -> ELSEIF OPEN_PARENTHESIS expBoolean CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE elseIf .

    ELSE            reduce using rule 96 (elseIf -> ELSEIF OPEN_PARENTHESIS expBoolean CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE elseIf .)
    COMMENTS        reduce using rule 96 (elseIf -> ELSEIF OPEN_PARENTHESIS expBoolean CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE elseIf .)
    LONGCOMMENT     reduce using rule 96 (elseIf -> ELSEIF OPEN_PARENTHESIS expBoolean CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE elseIf .)
    NAME            reduce using rule 96 (elseIf -> ELSEIF OPEN_PARENTHESIS expBoolean CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE elseIf .)
    PRINT           reduce using rule 96 (elseIf -> ELSEIF OPEN_PARENTHESIS expBoolean CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE elseIf .)
    INPUT           reduce using rule 96 (elseIf -> ELSEIF OPEN_PARENTHESIS expBoolean CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE elseIf .)
    RETURN          reduce using rule 96 (elseIf -> ELSEIF OPEN_PARENTHESIS expBoolean CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE elseIf .)
    FUNCTION        reduce using rule 96 (elseIf -> ELSEIF OPEN_PARENTHESIS expBoolean CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE elseIf .)
    CONST           reduce using rule 96 (elseIf -> ELSEIF OPEN_PARENTHESIS expBoolean CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE elseIf .)
    LET             reduce using rule 96 (elseIf -> ELSEIF OPEN_PARENTHESIS expBoolean CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE elseIf .)
    VAR             reduce using rule 96 (elseIf -> ELSEIF OPEN_PARENTHESIS expBoolean CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE elseIf .)
    OPEN_BRACKET    reduce using rule 96 (elseIf -> ELSEIF OPEN_PARENTHESIS expBoolean CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE elseIf .)
    NEW             reduce using rule 96 (elseIf -> ELSEIF OPEN_PARENTHESIS expBoolean CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE elseIf .)
    WHILE           reduce using rule 96 (elseIf -> ELSEIF OPEN_PARENTHESIS expBoolean CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE elseIf .)
    FOR             reduce using rule 96 (elseIf -> ELSEIF OPEN_PARENTHESIS expBoolean CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE elseIf .)
    OPEN_BRACE      reduce using rule 96 (elseIf -> ELSEIF OPEN_PARENTHESIS expBoolean CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE elseIf .)
    IF              reduce using rule 96 (elseIf -> ELSEIF OPEN_PARENTHESIS expBoolean CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE elseIf .)
    $end            reduce using rule 96 (elseIf -> ELSEIF OPEN_PARENTHESIS expBoolean CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE elseIf .)
    CLOSE_BRACE     reduce using rule 96 (elseIf -> ELSEIF OPEN_PARENTHESIS expBoolean CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE elseIf .)


state 287

    (118) tupla -> OPEN_BRACKET item COMMA item CLOSE_BRACKET COMMA tupla .

    CLOSE_PARENTHESIS reduce using rule 118 (tupla -> OPEN_BRACKET item COMMA item CLOSE_BRACKET COMMA tupla .)


state 288

    (98) for -> FOR OPEN_PARENTHESIS inicialization SEMICOLON expBoolean SEMICOLON operations CLOSE_PARENTHESIS OPEN_BRACE expression . CLOSE_BRACE

    CLOSE_BRACE     shift and go to state 289


state 289

    (98) for -> FOR OPEN_PARENTHESIS inicialization SEMICOLON expBoolean SEMICOLON operations CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE .

    COMMENTS        reduce using rule 98 (for -> FOR OPEN_PARENTHESIS inicialization SEMICOLON expBoolean SEMICOLON operations CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE .)
    LONGCOMMENT     reduce using rule 98 (for -> FOR OPEN_PARENTHESIS inicialization SEMICOLON expBoolean SEMICOLON operations CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE .)
    NAME            reduce using rule 98 (for -> FOR OPEN_PARENTHESIS inicialization SEMICOLON expBoolean SEMICOLON operations CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE .)
    PRINT           reduce using rule 98 (for -> FOR OPEN_PARENTHESIS inicialization SEMICOLON expBoolean SEMICOLON operations CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE .)
    INPUT           reduce using rule 98 (for -> FOR OPEN_PARENTHESIS inicialization SEMICOLON expBoolean SEMICOLON operations CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE .)
    RETURN          reduce using rule 98 (for -> FOR OPEN_PARENTHESIS inicialization SEMICOLON expBoolean SEMICOLON operations CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE .)
    FUNCTION        reduce using rule 98 (for -> FOR OPEN_PARENTHESIS inicialization SEMICOLON expBoolean SEMICOLON operations CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE .)
    CONST           reduce using rule 98 (for -> FOR OPEN_PARENTHESIS inicialization SEMICOLON expBoolean SEMICOLON operations CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE .)
    LET             reduce using rule 98 (for -> FOR OPEN_PARENTHESIS inicialization SEMICOLON expBoolean SEMICOLON operations CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE .)
    VAR             reduce using rule 98 (for -> FOR OPEN_PARENTHESIS inicialization SEMICOLON expBoolean SEMICOLON operations CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE .)
    OPEN_BRACKET    reduce using rule 98 (for -> FOR OPEN_PARENTHESIS inicialization SEMICOLON expBoolean SEMICOLON operations CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE .)
    NEW             reduce using rule 98 (for -> FOR OPEN_PARENTHESIS inicialization SEMICOLON expBoolean SEMICOLON operations CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE .)
    WHILE           reduce using rule 98 (for -> FOR OPEN_PARENTHESIS inicialization SEMICOLON expBoolean SEMICOLON operations CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE .)
    FOR             reduce using rule 98 (for -> FOR OPEN_PARENTHESIS inicialization SEMICOLON expBoolean SEMICOLON operations CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE .)
    OPEN_BRACE      reduce using rule 98 (for -> FOR OPEN_PARENTHESIS inicialization SEMICOLON expBoolean SEMICOLON operations CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE .)
    IF              reduce using rule 98 (for -> FOR OPEN_PARENTHESIS inicialization SEMICOLON expBoolean SEMICOLON operations CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE .)
    $end            reduce using rule 98 (for -> FOR OPEN_PARENTHESIS inicialization SEMICOLON expBoolean SEMICOLON operations CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE .)
    CLOSE_BRACE     reduce using rule 98 (for -> FOR OPEN_PARENTHESIS inicialization SEMICOLON expBoolean SEMICOLON operations CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for AND in state 137 resolved as shift
WARNING: shift/reduce conflict for OR in state 137 resolved as shift
WARNING: shift/reduce conflict for CLOSE_PARENTHESIS in state 149 resolved as shift
WARNING: shift/reduce conflict for AND in state 188 resolved as shift
WARNING: shift/reduce conflict for OR in state 188 resolved as shift
WARNING: reduce/reduce conflict in state 56 resolved using rule (datatype -> number)
WARNING: rejected rule (operations -> number) in state 56
WARNING: reduce/reduce conflict in state 57 resolved using rule (datatype -> NAME)
WARNING: rejected rule (operations -> NAME) in state 57
WARNING: reduce/reduce conflict in state 82 resolved using rule (datatype -> number)
WARNING: rejected rule (operations -> number) in state 82
WARNING: reduce/reduce conflict in state 83 resolved using rule (datatype -> NAME)
WARNING: rejected rule (operations -> NAME) in state 83
WARNING: reduce/reduce conflict in state 84 resolved using rule (datatype -> STRING)
WARNING: rejected rule (element -> STRING) in state 84
WARNING: reduce/reduce conflict in state 98 resolved using rule (datatype -> NAME)
WARNING: rejected rule (element -> NAME) in state 98
WARNING: reduce/reduce conflict in state 98 resolved using rule (datatype -> NAME)
WARNING: rejected rule (operations -> NAME) in state 98
WARNING: reduce/reduce conflict in state 102 resolved using rule (datatype -> number)
WARNING: rejected rule (element -> number) in state 102
WARNING: reduce/reduce conflict in state 102 resolved using rule (datatype -> number)
WARNING: rejected rule (operations -> number) in state 102
WARNING: reduce/reduce conflict in state 244 resolved using rule (mapFunctions -> NAME POINT CLEAR OPEN_PARENTHESIS CLOSE_PARENTHESIS SEMICOLON)
WARNING: rejected rule (methodsSet -> NAME POINT CLEAR OPEN_PARENTHESIS CLOSE_PARENTHESIS SEMICOLON) in state 244
WARNING: Rule (methodsSet -> NAME POINT CLEAR OPEN_PARENTHESIS CLOSE_PARENTHESIS SEMICOLON) is never reduced

Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    BACKSLASH
    BOOLEAN
    COMMENTS
    DIVIGUAL
    DOUBLE_QUOTES
    INT
    LINE_BREAK
    LONGCOMMENT
    MASIGUAL
    MENOSIGUAL
    MODIGUAL
    NULL
    PORIGUAL
    POTIGUAL
    SINGLE_QUOTE

Grammar

Rule 0     S' -> expression
Rule 1     expression -> variable
Rule 2     expression -> variable expression
Rule 3     expression -> dataStruct
Rule 4     expression -> dataStruct expression
Rule 5     expression -> controlStruct
Rule 6     expression -> controlStruct expression
Rule 7     expression -> methodsSet
Rule 8     expression -> mapFunctions
Rule 9     expression -> arrayFn
Rule 10    expression -> declaration
Rule 11    expression -> print
Rule 12    expression -> return
Rule 13    expression -> function
Rule 14    number -> INTEGER
Rule 15    number -> FLOAT
Rule 16    number -> RESTA INTEGER
Rule 17    number -> RESTA FLOAT
Rule 18    variable -> type NAME IGUAL datatype SEMICOLON
Rule 19    variable -> type NAME IGUAL operations SEMICOLON
Rule 20    variable -> NAME IGUAL datatype SEMICOLON
Rule 21    controlStruct -> while
Rule 22    controlStruct -> for
Rule 23    controlStruct -> if
Rule 24    dataStruct -> array
Rule 25    dataStruct -> set
Rule 26    dataStruct -> map
Rule 27    while -> WHILE OPEN_PARENTHESIS controlArg CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE
Rule 28    while -> WHILE OPEN_PARENTHESIS bool CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE
Rule 29    if -> soloIf
Rule 30    if -> soloIf elseIf
Rule 31    if -> soloIf elseIf else
Rule 32    if -> soloIf else
Rule 33    soloIf -> IF OPEN_PARENTHESIS controlArg CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE
Rule 34    elseIf -> ELSEIF OPEN_PARENTHESIS controlArg CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE
Rule 35    elseIf -> ELSEIF OPEN_PARENTHESIS controlArg CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE soloIf
Rule 36    else -> ELSE OPEN_BRACE expression CLOSE_BRACE
Rule 37    controlArg -> element clause element
Rule 38    for -> FOR OPEN_PARENTHESIS inicialization SEMICOLON expBoolean SEMICOLON operations CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE
Rule 39    inicialization -> type NAME IGUAL number
Rule 40    inicialization -> NAME IGUAL number
Rule 41    operations -> number operand number
Rule 42    operations -> NAME
Rule 43    operations -> NAME SUMA SUMA
Rule 44    operations -> number
Rule 45    operations -> number operand NAME operations
Rule 46    operations -> NAME operand number operations
Rule 47    operations -> number operand NAME
Rule 48    operations -> NAME operand number
Rule 49    operations -> NAME operand NAME operations
Rule 50    operations -> number operand number operand operations
Rule 51    datatype -> number
Rule 52    datatype -> STRING
Rule 53    datatype -> CHAR
Rule 54    datatype -> operations
Rule 55    operand -> SUMA
Rule 56    operand -> RESTA
Rule 57    operand -> MULTIPLICACION
Rule 58    operand -> DIVISION
Rule 59    bool -> TRUE
Rule 60    bool -> FALSE
Rule 61    type -> CONST
Rule 62    type -> LET
Rule 63    type -> VAR
Rule 64    clause -> IGUALIGUAL
Rule 65    clause -> DIFERENTE
Rule 66    clause -> MAYORQUE
Rule 67    clause -> MAYORIGUALQUE
Rule 68    clause -> MENORQUE
Rule 69    clause -> MENORIGUALQUE
Rule 70    value -> NAME
Rule 71    value -> number
Rule 72    array -> type NAME IGUAL OPEN_BRACKET items CLOSE_BRACKET SEMICOLON
Rule 73    array -> type NAME IGUAL NEW ARRAY OPEN_PARENTHESIS items CLOSE_PARENTHESIS SEMICOLON
Rule 74    map -> iniciarMap
Rule 75    map -> escribirMap
Rule 76    map -> generarMap
Rule 77    iniciarMap -> variable IGUAL NEW MAP OPEN_PARENTHESIS CLOSE_PARENTHESIS SEMICOLON
Rule 78    escribirMap -> variable IGUAL OPEN_BRACE claveValor CLOSE_BRACE
Rule 79    claveValor -> clave COLON valor
Rule 80    claveValor -> clave COLON valor COMMA claveValor
Rule 81    clave -> datatype
Rule 82    valor -> datatype
Rule 83    valor -> dataStruct
Rule 84    generarMap -> variable IGUAL OPEN_BRACE tuplas CLOSE_BRACE
Rule 85    tuplas -> tupla
Rule 86    tuplas -> tupla COMMA tuplas
Rule 87    tupla -> OPEN_BRACKET datatype CLOSE_BRACKET SEMICOLON
Rule 88    tupla -> OPEN_BRACKET datatype COMMA datatype CLOSE_BRACKET SEMICOLON
Rule 89    mapFunctions -> NAME POINT CLEAR OPEN_PARENTHESIS CLOSE_PARENTHESIS SEMICOLON
Rule 90    mapFunctions -> NAME POINT GET OPEN_PARENTHESIS clave CLOSE_PARENTHESIS SEMICOLON
Rule 91    mapFunctions -> NAME POINT HAS OPEN_PARENTHESIS clave CLOSE_PARENTHESIS SEMICOLON
Rule 92    arrayFn -> NAME POINT POP OPEN_PARENTHESIS CLOSE_PARENTHESIS SEMICOLON
Rule 93    arrayFn -> NAME POINT PUSH OPEN_PARENTHESIS element CLOSE_PARENTHESIS SEMICOLON
Rule 94    arrayFn -> NAME POINT UNSHIFT OPEN_PARENTHESIS element CLOSE_PARENTHESIS SEMICOLON
Rule 95    set -> type NAME IGUAL NEW SET OPEN_PARENTHESIS CLOSE_PARENTHESIS SEMICOLON
Rule 96    set -> type NAME IGUAL NEW SET OPEN_PARENTHESIS OPEN_BRACKET items CLOSE_BRACKET CLOSE_PARENTHESIS SEMICOLON
Rule 97    set -> type NAME IGUAL NEW SET OPEN_PARENTHESIS element CLOSE_PARENTHESIS SEMICOLON
Rule 98    set -> NAME IGUAL NEW SET OPEN_PARENTHESIS CLOSE_PARENTHESIS SEMICOLON
Rule 99    set -> NAME IGUAL NEW SET OPEN_PARENTHESIS OPEN_BRACKET items CLOSE_BRACKET CLOSE_PARENTHESIS SEMICOLON
Rule 100   set -> NAME IGUAL NEW SET OPEN_PARENTHESIS element CLOSE_PARENTHESIS SEMICOLON
Rule 101   methodsSet -> NAME POINT ADD OPEN_PARENTHESIS element CLOSE_PARENTHESIS SEMICOLON
Rule 102   methodsSet -> NAME POINT DELETE OPEN_PARENTHESIS element CLOSE_PARENTHESIS SEMICOLON
Rule 103   methodsSet -> NAME POINT CLEAR OPEN_PARENTHESIS CLOSE_PARENTHESIS SEMICOLON
Rule 104   items -> number
Rule 105   items -> cadena
Rule 106   cadena -> STRING
Rule 107   cadena -> STRING COMMA cadena
Rule 108   element -> STRING
Rule 109   element -> number
Rule 110   element -> NAME
Rule 111   declaration -> NAME IGUAL element SEMICOLON
Rule 112   logicalOperator -> AND
Rule 113   logicalOperator -> OR
Rule 114   expBoolean -> controlArg
Rule 115   expBoolean -> bool
Rule 116   expBoolean -> NOT expBoolean
Rule 117   expBoolean -> expBoolean logicalOperator expBoolean
Rule 118   function -> FUNCTION NAME OPEN_PARENTHESIS CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE
Rule 119   function -> FUNCTION NAME OPEN_PARENTHESIS parameter CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE
Rule 120   parameter -> element
Rule 121   parameter -> element parameter
Rule 122   return -> RETURN element SEMICOLON
Rule 123   print -> PRINT OPEN_PARENTHESIS CLOSE_PARENTHESIS SEMICOLON

Terminals, with rules where they appear

ADD                  : 101
AND                  : 112
ARRAY                : 73
BACKSLASH            : 
BOOLEAN              : 
CHAR                 : 53
CLEAR                : 89 103
CLOSE_BRACE          : 27 28 33 34 35 36 38 78 84 118 119
CLOSE_BRACKET        : 72 87 88 96 99
CLOSE_PARENTHESIS    : 27 28 33 34 35 38 73 77 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 118 119 123
COLON                : 79 80
COMMA                : 80 86 88 107
COMMENTS             : 
CONST                : 61
DELETE               : 102
DIFERENTE            : 65
DIVIGUAL             : 
DIVISION             : 58
DOUBLE_QUOTES        : 
ELSE                 : 36
ELSEIF               : 34 35
FALSE                : 60
FLOAT                : 15 17
FOR                  : 38
FUNCTION             : 118 119
GET                  : 90
HAS                  : 91
IF                   : 33
IGUAL                : 18 19 20 39 40 72 73 77 78 84 95 96 97 98 99 100 111
IGUALIGUAL           : 64
INT                  : 
INTEGER              : 14 16
LET                  : 62
LINE_BREAK           : 
LONGCOMMENT          : 
MAP                  : 77
MASIGUAL             : 
MAYORIGUALQUE        : 67
MAYORQUE             : 66
MENORIGUALQUE        : 69
MENORQUE             : 68
MENOSIGUAL           : 
MODIGUAL             : 
MULTIPLICACION       : 57
NAME                 : 18 19 20 39 40 42 43 45 46 47 48 49 49 70 72 73 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 110 111 118 119
NEW                  : 73 77 95 96 97 98 99 100
NOT                  : 116
NULL                 : 
OPEN_BRACE           : 27 28 33 34 35 36 38 78 84 118 119
OPEN_BRACKET         : 72 87 88 96 99
OPEN_PARENTHESIS     : 27 28 33 34 35 38 73 77 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 118 119 123
OR                   : 113
POINT                : 89 90 91 92 93 94 101 102 103
POP                  : 92
PORIGUAL             : 
POTIGUAL             : 
PRINT                : 123
PUSH                 : 93
RESTA                : 16 17 56
RETURN               : 122
SEMICOLON            : 18 19 20 38 38 72 73 77 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 111 122 123
SET                  : 95 96 97 98 99 100
SINGLE_QUOTE         : 
STRING               : 52 106 107 108
SUMA                 : 43 43 55
TRUE                 : 59
UNSHIFT              : 94
VAR                  : 63
WHILE                : 27 28
error                : 

Nonterminals, with rules where they appear

array                : 24
arrayFn              : 9
bool                 : 28 115
cadena               : 105 107
clause               : 37
clave                : 79 80 90 91
claveValor           : 78 80
controlArg           : 27 33 34 35 114
controlStruct        : 5 6
dataStruct           : 3 4 83
datatype             : 18 20 81 82 87 88 88
declaration          : 10
element              : 37 37 93 94 97 100 101 102 111 120 121 122
else                 : 31 32
elseIf               : 30 31
escribirMap          : 75
expBoolean           : 38 116 117 117
expression           : 2 4 6 27 28 33 34 35 36 38 118 119 0
for                  : 22
function             : 13
generarMap           : 76
if                   : 23
inicialization       : 38
iniciarMap           : 74
items                : 72 73 96 99
logicalOperator      : 117
map                  : 26
mapFunctions         : 8
methodsSet           : 7
number               : 39 40 41 41 44 45 46 47 48 50 50 51 71 104 109
operand              : 41 45 46 47 48 49 50 50
operations           : 19 38 45 46 49 50 54
parameter            : 119 121
print                : 11
return               : 12
set                  : 25
soloIf               : 29 30 31 32 35
tupla                : 85 86
tuplas               : 84 86
type                 : 18 19 39 72 73 95 96 97
valor                : 79 80
value                : 
variable             : 1 2 77 78 84
while                : 21

Parsing method: LALR

state 0

    (0) S' -> . expression
    (1) expression -> . variable
    (2) expression -> . variable expression
    (3) expression -> . dataStruct
    (4) expression -> . dataStruct expression
    (5) expression -> . controlStruct
    (6) expression -> . controlStruct expression
    (7) expression -> . methodsSet
    (8) expression -> . mapFunctions
    (9) expression -> . arrayFn
    (10) expression -> . declaration
    (11) expression -> . print
    (12) expression -> . return
    (13) expression -> . function
    (18) variable -> . type NAME IGUAL datatype SEMICOLON
    (19) variable -> . type NAME IGUAL operations SEMICOLON
    (20) variable -> . NAME IGUAL datatype SEMICOLON
    (24) dataStruct -> . array
    (25) dataStruct -> . set
    (26) dataStruct -> . map
    (21) controlStruct -> . while
    (22) controlStruct -> . for
    (23) controlStruct -> . if
    (101) methodsSet -> . NAME POINT ADD OPEN_PARENTHESIS element CLOSE_PARENTHESIS SEMICOLON
    (102) methodsSet -> . NAME POINT DELETE OPEN_PARENTHESIS element CLOSE_PARENTHESIS SEMICOLON
    (103) methodsSet -> . NAME POINT CLEAR OPEN_PARENTHESIS CLOSE_PARENTHESIS SEMICOLON
    (89) mapFunctions -> . NAME POINT CLEAR OPEN_PARENTHESIS CLOSE_PARENTHESIS SEMICOLON
    (90) mapFunctions -> . NAME POINT GET OPEN_PARENTHESIS clave CLOSE_PARENTHESIS SEMICOLON
    (91) mapFunctions -> . NAME POINT HAS OPEN_PARENTHESIS clave CLOSE_PARENTHESIS SEMICOLON
    (92) arrayFn -> . NAME POINT POP OPEN_PARENTHESIS CLOSE_PARENTHESIS SEMICOLON
    (93) arrayFn -> . NAME POINT PUSH OPEN_PARENTHESIS element CLOSE_PARENTHESIS SEMICOLON
    (94) arrayFn -> . NAME POINT UNSHIFT OPEN_PARENTHESIS element CLOSE_PARENTHESIS SEMICOLON
    (111) declaration -> . NAME IGUAL element SEMICOLON
    (123) print -> . PRINT OPEN_PARENTHESIS CLOSE_PARENTHESIS SEMICOLON
    (122) return -> . RETURN element SEMICOLON
    (118) function -> . FUNCTION NAME OPEN_PARENTHESIS CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE
    (119) function -> . FUNCTION NAME OPEN_PARENTHESIS parameter CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE
    (61) type -> . CONST
    (62) type -> . LET
    (63) type -> . VAR
    (72) array -> . type NAME IGUAL OPEN_BRACKET items CLOSE_BRACKET SEMICOLON
    (73) array -> . type NAME IGUAL NEW ARRAY OPEN_PARENTHESIS items CLOSE_PARENTHESIS SEMICOLON
    (95) set -> . type NAME IGUAL NEW SET OPEN_PARENTHESIS CLOSE_PARENTHESIS SEMICOLON
    (96) set -> . type NAME IGUAL NEW SET OPEN_PARENTHESIS OPEN_BRACKET items CLOSE_BRACKET CLOSE_PARENTHESIS SEMICOLON
    (97) set -> . type NAME IGUAL NEW SET OPEN_PARENTHESIS element CLOSE_PARENTHESIS SEMICOLON
    (98) set -> . NAME IGUAL NEW SET OPEN_PARENTHESIS CLOSE_PARENTHESIS SEMICOLON
    (99) set -> . NAME IGUAL NEW SET OPEN_PARENTHESIS OPEN_BRACKET items CLOSE_BRACKET CLOSE_PARENTHESIS SEMICOLON
    (100) set -> . NAME IGUAL NEW SET OPEN_PARENTHESIS element CLOSE_PARENTHESIS SEMICOLON
    (74) map -> . iniciarMap
    (75) map -> . escribirMap
    (76) map -> . generarMap
    (27) while -> . WHILE OPEN_PARENTHESIS controlArg CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE
    (28) while -> . WHILE OPEN_PARENTHESIS bool CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE
    (38) for -> . FOR OPEN_PARENTHESIS inicialization SEMICOLON expBoolean SEMICOLON operations CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE
    (29) if -> . soloIf
    (30) if -> . soloIf elseIf
    (31) if -> . soloIf elseIf else
    (32) if -> . soloIf else
    (77) iniciarMap -> . variable IGUAL NEW MAP OPEN_PARENTHESIS CLOSE_PARENTHESIS SEMICOLON
    (78) escribirMap -> . variable IGUAL OPEN_BRACE claveValor CLOSE_BRACE
    (84) generarMap -> . variable IGUAL OPEN_BRACE tuplas CLOSE_BRACE
    (33) soloIf -> . IF OPEN_PARENTHESIS controlArg CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE

    NAME            shift and go to state 13
    PRINT           shift and go to state 20
    RETURN          shift and go to state 21
    FUNCTION        shift and go to state 22
    CONST           shift and go to state 23
    LET             shift and go to state 24
    VAR             shift and go to state 25
    WHILE           shift and go to state 29
    FOR             shift and go to state 30
    IF              shift and go to state 32

    expression                     shift and go to state 1
    variable                       shift and go to state 2
    dataStruct                     shift and go to state 3
    controlStruct                  shift and go to state 4
    methodsSet                     shift and go to state 5
    mapFunctions                   shift and go to state 6
    arrayFn                        shift and go to state 7
    declaration                    shift and go to state 8
    print                          shift and go to state 9
    return                         shift and go to state 10
    function                       shift and go to state 11
    type                           shift and go to state 12
    array                          shift and go to state 14
    set                            shift and go to state 15
    map                            shift and go to state 16
    while                          shift and go to state 17
    for                            shift and go to state 18
    if                             shift and go to state 19
    iniciarMap                     shift and go to state 26
    escribirMap                    shift and go to state 27
    generarMap                     shift and go to state 28
    soloIf                         shift and go to state 31

state 1

    (0) S' -> expression .



state 2

    (1) expression -> variable .
    (2) expression -> variable . expression
    (77) iniciarMap -> variable . IGUAL NEW MAP OPEN_PARENTHESIS CLOSE_PARENTHESIS SEMICOLON
    (78) escribirMap -> variable . IGUAL OPEN_BRACE claveValor CLOSE_BRACE
    (84) generarMap -> variable . IGUAL OPEN_BRACE tuplas CLOSE_BRACE
    (1) expression -> . variable
    (2) expression -> . variable expression
    (3) expression -> . dataStruct
    (4) expression -> . dataStruct expression
    (5) expression -> . controlStruct
    (6) expression -> . controlStruct expression
    (7) expression -> . methodsSet
    (8) expression -> . mapFunctions
    (9) expression -> . arrayFn
    (10) expression -> . declaration
    (11) expression -> . print
    (12) expression -> . return
    (13) expression -> . function
    (18) variable -> . type NAME IGUAL datatype SEMICOLON
    (19) variable -> . type NAME IGUAL operations SEMICOLON
    (20) variable -> . NAME IGUAL datatype SEMICOLON
    (24) dataStruct -> . array
    (25) dataStruct -> . set
    (26) dataStruct -> . map
    (21) controlStruct -> . while
    (22) controlStruct -> . for
    (23) controlStruct -> . if
    (101) methodsSet -> . NAME POINT ADD OPEN_PARENTHESIS element CLOSE_PARENTHESIS SEMICOLON
    (102) methodsSet -> . NAME POINT DELETE OPEN_PARENTHESIS element CLOSE_PARENTHESIS SEMICOLON
    (103) methodsSet -> . NAME POINT CLEAR OPEN_PARENTHESIS CLOSE_PARENTHESIS SEMICOLON
    (89) mapFunctions -> . NAME POINT CLEAR OPEN_PARENTHESIS CLOSE_PARENTHESIS SEMICOLON
    (90) mapFunctions -> . NAME POINT GET OPEN_PARENTHESIS clave CLOSE_PARENTHESIS SEMICOLON
    (91) mapFunctions -> . NAME POINT HAS OPEN_PARENTHESIS clave CLOSE_PARENTHESIS SEMICOLON
    (92) arrayFn -> . NAME POINT POP OPEN_PARENTHESIS CLOSE_PARENTHESIS SEMICOLON
    (93) arrayFn -> . NAME POINT PUSH OPEN_PARENTHESIS element CLOSE_PARENTHESIS SEMICOLON
    (94) arrayFn -> . NAME POINT UNSHIFT OPEN_PARENTHESIS element CLOSE_PARENTHESIS SEMICOLON
    (111) declaration -> . NAME IGUAL element SEMICOLON
    (123) print -> . PRINT OPEN_PARENTHESIS CLOSE_PARENTHESIS SEMICOLON
    (122) return -> . RETURN element SEMICOLON
    (118) function -> . FUNCTION NAME OPEN_PARENTHESIS CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE
    (119) function -> . FUNCTION NAME OPEN_PARENTHESIS parameter CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE
    (61) type -> . CONST
    (62) type -> . LET
    (63) type -> . VAR
    (72) array -> . type NAME IGUAL OPEN_BRACKET items CLOSE_BRACKET SEMICOLON
    (73) array -> . type NAME IGUAL NEW ARRAY OPEN_PARENTHESIS items CLOSE_PARENTHESIS SEMICOLON
    (95) set -> . type NAME IGUAL NEW SET OPEN_PARENTHESIS CLOSE_PARENTHESIS SEMICOLON
    (96) set -> . type NAME IGUAL NEW SET OPEN_PARENTHESIS OPEN_BRACKET items CLOSE_BRACKET CLOSE_PARENTHESIS SEMICOLON
    (97) set -> . type NAME IGUAL NEW SET OPEN_PARENTHESIS element CLOSE_PARENTHESIS SEMICOLON
    (98) set -> . NAME IGUAL NEW SET OPEN_PARENTHESIS CLOSE_PARENTHESIS SEMICOLON
    (99) set -> . NAME IGUAL NEW SET OPEN_PARENTHESIS OPEN_BRACKET items CLOSE_BRACKET CLOSE_PARENTHESIS SEMICOLON
    (100) set -> . NAME IGUAL NEW SET OPEN_PARENTHESIS element CLOSE_PARENTHESIS SEMICOLON
    (74) map -> . iniciarMap
    (75) map -> . escribirMap
    (76) map -> . generarMap
    (27) while -> . WHILE OPEN_PARENTHESIS controlArg CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE
    (28) while -> . WHILE OPEN_PARENTHESIS bool CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE
    (38) for -> . FOR OPEN_PARENTHESIS inicialization SEMICOLON expBoolean SEMICOLON operations CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE
    (29) if -> . soloIf
    (30) if -> . soloIf elseIf
    (31) if -> . soloIf elseIf else
    (32) if -> . soloIf else
    (77) iniciarMap -> . variable IGUAL NEW MAP OPEN_PARENTHESIS CLOSE_PARENTHESIS SEMICOLON
    (78) escribirMap -> . variable IGUAL OPEN_BRACE claveValor CLOSE_BRACE
    (84) generarMap -> . variable IGUAL OPEN_BRACE tuplas CLOSE_BRACE
    (33) soloIf -> . IF OPEN_PARENTHESIS controlArg CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE

    $end            reduce using rule 1 (expression -> variable .)
    CLOSE_BRACE     reduce using rule 1 (expression -> variable .)
    IGUAL           shift and go to state 34
    NAME            shift and go to state 13
    PRINT           shift and go to state 20
    RETURN          shift and go to state 21
    FUNCTION        shift and go to state 22
    CONST           shift and go to state 23
    LET             shift and go to state 24
    VAR             shift and go to state 25
    WHILE           shift and go to state 29
    FOR             shift and go to state 30
    IF              shift and go to state 32

    variable                       shift and go to state 2
    expression                     shift and go to state 33
    dataStruct                     shift and go to state 3
    controlStruct                  shift and go to state 4
    methodsSet                     shift and go to state 5
    mapFunctions                   shift and go to state 6
    arrayFn                        shift and go to state 7
    declaration                    shift and go to state 8
    print                          shift and go to state 9
    return                         shift and go to state 10
    function                       shift and go to state 11
    type                           shift and go to state 12
    array                          shift and go to state 14
    set                            shift and go to state 15
    map                            shift and go to state 16
    while                          shift and go to state 17
    for                            shift and go to state 18
    if                             shift and go to state 19
    iniciarMap                     shift and go to state 26
    escribirMap                    shift and go to state 27
    generarMap                     shift and go to state 28
    soloIf                         shift and go to state 31

state 3

    (3) expression -> dataStruct .
    (4) expression -> dataStruct . expression
    (1) expression -> . variable
    (2) expression -> . variable expression
    (3) expression -> . dataStruct
    (4) expression -> . dataStruct expression
    (5) expression -> . controlStruct
    (6) expression -> . controlStruct expression
    (7) expression -> . methodsSet
    (8) expression -> . mapFunctions
    (9) expression -> . arrayFn
    (10) expression -> . declaration
    (11) expression -> . print
    (12) expression -> . return
    (13) expression -> . function
    (18) variable -> . type NAME IGUAL datatype SEMICOLON
    (19) variable -> . type NAME IGUAL operations SEMICOLON
    (20) variable -> . NAME IGUAL datatype SEMICOLON
    (24) dataStruct -> . array
    (25) dataStruct -> . set
    (26) dataStruct -> . map
    (21) controlStruct -> . while
    (22) controlStruct -> . for
    (23) controlStruct -> . if
    (101) methodsSet -> . NAME POINT ADD OPEN_PARENTHESIS element CLOSE_PARENTHESIS SEMICOLON
    (102) methodsSet -> . NAME POINT DELETE OPEN_PARENTHESIS element CLOSE_PARENTHESIS SEMICOLON
    (103) methodsSet -> . NAME POINT CLEAR OPEN_PARENTHESIS CLOSE_PARENTHESIS SEMICOLON
    (89) mapFunctions -> . NAME POINT CLEAR OPEN_PARENTHESIS CLOSE_PARENTHESIS SEMICOLON
    (90) mapFunctions -> . NAME POINT GET OPEN_PARENTHESIS clave CLOSE_PARENTHESIS SEMICOLON
    (91) mapFunctions -> . NAME POINT HAS OPEN_PARENTHESIS clave CLOSE_PARENTHESIS SEMICOLON
    (92) arrayFn -> . NAME POINT POP OPEN_PARENTHESIS CLOSE_PARENTHESIS SEMICOLON
    (93) arrayFn -> . NAME POINT PUSH OPEN_PARENTHESIS element CLOSE_PARENTHESIS SEMICOLON
    (94) arrayFn -> . NAME POINT UNSHIFT OPEN_PARENTHESIS element CLOSE_PARENTHESIS SEMICOLON
    (111) declaration -> . NAME IGUAL element SEMICOLON
    (123) print -> . PRINT OPEN_PARENTHESIS CLOSE_PARENTHESIS SEMICOLON
    (122) return -> . RETURN element SEMICOLON
    (118) function -> . FUNCTION NAME OPEN_PARENTHESIS CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE
    (119) function -> . FUNCTION NAME OPEN_PARENTHESIS parameter CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE
    (61) type -> . CONST
    (62) type -> . LET
    (63) type -> . VAR
    (72) array -> . type NAME IGUAL OPEN_BRACKET items CLOSE_BRACKET SEMICOLON
    (73) array -> . type NAME IGUAL NEW ARRAY OPEN_PARENTHESIS items CLOSE_PARENTHESIS SEMICOLON
    (95) set -> . type NAME IGUAL NEW SET OPEN_PARENTHESIS CLOSE_PARENTHESIS SEMICOLON
    (96) set -> . type NAME IGUAL NEW SET OPEN_PARENTHESIS OPEN_BRACKET items CLOSE_BRACKET CLOSE_PARENTHESIS SEMICOLON
    (97) set -> . type NAME IGUAL NEW SET OPEN_PARENTHESIS element CLOSE_PARENTHESIS SEMICOLON
    (98) set -> . NAME IGUAL NEW SET OPEN_PARENTHESIS CLOSE_PARENTHESIS SEMICOLON
    (99) set -> . NAME IGUAL NEW SET OPEN_PARENTHESIS OPEN_BRACKET items CLOSE_BRACKET CLOSE_PARENTHESIS SEMICOLON
    (100) set -> . NAME IGUAL NEW SET OPEN_PARENTHESIS element CLOSE_PARENTHESIS SEMICOLON
    (74) map -> . iniciarMap
    (75) map -> . escribirMap
    (76) map -> . generarMap
    (27) while -> . WHILE OPEN_PARENTHESIS controlArg CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE
    (28) while -> . WHILE OPEN_PARENTHESIS bool CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE
    (38) for -> . FOR OPEN_PARENTHESIS inicialization SEMICOLON expBoolean SEMICOLON operations CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE
    (29) if -> . soloIf
    (30) if -> . soloIf elseIf
    (31) if -> . soloIf elseIf else
    (32) if -> . soloIf else
    (77) iniciarMap -> . variable IGUAL NEW MAP OPEN_PARENTHESIS CLOSE_PARENTHESIS SEMICOLON
    (78) escribirMap -> . variable IGUAL OPEN_BRACE claveValor CLOSE_BRACE
    (84) generarMap -> . variable IGUAL OPEN_BRACE tuplas CLOSE_BRACE
    (33) soloIf -> . IF OPEN_PARENTHESIS controlArg CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE

    $end            reduce using rule 3 (expression -> dataStruct .)
    CLOSE_BRACE     reduce using rule 3 (expression -> dataStruct .)
    NAME            shift and go to state 13
    PRINT           shift and go to state 20
    RETURN          shift and go to state 21
    FUNCTION        shift and go to state 22
    CONST           shift and go to state 23
    LET             shift and go to state 24
    VAR             shift and go to state 25
    WHILE           shift and go to state 29
    FOR             shift and go to state 30
    IF              shift and go to state 32

    dataStruct                     shift and go to state 3
    expression                     shift and go to state 35
    variable                       shift and go to state 2
    controlStruct                  shift and go to state 4
    methodsSet                     shift and go to state 5
    mapFunctions                   shift and go to state 6
    arrayFn                        shift and go to state 7
    declaration                    shift and go to state 8
    print                          shift and go to state 9
    return                         shift and go to state 10
    function                       shift and go to state 11
    type                           shift and go to state 12
    array                          shift and go to state 14
    set                            shift and go to state 15
    map                            shift and go to state 16
    while                          shift and go to state 17
    for                            shift and go to state 18
    if                             shift and go to state 19
    iniciarMap                     shift and go to state 26
    escribirMap                    shift and go to state 27
    generarMap                     shift and go to state 28
    soloIf                         shift and go to state 31

state 4

    (5) expression -> controlStruct .
    (6) expression -> controlStruct . expression
    (1) expression -> . variable
    (2) expression -> . variable expression
    (3) expression -> . dataStruct
    (4) expression -> . dataStruct expression
    (5) expression -> . controlStruct
    (6) expression -> . controlStruct expression
    (7) expression -> . methodsSet
    (8) expression -> . mapFunctions
    (9) expression -> . arrayFn
    (10) expression -> . declaration
    (11) expression -> . print
    (12) expression -> . return
    (13) expression -> . function
    (18) variable -> . type NAME IGUAL datatype SEMICOLON
    (19) variable -> . type NAME IGUAL operations SEMICOLON
    (20) variable -> . NAME IGUAL datatype SEMICOLON
    (24) dataStruct -> . array
    (25) dataStruct -> . set
    (26) dataStruct -> . map
    (21) controlStruct -> . while
    (22) controlStruct -> . for
    (23) controlStruct -> . if
    (101) methodsSet -> . NAME POINT ADD OPEN_PARENTHESIS element CLOSE_PARENTHESIS SEMICOLON
    (102) methodsSet -> . NAME POINT DELETE OPEN_PARENTHESIS element CLOSE_PARENTHESIS SEMICOLON
    (103) methodsSet -> . NAME POINT CLEAR OPEN_PARENTHESIS CLOSE_PARENTHESIS SEMICOLON
    (89) mapFunctions -> . NAME POINT CLEAR OPEN_PARENTHESIS CLOSE_PARENTHESIS SEMICOLON
    (90) mapFunctions -> . NAME POINT GET OPEN_PARENTHESIS clave CLOSE_PARENTHESIS SEMICOLON
    (91) mapFunctions -> . NAME POINT HAS OPEN_PARENTHESIS clave CLOSE_PARENTHESIS SEMICOLON
    (92) arrayFn -> . NAME POINT POP OPEN_PARENTHESIS CLOSE_PARENTHESIS SEMICOLON
    (93) arrayFn -> . NAME POINT PUSH OPEN_PARENTHESIS element CLOSE_PARENTHESIS SEMICOLON
    (94) arrayFn -> . NAME POINT UNSHIFT OPEN_PARENTHESIS element CLOSE_PARENTHESIS SEMICOLON
    (111) declaration -> . NAME IGUAL element SEMICOLON
    (123) print -> . PRINT OPEN_PARENTHESIS CLOSE_PARENTHESIS SEMICOLON
    (122) return -> . RETURN element SEMICOLON
    (118) function -> . FUNCTION NAME OPEN_PARENTHESIS CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE
    (119) function -> . FUNCTION NAME OPEN_PARENTHESIS parameter CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE
    (61) type -> . CONST
    (62) type -> . LET
    (63) type -> . VAR
    (72) array -> . type NAME IGUAL OPEN_BRACKET items CLOSE_BRACKET SEMICOLON
    (73) array -> . type NAME IGUAL NEW ARRAY OPEN_PARENTHESIS items CLOSE_PARENTHESIS SEMICOLON
    (95) set -> . type NAME IGUAL NEW SET OPEN_PARENTHESIS CLOSE_PARENTHESIS SEMICOLON
    (96) set -> . type NAME IGUAL NEW SET OPEN_PARENTHESIS OPEN_BRACKET items CLOSE_BRACKET CLOSE_PARENTHESIS SEMICOLON
    (97) set -> . type NAME IGUAL NEW SET OPEN_PARENTHESIS element CLOSE_PARENTHESIS SEMICOLON
    (98) set -> . NAME IGUAL NEW SET OPEN_PARENTHESIS CLOSE_PARENTHESIS SEMICOLON
    (99) set -> . NAME IGUAL NEW SET OPEN_PARENTHESIS OPEN_BRACKET items CLOSE_BRACKET CLOSE_PARENTHESIS SEMICOLON
    (100) set -> . NAME IGUAL NEW SET OPEN_PARENTHESIS element CLOSE_PARENTHESIS SEMICOLON
    (74) map -> . iniciarMap
    (75) map -> . escribirMap
    (76) map -> . generarMap
    (27) while -> . WHILE OPEN_PARENTHESIS controlArg CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE
    (28) while -> . WHILE OPEN_PARENTHESIS bool CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE
    (38) for -> . FOR OPEN_PARENTHESIS inicialization SEMICOLON expBoolean SEMICOLON operations CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE
    (29) if -> . soloIf
    (30) if -> . soloIf elseIf
    (31) if -> . soloIf elseIf else
    (32) if -> . soloIf else
    (77) iniciarMap -> . variable IGUAL NEW MAP OPEN_PARENTHESIS CLOSE_PARENTHESIS SEMICOLON
    (78) escribirMap -> . variable IGUAL OPEN_BRACE claveValor CLOSE_BRACE
    (84) generarMap -> . variable IGUAL OPEN_BRACE tuplas CLOSE_BRACE
    (33) soloIf -> . IF OPEN_PARENTHESIS controlArg CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE

    $end            reduce using rule 5 (expression -> controlStruct .)
    CLOSE_BRACE     reduce using rule 5 (expression -> controlStruct .)
    NAME            shift and go to state 13
    PRINT           shift and go to state 20
    RETURN          shift and go to state 21
    FUNCTION        shift and go to state 22
    CONST           shift and go to state 23
    LET             shift and go to state 24
    VAR             shift and go to state 25
    WHILE           shift and go to state 29
    FOR             shift and go to state 30
    IF              shift and go to state 32

    controlStruct                  shift and go to state 4
    expression                     shift and go to state 36
    variable                       shift and go to state 2
    dataStruct                     shift and go to state 3
    methodsSet                     shift and go to state 5
    mapFunctions                   shift and go to state 6
    arrayFn                        shift and go to state 7
    declaration                    shift and go to state 8
    print                          shift and go to state 9
    return                         shift and go to state 10
    function                       shift and go to state 11
    type                           shift and go to state 12
    array                          shift and go to state 14
    set                            shift and go to state 15
    map                            shift and go to state 16
    while                          shift and go to state 17
    for                            shift and go to state 18
    if                             shift and go to state 19
    iniciarMap                     shift and go to state 26
    escribirMap                    shift and go to state 27
    generarMap                     shift and go to state 28
    soloIf                         shift and go to state 31

state 5

    (7) expression -> methodsSet .

    $end            reduce using rule 7 (expression -> methodsSet .)
    CLOSE_BRACE     reduce using rule 7 (expression -> methodsSet .)


state 6

    (8) expression -> mapFunctions .

    $end            reduce using rule 8 (expression -> mapFunctions .)
    CLOSE_BRACE     reduce using rule 8 (expression -> mapFunctions .)


state 7

    (9) expression -> arrayFn .

    $end            reduce using rule 9 (expression -> arrayFn .)
    CLOSE_BRACE     reduce using rule 9 (expression -> arrayFn .)


state 8

    (10) expression -> declaration .

    $end            reduce using rule 10 (expression -> declaration .)
    CLOSE_BRACE     reduce using rule 10 (expression -> declaration .)


state 9

    (11) expression -> print .

    $end            reduce using rule 11 (expression -> print .)
    CLOSE_BRACE     reduce using rule 11 (expression -> print .)


state 10

    (12) expression -> return .

    $end            reduce using rule 12 (expression -> return .)
    CLOSE_BRACE     reduce using rule 12 (expression -> return .)


state 11

    (13) expression -> function .

    $end            reduce using rule 13 (expression -> function .)
    CLOSE_BRACE     reduce using rule 13 (expression -> function .)


state 12

    (18) variable -> type . NAME IGUAL datatype SEMICOLON
    (19) variable -> type . NAME IGUAL operations SEMICOLON
    (72) array -> type . NAME IGUAL OPEN_BRACKET items CLOSE_BRACKET SEMICOLON
    (73) array -> type . NAME IGUAL NEW ARRAY OPEN_PARENTHESIS items CLOSE_PARENTHESIS SEMICOLON
    (95) set -> type . NAME IGUAL NEW SET OPEN_PARENTHESIS CLOSE_PARENTHESIS SEMICOLON
    (96) set -> type . NAME IGUAL NEW SET OPEN_PARENTHESIS OPEN_BRACKET items CLOSE_BRACKET CLOSE_PARENTHESIS SEMICOLON
    (97) set -> type . NAME IGUAL NEW SET OPEN_PARENTHESIS element CLOSE_PARENTHESIS SEMICOLON

    NAME            shift and go to state 37


state 13

    (20) variable -> NAME . IGUAL datatype SEMICOLON
    (101) methodsSet -> NAME . POINT ADD OPEN_PARENTHESIS element CLOSE_PARENTHESIS SEMICOLON
    (102) methodsSet -> NAME . POINT DELETE OPEN_PARENTHESIS element CLOSE_PARENTHESIS SEMICOLON
    (103) methodsSet -> NAME . POINT CLEAR OPEN_PARENTHESIS CLOSE_PARENTHESIS SEMICOLON
    (89) mapFunctions -> NAME . POINT CLEAR OPEN_PARENTHESIS CLOSE_PARENTHESIS SEMICOLON
    (90) mapFunctions -> NAME . POINT GET OPEN_PARENTHESIS clave CLOSE_PARENTHESIS SEMICOLON
    (91) mapFunctions -> NAME . POINT HAS OPEN_PARENTHESIS clave CLOSE_PARENTHESIS SEMICOLON
    (92) arrayFn -> NAME . POINT POP OPEN_PARENTHESIS CLOSE_PARENTHESIS SEMICOLON
    (93) arrayFn -> NAME . POINT PUSH OPEN_PARENTHESIS element CLOSE_PARENTHESIS SEMICOLON
    (94) arrayFn -> NAME . POINT UNSHIFT OPEN_PARENTHESIS element CLOSE_PARENTHESIS SEMICOLON
    (111) declaration -> NAME . IGUAL element SEMICOLON
    (98) set -> NAME . IGUAL NEW SET OPEN_PARENTHESIS CLOSE_PARENTHESIS SEMICOLON
    (99) set -> NAME . IGUAL NEW SET OPEN_PARENTHESIS OPEN_BRACKET items CLOSE_BRACKET CLOSE_PARENTHESIS SEMICOLON
    (100) set -> NAME . IGUAL NEW SET OPEN_PARENTHESIS element CLOSE_PARENTHESIS SEMICOLON

    IGUAL           shift and go to state 38
    POINT           shift and go to state 39


state 14

    (24) dataStruct -> array .

    NAME            reduce using rule 24 (dataStruct -> array .)
    PRINT           reduce using rule 24 (dataStruct -> array .)
    RETURN          reduce using rule 24 (dataStruct -> array .)
    FUNCTION        reduce using rule 24 (dataStruct -> array .)
    CONST           reduce using rule 24 (dataStruct -> array .)
    LET             reduce using rule 24 (dataStruct -> array .)
    VAR             reduce using rule 24 (dataStruct -> array .)
    WHILE           reduce using rule 24 (dataStruct -> array .)
    FOR             reduce using rule 24 (dataStruct -> array .)
    IF              reduce using rule 24 (dataStruct -> array .)
    $end            reduce using rule 24 (dataStruct -> array .)
    CLOSE_BRACE     reduce using rule 24 (dataStruct -> array .)
    COMMA           reduce using rule 24 (dataStruct -> array .)


state 15

    (25) dataStruct -> set .

    NAME            reduce using rule 25 (dataStruct -> set .)
    PRINT           reduce using rule 25 (dataStruct -> set .)
    RETURN          reduce using rule 25 (dataStruct -> set .)
    FUNCTION        reduce using rule 25 (dataStruct -> set .)
    CONST           reduce using rule 25 (dataStruct -> set .)
    LET             reduce using rule 25 (dataStruct -> set .)
    VAR             reduce using rule 25 (dataStruct -> set .)
    WHILE           reduce using rule 25 (dataStruct -> set .)
    FOR             reduce using rule 25 (dataStruct -> set .)
    IF              reduce using rule 25 (dataStruct -> set .)
    $end            reduce using rule 25 (dataStruct -> set .)
    CLOSE_BRACE     reduce using rule 25 (dataStruct -> set .)
    COMMA           reduce using rule 25 (dataStruct -> set .)


state 16

    (26) dataStruct -> map .

    NAME            reduce using rule 26 (dataStruct -> map .)
    PRINT           reduce using rule 26 (dataStruct -> map .)
    RETURN          reduce using rule 26 (dataStruct -> map .)
    FUNCTION        reduce using rule 26 (dataStruct -> map .)
    CONST           reduce using rule 26 (dataStruct -> map .)
    LET             reduce using rule 26 (dataStruct -> map .)
    VAR             reduce using rule 26 (dataStruct -> map .)
    WHILE           reduce using rule 26 (dataStruct -> map .)
    FOR             reduce using rule 26 (dataStruct -> map .)
    IF              reduce using rule 26 (dataStruct -> map .)
    $end            reduce using rule 26 (dataStruct -> map .)
    CLOSE_BRACE     reduce using rule 26 (dataStruct -> map .)
    COMMA           reduce using rule 26 (dataStruct -> map .)


state 17

    (21) controlStruct -> while .

    NAME            reduce using rule 21 (controlStruct -> while .)
    PRINT           reduce using rule 21 (controlStruct -> while .)
    RETURN          reduce using rule 21 (controlStruct -> while .)
    FUNCTION        reduce using rule 21 (controlStruct -> while .)
    CONST           reduce using rule 21 (controlStruct -> while .)
    LET             reduce using rule 21 (controlStruct -> while .)
    VAR             reduce using rule 21 (controlStruct -> while .)
    WHILE           reduce using rule 21 (controlStruct -> while .)
    FOR             reduce using rule 21 (controlStruct -> while .)
    IF              reduce using rule 21 (controlStruct -> while .)
    $end            reduce using rule 21 (controlStruct -> while .)
    CLOSE_BRACE     reduce using rule 21 (controlStruct -> while .)


state 18

    (22) controlStruct -> for .

    NAME            reduce using rule 22 (controlStruct -> for .)
    PRINT           reduce using rule 22 (controlStruct -> for .)
    RETURN          reduce using rule 22 (controlStruct -> for .)
    FUNCTION        reduce using rule 22 (controlStruct -> for .)
    CONST           reduce using rule 22 (controlStruct -> for .)
    LET             reduce using rule 22 (controlStruct -> for .)
    VAR             reduce using rule 22 (controlStruct -> for .)
    WHILE           reduce using rule 22 (controlStruct -> for .)
    FOR             reduce using rule 22 (controlStruct -> for .)
    IF              reduce using rule 22 (controlStruct -> for .)
    $end            reduce using rule 22 (controlStruct -> for .)
    CLOSE_BRACE     reduce using rule 22 (controlStruct -> for .)


state 19

    (23) controlStruct -> if .

    NAME            reduce using rule 23 (controlStruct -> if .)
    PRINT           reduce using rule 23 (controlStruct -> if .)
    RETURN          reduce using rule 23 (controlStruct -> if .)
    FUNCTION        reduce using rule 23 (controlStruct -> if .)
    CONST           reduce using rule 23 (controlStruct -> if .)
    LET             reduce using rule 23 (controlStruct -> if .)
    VAR             reduce using rule 23 (controlStruct -> if .)
    WHILE           reduce using rule 23 (controlStruct -> if .)
    FOR             reduce using rule 23 (controlStruct -> if .)
    IF              reduce using rule 23 (controlStruct -> if .)
    $end            reduce using rule 23 (controlStruct -> if .)
    CLOSE_BRACE     reduce using rule 23 (controlStruct -> if .)


state 20

    (123) print -> PRINT . OPEN_PARENTHESIS CLOSE_PARENTHESIS SEMICOLON

    OPEN_PARENTHESIS shift and go to state 40


state 21

    (122) return -> RETURN . element SEMICOLON
    (108) element -> . STRING
    (109) element -> . number
    (110) element -> . NAME
    (14) number -> . INTEGER
    (15) number -> . FLOAT
    (16) number -> . RESTA INTEGER
    (17) number -> . RESTA FLOAT

    STRING          shift and go to state 42
    NAME            shift and go to state 44
    INTEGER         shift and go to state 45
    FLOAT           shift and go to state 46
    RESTA           shift and go to state 47

    element                        shift and go to state 41
    number                         shift and go to state 43

state 22

    (118) function -> FUNCTION . NAME OPEN_PARENTHESIS CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE
    (119) function -> FUNCTION . NAME OPEN_PARENTHESIS parameter CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE

    NAME            shift and go to state 48


state 23

    (61) type -> CONST .

    NAME            reduce using rule 61 (type -> CONST .)


state 24

    (62) type -> LET .

    NAME            reduce using rule 62 (type -> LET .)


state 25

    (63) type -> VAR .

    NAME            reduce using rule 63 (type -> VAR .)


state 26

    (74) map -> iniciarMap .

    NAME            reduce using rule 74 (map -> iniciarMap .)
    PRINT           reduce using rule 74 (map -> iniciarMap .)
    RETURN          reduce using rule 74 (map -> iniciarMap .)
    FUNCTION        reduce using rule 74 (map -> iniciarMap .)
    CONST           reduce using rule 74 (map -> iniciarMap .)
    LET             reduce using rule 74 (map -> iniciarMap .)
    VAR             reduce using rule 74 (map -> iniciarMap .)
    WHILE           reduce using rule 74 (map -> iniciarMap .)
    FOR             reduce using rule 74 (map -> iniciarMap .)
    IF              reduce using rule 74 (map -> iniciarMap .)
    $end            reduce using rule 74 (map -> iniciarMap .)
    CLOSE_BRACE     reduce using rule 74 (map -> iniciarMap .)
    COMMA           reduce using rule 74 (map -> iniciarMap .)


state 27

    (75) map -> escribirMap .

    NAME            reduce using rule 75 (map -> escribirMap .)
    PRINT           reduce using rule 75 (map -> escribirMap .)
    RETURN          reduce using rule 75 (map -> escribirMap .)
    FUNCTION        reduce using rule 75 (map -> escribirMap .)
    CONST           reduce using rule 75 (map -> escribirMap .)
    LET             reduce using rule 75 (map -> escribirMap .)
    VAR             reduce using rule 75 (map -> escribirMap .)
    WHILE           reduce using rule 75 (map -> escribirMap .)
    FOR             reduce using rule 75 (map -> escribirMap .)
    IF              reduce using rule 75 (map -> escribirMap .)
    $end            reduce using rule 75 (map -> escribirMap .)
    CLOSE_BRACE     reduce using rule 75 (map -> escribirMap .)
    COMMA           reduce using rule 75 (map -> escribirMap .)


state 28

    (76) map -> generarMap .

    NAME            reduce using rule 76 (map -> generarMap .)
    PRINT           reduce using rule 76 (map -> generarMap .)
    RETURN          reduce using rule 76 (map -> generarMap .)
    FUNCTION        reduce using rule 76 (map -> generarMap .)
    CONST           reduce using rule 76 (map -> generarMap .)
    LET             reduce using rule 76 (map -> generarMap .)
    VAR             reduce using rule 76 (map -> generarMap .)
    WHILE           reduce using rule 76 (map -> generarMap .)
    FOR             reduce using rule 76 (map -> generarMap .)
    IF              reduce using rule 76 (map -> generarMap .)
    $end            reduce using rule 76 (map -> generarMap .)
    CLOSE_BRACE     reduce using rule 76 (map -> generarMap .)
    COMMA           reduce using rule 76 (map -> generarMap .)


state 29

    (27) while -> WHILE . OPEN_PARENTHESIS controlArg CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE
    (28) while -> WHILE . OPEN_PARENTHESIS bool CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE

    OPEN_PARENTHESIS shift and go to state 49


state 30

    (38) for -> FOR . OPEN_PARENTHESIS inicialization SEMICOLON expBoolean SEMICOLON operations CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE

    OPEN_PARENTHESIS shift and go to state 50


state 31

    (29) if -> soloIf .
    (30) if -> soloIf . elseIf
    (31) if -> soloIf . elseIf else
    (32) if -> soloIf . else
    (34) elseIf -> . ELSEIF OPEN_PARENTHESIS controlArg CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE
    (35) elseIf -> . ELSEIF OPEN_PARENTHESIS controlArg CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE soloIf
    (36) else -> . ELSE OPEN_BRACE expression CLOSE_BRACE

    NAME            reduce using rule 29 (if -> soloIf .)
    PRINT           reduce using rule 29 (if -> soloIf .)
    RETURN          reduce using rule 29 (if -> soloIf .)
    FUNCTION        reduce using rule 29 (if -> soloIf .)
    CONST           reduce using rule 29 (if -> soloIf .)
    LET             reduce using rule 29 (if -> soloIf .)
    VAR             reduce using rule 29 (if -> soloIf .)
    WHILE           reduce using rule 29 (if -> soloIf .)
    FOR             reduce using rule 29 (if -> soloIf .)
    IF              reduce using rule 29 (if -> soloIf .)
    $end            reduce using rule 29 (if -> soloIf .)
    CLOSE_BRACE     reduce using rule 29 (if -> soloIf .)
    ELSEIF          shift and go to state 53
    ELSE            shift and go to state 54

    elseIf                         shift and go to state 51
    else                           shift and go to state 52

state 32

    (33) soloIf -> IF . OPEN_PARENTHESIS controlArg CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE

    OPEN_PARENTHESIS shift and go to state 55


state 33

    (2) expression -> variable expression .

    $end            reduce using rule 2 (expression -> variable expression .)
    CLOSE_BRACE     reduce using rule 2 (expression -> variable expression .)


state 34

    (77) iniciarMap -> variable IGUAL . NEW MAP OPEN_PARENTHESIS CLOSE_PARENTHESIS SEMICOLON
    (78) escribirMap -> variable IGUAL . OPEN_BRACE claveValor CLOSE_BRACE
    (84) generarMap -> variable IGUAL . OPEN_BRACE tuplas CLOSE_BRACE

    NEW             shift and go to state 56
    OPEN_BRACE      shift and go to state 57


state 35

    (4) expression -> dataStruct expression .

    $end            reduce using rule 4 (expression -> dataStruct expression .)
    CLOSE_BRACE     reduce using rule 4 (expression -> dataStruct expression .)


state 36

    (6) expression -> controlStruct expression .

    $end            reduce using rule 6 (expression -> controlStruct expression .)
    CLOSE_BRACE     reduce using rule 6 (expression -> controlStruct expression .)


state 37

    (18) variable -> type NAME . IGUAL datatype SEMICOLON
    (19) variable -> type NAME . IGUAL operations SEMICOLON
    (72) array -> type NAME . IGUAL OPEN_BRACKET items CLOSE_BRACKET SEMICOLON
    (73) array -> type NAME . IGUAL NEW ARRAY OPEN_PARENTHESIS items CLOSE_PARENTHESIS SEMICOLON
    (95) set -> type NAME . IGUAL NEW SET OPEN_PARENTHESIS CLOSE_PARENTHESIS SEMICOLON
    (96) set -> type NAME . IGUAL NEW SET OPEN_PARENTHESIS OPEN_BRACKET items CLOSE_BRACKET CLOSE_PARENTHESIS SEMICOLON
    (97) set -> type NAME . IGUAL NEW SET OPEN_PARENTHESIS element CLOSE_PARENTHESIS SEMICOLON

    IGUAL           shift and go to state 58


state 38

    (20) variable -> NAME IGUAL . datatype SEMICOLON
    (111) declaration -> NAME IGUAL . element SEMICOLON
    (98) set -> NAME IGUAL . NEW SET OPEN_PARENTHESIS CLOSE_PARENTHESIS SEMICOLON
    (99) set -> NAME IGUAL . NEW SET OPEN_PARENTHESIS OPEN_BRACKET items CLOSE_BRACKET CLOSE_PARENTHESIS SEMICOLON
    (100) set -> NAME IGUAL . NEW SET OPEN_PARENTHESIS element CLOSE_PARENTHESIS SEMICOLON
    (51) datatype -> . number
    (52) datatype -> . STRING
    (53) datatype -> . CHAR
    (54) datatype -> . operations
    (108) element -> . STRING
    (109) element -> . number
    (110) element -> . NAME
    (14) number -> . INTEGER
    (15) number -> . FLOAT
    (16) number -> . RESTA INTEGER
    (17) number -> . RESTA FLOAT
    (41) operations -> . number operand number
    (42) operations -> . NAME
    (43) operations -> . NAME SUMA SUMA
    (44) operations -> . number
    (45) operations -> . number operand NAME operations
    (46) operations -> . NAME operand number operations
    (47) operations -> . number operand NAME
    (48) operations -> . NAME operand number
    (49) operations -> . NAME operand NAME operations
    (50) operations -> . number operand number operand operations

    NEW             shift and go to state 62
    STRING          shift and go to state 64
    CHAR            shift and go to state 65
    NAME            shift and go to state 59
    INTEGER         shift and go to state 45
    FLOAT           shift and go to state 46
    RESTA           shift and go to state 47

    datatype                       shift and go to state 60
    element                        shift and go to state 61
    number                         shift and go to state 63
    operations                     shift and go to state 66

state 39

    (101) methodsSet -> NAME POINT . ADD OPEN_PARENTHESIS element CLOSE_PARENTHESIS SEMICOLON
    (102) methodsSet -> NAME POINT . DELETE OPEN_PARENTHESIS element CLOSE_PARENTHESIS SEMICOLON
    (103) methodsSet -> NAME POINT . CLEAR OPEN_PARENTHESIS CLOSE_PARENTHESIS SEMICOLON
    (89) mapFunctions -> NAME POINT . CLEAR OPEN_PARENTHESIS CLOSE_PARENTHESIS SEMICOLON
    (90) mapFunctions -> NAME POINT . GET OPEN_PARENTHESIS clave CLOSE_PARENTHESIS SEMICOLON
    (91) mapFunctions -> NAME POINT . HAS OPEN_PARENTHESIS clave CLOSE_PARENTHESIS SEMICOLON
    (92) arrayFn -> NAME POINT . POP OPEN_PARENTHESIS CLOSE_PARENTHESIS SEMICOLON
    (93) arrayFn -> NAME POINT . PUSH OPEN_PARENTHESIS element CLOSE_PARENTHESIS SEMICOLON
    (94) arrayFn -> NAME POINT . UNSHIFT OPEN_PARENTHESIS element CLOSE_PARENTHESIS SEMICOLON

    ADD             shift and go to state 67
    DELETE          shift and go to state 68
    CLEAR           shift and go to state 69
    GET             shift and go to state 70
    HAS             shift and go to state 71
    POP             shift and go to state 72
    PUSH            shift and go to state 73
    UNSHIFT         shift and go to state 74


state 40

    (123) print -> PRINT OPEN_PARENTHESIS . CLOSE_PARENTHESIS SEMICOLON

    CLOSE_PARENTHESIS shift and go to state 75


state 41

    (122) return -> RETURN element . SEMICOLON

    SEMICOLON       shift and go to state 76


state 42

    (108) element -> STRING .

    SEMICOLON       reduce using rule 108 (element -> STRING .)
    IGUALIGUAL      reduce using rule 108 (element -> STRING .)
    DIFERENTE       reduce using rule 108 (element -> STRING .)
    MAYORQUE        reduce using rule 108 (element -> STRING .)
    MAYORIGUALQUE   reduce using rule 108 (element -> STRING .)
    MENORQUE        reduce using rule 108 (element -> STRING .)
    MENORIGUALQUE   reduce using rule 108 (element -> STRING .)
    STRING          reduce using rule 108 (element -> STRING .)
    NAME            reduce using rule 108 (element -> STRING .)
    INTEGER         reduce using rule 108 (element -> STRING .)
    FLOAT           reduce using rule 108 (element -> STRING .)
    RESTA           reduce using rule 108 (element -> STRING .)
    CLOSE_PARENTHESIS reduce using rule 108 (element -> STRING .)
    AND             reduce using rule 108 (element -> STRING .)
    OR              reduce using rule 108 (element -> STRING .)


state 43

    (109) element -> number .

    SEMICOLON       reduce using rule 109 (element -> number .)
    IGUALIGUAL      reduce using rule 109 (element -> number .)
    DIFERENTE       reduce using rule 109 (element -> number .)
    MAYORQUE        reduce using rule 109 (element -> number .)
    MAYORIGUALQUE   reduce using rule 109 (element -> number .)
    MENORQUE        reduce using rule 109 (element -> number .)
    MENORIGUALQUE   reduce using rule 109 (element -> number .)
    STRING          reduce using rule 109 (element -> number .)
    NAME            reduce using rule 109 (element -> number .)
    INTEGER         reduce using rule 109 (element -> number .)
    FLOAT           reduce using rule 109 (element -> number .)
    RESTA           reduce using rule 109 (element -> number .)
    CLOSE_PARENTHESIS reduce using rule 109 (element -> number .)
    AND             reduce using rule 109 (element -> number .)
    OR              reduce using rule 109 (element -> number .)


state 44

    (110) element -> NAME .

    SEMICOLON       reduce using rule 110 (element -> NAME .)
    IGUALIGUAL      reduce using rule 110 (element -> NAME .)
    DIFERENTE       reduce using rule 110 (element -> NAME .)
    MAYORQUE        reduce using rule 110 (element -> NAME .)
    MAYORIGUALQUE   reduce using rule 110 (element -> NAME .)
    MENORQUE        reduce using rule 110 (element -> NAME .)
    MENORIGUALQUE   reduce using rule 110 (element -> NAME .)
    STRING          reduce using rule 110 (element -> NAME .)
    NAME            reduce using rule 110 (element -> NAME .)
    INTEGER         reduce using rule 110 (element -> NAME .)
    FLOAT           reduce using rule 110 (element -> NAME .)
    RESTA           reduce using rule 110 (element -> NAME .)
    CLOSE_PARENTHESIS reduce using rule 110 (element -> NAME .)
    AND             reduce using rule 110 (element -> NAME .)
    OR              reduce using rule 110 (element -> NAME .)


state 45

    (14) number -> INTEGER .

    SEMICOLON       reduce using rule 14 (number -> INTEGER .)
    SUMA            reduce using rule 14 (number -> INTEGER .)
    RESTA           reduce using rule 14 (number -> INTEGER .)
    MULTIPLICACION  reduce using rule 14 (number -> INTEGER .)
    DIVISION        reduce using rule 14 (number -> INTEGER .)
    IGUALIGUAL      reduce using rule 14 (number -> INTEGER .)
    DIFERENTE       reduce using rule 14 (number -> INTEGER .)
    MAYORQUE        reduce using rule 14 (number -> INTEGER .)
    MAYORIGUALQUE   reduce using rule 14 (number -> INTEGER .)
    MENORQUE        reduce using rule 14 (number -> INTEGER .)
    MENORIGUALQUE   reduce using rule 14 (number -> INTEGER .)
    COLON           reduce using rule 14 (number -> INTEGER .)
    STRING          reduce using rule 14 (number -> INTEGER .)
    NAME            reduce using rule 14 (number -> INTEGER .)
    INTEGER         reduce using rule 14 (number -> INTEGER .)
    FLOAT           reduce using rule 14 (number -> INTEGER .)
    CLOSE_PARENTHESIS reduce using rule 14 (number -> INTEGER .)
    CLOSE_BRACKET   reduce using rule 14 (number -> INTEGER .)
    COMMA           reduce using rule 14 (number -> INTEGER .)
    CLOSE_BRACE     reduce using rule 14 (number -> INTEGER .)
    AND             reduce using rule 14 (number -> INTEGER .)
    OR              reduce using rule 14 (number -> INTEGER .)


state 46

    (15) number -> FLOAT .

    SEMICOLON       reduce using rule 15 (number -> FLOAT .)
    SUMA            reduce using rule 15 (number -> FLOAT .)
    RESTA           reduce using rule 15 (number -> FLOAT .)
    MULTIPLICACION  reduce using rule 15 (number -> FLOAT .)
    DIVISION        reduce using rule 15 (number -> FLOAT .)
    IGUALIGUAL      reduce using rule 15 (number -> FLOAT .)
    DIFERENTE       reduce using rule 15 (number -> FLOAT .)
    MAYORQUE        reduce using rule 15 (number -> FLOAT .)
    MAYORIGUALQUE   reduce using rule 15 (number -> FLOAT .)
    MENORQUE        reduce using rule 15 (number -> FLOAT .)
    MENORIGUALQUE   reduce using rule 15 (number -> FLOAT .)
    COLON           reduce using rule 15 (number -> FLOAT .)
    STRING          reduce using rule 15 (number -> FLOAT .)
    NAME            reduce using rule 15 (number -> FLOAT .)
    INTEGER         reduce using rule 15 (number -> FLOAT .)
    FLOAT           reduce using rule 15 (number -> FLOAT .)
    CLOSE_PARENTHESIS reduce using rule 15 (number -> FLOAT .)
    CLOSE_BRACKET   reduce using rule 15 (number -> FLOAT .)
    COMMA           reduce using rule 15 (number -> FLOAT .)
    CLOSE_BRACE     reduce using rule 15 (number -> FLOAT .)
    AND             reduce using rule 15 (number -> FLOAT .)
    OR              reduce using rule 15 (number -> FLOAT .)


state 47

    (16) number -> RESTA . INTEGER
    (17) number -> RESTA . FLOAT

    INTEGER         shift and go to state 77
    FLOAT           shift and go to state 78


state 48

    (118) function -> FUNCTION NAME . OPEN_PARENTHESIS CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE
    (119) function -> FUNCTION NAME . OPEN_PARENTHESIS parameter CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE

    OPEN_PARENTHESIS shift and go to state 79


state 49

    (27) while -> WHILE OPEN_PARENTHESIS . controlArg CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE
    (28) while -> WHILE OPEN_PARENTHESIS . bool CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE
    (37) controlArg -> . element clause element
    (59) bool -> . TRUE
    (60) bool -> . FALSE
    (108) element -> . STRING
    (109) element -> . number
    (110) element -> . NAME
    (14) number -> . INTEGER
    (15) number -> . FLOAT
    (16) number -> . RESTA INTEGER
    (17) number -> . RESTA FLOAT

    TRUE            shift and go to state 83
    FALSE           shift and go to state 84
    STRING          shift and go to state 42
    NAME            shift and go to state 44
    INTEGER         shift and go to state 45
    FLOAT           shift and go to state 46
    RESTA           shift and go to state 47

    controlArg                     shift and go to state 80
    bool                           shift and go to state 81
    element                        shift and go to state 82
    number                         shift and go to state 43

state 50

    (38) for -> FOR OPEN_PARENTHESIS . inicialization SEMICOLON expBoolean SEMICOLON operations CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE
    (39) inicialization -> . type NAME IGUAL number
    (40) inicialization -> . NAME IGUAL number
    (61) type -> . CONST
    (62) type -> . LET
    (63) type -> . VAR

    NAME            shift and go to state 87
    CONST           shift and go to state 23
    LET             shift and go to state 24
    VAR             shift and go to state 25

    inicialization                 shift and go to state 85
    type                           shift and go to state 86

state 51

    (30) if -> soloIf elseIf .
    (31) if -> soloIf elseIf . else
    (36) else -> . ELSE OPEN_BRACE expression CLOSE_BRACE

    NAME            reduce using rule 30 (if -> soloIf elseIf .)
    PRINT           reduce using rule 30 (if -> soloIf elseIf .)
    RETURN          reduce using rule 30 (if -> soloIf elseIf .)
    FUNCTION        reduce using rule 30 (if -> soloIf elseIf .)
    CONST           reduce using rule 30 (if -> soloIf elseIf .)
    LET             reduce using rule 30 (if -> soloIf elseIf .)
    VAR             reduce using rule 30 (if -> soloIf elseIf .)
    WHILE           reduce using rule 30 (if -> soloIf elseIf .)
    FOR             reduce using rule 30 (if -> soloIf elseIf .)
    IF              reduce using rule 30 (if -> soloIf elseIf .)
    $end            reduce using rule 30 (if -> soloIf elseIf .)
    CLOSE_BRACE     reduce using rule 30 (if -> soloIf elseIf .)
    ELSE            shift and go to state 54

    else                           shift and go to state 88

state 52

    (32) if -> soloIf else .

    NAME            reduce using rule 32 (if -> soloIf else .)
    PRINT           reduce using rule 32 (if -> soloIf else .)
    RETURN          reduce using rule 32 (if -> soloIf else .)
    FUNCTION        reduce using rule 32 (if -> soloIf else .)
    CONST           reduce using rule 32 (if -> soloIf else .)
    LET             reduce using rule 32 (if -> soloIf else .)
    VAR             reduce using rule 32 (if -> soloIf else .)
    WHILE           reduce using rule 32 (if -> soloIf else .)
    FOR             reduce using rule 32 (if -> soloIf else .)
    IF              reduce using rule 32 (if -> soloIf else .)
    $end            reduce using rule 32 (if -> soloIf else .)
    CLOSE_BRACE     reduce using rule 32 (if -> soloIf else .)


state 53

    (34) elseIf -> ELSEIF . OPEN_PARENTHESIS controlArg CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE
    (35) elseIf -> ELSEIF . OPEN_PARENTHESIS controlArg CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE soloIf

    OPEN_PARENTHESIS shift and go to state 89


state 54

    (36) else -> ELSE . OPEN_BRACE expression CLOSE_BRACE

    OPEN_BRACE      shift and go to state 90


state 55

    (33) soloIf -> IF OPEN_PARENTHESIS . controlArg CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE
    (37) controlArg -> . element clause element
    (108) element -> . STRING
    (109) element -> . number
    (110) element -> . NAME
    (14) number -> . INTEGER
    (15) number -> . FLOAT
    (16) number -> . RESTA INTEGER
    (17) number -> . RESTA FLOAT

    STRING          shift and go to state 42
    NAME            shift and go to state 44
    INTEGER         shift and go to state 45
    FLOAT           shift and go to state 46
    RESTA           shift and go to state 47

    controlArg                     shift and go to state 91
    element                        shift and go to state 82
    number                         shift and go to state 43

state 56

    (77) iniciarMap -> variable IGUAL NEW . MAP OPEN_PARENTHESIS CLOSE_PARENTHESIS SEMICOLON

    MAP             shift and go to state 92


state 57

    (78) escribirMap -> variable IGUAL OPEN_BRACE . claveValor CLOSE_BRACE
    (84) generarMap -> variable IGUAL OPEN_BRACE . tuplas CLOSE_BRACE
    (79) claveValor -> . clave COLON valor
    (80) claveValor -> . clave COLON valor COMMA claveValor
    (85) tuplas -> . tupla
    (86) tuplas -> . tupla COMMA tuplas
    (81) clave -> . datatype
    (87) tupla -> . OPEN_BRACKET datatype CLOSE_BRACKET SEMICOLON
    (88) tupla -> . OPEN_BRACKET datatype COMMA datatype CLOSE_BRACKET SEMICOLON
    (51) datatype -> . number
    (52) datatype -> . STRING
    (53) datatype -> . CHAR
    (54) datatype -> . operations
    (14) number -> . INTEGER
    (15) number -> . FLOAT
    (16) number -> . RESTA INTEGER
    (17) number -> . RESTA FLOAT
    (41) operations -> . number operand number
    (42) operations -> . NAME
    (43) operations -> . NAME SUMA SUMA
    (44) operations -> . number
    (45) operations -> . number operand NAME operations
    (46) operations -> . NAME operand number operations
    (47) operations -> . number operand NAME
    (48) operations -> . NAME operand number
    (49) operations -> . NAME operand NAME operations
    (50) operations -> . number operand number operand operations

    OPEN_BRACKET    shift and go to state 98
    STRING          shift and go to state 100
    CHAR            shift and go to state 65
    INTEGER         shift and go to state 45
    FLOAT           shift and go to state 46
    RESTA           shift and go to state 47
    NAME            shift and go to state 101

    claveValor                     shift and go to state 93
    tuplas                         shift and go to state 94
    clave                          shift and go to state 95
    tupla                          shift and go to state 96
    datatype                       shift and go to state 97
    number                         shift and go to state 99
    operations                     shift and go to state 66

state 58

    (18) variable -> type NAME IGUAL . datatype SEMICOLON
    (19) variable -> type NAME IGUAL . operations SEMICOLON
    (72) array -> type NAME IGUAL . OPEN_BRACKET items CLOSE_BRACKET SEMICOLON
    (73) array -> type NAME IGUAL . NEW ARRAY OPEN_PARENTHESIS items CLOSE_PARENTHESIS SEMICOLON
    (95) set -> type NAME IGUAL . NEW SET OPEN_PARENTHESIS CLOSE_PARENTHESIS SEMICOLON
    (96) set -> type NAME IGUAL . NEW SET OPEN_PARENTHESIS OPEN_BRACKET items CLOSE_BRACKET CLOSE_PARENTHESIS SEMICOLON
    (97) set -> type NAME IGUAL . NEW SET OPEN_PARENTHESIS element CLOSE_PARENTHESIS SEMICOLON
    (51) datatype -> . number
    (52) datatype -> . STRING
    (53) datatype -> . CHAR
    (54) datatype -> . operations
    (41) operations -> . number operand number
    (42) operations -> . NAME
    (43) operations -> . NAME SUMA SUMA
    (44) operations -> . number
    (45) operations -> . number operand NAME operations
    (46) operations -> . NAME operand number operations
    (47) operations -> . number operand NAME
    (48) operations -> . NAME operand number
    (49) operations -> . NAME operand NAME operations
    (50) operations -> . number operand number operand operations
    (14) number -> . INTEGER
    (15) number -> . FLOAT
    (16) number -> . RESTA INTEGER
    (17) number -> . RESTA FLOAT

    OPEN_BRACKET    shift and go to state 104
    NEW             shift and go to state 105
    STRING          shift and go to state 100
    CHAR            shift and go to state 65
    NAME            shift and go to state 101
    INTEGER         shift and go to state 45
    FLOAT           shift and go to state 46
    RESTA           shift and go to state 47

    datatype                       shift and go to state 102
    operations                     shift and go to state 103
    number                         shift and go to state 99

state 59

    (110) element -> NAME .
    (42) operations -> NAME .
    (43) operations -> NAME . SUMA SUMA
    (46) operations -> NAME . operand number operations
    (48) operations -> NAME . operand number
    (49) operations -> NAME . operand NAME operations
    (55) operand -> . SUMA
    (56) operand -> . RESTA
    (57) operand -> . MULTIPLICACION
    (58) operand -> . DIVISION

  ! reduce/reduce conflict for SEMICOLON resolved using rule 42 (operations -> NAME .)
    SEMICOLON       reduce using rule 42 (operations -> NAME .)
    SUMA            shift and go to state 106
    RESTA           shift and go to state 108
    MULTIPLICACION  shift and go to state 109
    DIVISION        shift and go to state 110

  ! SEMICOLON       [ reduce using rule 110 (element -> NAME .) ]

    operand                        shift and go to state 107

state 60

    (20) variable -> NAME IGUAL datatype . SEMICOLON

    SEMICOLON       shift and go to state 111


state 61

    (111) declaration -> NAME IGUAL element . SEMICOLON

    SEMICOLON       shift and go to state 112


state 62

    (98) set -> NAME IGUAL NEW . SET OPEN_PARENTHESIS CLOSE_PARENTHESIS SEMICOLON
    (99) set -> NAME IGUAL NEW . SET OPEN_PARENTHESIS OPEN_BRACKET items CLOSE_BRACKET CLOSE_PARENTHESIS SEMICOLON
    (100) set -> NAME IGUAL NEW . SET OPEN_PARENTHESIS element CLOSE_PARENTHESIS SEMICOLON

    SET             shift and go to state 113


state 63

    (51) datatype -> number .
    (109) element -> number .
    (41) operations -> number . operand number
    (44) operations -> number .
    (45) operations -> number . operand NAME operations
    (47) operations -> number . operand NAME
    (50) operations -> number . operand number operand operations
    (55) operand -> . SUMA
    (56) operand -> . RESTA
    (57) operand -> . MULTIPLICACION
    (58) operand -> . DIVISION

  ! reduce/reduce conflict for SEMICOLON resolved using rule 51 (datatype -> number .)
  ! reduce/reduce conflict for SEMICOLON resolved using rule 44 (operations -> number .)
    SEMICOLON       reduce using rule 44 (operations -> number .)
    SUMA            shift and go to state 115
    RESTA           shift and go to state 108
    MULTIPLICACION  shift and go to state 109
    DIVISION        shift and go to state 110

  ! SEMICOLON       [ reduce using rule 51 (datatype -> number .) ]
  ! SEMICOLON       [ reduce using rule 109 (element -> number .) ]

    operand                        shift and go to state 114

state 64

    (52) datatype -> STRING .
    (108) element -> STRING .

  ! reduce/reduce conflict for SEMICOLON resolved using rule 52 (datatype -> STRING .)
    SEMICOLON       reduce using rule 52 (datatype -> STRING .)

  ! SEMICOLON       [ reduce using rule 108 (element -> STRING .) ]


state 65

    (53) datatype -> CHAR .

    SEMICOLON       reduce using rule 53 (datatype -> CHAR .)
    COLON           reduce using rule 53 (datatype -> CHAR .)
    CLOSE_BRACKET   reduce using rule 53 (datatype -> CHAR .)
    COMMA           reduce using rule 53 (datatype -> CHAR .)
    CLOSE_PARENTHESIS reduce using rule 53 (datatype -> CHAR .)
    CLOSE_BRACE     reduce using rule 53 (datatype -> CHAR .)


state 66

    (54) datatype -> operations .

    SEMICOLON       reduce using rule 54 (datatype -> operations .)
    COLON           reduce using rule 54 (datatype -> operations .)
    CLOSE_BRACKET   reduce using rule 54 (datatype -> operations .)
    COMMA           reduce using rule 54 (datatype -> operations .)
    CLOSE_PARENTHESIS reduce using rule 54 (datatype -> operations .)
    CLOSE_BRACE     reduce using rule 54 (datatype -> operations .)


state 67

    (101) methodsSet -> NAME POINT ADD . OPEN_PARENTHESIS element CLOSE_PARENTHESIS SEMICOLON

    OPEN_PARENTHESIS shift and go to state 116


state 68

    (102) methodsSet -> NAME POINT DELETE . OPEN_PARENTHESIS element CLOSE_PARENTHESIS SEMICOLON

    OPEN_PARENTHESIS shift and go to state 117


state 69

    (103) methodsSet -> NAME POINT CLEAR . OPEN_PARENTHESIS CLOSE_PARENTHESIS SEMICOLON
    (89) mapFunctions -> NAME POINT CLEAR . OPEN_PARENTHESIS CLOSE_PARENTHESIS SEMICOLON

    OPEN_PARENTHESIS shift and go to state 118


state 70

    (90) mapFunctions -> NAME POINT GET . OPEN_PARENTHESIS clave CLOSE_PARENTHESIS SEMICOLON

    OPEN_PARENTHESIS shift and go to state 119


state 71

    (91) mapFunctions -> NAME POINT HAS . OPEN_PARENTHESIS clave CLOSE_PARENTHESIS SEMICOLON

    OPEN_PARENTHESIS shift and go to state 120


state 72

    (92) arrayFn -> NAME POINT POP . OPEN_PARENTHESIS CLOSE_PARENTHESIS SEMICOLON

    OPEN_PARENTHESIS shift and go to state 121


state 73

    (93) arrayFn -> NAME POINT PUSH . OPEN_PARENTHESIS element CLOSE_PARENTHESIS SEMICOLON

    OPEN_PARENTHESIS shift and go to state 122


state 74

    (94) arrayFn -> NAME POINT UNSHIFT . OPEN_PARENTHESIS element CLOSE_PARENTHESIS SEMICOLON

    OPEN_PARENTHESIS shift and go to state 123


state 75

    (123) print -> PRINT OPEN_PARENTHESIS CLOSE_PARENTHESIS . SEMICOLON

    SEMICOLON       shift and go to state 124


state 76

    (122) return -> RETURN element SEMICOLON .

    $end            reduce using rule 122 (return -> RETURN element SEMICOLON .)
    CLOSE_BRACE     reduce using rule 122 (return -> RETURN element SEMICOLON .)


state 77

    (16) number -> RESTA INTEGER .

    SEMICOLON       reduce using rule 16 (number -> RESTA INTEGER .)
    SUMA            reduce using rule 16 (number -> RESTA INTEGER .)
    RESTA           reduce using rule 16 (number -> RESTA INTEGER .)
    MULTIPLICACION  reduce using rule 16 (number -> RESTA INTEGER .)
    DIVISION        reduce using rule 16 (number -> RESTA INTEGER .)
    IGUALIGUAL      reduce using rule 16 (number -> RESTA INTEGER .)
    DIFERENTE       reduce using rule 16 (number -> RESTA INTEGER .)
    MAYORQUE        reduce using rule 16 (number -> RESTA INTEGER .)
    MAYORIGUALQUE   reduce using rule 16 (number -> RESTA INTEGER .)
    MENORQUE        reduce using rule 16 (number -> RESTA INTEGER .)
    MENORIGUALQUE   reduce using rule 16 (number -> RESTA INTEGER .)
    COLON           reduce using rule 16 (number -> RESTA INTEGER .)
    STRING          reduce using rule 16 (number -> RESTA INTEGER .)
    NAME            reduce using rule 16 (number -> RESTA INTEGER .)
    INTEGER         reduce using rule 16 (number -> RESTA INTEGER .)
    FLOAT           reduce using rule 16 (number -> RESTA INTEGER .)
    CLOSE_PARENTHESIS reduce using rule 16 (number -> RESTA INTEGER .)
    CLOSE_BRACKET   reduce using rule 16 (number -> RESTA INTEGER .)
    COMMA           reduce using rule 16 (number -> RESTA INTEGER .)
    CLOSE_BRACE     reduce using rule 16 (number -> RESTA INTEGER .)
    AND             reduce using rule 16 (number -> RESTA INTEGER .)
    OR              reduce using rule 16 (number -> RESTA INTEGER .)


state 78

    (17) number -> RESTA FLOAT .

    SEMICOLON       reduce using rule 17 (number -> RESTA FLOAT .)
    SUMA            reduce using rule 17 (number -> RESTA FLOAT .)
    RESTA           reduce using rule 17 (number -> RESTA FLOAT .)
    MULTIPLICACION  reduce using rule 17 (number -> RESTA FLOAT .)
    DIVISION        reduce using rule 17 (number -> RESTA FLOAT .)
    IGUALIGUAL      reduce using rule 17 (number -> RESTA FLOAT .)
    DIFERENTE       reduce using rule 17 (number -> RESTA FLOAT .)
    MAYORQUE        reduce using rule 17 (number -> RESTA FLOAT .)
    MAYORIGUALQUE   reduce using rule 17 (number -> RESTA FLOAT .)
    MENORQUE        reduce using rule 17 (number -> RESTA FLOAT .)
    MENORIGUALQUE   reduce using rule 17 (number -> RESTA FLOAT .)
    COLON           reduce using rule 17 (number -> RESTA FLOAT .)
    STRING          reduce using rule 17 (number -> RESTA FLOAT .)
    NAME            reduce using rule 17 (number -> RESTA FLOAT .)
    INTEGER         reduce using rule 17 (number -> RESTA FLOAT .)
    FLOAT           reduce using rule 17 (number -> RESTA FLOAT .)
    CLOSE_PARENTHESIS reduce using rule 17 (number -> RESTA FLOAT .)
    CLOSE_BRACKET   reduce using rule 17 (number -> RESTA FLOAT .)
    COMMA           reduce using rule 17 (number -> RESTA FLOAT .)
    CLOSE_BRACE     reduce using rule 17 (number -> RESTA FLOAT .)
    AND             reduce using rule 17 (number -> RESTA FLOAT .)
    OR              reduce using rule 17 (number -> RESTA FLOAT .)


state 79

    (118) function -> FUNCTION NAME OPEN_PARENTHESIS . CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE
    (119) function -> FUNCTION NAME OPEN_PARENTHESIS . parameter CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE
    (120) parameter -> . element
    (121) parameter -> . element parameter
    (108) element -> . STRING
    (109) element -> . number
    (110) element -> . NAME
    (14) number -> . INTEGER
    (15) number -> . FLOAT
    (16) number -> . RESTA INTEGER
    (17) number -> . RESTA FLOAT

    CLOSE_PARENTHESIS shift and go to state 125
    STRING          shift and go to state 42
    NAME            shift and go to state 44
    INTEGER         shift and go to state 45
    FLOAT           shift and go to state 46
    RESTA           shift and go to state 47

    parameter                      shift and go to state 126
    element                        shift and go to state 127
    number                         shift and go to state 43

state 80

    (27) while -> WHILE OPEN_PARENTHESIS controlArg . CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE

    CLOSE_PARENTHESIS shift and go to state 128


state 81

    (28) while -> WHILE OPEN_PARENTHESIS bool . CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE

    CLOSE_PARENTHESIS shift and go to state 129


state 82

    (37) controlArg -> element . clause element
    (64) clause -> . IGUALIGUAL
    (65) clause -> . DIFERENTE
    (66) clause -> . MAYORQUE
    (67) clause -> . MAYORIGUALQUE
    (68) clause -> . MENORQUE
    (69) clause -> . MENORIGUALQUE

    IGUALIGUAL      shift and go to state 131
    DIFERENTE       shift and go to state 132
    MAYORQUE        shift and go to state 133
    MAYORIGUALQUE   shift and go to state 134
    MENORQUE        shift and go to state 135
    MENORIGUALQUE   shift and go to state 136

    clause                         shift and go to state 130

state 83

    (59) bool -> TRUE .

    CLOSE_PARENTHESIS reduce using rule 59 (bool -> TRUE .)
    SEMICOLON       reduce using rule 59 (bool -> TRUE .)
    AND             reduce using rule 59 (bool -> TRUE .)
    OR              reduce using rule 59 (bool -> TRUE .)


state 84

    (60) bool -> FALSE .

    CLOSE_PARENTHESIS reduce using rule 60 (bool -> FALSE .)
    SEMICOLON       reduce using rule 60 (bool -> FALSE .)
    AND             reduce using rule 60 (bool -> FALSE .)
    OR              reduce using rule 60 (bool -> FALSE .)


state 85

    (38) for -> FOR OPEN_PARENTHESIS inicialization . SEMICOLON expBoolean SEMICOLON operations CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE

    SEMICOLON       shift and go to state 137


state 86

    (39) inicialization -> type . NAME IGUAL number

    NAME            shift and go to state 138


state 87

    (40) inicialization -> NAME . IGUAL number

    IGUAL           shift and go to state 139


state 88

    (31) if -> soloIf elseIf else .

    NAME            reduce using rule 31 (if -> soloIf elseIf else .)
    PRINT           reduce using rule 31 (if -> soloIf elseIf else .)
    RETURN          reduce using rule 31 (if -> soloIf elseIf else .)
    FUNCTION        reduce using rule 31 (if -> soloIf elseIf else .)
    CONST           reduce using rule 31 (if -> soloIf elseIf else .)
    LET             reduce using rule 31 (if -> soloIf elseIf else .)
    VAR             reduce using rule 31 (if -> soloIf elseIf else .)
    WHILE           reduce using rule 31 (if -> soloIf elseIf else .)
    FOR             reduce using rule 31 (if -> soloIf elseIf else .)
    IF              reduce using rule 31 (if -> soloIf elseIf else .)
    $end            reduce using rule 31 (if -> soloIf elseIf else .)
    CLOSE_BRACE     reduce using rule 31 (if -> soloIf elseIf else .)


state 89

    (34) elseIf -> ELSEIF OPEN_PARENTHESIS . controlArg CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE
    (35) elseIf -> ELSEIF OPEN_PARENTHESIS . controlArg CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE soloIf
    (37) controlArg -> . element clause element
    (108) element -> . STRING
    (109) element -> . number
    (110) element -> . NAME
    (14) number -> . INTEGER
    (15) number -> . FLOAT
    (16) number -> . RESTA INTEGER
    (17) number -> . RESTA FLOAT

    STRING          shift and go to state 42
    NAME            shift and go to state 44
    INTEGER         shift and go to state 45
    FLOAT           shift and go to state 46
    RESTA           shift and go to state 47

    controlArg                     shift and go to state 140
    element                        shift and go to state 82
    number                         shift and go to state 43

state 90

    (36) else -> ELSE OPEN_BRACE . expression CLOSE_BRACE
    (1) expression -> . variable
    (2) expression -> . variable expression
    (3) expression -> . dataStruct
    (4) expression -> . dataStruct expression
    (5) expression -> . controlStruct
    (6) expression -> . controlStruct expression
    (7) expression -> . methodsSet
    (8) expression -> . mapFunctions
    (9) expression -> . arrayFn
    (10) expression -> . declaration
    (11) expression -> . print
    (12) expression -> . return
    (13) expression -> . function
    (18) variable -> . type NAME IGUAL datatype SEMICOLON
    (19) variable -> . type NAME IGUAL operations SEMICOLON
    (20) variable -> . NAME IGUAL datatype SEMICOLON
    (24) dataStruct -> . array
    (25) dataStruct -> . set
    (26) dataStruct -> . map
    (21) controlStruct -> . while
    (22) controlStruct -> . for
    (23) controlStruct -> . if
    (101) methodsSet -> . NAME POINT ADD OPEN_PARENTHESIS element CLOSE_PARENTHESIS SEMICOLON
    (102) methodsSet -> . NAME POINT DELETE OPEN_PARENTHESIS element CLOSE_PARENTHESIS SEMICOLON
    (103) methodsSet -> . NAME POINT CLEAR OPEN_PARENTHESIS CLOSE_PARENTHESIS SEMICOLON
    (89) mapFunctions -> . NAME POINT CLEAR OPEN_PARENTHESIS CLOSE_PARENTHESIS SEMICOLON
    (90) mapFunctions -> . NAME POINT GET OPEN_PARENTHESIS clave CLOSE_PARENTHESIS SEMICOLON
    (91) mapFunctions -> . NAME POINT HAS OPEN_PARENTHESIS clave CLOSE_PARENTHESIS SEMICOLON
    (92) arrayFn -> . NAME POINT POP OPEN_PARENTHESIS CLOSE_PARENTHESIS SEMICOLON
    (93) arrayFn -> . NAME POINT PUSH OPEN_PARENTHESIS element CLOSE_PARENTHESIS SEMICOLON
    (94) arrayFn -> . NAME POINT UNSHIFT OPEN_PARENTHESIS element CLOSE_PARENTHESIS SEMICOLON
    (111) declaration -> . NAME IGUAL element SEMICOLON
    (123) print -> . PRINT OPEN_PARENTHESIS CLOSE_PARENTHESIS SEMICOLON
    (122) return -> . RETURN element SEMICOLON
    (118) function -> . FUNCTION NAME OPEN_PARENTHESIS CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE
    (119) function -> . FUNCTION NAME OPEN_PARENTHESIS parameter CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE
    (61) type -> . CONST
    (62) type -> . LET
    (63) type -> . VAR
    (72) array -> . type NAME IGUAL OPEN_BRACKET items CLOSE_BRACKET SEMICOLON
    (73) array -> . type NAME IGUAL NEW ARRAY OPEN_PARENTHESIS items CLOSE_PARENTHESIS SEMICOLON
    (95) set -> . type NAME IGUAL NEW SET OPEN_PARENTHESIS CLOSE_PARENTHESIS SEMICOLON
    (96) set -> . type NAME IGUAL NEW SET OPEN_PARENTHESIS OPEN_BRACKET items CLOSE_BRACKET CLOSE_PARENTHESIS SEMICOLON
    (97) set -> . type NAME IGUAL NEW SET OPEN_PARENTHESIS element CLOSE_PARENTHESIS SEMICOLON
    (98) set -> . NAME IGUAL NEW SET OPEN_PARENTHESIS CLOSE_PARENTHESIS SEMICOLON
    (99) set -> . NAME IGUAL NEW SET OPEN_PARENTHESIS OPEN_BRACKET items CLOSE_BRACKET CLOSE_PARENTHESIS SEMICOLON
    (100) set -> . NAME IGUAL NEW SET OPEN_PARENTHESIS element CLOSE_PARENTHESIS SEMICOLON
    (74) map -> . iniciarMap
    (75) map -> . escribirMap
    (76) map -> . generarMap
    (27) while -> . WHILE OPEN_PARENTHESIS controlArg CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE
    (28) while -> . WHILE OPEN_PARENTHESIS bool CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE
    (38) for -> . FOR OPEN_PARENTHESIS inicialization SEMICOLON expBoolean SEMICOLON operations CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE
    (29) if -> . soloIf
    (30) if -> . soloIf elseIf
    (31) if -> . soloIf elseIf else
    (32) if -> . soloIf else
    (77) iniciarMap -> . variable IGUAL NEW MAP OPEN_PARENTHESIS CLOSE_PARENTHESIS SEMICOLON
    (78) escribirMap -> . variable IGUAL OPEN_BRACE claveValor CLOSE_BRACE
    (84) generarMap -> . variable IGUAL OPEN_BRACE tuplas CLOSE_BRACE
    (33) soloIf -> . IF OPEN_PARENTHESIS controlArg CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE

    NAME            shift and go to state 13
    PRINT           shift and go to state 20
    RETURN          shift and go to state 21
    FUNCTION        shift and go to state 22
    CONST           shift and go to state 23
    LET             shift and go to state 24
    VAR             shift and go to state 25
    WHILE           shift and go to state 29
    FOR             shift and go to state 30
    IF              shift and go to state 32

    expression                     shift and go to state 141
    variable                       shift and go to state 2
    dataStruct                     shift and go to state 3
    controlStruct                  shift and go to state 4
    methodsSet                     shift and go to state 5
    mapFunctions                   shift and go to state 6
    arrayFn                        shift and go to state 7
    declaration                    shift and go to state 8
    print                          shift and go to state 9
    return                         shift and go to state 10
    function                       shift and go to state 11
    type                           shift and go to state 12
    array                          shift and go to state 14
    set                            shift and go to state 15
    map                            shift and go to state 16
    while                          shift and go to state 17
    for                            shift and go to state 18
    if                             shift and go to state 19
    iniciarMap                     shift and go to state 26
    escribirMap                    shift and go to state 27
    generarMap                     shift and go to state 28
    soloIf                         shift and go to state 31

state 91

    (33) soloIf -> IF OPEN_PARENTHESIS controlArg . CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE

    CLOSE_PARENTHESIS shift and go to state 142


state 92

    (77) iniciarMap -> variable IGUAL NEW MAP . OPEN_PARENTHESIS CLOSE_PARENTHESIS SEMICOLON

    OPEN_PARENTHESIS shift and go to state 143


state 93

    (78) escribirMap -> variable IGUAL OPEN_BRACE claveValor . CLOSE_BRACE

    CLOSE_BRACE     shift and go to state 144


state 94

    (84) generarMap -> variable IGUAL OPEN_BRACE tuplas . CLOSE_BRACE

    CLOSE_BRACE     shift and go to state 145


state 95

    (79) claveValor -> clave . COLON valor
    (80) claveValor -> clave . COLON valor COMMA claveValor

    COLON           shift and go to state 146


state 96

    (85) tuplas -> tupla .
    (86) tuplas -> tupla . COMMA tuplas

    CLOSE_BRACE     reduce using rule 85 (tuplas -> tupla .)
    COMMA           shift and go to state 147


state 97

    (81) clave -> datatype .

    COLON           reduce using rule 81 (clave -> datatype .)
    CLOSE_PARENTHESIS reduce using rule 81 (clave -> datatype .)


state 98

    (87) tupla -> OPEN_BRACKET . datatype CLOSE_BRACKET SEMICOLON
    (88) tupla -> OPEN_BRACKET . datatype COMMA datatype CLOSE_BRACKET SEMICOLON
    (51) datatype -> . number
    (52) datatype -> . STRING
    (53) datatype -> . CHAR
    (54) datatype -> . operations
    (14) number -> . INTEGER
    (15) number -> . FLOAT
    (16) number -> . RESTA INTEGER
    (17) number -> . RESTA FLOAT
    (41) operations -> . number operand number
    (42) operations -> . NAME
    (43) operations -> . NAME SUMA SUMA
    (44) operations -> . number
    (45) operations -> . number operand NAME operations
    (46) operations -> . NAME operand number operations
    (47) operations -> . number operand NAME
    (48) operations -> . NAME operand number
    (49) operations -> . NAME operand NAME operations
    (50) operations -> . number operand number operand operations

    STRING          shift and go to state 100
    CHAR            shift and go to state 65
    INTEGER         shift and go to state 45
    FLOAT           shift and go to state 46
    RESTA           shift and go to state 47
    NAME            shift and go to state 101

    datatype                       shift and go to state 148
    number                         shift and go to state 99
    operations                     shift and go to state 66

state 99

    (51) datatype -> number .
    (41) operations -> number . operand number
    (44) operations -> number .
    (45) operations -> number . operand NAME operations
    (47) operations -> number . operand NAME
    (50) operations -> number . operand number operand operations
    (55) operand -> . SUMA
    (56) operand -> . RESTA
    (57) operand -> . MULTIPLICACION
    (58) operand -> . DIVISION

  ! reduce/reduce conflict for COLON resolved using rule 44 (operations -> number .)
  ! reduce/reduce conflict for SEMICOLON resolved using rule 44 (operations -> number .)
  ! reduce/reduce conflict for CLOSE_BRACKET resolved using rule 44 (operations -> number .)
  ! reduce/reduce conflict for COMMA resolved using rule 44 (operations -> number .)
  ! reduce/reduce conflict for CLOSE_PARENTHESIS resolved using rule 44 (operations -> number .)
  ! reduce/reduce conflict for CLOSE_BRACE resolved using rule 44 (operations -> number .)
    COLON           reduce using rule 44 (operations -> number .)
    SEMICOLON       reduce using rule 44 (operations -> number .)
    CLOSE_BRACKET   reduce using rule 44 (operations -> number .)
    COMMA           reduce using rule 44 (operations -> number .)
    CLOSE_PARENTHESIS reduce using rule 44 (operations -> number .)
    CLOSE_BRACE     reduce using rule 44 (operations -> number .)
    SUMA            shift and go to state 115
    RESTA           shift and go to state 108
    MULTIPLICACION  shift and go to state 109
    DIVISION        shift and go to state 110

  ! COLON           [ reduce using rule 51 (datatype -> number .) ]
  ! SEMICOLON       [ reduce using rule 51 (datatype -> number .) ]
  ! CLOSE_BRACKET   [ reduce using rule 51 (datatype -> number .) ]
  ! COMMA           [ reduce using rule 51 (datatype -> number .) ]
  ! CLOSE_PARENTHESIS [ reduce using rule 51 (datatype -> number .) ]
  ! CLOSE_BRACE     [ reduce using rule 51 (datatype -> number .) ]

    operand                        shift and go to state 114

state 100

    (52) datatype -> STRING .

    COLON           reduce using rule 52 (datatype -> STRING .)
    SEMICOLON       reduce using rule 52 (datatype -> STRING .)
    CLOSE_BRACKET   reduce using rule 52 (datatype -> STRING .)
    COMMA           reduce using rule 52 (datatype -> STRING .)
    CLOSE_PARENTHESIS reduce using rule 52 (datatype -> STRING .)
    CLOSE_BRACE     reduce using rule 52 (datatype -> STRING .)


state 101

    (42) operations -> NAME .
    (43) operations -> NAME . SUMA SUMA
    (46) operations -> NAME . operand number operations
    (48) operations -> NAME . operand number
    (49) operations -> NAME . operand NAME operations
    (55) operand -> . SUMA
    (56) operand -> . RESTA
    (57) operand -> . MULTIPLICACION
    (58) operand -> . DIVISION

    COLON           reduce using rule 42 (operations -> NAME .)
    SEMICOLON       reduce using rule 42 (operations -> NAME .)
    CLOSE_BRACKET   reduce using rule 42 (operations -> NAME .)
    COMMA           reduce using rule 42 (operations -> NAME .)
    CLOSE_PARENTHESIS reduce using rule 42 (operations -> NAME .)
    CLOSE_BRACE     reduce using rule 42 (operations -> NAME .)
    SUMA            shift and go to state 106
    RESTA           shift and go to state 108
    MULTIPLICACION  shift and go to state 109
    DIVISION        shift and go to state 110

    operand                        shift and go to state 107

state 102

    (18) variable -> type NAME IGUAL datatype . SEMICOLON

    SEMICOLON       shift and go to state 149


state 103

    (19) variable -> type NAME IGUAL operations . SEMICOLON
    (54) datatype -> operations .

  ! shift/reduce conflict for SEMICOLON resolved as shift
    SEMICOLON       shift and go to state 150

  ! SEMICOLON       [ reduce using rule 54 (datatype -> operations .) ]


state 104

    (72) array -> type NAME IGUAL OPEN_BRACKET . items CLOSE_BRACKET SEMICOLON
    (104) items -> . number
    (105) items -> . cadena
    (14) number -> . INTEGER
    (15) number -> . FLOAT
    (16) number -> . RESTA INTEGER
    (17) number -> . RESTA FLOAT
    (106) cadena -> . STRING
    (107) cadena -> . STRING COMMA cadena

    INTEGER         shift and go to state 45
    FLOAT           shift and go to state 46
    RESTA           shift and go to state 47
    STRING          shift and go to state 154

    items                          shift and go to state 151
    number                         shift and go to state 152
    cadena                         shift and go to state 153

state 105

    (73) array -> type NAME IGUAL NEW . ARRAY OPEN_PARENTHESIS items CLOSE_PARENTHESIS SEMICOLON
    (95) set -> type NAME IGUAL NEW . SET OPEN_PARENTHESIS CLOSE_PARENTHESIS SEMICOLON
    (96) set -> type NAME IGUAL NEW . SET OPEN_PARENTHESIS OPEN_BRACKET items CLOSE_BRACKET CLOSE_PARENTHESIS SEMICOLON
    (97) set -> type NAME IGUAL NEW . SET OPEN_PARENTHESIS element CLOSE_PARENTHESIS SEMICOLON

    ARRAY           shift and go to state 155
    SET             shift and go to state 156


state 106

    (43) operations -> NAME SUMA . SUMA
    (55) operand -> SUMA .

    SUMA            shift and go to state 157
    NAME            reduce using rule 55 (operand -> SUMA .)
    INTEGER         reduce using rule 55 (operand -> SUMA .)
    FLOAT           reduce using rule 55 (operand -> SUMA .)
    RESTA           reduce using rule 55 (operand -> SUMA .)


state 107

    (46) operations -> NAME operand . number operations
    (48) operations -> NAME operand . number
    (49) operations -> NAME operand . NAME operations
    (14) number -> . INTEGER
    (15) number -> . FLOAT
    (16) number -> . RESTA INTEGER
    (17) number -> . RESTA FLOAT

    NAME            shift and go to state 158
    INTEGER         shift and go to state 45
    FLOAT           shift and go to state 46
    RESTA           shift and go to state 47

    number                         shift and go to state 159

state 108

    (56) operand -> RESTA .

    NAME            reduce using rule 56 (operand -> RESTA .)
    INTEGER         reduce using rule 56 (operand -> RESTA .)
    FLOAT           reduce using rule 56 (operand -> RESTA .)
    RESTA           reduce using rule 56 (operand -> RESTA .)


state 109

    (57) operand -> MULTIPLICACION .

    NAME            reduce using rule 57 (operand -> MULTIPLICACION .)
    INTEGER         reduce using rule 57 (operand -> MULTIPLICACION .)
    FLOAT           reduce using rule 57 (operand -> MULTIPLICACION .)
    RESTA           reduce using rule 57 (operand -> MULTIPLICACION .)


state 110

    (58) operand -> DIVISION .

    NAME            reduce using rule 58 (operand -> DIVISION .)
    INTEGER         reduce using rule 58 (operand -> DIVISION .)
    FLOAT           reduce using rule 58 (operand -> DIVISION .)
    RESTA           reduce using rule 58 (operand -> DIVISION .)


state 111

    (20) variable -> NAME IGUAL datatype SEMICOLON .

    IGUAL           reduce using rule 20 (variable -> NAME IGUAL datatype SEMICOLON .)
    NAME            reduce using rule 20 (variable -> NAME IGUAL datatype SEMICOLON .)
    PRINT           reduce using rule 20 (variable -> NAME IGUAL datatype SEMICOLON .)
    RETURN          reduce using rule 20 (variable -> NAME IGUAL datatype SEMICOLON .)
    FUNCTION        reduce using rule 20 (variable -> NAME IGUAL datatype SEMICOLON .)
    CONST           reduce using rule 20 (variable -> NAME IGUAL datatype SEMICOLON .)
    LET             reduce using rule 20 (variable -> NAME IGUAL datatype SEMICOLON .)
    VAR             reduce using rule 20 (variable -> NAME IGUAL datatype SEMICOLON .)
    WHILE           reduce using rule 20 (variable -> NAME IGUAL datatype SEMICOLON .)
    FOR             reduce using rule 20 (variable -> NAME IGUAL datatype SEMICOLON .)
    IF              reduce using rule 20 (variable -> NAME IGUAL datatype SEMICOLON .)
    $end            reduce using rule 20 (variable -> NAME IGUAL datatype SEMICOLON .)
    CLOSE_BRACE     reduce using rule 20 (variable -> NAME IGUAL datatype SEMICOLON .)


state 112

    (111) declaration -> NAME IGUAL element SEMICOLON .

    $end            reduce using rule 111 (declaration -> NAME IGUAL element SEMICOLON .)
    CLOSE_BRACE     reduce using rule 111 (declaration -> NAME IGUAL element SEMICOLON .)


state 113

    (98) set -> NAME IGUAL NEW SET . OPEN_PARENTHESIS CLOSE_PARENTHESIS SEMICOLON
    (99) set -> NAME IGUAL NEW SET . OPEN_PARENTHESIS OPEN_BRACKET items CLOSE_BRACKET CLOSE_PARENTHESIS SEMICOLON
    (100) set -> NAME IGUAL NEW SET . OPEN_PARENTHESIS element CLOSE_PARENTHESIS SEMICOLON

    OPEN_PARENTHESIS shift and go to state 160


state 114

    (41) operations -> number operand . number
    (45) operations -> number operand . NAME operations
    (47) operations -> number operand . NAME
    (50) operations -> number operand . number operand operations
    (14) number -> . INTEGER
    (15) number -> . FLOAT
    (16) number -> . RESTA INTEGER
    (17) number -> . RESTA FLOAT

    NAME            shift and go to state 162
    INTEGER         shift and go to state 45
    FLOAT           shift and go to state 46
    RESTA           shift and go to state 47

    number                         shift and go to state 161

state 115

    (55) operand -> SUMA .

    NAME            reduce using rule 55 (operand -> SUMA .)
    INTEGER         reduce using rule 55 (operand -> SUMA .)
    FLOAT           reduce using rule 55 (operand -> SUMA .)
    RESTA           reduce using rule 55 (operand -> SUMA .)


state 116

    (101) methodsSet -> NAME POINT ADD OPEN_PARENTHESIS . element CLOSE_PARENTHESIS SEMICOLON
    (108) element -> . STRING
    (109) element -> . number
    (110) element -> . NAME
    (14) number -> . INTEGER
    (15) number -> . FLOAT
    (16) number -> . RESTA INTEGER
    (17) number -> . RESTA FLOAT

    STRING          shift and go to state 42
    NAME            shift and go to state 44
    INTEGER         shift and go to state 45
    FLOAT           shift and go to state 46
    RESTA           shift and go to state 47

    element                        shift and go to state 163
    number                         shift and go to state 43

state 117

    (102) methodsSet -> NAME POINT DELETE OPEN_PARENTHESIS . element CLOSE_PARENTHESIS SEMICOLON
    (108) element -> . STRING
    (109) element -> . number
    (110) element -> . NAME
    (14) number -> . INTEGER
    (15) number -> . FLOAT
    (16) number -> . RESTA INTEGER
    (17) number -> . RESTA FLOAT

    STRING          shift and go to state 42
    NAME            shift and go to state 44
    INTEGER         shift and go to state 45
    FLOAT           shift and go to state 46
    RESTA           shift and go to state 47

    element                        shift and go to state 164
    number                         shift and go to state 43

state 118

    (103) methodsSet -> NAME POINT CLEAR OPEN_PARENTHESIS . CLOSE_PARENTHESIS SEMICOLON
    (89) mapFunctions -> NAME POINT CLEAR OPEN_PARENTHESIS . CLOSE_PARENTHESIS SEMICOLON

    CLOSE_PARENTHESIS shift and go to state 165


state 119

    (90) mapFunctions -> NAME POINT GET OPEN_PARENTHESIS . clave CLOSE_PARENTHESIS SEMICOLON
    (81) clave -> . datatype
    (51) datatype -> . number
    (52) datatype -> . STRING
    (53) datatype -> . CHAR
    (54) datatype -> . operations
    (14) number -> . INTEGER
    (15) number -> . FLOAT
    (16) number -> . RESTA INTEGER
    (17) number -> . RESTA FLOAT
    (41) operations -> . number operand number
    (42) operations -> . NAME
    (43) operations -> . NAME SUMA SUMA
    (44) operations -> . number
    (45) operations -> . number operand NAME operations
    (46) operations -> . NAME operand number operations
    (47) operations -> . number operand NAME
    (48) operations -> . NAME operand number
    (49) operations -> . NAME operand NAME operations
    (50) operations -> . number operand number operand operations

    STRING          shift and go to state 100
    CHAR            shift and go to state 65
    INTEGER         shift and go to state 45
    FLOAT           shift and go to state 46
    RESTA           shift and go to state 47
    NAME            shift and go to state 101

    clave                          shift and go to state 166
    datatype                       shift and go to state 97
    number                         shift and go to state 99
    operations                     shift and go to state 66

state 120

    (91) mapFunctions -> NAME POINT HAS OPEN_PARENTHESIS . clave CLOSE_PARENTHESIS SEMICOLON
    (81) clave -> . datatype
    (51) datatype -> . number
    (52) datatype -> . STRING
    (53) datatype -> . CHAR
    (54) datatype -> . operations
    (14) number -> . INTEGER
    (15) number -> . FLOAT
    (16) number -> . RESTA INTEGER
    (17) number -> . RESTA FLOAT
    (41) operations -> . number operand number
    (42) operations -> . NAME
    (43) operations -> . NAME SUMA SUMA
    (44) operations -> . number
    (45) operations -> . number operand NAME operations
    (46) operations -> . NAME operand number operations
    (47) operations -> . number operand NAME
    (48) operations -> . NAME operand number
    (49) operations -> . NAME operand NAME operations
    (50) operations -> . number operand number operand operations

    STRING          shift and go to state 100
    CHAR            shift and go to state 65
    INTEGER         shift and go to state 45
    FLOAT           shift and go to state 46
    RESTA           shift and go to state 47
    NAME            shift and go to state 101

    clave                          shift and go to state 167
    datatype                       shift and go to state 97
    number                         shift and go to state 99
    operations                     shift and go to state 66

state 121

    (92) arrayFn -> NAME POINT POP OPEN_PARENTHESIS . CLOSE_PARENTHESIS SEMICOLON

    CLOSE_PARENTHESIS shift and go to state 168


state 122

    (93) arrayFn -> NAME POINT PUSH OPEN_PARENTHESIS . element CLOSE_PARENTHESIS SEMICOLON
    (108) element -> . STRING
    (109) element -> . number
    (110) element -> . NAME
    (14) number -> . INTEGER
    (15) number -> . FLOAT
    (16) number -> . RESTA INTEGER
    (17) number -> . RESTA FLOAT

    STRING          shift and go to state 42
    NAME            shift and go to state 44
    INTEGER         shift and go to state 45
    FLOAT           shift and go to state 46
    RESTA           shift and go to state 47

    element                        shift and go to state 169
    number                         shift and go to state 43

state 123

    (94) arrayFn -> NAME POINT UNSHIFT OPEN_PARENTHESIS . element CLOSE_PARENTHESIS SEMICOLON
    (108) element -> . STRING
    (109) element -> . number
    (110) element -> . NAME
    (14) number -> . INTEGER
    (15) number -> . FLOAT
    (16) number -> . RESTA INTEGER
    (17) number -> . RESTA FLOAT

    STRING          shift and go to state 42
    NAME            shift and go to state 44
    INTEGER         shift and go to state 45
    FLOAT           shift and go to state 46
    RESTA           shift and go to state 47

    element                        shift and go to state 170
    number                         shift and go to state 43

state 124

    (123) print -> PRINT OPEN_PARENTHESIS CLOSE_PARENTHESIS SEMICOLON .

    $end            reduce using rule 123 (print -> PRINT OPEN_PARENTHESIS CLOSE_PARENTHESIS SEMICOLON .)
    CLOSE_BRACE     reduce using rule 123 (print -> PRINT OPEN_PARENTHESIS CLOSE_PARENTHESIS SEMICOLON .)


state 125

    (118) function -> FUNCTION NAME OPEN_PARENTHESIS CLOSE_PARENTHESIS . OPEN_BRACE expression CLOSE_BRACE

    OPEN_BRACE      shift and go to state 171


state 126

    (119) function -> FUNCTION NAME OPEN_PARENTHESIS parameter . CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE

    CLOSE_PARENTHESIS shift and go to state 172


state 127

    (120) parameter -> element .
    (121) parameter -> element . parameter
    (120) parameter -> . element
    (121) parameter -> . element parameter
    (108) element -> . STRING
    (109) element -> . number
    (110) element -> . NAME
    (14) number -> . INTEGER
    (15) number -> . FLOAT
    (16) number -> . RESTA INTEGER
    (17) number -> . RESTA FLOAT

    CLOSE_PARENTHESIS reduce using rule 120 (parameter -> element .)
    STRING          shift and go to state 42
    NAME            shift and go to state 44
    INTEGER         shift and go to state 45
    FLOAT           shift and go to state 46
    RESTA           shift and go to state 47

    element                        shift and go to state 127
    parameter                      shift and go to state 173
    number                         shift and go to state 43

state 128

    (27) while -> WHILE OPEN_PARENTHESIS controlArg CLOSE_PARENTHESIS . OPEN_BRACE expression CLOSE_BRACE

    OPEN_BRACE      shift and go to state 174


state 129

    (28) while -> WHILE OPEN_PARENTHESIS bool CLOSE_PARENTHESIS . OPEN_BRACE expression CLOSE_BRACE

    OPEN_BRACE      shift and go to state 175


state 130

    (37) controlArg -> element clause . element
    (108) element -> . STRING
    (109) element -> . number
    (110) element -> . NAME
    (14) number -> . INTEGER
    (15) number -> . FLOAT
    (16) number -> . RESTA INTEGER
    (17) number -> . RESTA FLOAT

    STRING          shift and go to state 42
    NAME            shift and go to state 44
    INTEGER         shift and go to state 45
    FLOAT           shift and go to state 46
    RESTA           shift and go to state 47

    element                        shift and go to state 176
    number                         shift and go to state 43

state 131

    (64) clause -> IGUALIGUAL .

    STRING          reduce using rule 64 (clause -> IGUALIGUAL .)
    NAME            reduce using rule 64 (clause -> IGUALIGUAL .)
    INTEGER         reduce using rule 64 (clause -> IGUALIGUAL .)
    FLOAT           reduce using rule 64 (clause -> IGUALIGUAL .)
    RESTA           reduce using rule 64 (clause -> IGUALIGUAL .)


state 132

    (65) clause -> DIFERENTE .

    STRING          reduce using rule 65 (clause -> DIFERENTE .)
    NAME            reduce using rule 65 (clause -> DIFERENTE .)
    INTEGER         reduce using rule 65 (clause -> DIFERENTE .)
    FLOAT           reduce using rule 65 (clause -> DIFERENTE .)
    RESTA           reduce using rule 65 (clause -> DIFERENTE .)


state 133

    (66) clause -> MAYORQUE .

    STRING          reduce using rule 66 (clause -> MAYORQUE .)
    NAME            reduce using rule 66 (clause -> MAYORQUE .)
    INTEGER         reduce using rule 66 (clause -> MAYORQUE .)
    FLOAT           reduce using rule 66 (clause -> MAYORQUE .)
    RESTA           reduce using rule 66 (clause -> MAYORQUE .)


state 134

    (67) clause -> MAYORIGUALQUE .

    STRING          reduce using rule 67 (clause -> MAYORIGUALQUE .)
    NAME            reduce using rule 67 (clause -> MAYORIGUALQUE .)
    INTEGER         reduce using rule 67 (clause -> MAYORIGUALQUE .)
    FLOAT           reduce using rule 67 (clause -> MAYORIGUALQUE .)
    RESTA           reduce using rule 67 (clause -> MAYORIGUALQUE .)


state 135

    (68) clause -> MENORQUE .

    STRING          reduce using rule 68 (clause -> MENORQUE .)
    NAME            reduce using rule 68 (clause -> MENORQUE .)
    INTEGER         reduce using rule 68 (clause -> MENORQUE .)
    FLOAT           reduce using rule 68 (clause -> MENORQUE .)
    RESTA           reduce using rule 68 (clause -> MENORQUE .)


state 136

    (69) clause -> MENORIGUALQUE .

    STRING          reduce using rule 69 (clause -> MENORIGUALQUE .)
    NAME            reduce using rule 69 (clause -> MENORIGUALQUE .)
    INTEGER         reduce using rule 69 (clause -> MENORIGUALQUE .)
    FLOAT           reduce using rule 69 (clause -> MENORIGUALQUE .)
    RESTA           reduce using rule 69 (clause -> MENORIGUALQUE .)


state 137

    (38) for -> FOR OPEN_PARENTHESIS inicialization SEMICOLON . expBoolean SEMICOLON operations CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE
    (114) expBoolean -> . controlArg
    (115) expBoolean -> . bool
    (116) expBoolean -> . NOT expBoolean
    (117) expBoolean -> . expBoolean logicalOperator expBoolean
    (37) controlArg -> . element clause element
    (59) bool -> . TRUE
    (60) bool -> . FALSE
    (108) element -> . STRING
    (109) element -> . number
    (110) element -> . NAME
    (14) number -> . INTEGER
    (15) number -> . FLOAT
    (16) number -> . RESTA INTEGER
    (17) number -> . RESTA FLOAT

    NOT             shift and go to state 180
    TRUE            shift and go to state 83
    FALSE           shift and go to state 84
    STRING          shift and go to state 42
    NAME            shift and go to state 44
    INTEGER         shift and go to state 45
    FLOAT           shift and go to state 46
    RESTA           shift and go to state 47

    expBoolean                     shift and go to state 177
    controlArg                     shift and go to state 178
    bool                           shift and go to state 179
    element                        shift and go to state 82
    number                         shift and go to state 43

state 138

    (39) inicialization -> type NAME . IGUAL number

    IGUAL           shift and go to state 181


state 139

    (40) inicialization -> NAME IGUAL . number
    (14) number -> . INTEGER
    (15) number -> . FLOAT
    (16) number -> . RESTA INTEGER
    (17) number -> . RESTA FLOAT

    INTEGER         shift and go to state 45
    FLOAT           shift and go to state 46
    RESTA           shift and go to state 47

    number                         shift and go to state 182

state 140

    (34) elseIf -> ELSEIF OPEN_PARENTHESIS controlArg . CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE
    (35) elseIf -> ELSEIF OPEN_PARENTHESIS controlArg . CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE soloIf

    CLOSE_PARENTHESIS shift and go to state 183


state 141

    (36) else -> ELSE OPEN_BRACE expression . CLOSE_BRACE

    CLOSE_BRACE     shift and go to state 184


state 142

    (33) soloIf -> IF OPEN_PARENTHESIS controlArg CLOSE_PARENTHESIS . OPEN_BRACE expression CLOSE_BRACE

    OPEN_BRACE      shift and go to state 185


state 143

    (77) iniciarMap -> variable IGUAL NEW MAP OPEN_PARENTHESIS . CLOSE_PARENTHESIS SEMICOLON

    CLOSE_PARENTHESIS shift and go to state 186


state 144

    (78) escribirMap -> variable IGUAL OPEN_BRACE claveValor CLOSE_BRACE .

    NAME            reduce using rule 78 (escribirMap -> variable IGUAL OPEN_BRACE claveValor CLOSE_BRACE .)
    PRINT           reduce using rule 78 (escribirMap -> variable IGUAL OPEN_BRACE claveValor CLOSE_BRACE .)
    RETURN          reduce using rule 78 (escribirMap -> variable IGUAL OPEN_BRACE claveValor CLOSE_BRACE .)
    FUNCTION        reduce using rule 78 (escribirMap -> variable IGUAL OPEN_BRACE claveValor CLOSE_BRACE .)
    CONST           reduce using rule 78 (escribirMap -> variable IGUAL OPEN_BRACE claveValor CLOSE_BRACE .)
    LET             reduce using rule 78 (escribirMap -> variable IGUAL OPEN_BRACE claveValor CLOSE_BRACE .)
    VAR             reduce using rule 78 (escribirMap -> variable IGUAL OPEN_BRACE claveValor CLOSE_BRACE .)
    WHILE           reduce using rule 78 (escribirMap -> variable IGUAL OPEN_BRACE claveValor CLOSE_BRACE .)
    FOR             reduce using rule 78 (escribirMap -> variable IGUAL OPEN_BRACE claveValor CLOSE_BRACE .)
    IF              reduce using rule 78 (escribirMap -> variable IGUAL OPEN_BRACE claveValor CLOSE_BRACE .)
    $end            reduce using rule 78 (escribirMap -> variable IGUAL OPEN_BRACE claveValor CLOSE_BRACE .)
    CLOSE_BRACE     reduce using rule 78 (escribirMap -> variable IGUAL OPEN_BRACE claveValor CLOSE_BRACE .)
    COMMA           reduce using rule 78 (escribirMap -> variable IGUAL OPEN_BRACE claveValor CLOSE_BRACE .)


state 145

    (84) generarMap -> variable IGUAL OPEN_BRACE tuplas CLOSE_BRACE .

    NAME            reduce using rule 84 (generarMap -> variable IGUAL OPEN_BRACE tuplas CLOSE_BRACE .)
    PRINT           reduce using rule 84 (generarMap -> variable IGUAL OPEN_BRACE tuplas CLOSE_BRACE .)
    RETURN          reduce using rule 84 (generarMap -> variable IGUAL OPEN_BRACE tuplas CLOSE_BRACE .)
    FUNCTION        reduce using rule 84 (generarMap -> variable IGUAL OPEN_BRACE tuplas CLOSE_BRACE .)
    CONST           reduce using rule 84 (generarMap -> variable IGUAL OPEN_BRACE tuplas CLOSE_BRACE .)
    LET             reduce using rule 84 (generarMap -> variable IGUAL OPEN_BRACE tuplas CLOSE_BRACE .)
    VAR             reduce using rule 84 (generarMap -> variable IGUAL OPEN_BRACE tuplas CLOSE_BRACE .)
    WHILE           reduce using rule 84 (generarMap -> variable IGUAL OPEN_BRACE tuplas CLOSE_BRACE .)
    FOR             reduce using rule 84 (generarMap -> variable IGUAL OPEN_BRACE tuplas CLOSE_BRACE .)
    IF              reduce using rule 84 (generarMap -> variable IGUAL OPEN_BRACE tuplas CLOSE_BRACE .)
    $end            reduce using rule 84 (generarMap -> variable IGUAL OPEN_BRACE tuplas CLOSE_BRACE .)
    CLOSE_BRACE     reduce using rule 84 (generarMap -> variable IGUAL OPEN_BRACE tuplas CLOSE_BRACE .)
    COMMA           reduce using rule 84 (generarMap -> variable IGUAL OPEN_BRACE tuplas CLOSE_BRACE .)


state 146

    (79) claveValor -> clave COLON . valor
    (80) claveValor -> clave COLON . valor COMMA claveValor
    (82) valor -> . datatype
    (83) valor -> . dataStruct
    (51) datatype -> . number
    (52) datatype -> . STRING
    (53) datatype -> . CHAR
    (54) datatype -> . operations
    (24) dataStruct -> . array
    (25) dataStruct -> . set
    (26) dataStruct -> . map
    (14) number -> . INTEGER
    (15) number -> . FLOAT
    (16) number -> . RESTA INTEGER
    (17) number -> . RESTA FLOAT
    (41) operations -> . number operand number
    (42) operations -> . NAME
    (43) operations -> . NAME SUMA SUMA
    (44) operations -> . number
    (45) operations -> . number operand NAME operations
    (46) operations -> . NAME operand number operations
    (47) operations -> . number operand NAME
    (48) operations -> . NAME operand number
    (49) operations -> . NAME operand NAME operations
    (50) operations -> . number operand number operand operations
    (72) array -> . type NAME IGUAL OPEN_BRACKET items CLOSE_BRACKET SEMICOLON
    (73) array -> . type NAME IGUAL NEW ARRAY OPEN_PARENTHESIS items CLOSE_PARENTHESIS SEMICOLON
    (95) set -> . type NAME IGUAL NEW SET OPEN_PARENTHESIS CLOSE_PARENTHESIS SEMICOLON
    (96) set -> . type NAME IGUAL NEW SET OPEN_PARENTHESIS OPEN_BRACKET items CLOSE_BRACKET CLOSE_PARENTHESIS SEMICOLON
    (97) set -> . type NAME IGUAL NEW SET OPEN_PARENTHESIS element CLOSE_PARENTHESIS SEMICOLON
    (98) set -> . NAME IGUAL NEW SET OPEN_PARENTHESIS CLOSE_PARENTHESIS SEMICOLON
    (99) set -> . NAME IGUAL NEW SET OPEN_PARENTHESIS OPEN_BRACKET items CLOSE_BRACKET CLOSE_PARENTHESIS SEMICOLON
    (100) set -> . NAME IGUAL NEW SET OPEN_PARENTHESIS element CLOSE_PARENTHESIS SEMICOLON
    (74) map -> . iniciarMap
    (75) map -> . escribirMap
    (76) map -> . generarMap
    (61) type -> . CONST
    (62) type -> . LET
    (63) type -> . VAR
    (77) iniciarMap -> . variable IGUAL NEW MAP OPEN_PARENTHESIS CLOSE_PARENTHESIS SEMICOLON
    (78) escribirMap -> . variable IGUAL OPEN_BRACE claveValor CLOSE_BRACE
    (84) generarMap -> . variable IGUAL OPEN_BRACE tuplas CLOSE_BRACE
    (18) variable -> . type NAME IGUAL datatype SEMICOLON
    (19) variable -> . type NAME IGUAL operations SEMICOLON
    (20) variable -> . NAME IGUAL datatype SEMICOLON

    STRING          shift and go to state 100
    CHAR            shift and go to state 65
    INTEGER         shift and go to state 45
    FLOAT           shift and go to state 46
    RESTA           shift and go to state 47
    NAME            shift and go to state 190
    CONST           shift and go to state 23
    LET             shift and go to state 24
    VAR             shift and go to state 25

    valor                          shift and go to state 187
    datatype                       shift and go to state 188
    dataStruct                     shift and go to state 189
    number                         shift and go to state 99
    operations                     shift and go to state 66
    array                          shift and go to state 14
    set                            shift and go to state 15
    map                            shift and go to state 16
    type                           shift and go to state 191
    iniciarMap                     shift and go to state 26
    escribirMap                    shift and go to state 27
    generarMap                     shift and go to state 28
    variable                       shift and go to state 192

state 147

    (86) tuplas -> tupla COMMA . tuplas
    (85) tuplas -> . tupla
    (86) tuplas -> . tupla COMMA tuplas
    (87) tupla -> . OPEN_BRACKET datatype CLOSE_BRACKET SEMICOLON
    (88) tupla -> . OPEN_BRACKET datatype COMMA datatype CLOSE_BRACKET SEMICOLON

    OPEN_BRACKET    shift and go to state 98

    tupla                          shift and go to state 96
    tuplas                         shift and go to state 193

state 148

    (87) tupla -> OPEN_BRACKET datatype . CLOSE_BRACKET SEMICOLON
    (88) tupla -> OPEN_BRACKET datatype . COMMA datatype CLOSE_BRACKET SEMICOLON

    CLOSE_BRACKET   shift and go to state 194
    COMMA           shift and go to state 195


state 149

    (18) variable -> type NAME IGUAL datatype SEMICOLON .

    IGUAL           reduce using rule 18 (variable -> type NAME IGUAL datatype SEMICOLON .)
    NAME            reduce using rule 18 (variable -> type NAME IGUAL datatype SEMICOLON .)
    PRINT           reduce using rule 18 (variable -> type NAME IGUAL datatype SEMICOLON .)
    RETURN          reduce using rule 18 (variable -> type NAME IGUAL datatype SEMICOLON .)
    FUNCTION        reduce using rule 18 (variable -> type NAME IGUAL datatype SEMICOLON .)
    CONST           reduce using rule 18 (variable -> type NAME IGUAL datatype SEMICOLON .)
    LET             reduce using rule 18 (variable -> type NAME IGUAL datatype SEMICOLON .)
    VAR             reduce using rule 18 (variable -> type NAME IGUAL datatype SEMICOLON .)
    WHILE           reduce using rule 18 (variable -> type NAME IGUAL datatype SEMICOLON .)
    FOR             reduce using rule 18 (variable -> type NAME IGUAL datatype SEMICOLON .)
    IF              reduce using rule 18 (variable -> type NAME IGUAL datatype SEMICOLON .)
    $end            reduce using rule 18 (variable -> type NAME IGUAL datatype SEMICOLON .)
    CLOSE_BRACE     reduce using rule 18 (variable -> type NAME IGUAL datatype SEMICOLON .)


state 150

    (19) variable -> type NAME IGUAL operations SEMICOLON .

    IGUAL           reduce using rule 19 (variable -> type NAME IGUAL operations SEMICOLON .)
    NAME            reduce using rule 19 (variable -> type NAME IGUAL operations SEMICOLON .)
    PRINT           reduce using rule 19 (variable -> type NAME IGUAL operations SEMICOLON .)
    RETURN          reduce using rule 19 (variable -> type NAME IGUAL operations SEMICOLON .)
    FUNCTION        reduce using rule 19 (variable -> type NAME IGUAL operations SEMICOLON .)
    CONST           reduce using rule 19 (variable -> type NAME IGUAL operations SEMICOLON .)
    LET             reduce using rule 19 (variable -> type NAME IGUAL operations SEMICOLON .)
    VAR             reduce using rule 19 (variable -> type NAME IGUAL operations SEMICOLON .)
    WHILE           reduce using rule 19 (variable -> type NAME IGUAL operations SEMICOLON .)
    FOR             reduce using rule 19 (variable -> type NAME IGUAL operations SEMICOLON .)
    IF              reduce using rule 19 (variable -> type NAME IGUAL operations SEMICOLON .)
    $end            reduce using rule 19 (variable -> type NAME IGUAL operations SEMICOLON .)
    CLOSE_BRACE     reduce using rule 19 (variable -> type NAME IGUAL operations SEMICOLON .)


state 151

    (72) array -> type NAME IGUAL OPEN_BRACKET items . CLOSE_BRACKET SEMICOLON

    CLOSE_BRACKET   shift and go to state 196


state 152

    (104) items -> number .

    CLOSE_BRACKET   reduce using rule 104 (items -> number .)
    CLOSE_PARENTHESIS reduce using rule 104 (items -> number .)


state 153

    (105) items -> cadena .

    CLOSE_BRACKET   reduce using rule 105 (items -> cadena .)
    CLOSE_PARENTHESIS reduce using rule 105 (items -> cadena .)


state 154

    (106) cadena -> STRING .
    (107) cadena -> STRING . COMMA cadena

    CLOSE_BRACKET   reduce using rule 106 (cadena -> STRING .)
    CLOSE_PARENTHESIS reduce using rule 106 (cadena -> STRING .)
    COMMA           shift and go to state 197


state 155

    (73) array -> type NAME IGUAL NEW ARRAY . OPEN_PARENTHESIS items CLOSE_PARENTHESIS SEMICOLON

    OPEN_PARENTHESIS shift and go to state 198


state 156

    (95) set -> type NAME IGUAL NEW SET . OPEN_PARENTHESIS CLOSE_PARENTHESIS SEMICOLON
    (96) set -> type NAME IGUAL NEW SET . OPEN_PARENTHESIS OPEN_BRACKET items CLOSE_BRACKET CLOSE_PARENTHESIS SEMICOLON
    (97) set -> type NAME IGUAL NEW SET . OPEN_PARENTHESIS element CLOSE_PARENTHESIS SEMICOLON

    OPEN_PARENTHESIS shift and go to state 199


state 157

    (43) operations -> NAME SUMA SUMA .

    SEMICOLON       reduce using rule 43 (operations -> NAME SUMA SUMA .)
    COLON           reduce using rule 43 (operations -> NAME SUMA SUMA .)
    CLOSE_BRACKET   reduce using rule 43 (operations -> NAME SUMA SUMA .)
    COMMA           reduce using rule 43 (operations -> NAME SUMA SUMA .)
    CLOSE_PARENTHESIS reduce using rule 43 (operations -> NAME SUMA SUMA .)
    CLOSE_BRACE     reduce using rule 43 (operations -> NAME SUMA SUMA .)


state 158

    (49) operations -> NAME operand NAME . operations
    (41) operations -> . number operand number
    (42) operations -> . NAME
    (43) operations -> . NAME SUMA SUMA
    (44) operations -> . number
    (45) operations -> . number operand NAME operations
    (46) operations -> . NAME operand number operations
    (47) operations -> . number operand NAME
    (48) operations -> . NAME operand number
    (49) operations -> . NAME operand NAME operations
    (50) operations -> . number operand number operand operations
    (14) number -> . INTEGER
    (15) number -> . FLOAT
    (16) number -> . RESTA INTEGER
    (17) number -> . RESTA FLOAT

    NAME            shift and go to state 101
    INTEGER         shift and go to state 45
    FLOAT           shift and go to state 46
    RESTA           shift and go to state 47

    operations                     shift and go to state 200
    number                         shift and go to state 201

state 159

    (46) operations -> NAME operand number . operations
    (48) operations -> NAME operand number .
    (41) operations -> . number operand number
    (42) operations -> . NAME
    (43) operations -> . NAME SUMA SUMA
    (44) operations -> . number
    (45) operations -> . number operand NAME operations
    (46) operations -> . NAME operand number operations
    (47) operations -> . number operand NAME
    (48) operations -> . NAME operand number
    (49) operations -> . NAME operand NAME operations
    (50) operations -> . number operand number operand operations
    (14) number -> . INTEGER
    (15) number -> . FLOAT
    (16) number -> . RESTA INTEGER
    (17) number -> . RESTA FLOAT

    SEMICOLON       reduce using rule 48 (operations -> NAME operand number .)
    COLON           reduce using rule 48 (operations -> NAME operand number .)
    CLOSE_BRACKET   reduce using rule 48 (operations -> NAME operand number .)
    COMMA           reduce using rule 48 (operations -> NAME operand number .)
    CLOSE_PARENTHESIS reduce using rule 48 (operations -> NAME operand number .)
    CLOSE_BRACE     reduce using rule 48 (operations -> NAME operand number .)
    NAME            shift and go to state 101
    INTEGER         shift and go to state 45
    FLOAT           shift and go to state 46
    RESTA           shift and go to state 47

    number                         shift and go to state 201
    operations                     shift and go to state 202

state 160

    (98) set -> NAME IGUAL NEW SET OPEN_PARENTHESIS . CLOSE_PARENTHESIS SEMICOLON
    (99) set -> NAME IGUAL NEW SET OPEN_PARENTHESIS . OPEN_BRACKET items CLOSE_BRACKET CLOSE_PARENTHESIS SEMICOLON
    (100) set -> NAME IGUAL NEW SET OPEN_PARENTHESIS . element CLOSE_PARENTHESIS SEMICOLON
    (108) element -> . STRING
    (109) element -> . number
    (110) element -> . NAME
    (14) number -> . INTEGER
    (15) number -> . FLOAT
    (16) number -> . RESTA INTEGER
    (17) number -> . RESTA FLOAT

    CLOSE_PARENTHESIS shift and go to state 203
    OPEN_BRACKET    shift and go to state 204
    STRING          shift and go to state 42
    NAME            shift and go to state 44
    INTEGER         shift and go to state 45
    FLOAT           shift and go to state 46
    RESTA           shift and go to state 47

    element                        shift and go to state 205
    number                         shift and go to state 43

state 161

    (41) operations -> number operand number .
    (50) operations -> number operand number . operand operations
    (55) operand -> . SUMA
    (56) operand -> . RESTA
    (57) operand -> . MULTIPLICACION
    (58) operand -> . DIVISION

    SEMICOLON       reduce using rule 41 (operations -> number operand number .)
    COLON           reduce using rule 41 (operations -> number operand number .)
    CLOSE_BRACKET   reduce using rule 41 (operations -> number operand number .)
    COMMA           reduce using rule 41 (operations -> number operand number .)
    CLOSE_PARENTHESIS reduce using rule 41 (operations -> number operand number .)
    CLOSE_BRACE     reduce using rule 41 (operations -> number operand number .)
    SUMA            shift and go to state 115
    RESTA           shift and go to state 108
    MULTIPLICACION  shift and go to state 109
    DIVISION        shift and go to state 110

    operand                        shift and go to state 206

state 162

    (45) operations -> number operand NAME . operations
    (47) operations -> number operand NAME .
    (41) operations -> . number operand number
    (42) operations -> . NAME
    (43) operations -> . NAME SUMA SUMA
    (44) operations -> . number
    (45) operations -> . number operand NAME operations
    (46) operations -> . NAME operand number operations
    (47) operations -> . number operand NAME
    (48) operations -> . NAME operand number
    (49) operations -> . NAME operand NAME operations
    (50) operations -> . number operand number operand operations
    (14) number -> . INTEGER
    (15) number -> . FLOAT
    (16) number -> . RESTA INTEGER
    (17) number -> . RESTA FLOAT

    SEMICOLON       reduce using rule 47 (operations -> number operand NAME .)
    COLON           reduce using rule 47 (operations -> number operand NAME .)
    CLOSE_BRACKET   reduce using rule 47 (operations -> number operand NAME .)
    COMMA           reduce using rule 47 (operations -> number operand NAME .)
    CLOSE_PARENTHESIS reduce using rule 47 (operations -> number operand NAME .)
    CLOSE_BRACE     reduce using rule 47 (operations -> number operand NAME .)
    NAME            shift and go to state 101
    INTEGER         shift and go to state 45
    FLOAT           shift and go to state 46
    RESTA           shift and go to state 47

    number                         shift and go to state 201
    operations                     shift and go to state 207

state 163

    (101) methodsSet -> NAME POINT ADD OPEN_PARENTHESIS element . CLOSE_PARENTHESIS SEMICOLON

    CLOSE_PARENTHESIS shift and go to state 208


state 164

    (102) methodsSet -> NAME POINT DELETE OPEN_PARENTHESIS element . CLOSE_PARENTHESIS SEMICOLON

    CLOSE_PARENTHESIS shift and go to state 209


state 165

    (103) methodsSet -> NAME POINT CLEAR OPEN_PARENTHESIS CLOSE_PARENTHESIS . SEMICOLON
    (89) mapFunctions -> NAME POINT CLEAR OPEN_PARENTHESIS CLOSE_PARENTHESIS . SEMICOLON

    SEMICOLON       shift and go to state 210


state 166

    (90) mapFunctions -> NAME POINT GET OPEN_PARENTHESIS clave . CLOSE_PARENTHESIS SEMICOLON

    CLOSE_PARENTHESIS shift and go to state 211


state 167

    (91) mapFunctions -> NAME POINT HAS OPEN_PARENTHESIS clave . CLOSE_PARENTHESIS SEMICOLON

    CLOSE_PARENTHESIS shift and go to state 212


state 168

    (92) arrayFn -> NAME POINT POP OPEN_PARENTHESIS CLOSE_PARENTHESIS . SEMICOLON

    SEMICOLON       shift and go to state 213


state 169

    (93) arrayFn -> NAME POINT PUSH OPEN_PARENTHESIS element . CLOSE_PARENTHESIS SEMICOLON

    CLOSE_PARENTHESIS shift and go to state 214


state 170

    (94) arrayFn -> NAME POINT UNSHIFT OPEN_PARENTHESIS element . CLOSE_PARENTHESIS SEMICOLON

    CLOSE_PARENTHESIS shift and go to state 215


state 171

    (118) function -> FUNCTION NAME OPEN_PARENTHESIS CLOSE_PARENTHESIS OPEN_BRACE . expression CLOSE_BRACE
    (1) expression -> . variable
    (2) expression -> . variable expression
    (3) expression -> . dataStruct
    (4) expression -> . dataStruct expression
    (5) expression -> . controlStruct
    (6) expression -> . controlStruct expression
    (7) expression -> . methodsSet
    (8) expression -> . mapFunctions
    (9) expression -> . arrayFn
    (10) expression -> . declaration
    (11) expression -> . print
    (12) expression -> . return
    (13) expression -> . function
    (18) variable -> . type NAME IGUAL datatype SEMICOLON
    (19) variable -> . type NAME IGUAL operations SEMICOLON
    (20) variable -> . NAME IGUAL datatype SEMICOLON
    (24) dataStruct -> . array
    (25) dataStruct -> . set
    (26) dataStruct -> . map
    (21) controlStruct -> . while
    (22) controlStruct -> . for
    (23) controlStruct -> . if
    (101) methodsSet -> . NAME POINT ADD OPEN_PARENTHESIS element CLOSE_PARENTHESIS SEMICOLON
    (102) methodsSet -> . NAME POINT DELETE OPEN_PARENTHESIS element CLOSE_PARENTHESIS SEMICOLON
    (103) methodsSet -> . NAME POINT CLEAR OPEN_PARENTHESIS CLOSE_PARENTHESIS SEMICOLON
    (89) mapFunctions -> . NAME POINT CLEAR OPEN_PARENTHESIS CLOSE_PARENTHESIS SEMICOLON
    (90) mapFunctions -> . NAME POINT GET OPEN_PARENTHESIS clave CLOSE_PARENTHESIS SEMICOLON
    (91) mapFunctions -> . NAME POINT HAS OPEN_PARENTHESIS clave CLOSE_PARENTHESIS SEMICOLON
    (92) arrayFn -> . NAME POINT POP OPEN_PARENTHESIS CLOSE_PARENTHESIS SEMICOLON
    (93) arrayFn -> . NAME POINT PUSH OPEN_PARENTHESIS element CLOSE_PARENTHESIS SEMICOLON
    (94) arrayFn -> . NAME POINT UNSHIFT OPEN_PARENTHESIS element CLOSE_PARENTHESIS SEMICOLON
    (111) declaration -> . NAME IGUAL element SEMICOLON
    (123) print -> . PRINT OPEN_PARENTHESIS CLOSE_PARENTHESIS SEMICOLON
    (122) return -> . RETURN element SEMICOLON
    (118) function -> . FUNCTION NAME OPEN_PARENTHESIS CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE
    (119) function -> . FUNCTION NAME OPEN_PARENTHESIS parameter CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE
    (61) type -> . CONST
    (62) type -> . LET
    (63) type -> . VAR
    (72) array -> . type NAME IGUAL OPEN_BRACKET items CLOSE_BRACKET SEMICOLON
    (73) array -> . type NAME IGUAL NEW ARRAY OPEN_PARENTHESIS items CLOSE_PARENTHESIS SEMICOLON
    (95) set -> . type NAME IGUAL NEW SET OPEN_PARENTHESIS CLOSE_PARENTHESIS SEMICOLON
    (96) set -> . type NAME IGUAL NEW SET OPEN_PARENTHESIS OPEN_BRACKET items CLOSE_BRACKET CLOSE_PARENTHESIS SEMICOLON
    (97) set -> . type NAME IGUAL NEW SET OPEN_PARENTHESIS element CLOSE_PARENTHESIS SEMICOLON
    (98) set -> . NAME IGUAL NEW SET OPEN_PARENTHESIS CLOSE_PARENTHESIS SEMICOLON
    (99) set -> . NAME IGUAL NEW SET OPEN_PARENTHESIS OPEN_BRACKET items CLOSE_BRACKET CLOSE_PARENTHESIS SEMICOLON
    (100) set -> . NAME IGUAL NEW SET OPEN_PARENTHESIS element CLOSE_PARENTHESIS SEMICOLON
    (74) map -> . iniciarMap
    (75) map -> . escribirMap
    (76) map -> . generarMap
    (27) while -> . WHILE OPEN_PARENTHESIS controlArg CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE
    (28) while -> . WHILE OPEN_PARENTHESIS bool CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE
    (38) for -> . FOR OPEN_PARENTHESIS inicialization SEMICOLON expBoolean SEMICOLON operations CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE
    (29) if -> . soloIf
    (30) if -> . soloIf elseIf
    (31) if -> . soloIf elseIf else
    (32) if -> . soloIf else
    (77) iniciarMap -> . variable IGUAL NEW MAP OPEN_PARENTHESIS CLOSE_PARENTHESIS SEMICOLON
    (78) escribirMap -> . variable IGUAL OPEN_BRACE claveValor CLOSE_BRACE
    (84) generarMap -> . variable IGUAL OPEN_BRACE tuplas CLOSE_BRACE
    (33) soloIf -> . IF OPEN_PARENTHESIS controlArg CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE

    NAME            shift and go to state 13
    PRINT           shift and go to state 20
    RETURN          shift and go to state 21
    FUNCTION        shift and go to state 22
    CONST           shift and go to state 23
    LET             shift and go to state 24
    VAR             shift and go to state 25
    WHILE           shift and go to state 29
    FOR             shift and go to state 30
    IF              shift and go to state 32

    expression                     shift and go to state 216
    variable                       shift and go to state 2
    dataStruct                     shift and go to state 3
    controlStruct                  shift and go to state 4
    methodsSet                     shift and go to state 5
    mapFunctions                   shift and go to state 6
    arrayFn                        shift and go to state 7
    declaration                    shift and go to state 8
    print                          shift and go to state 9
    return                         shift and go to state 10
    function                       shift and go to state 11
    type                           shift and go to state 12
    array                          shift and go to state 14
    set                            shift and go to state 15
    map                            shift and go to state 16
    while                          shift and go to state 17
    for                            shift and go to state 18
    if                             shift and go to state 19
    iniciarMap                     shift and go to state 26
    escribirMap                    shift and go to state 27
    generarMap                     shift and go to state 28
    soloIf                         shift and go to state 31

state 172

    (119) function -> FUNCTION NAME OPEN_PARENTHESIS parameter CLOSE_PARENTHESIS . OPEN_BRACE expression CLOSE_BRACE

    OPEN_BRACE      shift and go to state 217


state 173

    (121) parameter -> element parameter .

    CLOSE_PARENTHESIS reduce using rule 121 (parameter -> element parameter .)


state 174

    (27) while -> WHILE OPEN_PARENTHESIS controlArg CLOSE_PARENTHESIS OPEN_BRACE . expression CLOSE_BRACE
    (1) expression -> . variable
    (2) expression -> . variable expression
    (3) expression -> . dataStruct
    (4) expression -> . dataStruct expression
    (5) expression -> . controlStruct
    (6) expression -> . controlStruct expression
    (7) expression -> . methodsSet
    (8) expression -> . mapFunctions
    (9) expression -> . arrayFn
    (10) expression -> . declaration
    (11) expression -> . print
    (12) expression -> . return
    (13) expression -> . function
    (18) variable -> . type NAME IGUAL datatype SEMICOLON
    (19) variable -> . type NAME IGUAL operations SEMICOLON
    (20) variable -> . NAME IGUAL datatype SEMICOLON
    (24) dataStruct -> . array
    (25) dataStruct -> . set
    (26) dataStruct -> . map
    (21) controlStruct -> . while
    (22) controlStruct -> . for
    (23) controlStruct -> . if
    (101) methodsSet -> . NAME POINT ADD OPEN_PARENTHESIS element CLOSE_PARENTHESIS SEMICOLON
    (102) methodsSet -> . NAME POINT DELETE OPEN_PARENTHESIS element CLOSE_PARENTHESIS SEMICOLON
    (103) methodsSet -> . NAME POINT CLEAR OPEN_PARENTHESIS CLOSE_PARENTHESIS SEMICOLON
    (89) mapFunctions -> . NAME POINT CLEAR OPEN_PARENTHESIS CLOSE_PARENTHESIS SEMICOLON
    (90) mapFunctions -> . NAME POINT GET OPEN_PARENTHESIS clave CLOSE_PARENTHESIS SEMICOLON
    (91) mapFunctions -> . NAME POINT HAS OPEN_PARENTHESIS clave CLOSE_PARENTHESIS SEMICOLON
    (92) arrayFn -> . NAME POINT POP OPEN_PARENTHESIS CLOSE_PARENTHESIS SEMICOLON
    (93) arrayFn -> . NAME POINT PUSH OPEN_PARENTHESIS element CLOSE_PARENTHESIS SEMICOLON
    (94) arrayFn -> . NAME POINT UNSHIFT OPEN_PARENTHESIS element CLOSE_PARENTHESIS SEMICOLON
    (111) declaration -> . NAME IGUAL element SEMICOLON
    (123) print -> . PRINT OPEN_PARENTHESIS CLOSE_PARENTHESIS SEMICOLON
    (122) return -> . RETURN element SEMICOLON
    (118) function -> . FUNCTION NAME OPEN_PARENTHESIS CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE
    (119) function -> . FUNCTION NAME OPEN_PARENTHESIS parameter CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE
    (61) type -> . CONST
    (62) type -> . LET
    (63) type -> . VAR
    (72) array -> . type NAME IGUAL OPEN_BRACKET items CLOSE_BRACKET SEMICOLON
    (73) array -> . type NAME IGUAL NEW ARRAY OPEN_PARENTHESIS items CLOSE_PARENTHESIS SEMICOLON
    (95) set -> . type NAME IGUAL NEW SET OPEN_PARENTHESIS CLOSE_PARENTHESIS SEMICOLON
    (96) set -> . type NAME IGUAL NEW SET OPEN_PARENTHESIS OPEN_BRACKET items CLOSE_BRACKET CLOSE_PARENTHESIS SEMICOLON
    (97) set -> . type NAME IGUAL NEW SET OPEN_PARENTHESIS element CLOSE_PARENTHESIS SEMICOLON
    (98) set -> . NAME IGUAL NEW SET OPEN_PARENTHESIS CLOSE_PARENTHESIS SEMICOLON
    (99) set -> . NAME IGUAL NEW SET OPEN_PARENTHESIS OPEN_BRACKET items CLOSE_BRACKET CLOSE_PARENTHESIS SEMICOLON
    (100) set -> . NAME IGUAL NEW SET OPEN_PARENTHESIS element CLOSE_PARENTHESIS SEMICOLON
    (74) map -> . iniciarMap
    (75) map -> . escribirMap
    (76) map -> . generarMap
    (27) while -> . WHILE OPEN_PARENTHESIS controlArg CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE
    (28) while -> . WHILE OPEN_PARENTHESIS bool CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE
    (38) for -> . FOR OPEN_PARENTHESIS inicialization SEMICOLON expBoolean SEMICOLON operations CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE
    (29) if -> . soloIf
    (30) if -> . soloIf elseIf
    (31) if -> . soloIf elseIf else
    (32) if -> . soloIf else
    (77) iniciarMap -> . variable IGUAL NEW MAP OPEN_PARENTHESIS CLOSE_PARENTHESIS SEMICOLON
    (78) escribirMap -> . variable IGUAL OPEN_BRACE claveValor CLOSE_BRACE
    (84) generarMap -> . variable IGUAL OPEN_BRACE tuplas CLOSE_BRACE
    (33) soloIf -> . IF OPEN_PARENTHESIS controlArg CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE

    NAME            shift and go to state 13
    PRINT           shift and go to state 20
    RETURN          shift and go to state 21
    FUNCTION        shift and go to state 22
    CONST           shift and go to state 23
    LET             shift and go to state 24
    VAR             shift and go to state 25
    WHILE           shift and go to state 29
    FOR             shift and go to state 30
    IF              shift and go to state 32

    expression                     shift and go to state 218
    variable                       shift and go to state 2
    dataStruct                     shift and go to state 3
    controlStruct                  shift and go to state 4
    methodsSet                     shift and go to state 5
    mapFunctions                   shift and go to state 6
    arrayFn                        shift and go to state 7
    declaration                    shift and go to state 8
    print                          shift and go to state 9
    return                         shift and go to state 10
    function                       shift and go to state 11
    type                           shift and go to state 12
    array                          shift and go to state 14
    set                            shift and go to state 15
    map                            shift and go to state 16
    while                          shift and go to state 17
    for                            shift and go to state 18
    if                             shift and go to state 19
    iniciarMap                     shift and go to state 26
    escribirMap                    shift and go to state 27
    generarMap                     shift and go to state 28
    soloIf                         shift and go to state 31

state 175

    (28) while -> WHILE OPEN_PARENTHESIS bool CLOSE_PARENTHESIS OPEN_BRACE . expression CLOSE_BRACE
    (1) expression -> . variable
    (2) expression -> . variable expression
    (3) expression -> . dataStruct
    (4) expression -> . dataStruct expression
    (5) expression -> . controlStruct
    (6) expression -> . controlStruct expression
    (7) expression -> . methodsSet
    (8) expression -> . mapFunctions
    (9) expression -> . arrayFn
    (10) expression -> . declaration
    (11) expression -> . print
    (12) expression -> . return
    (13) expression -> . function
    (18) variable -> . type NAME IGUAL datatype SEMICOLON
    (19) variable -> . type NAME IGUAL operations SEMICOLON
    (20) variable -> . NAME IGUAL datatype SEMICOLON
    (24) dataStruct -> . array
    (25) dataStruct -> . set
    (26) dataStruct -> . map
    (21) controlStruct -> . while
    (22) controlStruct -> . for
    (23) controlStruct -> . if
    (101) methodsSet -> . NAME POINT ADD OPEN_PARENTHESIS element CLOSE_PARENTHESIS SEMICOLON
    (102) methodsSet -> . NAME POINT DELETE OPEN_PARENTHESIS element CLOSE_PARENTHESIS SEMICOLON
    (103) methodsSet -> . NAME POINT CLEAR OPEN_PARENTHESIS CLOSE_PARENTHESIS SEMICOLON
    (89) mapFunctions -> . NAME POINT CLEAR OPEN_PARENTHESIS CLOSE_PARENTHESIS SEMICOLON
    (90) mapFunctions -> . NAME POINT GET OPEN_PARENTHESIS clave CLOSE_PARENTHESIS SEMICOLON
    (91) mapFunctions -> . NAME POINT HAS OPEN_PARENTHESIS clave CLOSE_PARENTHESIS SEMICOLON
    (92) arrayFn -> . NAME POINT POP OPEN_PARENTHESIS CLOSE_PARENTHESIS SEMICOLON
    (93) arrayFn -> . NAME POINT PUSH OPEN_PARENTHESIS element CLOSE_PARENTHESIS SEMICOLON
    (94) arrayFn -> . NAME POINT UNSHIFT OPEN_PARENTHESIS element CLOSE_PARENTHESIS SEMICOLON
    (111) declaration -> . NAME IGUAL element SEMICOLON
    (123) print -> . PRINT OPEN_PARENTHESIS CLOSE_PARENTHESIS SEMICOLON
    (122) return -> . RETURN element SEMICOLON
    (118) function -> . FUNCTION NAME OPEN_PARENTHESIS CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE
    (119) function -> . FUNCTION NAME OPEN_PARENTHESIS parameter CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE
    (61) type -> . CONST
    (62) type -> . LET
    (63) type -> . VAR
    (72) array -> . type NAME IGUAL OPEN_BRACKET items CLOSE_BRACKET SEMICOLON
    (73) array -> . type NAME IGUAL NEW ARRAY OPEN_PARENTHESIS items CLOSE_PARENTHESIS SEMICOLON
    (95) set -> . type NAME IGUAL NEW SET OPEN_PARENTHESIS CLOSE_PARENTHESIS SEMICOLON
    (96) set -> . type NAME IGUAL NEW SET OPEN_PARENTHESIS OPEN_BRACKET items CLOSE_BRACKET CLOSE_PARENTHESIS SEMICOLON
    (97) set -> . type NAME IGUAL NEW SET OPEN_PARENTHESIS element CLOSE_PARENTHESIS SEMICOLON
    (98) set -> . NAME IGUAL NEW SET OPEN_PARENTHESIS CLOSE_PARENTHESIS SEMICOLON
    (99) set -> . NAME IGUAL NEW SET OPEN_PARENTHESIS OPEN_BRACKET items CLOSE_BRACKET CLOSE_PARENTHESIS SEMICOLON
    (100) set -> . NAME IGUAL NEW SET OPEN_PARENTHESIS element CLOSE_PARENTHESIS SEMICOLON
    (74) map -> . iniciarMap
    (75) map -> . escribirMap
    (76) map -> . generarMap
    (27) while -> . WHILE OPEN_PARENTHESIS controlArg CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE
    (28) while -> . WHILE OPEN_PARENTHESIS bool CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE
    (38) for -> . FOR OPEN_PARENTHESIS inicialization SEMICOLON expBoolean SEMICOLON operations CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE
    (29) if -> . soloIf
    (30) if -> . soloIf elseIf
    (31) if -> . soloIf elseIf else
    (32) if -> . soloIf else
    (77) iniciarMap -> . variable IGUAL NEW MAP OPEN_PARENTHESIS CLOSE_PARENTHESIS SEMICOLON
    (78) escribirMap -> . variable IGUAL OPEN_BRACE claveValor CLOSE_BRACE
    (84) generarMap -> . variable IGUAL OPEN_BRACE tuplas CLOSE_BRACE
    (33) soloIf -> . IF OPEN_PARENTHESIS controlArg CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE

    NAME            shift and go to state 13
    PRINT           shift and go to state 20
    RETURN          shift and go to state 21
    FUNCTION        shift and go to state 22
    CONST           shift and go to state 23
    LET             shift and go to state 24
    VAR             shift and go to state 25
    WHILE           shift and go to state 29
    FOR             shift and go to state 30
    IF              shift and go to state 32

    expression                     shift and go to state 219
    variable                       shift and go to state 2
    dataStruct                     shift and go to state 3
    controlStruct                  shift and go to state 4
    methodsSet                     shift and go to state 5
    mapFunctions                   shift and go to state 6
    arrayFn                        shift and go to state 7
    declaration                    shift and go to state 8
    print                          shift and go to state 9
    return                         shift and go to state 10
    function                       shift and go to state 11
    type                           shift and go to state 12
    array                          shift and go to state 14
    set                            shift and go to state 15
    map                            shift and go to state 16
    while                          shift and go to state 17
    for                            shift and go to state 18
    if                             shift and go to state 19
    iniciarMap                     shift and go to state 26
    escribirMap                    shift and go to state 27
    generarMap                     shift and go to state 28
    soloIf                         shift and go to state 31

state 176

    (37) controlArg -> element clause element .

    CLOSE_PARENTHESIS reduce using rule 37 (controlArg -> element clause element .)
    SEMICOLON       reduce using rule 37 (controlArg -> element clause element .)
    AND             reduce using rule 37 (controlArg -> element clause element .)
    OR              reduce using rule 37 (controlArg -> element clause element .)


state 177

    (38) for -> FOR OPEN_PARENTHESIS inicialization SEMICOLON expBoolean . SEMICOLON operations CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE
    (117) expBoolean -> expBoolean . logicalOperator expBoolean
    (112) logicalOperator -> . AND
    (113) logicalOperator -> . OR

    SEMICOLON       shift and go to state 220
    AND             shift and go to state 222
    OR              shift and go to state 223

    logicalOperator                shift and go to state 221

state 178

    (114) expBoolean -> controlArg .

    SEMICOLON       reduce using rule 114 (expBoolean -> controlArg .)
    AND             reduce using rule 114 (expBoolean -> controlArg .)
    OR              reduce using rule 114 (expBoolean -> controlArg .)


state 179

    (115) expBoolean -> bool .

    SEMICOLON       reduce using rule 115 (expBoolean -> bool .)
    AND             reduce using rule 115 (expBoolean -> bool .)
    OR              reduce using rule 115 (expBoolean -> bool .)


state 180

    (116) expBoolean -> NOT . expBoolean
    (114) expBoolean -> . controlArg
    (115) expBoolean -> . bool
    (116) expBoolean -> . NOT expBoolean
    (117) expBoolean -> . expBoolean logicalOperator expBoolean
    (37) controlArg -> . element clause element
    (59) bool -> . TRUE
    (60) bool -> . FALSE
    (108) element -> . STRING
    (109) element -> . number
    (110) element -> . NAME
    (14) number -> . INTEGER
    (15) number -> . FLOAT
    (16) number -> . RESTA INTEGER
    (17) number -> . RESTA FLOAT

    NOT             shift and go to state 180
    TRUE            shift and go to state 83
    FALSE           shift and go to state 84
    STRING          shift and go to state 42
    NAME            shift and go to state 44
    INTEGER         shift and go to state 45
    FLOAT           shift and go to state 46
    RESTA           shift and go to state 47

    expBoolean                     shift and go to state 224
    controlArg                     shift and go to state 178
    bool                           shift and go to state 179
    element                        shift and go to state 82
    number                         shift and go to state 43

state 181

    (39) inicialization -> type NAME IGUAL . number
    (14) number -> . INTEGER
    (15) number -> . FLOAT
    (16) number -> . RESTA INTEGER
    (17) number -> . RESTA FLOAT

    INTEGER         shift and go to state 45
    FLOAT           shift and go to state 46
    RESTA           shift and go to state 47

    number                         shift and go to state 225

state 182

    (40) inicialization -> NAME IGUAL number .

    SEMICOLON       reduce using rule 40 (inicialization -> NAME IGUAL number .)


state 183

    (34) elseIf -> ELSEIF OPEN_PARENTHESIS controlArg CLOSE_PARENTHESIS . OPEN_BRACE expression CLOSE_BRACE
    (35) elseIf -> ELSEIF OPEN_PARENTHESIS controlArg CLOSE_PARENTHESIS . OPEN_BRACE expression CLOSE_BRACE soloIf

    OPEN_BRACE      shift and go to state 226


state 184

    (36) else -> ELSE OPEN_BRACE expression CLOSE_BRACE .

    NAME            reduce using rule 36 (else -> ELSE OPEN_BRACE expression CLOSE_BRACE .)
    PRINT           reduce using rule 36 (else -> ELSE OPEN_BRACE expression CLOSE_BRACE .)
    RETURN          reduce using rule 36 (else -> ELSE OPEN_BRACE expression CLOSE_BRACE .)
    FUNCTION        reduce using rule 36 (else -> ELSE OPEN_BRACE expression CLOSE_BRACE .)
    CONST           reduce using rule 36 (else -> ELSE OPEN_BRACE expression CLOSE_BRACE .)
    LET             reduce using rule 36 (else -> ELSE OPEN_BRACE expression CLOSE_BRACE .)
    VAR             reduce using rule 36 (else -> ELSE OPEN_BRACE expression CLOSE_BRACE .)
    WHILE           reduce using rule 36 (else -> ELSE OPEN_BRACE expression CLOSE_BRACE .)
    FOR             reduce using rule 36 (else -> ELSE OPEN_BRACE expression CLOSE_BRACE .)
    IF              reduce using rule 36 (else -> ELSE OPEN_BRACE expression CLOSE_BRACE .)
    $end            reduce using rule 36 (else -> ELSE OPEN_BRACE expression CLOSE_BRACE .)
    CLOSE_BRACE     reduce using rule 36 (else -> ELSE OPEN_BRACE expression CLOSE_BRACE .)


state 185

    (33) soloIf -> IF OPEN_PARENTHESIS controlArg CLOSE_PARENTHESIS OPEN_BRACE . expression CLOSE_BRACE
    (1) expression -> . variable
    (2) expression -> . variable expression
    (3) expression -> . dataStruct
    (4) expression -> . dataStruct expression
    (5) expression -> . controlStruct
    (6) expression -> . controlStruct expression
    (7) expression -> . methodsSet
    (8) expression -> . mapFunctions
    (9) expression -> . arrayFn
    (10) expression -> . declaration
    (11) expression -> . print
    (12) expression -> . return
    (13) expression -> . function
    (18) variable -> . type NAME IGUAL datatype SEMICOLON
    (19) variable -> . type NAME IGUAL operations SEMICOLON
    (20) variable -> . NAME IGUAL datatype SEMICOLON
    (24) dataStruct -> . array
    (25) dataStruct -> . set
    (26) dataStruct -> . map
    (21) controlStruct -> . while
    (22) controlStruct -> . for
    (23) controlStruct -> . if
    (101) methodsSet -> . NAME POINT ADD OPEN_PARENTHESIS element CLOSE_PARENTHESIS SEMICOLON
    (102) methodsSet -> . NAME POINT DELETE OPEN_PARENTHESIS element CLOSE_PARENTHESIS SEMICOLON
    (103) methodsSet -> . NAME POINT CLEAR OPEN_PARENTHESIS CLOSE_PARENTHESIS SEMICOLON
    (89) mapFunctions -> . NAME POINT CLEAR OPEN_PARENTHESIS CLOSE_PARENTHESIS SEMICOLON
    (90) mapFunctions -> . NAME POINT GET OPEN_PARENTHESIS clave CLOSE_PARENTHESIS SEMICOLON
    (91) mapFunctions -> . NAME POINT HAS OPEN_PARENTHESIS clave CLOSE_PARENTHESIS SEMICOLON
    (92) arrayFn -> . NAME POINT POP OPEN_PARENTHESIS CLOSE_PARENTHESIS SEMICOLON
    (93) arrayFn -> . NAME POINT PUSH OPEN_PARENTHESIS element CLOSE_PARENTHESIS SEMICOLON
    (94) arrayFn -> . NAME POINT UNSHIFT OPEN_PARENTHESIS element CLOSE_PARENTHESIS SEMICOLON
    (111) declaration -> . NAME IGUAL element SEMICOLON
    (123) print -> . PRINT OPEN_PARENTHESIS CLOSE_PARENTHESIS SEMICOLON
    (122) return -> . RETURN element SEMICOLON
    (118) function -> . FUNCTION NAME OPEN_PARENTHESIS CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE
    (119) function -> . FUNCTION NAME OPEN_PARENTHESIS parameter CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE
    (61) type -> . CONST
    (62) type -> . LET
    (63) type -> . VAR
    (72) array -> . type NAME IGUAL OPEN_BRACKET items CLOSE_BRACKET SEMICOLON
    (73) array -> . type NAME IGUAL NEW ARRAY OPEN_PARENTHESIS items CLOSE_PARENTHESIS SEMICOLON
    (95) set -> . type NAME IGUAL NEW SET OPEN_PARENTHESIS CLOSE_PARENTHESIS SEMICOLON
    (96) set -> . type NAME IGUAL NEW SET OPEN_PARENTHESIS OPEN_BRACKET items CLOSE_BRACKET CLOSE_PARENTHESIS SEMICOLON
    (97) set -> . type NAME IGUAL NEW SET OPEN_PARENTHESIS element CLOSE_PARENTHESIS SEMICOLON
    (98) set -> . NAME IGUAL NEW SET OPEN_PARENTHESIS CLOSE_PARENTHESIS SEMICOLON
    (99) set -> . NAME IGUAL NEW SET OPEN_PARENTHESIS OPEN_BRACKET items CLOSE_BRACKET CLOSE_PARENTHESIS SEMICOLON
    (100) set -> . NAME IGUAL NEW SET OPEN_PARENTHESIS element CLOSE_PARENTHESIS SEMICOLON
    (74) map -> . iniciarMap
    (75) map -> . escribirMap
    (76) map -> . generarMap
    (27) while -> . WHILE OPEN_PARENTHESIS controlArg CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE
    (28) while -> . WHILE OPEN_PARENTHESIS bool CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE
    (38) for -> . FOR OPEN_PARENTHESIS inicialization SEMICOLON expBoolean SEMICOLON operations CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE
    (29) if -> . soloIf
    (30) if -> . soloIf elseIf
    (31) if -> . soloIf elseIf else
    (32) if -> . soloIf else
    (77) iniciarMap -> . variable IGUAL NEW MAP OPEN_PARENTHESIS CLOSE_PARENTHESIS SEMICOLON
    (78) escribirMap -> . variable IGUAL OPEN_BRACE claveValor CLOSE_BRACE
    (84) generarMap -> . variable IGUAL OPEN_BRACE tuplas CLOSE_BRACE
    (33) soloIf -> . IF OPEN_PARENTHESIS controlArg CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE

    NAME            shift and go to state 13
    PRINT           shift and go to state 20
    RETURN          shift and go to state 21
    FUNCTION        shift and go to state 22
    CONST           shift and go to state 23
    LET             shift and go to state 24
    VAR             shift and go to state 25
    WHILE           shift and go to state 29
    FOR             shift and go to state 30
    IF              shift and go to state 32

    expression                     shift and go to state 227
    variable                       shift and go to state 2
    dataStruct                     shift and go to state 3
    controlStruct                  shift and go to state 4
    methodsSet                     shift and go to state 5
    mapFunctions                   shift and go to state 6
    arrayFn                        shift and go to state 7
    declaration                    shift and go to state 8
    print                          shift and go to state 9
    return                         shift and go to state 10
    function                       shift and go to state 11
    type                           shift and go to state 12
    array                          shift and go to state 14
    set                            shift and go to state 15
    map                            shift and go to state 16
    while                          shift and go to state 17
    for                            shift and go to state 18
    if                             shift and go to state 19
    iniciarMap                     shift and go to state 26
    escribirMap                    shift and go to state 27
    generarMap                     shift and go to state 28
    soloIf                         shift and go to state 31

state 186

    (77) iniciarMap -> variable IGUAL NEW MAP OPEN_PARENTHESIS CLOSE_PARENTHESIS . SEMICOLON

    SEMICOLON       shift and go to state 228


state 187

    (79) claveValor -> clave COLON valor .
    (80) claveValor -> clave COLON valor . COMMA claveValor

    CLOSE_BRACE     reduce using rule 79 (claveValor -> clave COLON valor .)
    COMMA           shift and go to state 229


state 188

    (82) valor -> datatype .

    COMMA           reduce using rule 82 (valor -> datatype .)
    CLOSE_BRACE     reduce using rule 82 (valor -> datatype .)


state 189

    (83) valor -> dataStruct .

    COMMA           reduce using rule 83 (valor -> dataStruct .)
    CLOSE_BRACE     reduce using rule 83 (valor -> dataStruct .)


state 190

    (42) operations -> NAME .
    (43) operations -> NAME . SUMA SUMA
    (46) operations -> NAME . operand number operations
    (48) operations -> NAME . operand number
    (49) operations -> NAME . operand NAME operations
    (98) set -> NAME . IGUAL NEW SET OPEN_PARENTHESIS CLOSE_PARENTHESIS SEMICOLON
    (99) set -> NAME . IGUAL NEW SET OPEN_PARENTHESIS OPEN_BRACKET items CLOSE_BRACKET CLOSE_PARENTHESIS SEMICOLON
    (100) set -> NAME . IGUAL NEW SET OPEN_PARENTHESIS element CLOSE_PARENTHESIS SEMICOLON
    (20) variable -> NAME . IGUAL datatype SEMICOLON
    (55) operand -> . SUMA
    (56) operand -> . RESTA
    (57) operand -> . MULTIPLICACION
    (58) operand -> . DIVISION

    COMMA           reduce using rule 42 (operations -> NAME .)
    CLOSE_BRACE     reduce using rule 42 (operations -> NAME .)
    SUMA            shift and go to state 106
    IGUAL           shift and go to state 230
    RESTA           shift and go to state 108
    MULTIPLICACION  shift and go to state 109
    DIVISION        shift and go to state 110

    operand                        shift and go to state 107

state 191

    (72) array -> type . NAME IGUAL OPEN_BRACKET items CLOSE_BRACKET SEMICOLON
    (73) array -> type . NAME IGUAL NEW ARRAY OPEN_PARENTHESIS items CLOSE_PARENTHESIS SEMICOLON
    (95) set -> type . NAME IGUAL NEW SET OPEN_PARENTHESIS CLOSE_PARENTHESIS SEMICOLON
    (96) set -> type . NAME IGUAL NEW SET OPEN_PARENTHESIS OPEN_BRACKET items CLOSE_BRACKET CLOSE_PARENTHESIS SEMICOLON
    (97) set -> type . NAME IGUAL NEW SET OPEN_PARENTHESIS element CLOSE_PARENTHESIS SEMICOLON
    (18) variable -> type . NAME IGUAL datatype SEMICOLON
    (19) variable -> type . NAME IGUAL operations SEMICOLON

    NAME            shift and go to state 231


state 192

    (77) iniciarMap -> variable . IGUAL NEW MAP OPEN_PARENTHESIS CLOSE_PARENTHESIS SEMICOLON
    (78) escribirMap -> variable . IGUAL OPEN_BRACE claveValor CLOSE_BRACE
    (84) generarMap -> variable . IGUAL OPEN_BRACE tuplas CLOSE_BRACE

    IGUAL           shift and go to state 34


state 193

    (86) tuplas -> tupla COMMA tuplas .

    CLOSE_BRACE     reduce using rule 86 (tuplas -> tupla COMMA tuplas .)


state 194

    (87) tupla -> OPEN_BRACKET datatype CLOSE_BRACKET . SEMICOLON

    SEMICOLON       shift and go to state 232


state 195

    (88) tupla -> OPEN_BRACKET datatype COMMA . datatype CLOSE_BRACKET SEMICOLON
    (51) datatype -> . number
    (52) datatype -> . STRING
    (53) datatype -> . CHAR
    (54) datatype -> . operations
    (14) number -> . INTEGER
    (15) number -> . FLOAT
    (16) number -> . RESTA INTEGER
    (17) number -> . RESTA FLOAT
    (41) operations -> . number operand number
    (42) operations -> . NAME
    (43) operations -> . NAME SUMA SUMA
    (44) operations -> . number
    (45) operations -> . number operand NAME operations
    (46) operations -> . NAME operand number operations
    (47) operations -> . number operand NAME
    (48) operations -> . NAME operand number
    (49) operations -> . NAME operand NAME operations
    (50) operations -> . number operand number operand operations

    STRING          shift and go to state 100
    CHAR            shift and go to state 65
    INTEGER         shift and go to state 45
    FLOAT           shift and go to state 46
    RESTA           shift and go to state 47
    NAME            shift and go to state 101

    datatype                       shift and go to state 233
    number                         shift and go to state 99
    operations                     shift and go to state 66

state 196

    (72) array -> type NAME IGUAL OPEN_BRACKET items CLOSE_BRACKET . SEMICOLON

    SEMICOLON       shift and go to state 234


state 197

    (107) cadena -> STRING COMMA . cadena
    (106) cadena -> . STRING
    (107) cadena -> . STRING COMMA cadena

    STRING          shift and go to state 154

    cadena                         shift and go to state 235

state 198

    (73) array -> type NAME IGUAL NEW ARRAY OPEN_PARENTHESIS . items CLOSE_PARENTHESIS SEMICOLON
    (104) items -> . number
    (105) items -> . cadena
    (14) number -> . INTEGER
    (15) number -> . FLOAT
    (16) number -> . RESTA INTEGER
    (17) number -> . RESTA FLOAT
    (106) cadena -> . STRING
    (107) cadena -> . STRING COMMA cadena

    INTEGER         shift and go to state 45
    FLOAT           shift and go to state 46
    RESTA           shift and go to state 47
    STRING          shift and go to state 154

    items                          shift and go to state 236
    number                         shift and go to state 152
    cadena                         shift and go to state 153

state 199

    (95) set -> type NAME IGUAL NEW SET OPEN_PARENTHESIS . CLOSE_PARENTHESIS SEMICOLON
    (96) set -> type NAME IGUAL NEW SET OPEN_PARENTHESIS . OPEN_BRACKET items CLOSE_BRACKET CLOSE_PARENTHESIS SEMICOLON
    (97) set -> type NAME IGUAL NEW SET OPEN_PARENTHESIS . element CLOSE_PARENTHESIS SEMICOLON
    (108) element -> . STRING
    (109) element -> . number
    (110) element -> . NAME
    (14) number -> . INTEGER
    (15) number -> . FLOAT
    (16) number -> . RESTA INTEGER
    (17) number -> . RESTA FLOAT

    CLOSE_PARENTHESIS shift and go to state 237
    OPEN_BRACKET    shift and go to state 238
    STRING          shift and go to state 42
    NAME            shift and go to state 44
    INTEGER         shift and go to state 45
    FLOAT           shift and go to state 46
    RESTA           shift and go to state 47

    element                        shift and go to state 239
    number                         shift and go to state 43

state 200

    (49) operations -> NAME operand NAME operations .

    SEMICOLON       reduce using rule 49 (operations -> NAME operand NAME operations .)
    COLON           reduce using rule 49 (operations -> NAME operand NAME operations .)
    CLOSE_BRACKET   reduce using rule 49 (operations -> NAME operand NAME operations .)
    COMMA           reduce using rule 49 (operations -> NAME operand NAME operations .)
    CLOSE_PARENTHESIS reduce using rule 49 (operations -> NAME operand NAME operations .)
    CLOSE_BRACE     reduce using rule 49 (operations -> NAME operand NAME operations .)


state 201

    (41) operations -> number . operand number
    (44) operations -> number .
    (45) operations -> number . operand NAME operations
    (47) operations -> number . operand NAME
    (50) operations -> number . operand number operand operations
    (55) operand -> . SUMA
    (56) operand -> . RESTA
    (57) operand -> . MULTIPLICACION
    (58) operand -> . DIVISION

    SEMICOLON       reduce using rule 44 (operations -> number .)
    COLON           reduce using rule 44 (operations -> number .)
    CLOSE_BRACKET   reduce using rule 44 (operations -> number .)
    COMMA           reduce using rule 44 (operations -> number .)
    CLOSE_PARENTHESIS reduce using rule 44 (operations -> number .)
    CLOSE_BRACE     reduce using rule 44 (operations -> number .)
    SUMA            shift and go to state 115
    RESTA           shift and go to state 108
    MULTIPLICACION  shift and go to state 109
    DIVISION        shift and go to state 110

    operand                        shift and go to state 114

state 202

    (46) operations -> NAME operand number operations .

    SEMICOLON       reduce using rule 46 (operations -> NAME operand number operations .)
    COLON           reduce using rule 46 (operations -> NAME operand number operations .)
    CLOSE_BRACKET   reduce using rule 46 (operations -> NAME operand number operations .)
    COMMA           reduce using rule 46 (operations -> NAME operand number operations .)
    CLOSE_PARENTHESIS reduce using rule 46 (operations -> NAME operand number operations .)
    CLOSE_BRACE     reduce using rule 46 (operations -> NAME operand number operations .)


state 203

    (98) set -> NAME IGUAL NEW SET OPEN_PARENTHESIS CLOSE_PARENTHESIS . SEMICOLON

    SEMICOLON       shift and go to state 240


state 204

    (99) set -> NAME IGUAL NEW SET OPEN_PARENTHESIS OPEN_BRACKET . items CLOSE_BRACKET CLOSE_PARENTHESIS SEMICOLON
    (104) items -> . number
    (105) items -> . cadena
    (14) number -> . INTEGER
    (15) number -> . FLOAT
    (16) number -> . RESTA INTEGER
    (17) number -> . RESTA FLOAT
    (106) cadena -> . STRING
    (107) cadena -> . STRING COMMA cadena

    INTEGER         shift and go to state 45
    FLOAT           shift and go to state 46
    RESTA           shift and go to state 47
    STRING          shift and go to state 154

    items                          shift and go to state 241
    number                         shift and go to state 152
    cadena                         shift and go to state 153

state 205

    (100) set -> NAME IGUAL NEW SET OPEN_PARENTHESIS element . CLOSE_PARENTHESIS SEMICOLON

    CLOSE_PARENTHESIS shift and go to state 242


state 206

    (50) operations -> number operand number operand . operations
    (41) operations -> . number operand number
    (42) operations -> . NAME
    (43) operations -> . NAME SUMA SUMA
    (44) operations -> . number
    (45) operations -> . number operand NAME operations
    (46) operations -> . NAME operand number operations
    (47) operations -> . number operand NAME
    (48) operations -> . NAME operand number
    (49) operations -> . NAME operand NAME operations
    (50) operations -> . number operand number operand operations
    (14) number -> . INTEGER
    (15) number -> . FLOAT
    (16) number -> . RESTA INTEGER
    (17) number -> . RESTA FLOAT

    NAME            shift and go to state 101
    INTEGER         shift and go to state 45
    FLOAT           shift and go to state 46
    RESTA           shift and go to state 47

    number                         shift and go to state 201
    operations                     shift and go to state 243

state 207

    (45) operations -> number operand NAME operations .

    SEMICOLON       reduce using rule 45 (operations -> number operand NAME operations .)
    COLON           reduce using rule 45 (operations -> number operand NAME operations .)
    CLOSE_BRACKET   reduce using rule 45 (operations -> number operand NAME operations .)
    COMMA           reduce using rule 45 (operations -> number operand NAME operations .)
    CLOSE_PARENTHESIS reduce using rule 45 (operations -> number operand NAME operations .)
    CLOSE_BRACE     reduce using rule 45 (operations -> number operand NAME operations .)


state 208

    (101) methodsSet -> NAME POINT ADD OPEN_PARENTHESIS element CLOSE_PARENTHESIS . SEMICOLON

    SEMICOLON       shift and go to state 244


state 209

    (102) methodsSet -> NAME POINT DELETE OPEN_PARENTHESIS element CLOSE_PARENTHESIS . SEMICOLON

    SEMICOLON       shift and go to state 245


state 210

    (103) methodsSet -> NAME POINT CLEAR OPEN_PARENTHESIS CLOSE_PARENTHESIS SEMICOLON .
    (89) mapFunctions -> NAME POINT CLEAR OPEN_PARENTHESIS CLOSE_PARENTHESIS SEMICOLON .

  ! reduce/reduce conflict for $end resolved using rule 89 (mapFunctions -> NAME POINT CLEAR OPEN_PARENTHESIS CLOSE_PARENTHESIS SEMICOLON .)
  ! reduce/reduce conflict for CLOSE_BRACE resolved using rule 89 (mapFunctions -> NAME POINT CLEAR OPEN_PARENTHESIS CLOSE_PARENTHESIS SEMICOLON .)
    $end            reduce using rule 89 (mapFunctions -> NAME POINT CLEAR OPEN_PARENTHESIS CLOSE_PARENTHESIS SEMICOLON .)
    CLOSE_BRACE     reduce using rule 89 (mapFunctions -> NAME POINT CLEAR OPEN_PARENTHESIS CLOSE_PARENTHESIS SEMICOLON .)

  ! $end            [ reduce using rule 103 (methodsSet -> NAME POINT CLEAR OPEN_PARENTHESIS CLOSE_PARENTHESIS SEMICOLON .) ]
  ! CLOSE_BRACE     [ reduce using rule 103 (methodsSet -> NAME POINT CLEAR OPEN_PARENTHESIS CLOSE_PARENTHESIS SEMICOLON .) ]


state 211

    (90) mapFunctions -> NAME POINT GET OPEN_PARENTHESIS clave CLOSE_PARENTHESIS . SEMICOLON

    SEMICOLON       shift and go to state 246


state 212

    (91) mapFunctions -> NAME POINT HAS OPEN_PARENTHESIS clave CLOSE_PARENTHESIS . SEMICOLON

    SEMICOLON       shift and go to state 247


state 213

    (92) arrayFn -> NAME POINT POP OPEN_PARENTHESIS CLOSE_PARENTHESIS SEMICOLON .

    $end            reduce using rule 92 (arrayFn -> NAME POINT POP OPEN_PARENTHESIS CLOSE_PARENTHESIS SEMICOLON .)
    CLOSE_BRACE     reduce using rule 92 (arrayFn -> NAME POINT POP OPEN_PARENTHESIS CLOSE_PARENTHESIS SEMICOLON .)


state 214

    (93) arrayFn -> NAME POINT PUSH OPEN_PARENTHESIS element CLOSE_PARENTHESIS . SEMICOLON

    SEMICOLON       shift and go to state 248


state 215

    (94) arrayFn -> NAME POINT UNSHIFT OPEN_PARENTHESIS element CLOSE_PARENTHESIS . SEMICOLON

    SEMICOLON       shift and go to state 249


state 216

    (118) function -> FUNCTION NAME OPEN_PARENTHESIS CLOSE_PARENTHESIS OPEN_BRACE expression . CLOSE_BRACE

    CLOSE_BRACE     shift and go to state 250


state 217

    (119) function -> FUNCTION NAME OPEN_PARENTHESIS parameter CLOSE_PARENTHESIS OPEN_BRACE . expression CLOSE_BRACE
    (1) expression -> . variable
    (2) expression -> . variable expression
    (3) expression -> . dataStruct
    (4) expression -> . dataStruct expression
    (5) expression -> . controlStruct
    (6) expression -> . controlStruct expression
    (7) expression -> . methodsSet
    (8) expression -> . mapFunctions
    (9) expression -> . arrayFn
    (10) expression -> . declaration
    (11) expression -> . print
    (12) expression -> . return
    (13) expression -> . function
    (18) variable -> . type NAME IGUAL datatype SEMICOLON
    (19) variable -> . type NAME IGUAL operations SEMICOLON
    (20) variable -> . NAME IGUAL datatype SEMICOLON
    (24) dataStruct -> . array
    (25) dataStruct -> . set
    (26) dataStruct -> . map
    (21) controlStruct -> . while
    (22) controlStruct -> . for
    (23) controlStruct -> . if
    (101) methodsSet -> . NAME POINT ADD OPEN_PARENTHESIS element CLOSE_PARENTHESIS SEMICOLON
    (102) methodsSet -> . NAME POINT DELETE OPEN_PARENTHESIS element CLOSE_PARENTHESIS SEMICOLON
    (103) methodsSet -> . NAME POINT CLEAR OPEN_PARENTHESIS CLOSE_PARENTHESIS SEMICOLON
    (89) mapFunctions -> . NAME POINT CLEAR OPEN_PARENTHESIS CLOSE_PARENTHESIS SEMICOLON
    (90) mapFunctions -> . NAME POINT GET OPEN_PARENTHESIS clave CLOSE_PARENTHESIS SEMICOLON
    (91) mapFunctions -> . NAME POINT HAS OPEN_PARENTHESIS clave CLOSE_PARENTHESIS SEMICOLON
    (92) arrayFn -> . NAME POINT POP OPEN_PARENTHESIS CLOSE_PARENTHESIS SEMICOLON
    (93) arrayFn -> . NAME POINT PUSH OPEN_PARENTHESIS element CLOSE_PARENTHESIS SEMICOLON
    (94) arrayFn -> . NAME POINT UNSHIFT OPEN_PARENTHESIS element CLOSE_PARENTHESIS SEMICOLON
    (111) declaration -> . NAME IGUAL element SEMICOLON
    (123) print -> . PRINT OPEN_PARENTHESIS CLOSE_PARENTHESIS SEMICOLON
    (122) return -> . RETURN element SEMICOLON
    (118) function -> . FUNCTION NAME OPEN_PARENTHESIS CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE
    (119) function -> . FUNCTION NAME OPEN_PARENTHESIS parameter CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE
    (61) type -> . CONST
    (62) type -> . LET
    (63) type -> . VAR
    (72) array -> . type NAME IGUAL OPEN_BRACKET items CLOSE_BRACKET SEMICOLON
    (73) array -> . type NAME IGUAL NEW ARRAY OPEN_PARENTHESIS items CLOSE_PARENTHESIS SEMICOLON
    (95) set -> . type NAME IGUAL NEW SET OPEN_PARENTHESIS CLOSE_PARENTHESIS SEMICOLON
    (96) set -> . type NAME IGUAL NEW SET OPEN_PARENTHESIS OPEN_BRACKET items CLOSE_BRACKET CLOSE_PARENTHESIS SEMICOLON
    (97) set -> . type NAME IGUAL NEW SET OPEN_PARENTHESIS element CLOSE_PARENTHESIS SEMICOLON
    (98) set -> . NAME IGUAL NEW SET OPEN_PARENTHESIS CLOSE_PARENTHESIS SEMICOLON
    (99) set -> . NAME IGUAL NEW SET OPEN_PARENTHESIS OPEN_BRACKET items CLOSE_BRACKET CLOSE_PARENTHESIS SEMICOLON
    (100) set -> . NAME IGUAL NEW SET OPEN_PARENTHESIS element CLOSE_PARENTHESIS SEMICOLON
    (74) map -> . iniciarMap
    (75) map -> . escribirMap
    (76) map -> . generarMap
    (27) while -> . WHILE OPEN_PARENTHESIS controlArg CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE
    (28) while -> . WHILE OPEN_PARENTHESIS bool CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE
    (38) for -> . FOR OPEN_PARENTHESIS inicialization SEMICOLON expBoolean SEMICOLON operations CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE
    (29) if -> . soloIf
    (30) if -> . soloIf elseIf
    (31) if -> . soloIf elseIf else
    (32) if -> . soloIf else
    (77) iniciarMap -> . variable IGUAL NEW MAP OPEN_PARENTHESIS CLOSE_PARENTHESIS SEMICOLON
    (78) escribirMap -> . variable IGUAL OPEN_BRACE claveValor CLOSE_BRACE
    (84) generarMap -> . variable IGUAL OPEN_BRACE tuplas CLOSE_BRACE
    (33) soloIf -> . IF OPEN_PARENTHESIS controlArg CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE

    NAME            shift and go to state 13
    PRINT           shift and go to state 20
    RETURN          shift and go to state 21
    FUNCTION        shift and go to state 22
    CONST           shift and go to state 23
    LET             shift and go to state 24
    VAR             shift and go to state 25
    WHILE           shift and go to state 29
    FOR             shift and go to state 30
    IF              shift and go to state 32

    expression                     shift and go to state 251
    variable                       shift and go to state 2
    dataStruct                     shift and go to state 3
    controlStruct                  shift and go to state 4
    methodsSet                     shift and go to state 5
    mapFunctions                   shift and go to state 6
    arrayFn                        shift and go to state 7
    declaration                    shift and go to state 8
    print                          shift and go to state 9
    return                         shift and go to state 10
    function                       shift and go to state 11
    type                           shift and go to state 12
    array                          shift and go to state 14
    set                            shift and go to state 15
    map                            shift and go to state 16
    while                          shift and go to state 17
    for                            shift and go to state 18
    if                             shift and go to state 19
    iniciarMap                     shift and go to state 26
    escribirMap                    shift and go to state 27
    generarMap                     shift and go to state 28
    soloIf                         shift and go to state 31

state 218

    (27) while -> WHILE OPEN_PARENTHESIS controlArg CLOSE_PARENTHESIS OPEN_BRACE expression . CLOSE_BRACE

    CLOSE_BRACE     shift and go to state 252


state 219

    (28) while -> WHILE OPEN_PARENTHESIS bool CLOSE_PARENTHESIS OPEN_BRACE expression . CLOSE_BRACE

    CLOSE_BRACE     shift and go to state 253


state 220

    (38) for -> FOR OPEN_PARENTHESIS inicialization SEMICOLON expBoolean SEMICOLON . operations CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE
    (41) operations -> . number operand number
    (42) operations -> . NAME
    (43) operations -> . NAME SUMA SUMA
    (44) operations -> . number
    (45) operations -> . number operand NAME operations
    (46) operations -> . NAME operand number operations
    (47) operations -> . number operand NAME
    (48) operations -> . NAME operand number
    (49) operations -> . NAME operand NAME operations
    (50) operations -> . number operand number operand operations
    (14) number -> . INTEGER
    (15) number -> . FLOAT
    (16) number -> . RESTA INTEGER
    (17) number -> . RESTA FLOAT

    NAME            shift and go to state 101
    INTEGER         shift and go to state 45
    FLOAT           shift and go to state 46
    RESTA           shift and go to state 47

    operations                     shift and go to state 254
    number                         shift and go to state 201

state 221

    (117) expBoolean -> expBoolean logicalOperator . expBoolean
    (114) expBoolean -> . controlArg
    (115) expBoolean -> . bool
    (116) expBoolean -> . NOT expBoolean
    (117) expBoolean -> . expBoolean logicalOperator expBoolean
    (37) controlArg -> . element clause element
    (59) bool -> . TRUE
    (60) bool -> . FALSE
    (108) element -> . STRING
    (109) element -> . number
    (110) element -> . NAME
    (14) number -> . INTEGER
    (15) number -> . FLOAT
    (16) number -> . RESTA INTEGER
    (17) number -> . RESTA FLOAT

    NOT             shift and go to state 180
    TRUE            shift and go to state 83
    FALSE           shift and go to state 84
    STRING          shift and go to state 42
    NAME            shift and go to state 44
    INTEGER         shift and go to state 45
    FLOAT           shift and go to state 46
    RESTA           shift and go to state 47

    expBoolean                     shift and go to state 255
    controlArg                     shift and go to state 178
    bool                           shift and go to state 179
    element                        shift and go to state 82
    number                         shift and go to state 43

state 222

    (112) logicalOperator -> AND .

    NOT             reduce using rule 112 (logicalOperator -> AND .)
    TRUE            reduce using rule 112 (logicalOperator -> AND .)
    FALSE           reduce using rule 112 (logicalOperator -> AND .)
    STRING          reduce using rule 112 (logicalOperator -> AND .)
    NAME            reduce using rule 112 (logicalOperator -> AND .)
    INTEGER         reduce using rule 112 (logicalOperator -> AND .)
    FLOAT           reduce using rule 112 (logicalOperator -> AND .)
    RESTA           reduce using rule 112 (logicalOperator -> AND .)


state 223

    (113) logicalOperator -> OR .

    NOT             reduce using rule 113 (logicalOperator -> OR .)
    TRUE            reduce using rule 113 (logicalOperator -> OR .)
    FALSE           reduce using rule 113 (logicalOperator -> OR .)
    STRING          reduce using rule 113 (logicalOperator -> OR .)
    NAME            reduce using rule 113 (logicalOperator -> OR .)
    INTEGER         reduce using rule 113 (logicalOperator -> OR .)
    FLOAT           reduce using rule 113 (logicalOperator -> OR .)
    RESTA           reduce using rule 113 (logicalOperator -> OR .)


state 224

    (116) expBoolean -> NOT expBoolean .
    (117) expBoolean -> expBoolean . logicalOperator expBoolean
    (112) logicalOperator -> . AND
    (113) logicalOperator -> . OR

  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
    SEMICOLON       reduce using rule 116 (expBoolean -> NOT expBoolean .)
    AND             shift and go to state 222
    OR              shift and go to state 223

  ! AND             [ reduce using rule 116 (expBoolean -> NOT expBoolean .) ]
  ! OR              [ reduce using rule 116 (expBoolean -> NOT expBoolean .) ]

    logicalOperator                shift and go to state 221

state 225

    (39) inicialization -> type NAME IGUAL number .

    SEMICOLON       reduce using rule 39 (inicialization -> type NAME IGUAL number .)


state 226

    (34) elseIf -> ELSEIF OPEN_PARENTHESIS controlArg CLOSE_PARENTHESIS OPEN_BRACE . expression CLOSE_BRACE
    (35) elseIf -> ELSEIF OPEN_PARENTHESIS controlArg CLOSE_PARENTHESIS OPEN_BRACE . expression CLOSE_BRACE soloIf
    (1) expression -> . variable
    (2) expression -> . variable expression
    (3) expression -> . dataStruct
    (4) expression -> . dataStruct expression
    (5) expression -> . controlStruct
    (6) expression -> . controlStruct expression
    (7) expression -> . methodsSet
    (8) expression -> . mapFunctions
    (9) expression -> . arrayFn
    (10) expression -> . declaration
    (11) expression -> . print
    (12) expression -> . return
    (13) expression -> . function
    (18) variable -> . type NAME IGUAL datatype SEMICOLON
    (19) variable -> . type NAME IGUAL operations SEMICOLON
    (20) variable -> . NAME IGUAL datatype SEMICOLON
    (24) dataStruct -> . array
    (25) dataStruct -> . set
    (26) dataStruct -> . map
    (21) controlStruct -> . while
    (22) controlStruct -> . for
    (23) controlStruct -> . if
    (101) methodsSet -> . NAME POINT ADD OPEN_PARENTHESIS element CLOSE_PARENTHESIS SEMICOLON
    (102) methodsSet -> . NAME POINT DELETE OPEN_PARENTHESIS element CLOSE_PARENTHESIS SEMICOLON
    (103) methodsSet -> . NAME POINT CLEAR OPEN_PARENTHESIS CLOSE_PARENTHESIS SEMICOLON
    (89) mapFunctions -> . NAME POINT CLEAR OPEN_PARENTHESIS CLOSE_PARENTHESIS SEMICOLON
    (90) mapFunctions -> . NAME POINT GET OPEN_PARENTHESIS clave CLOSE_PARENTHESIS SEMICOLON
    (91) mapFunctions -> . NAME POINT HAS OPEN_PARENTHESIS clave CLOSE_PARENTHESIS SEMICOLON
    (92) arrayFn -> . NAME POINT POP OPEN_PARENTHESIS CLOSE_PARENTHESIS SEMICOLON
    (93) arrayFn -> . NAME POINT PUSH OPEN_PARENTHESIS element CLOSE_PARENTHESIS SEMICOLON
    (94) arrayFn -> . NAME POINT UNSHIFT OPEN_PARENTHESIS element CLOSE_PARENTHESIS SEMICOLON
    (111) declaration -> . NAME IGUAL element SEMICOLON
    (123) print -> . PRINT OPEN_PARENTHESIS CLOSE_PARENTHESIS SEMICOLON
    (122) return -> . RETURN element SEMICOLON
    (118) function -> . FUNCTION NAME OPEN_PARENTHESIS CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE
    (119) function -> . FUNCTION NAME OPEN_PARENTHESIS parameter CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE
    (61) type -> . CONST
    (62) type -> . LET
    (63) type -> . VAR
    (72) array -> . type NAME IGUAL OPEN_BRACKET items CLOSE_BRACKET SEMICOLON
    (73) array -> . type NAME IGUAL NEW ARRAY OPEN_PARENTHESIS items CLOSE_PARENTHESIS SEMICOLON
    (95) set -> . type NAME IGUAL NEW SET OPEN_PARENTHESIS CLOSE_PARENTHESIS SEMICOLON
    (96) set -> . type NAME IGUAL NEW SET OPEN_PARENTHESIS OPEN_BRACKET items CLOSE_BRACKET CLOSE_PARENTHESIS SEMICOLON
    (97) set -> . type NAME IGUAL NEW SET OPEN_PARENTHESIS element CLOSE_PARENTHESIS SEMICOLON
    (98) set -> . NAME IGUAL NEW SET OPEN_PARENTHESIS CLOSE_PARENTHESIS SEMICOLON
    (99) set -> . NAME IGUAL NEW SET OPEN_PARENTHESIS OPEN_BRACKET items CLOSE_BRACKET CLOSE_PARENTHESIS SEMICOLON
    (100) set -> . NAME IGUAL NEW SET OPEN_PARENTHESIS element CLOSE_PARENTHESIS SEMICOLON
    (74) map -> . iniciarMap
    (75) map -> . escribirMap
    (76) map -> . generarMap
    (27) while -> . WHILE OPEN_PARENTHESIS controlArg CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE
    (28) while -> . WHILE OPEN_PARENTHESIS bool CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE
    (38) for -> . FOR OPEN_PARENTHESIS inicialization SEMICOLON expBoolean SEMICOLON operations CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE
    (29) if -> . soloIf
    (30) if -> . soloIf elseIf
    (31) if -> . soloIf elseIf else
    (32) if -> . soloIf else
    (77) iniciarMap -> . variable IGUAL NEW MAP OPEN_PARENTHESIS CLOSE_PARENTHESIS SEMICOLON
    (78) escribirMap -> . variable IGUAL OPEN_BRACE claveValor CLOSE_BRACE
    (84) generarMap -> . variable IGUAL OPEN_BRACE tuplas CLOSE_BRACE
    (33) soloIf -> . IF OPEN_PARENTHESIS controlArg CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE

    NAME            shift and go to state 13
    PRINT           shift and go to state 20
    RETURN          shift and go to state 21
    FUNCTION        shift and go to state 22
    CONST           shift and go to state 23
    LET             shift and go to state 24
    VAR             shift and go to state 25
    WHILE           shift and go to state 29
    FOR             shift and go to state 30
    IF              shift and go to state 32

    expression                     shift and go to state 256
    soloIf                         shift and go to state 31
    variable                       shift and go to state 2
    dataStruct                     shift and go to state 3
    controlStruct                  shift and go to state 4
    methodsSet                     shift and go to state 5
    mapFunctions                   shift and go to state 6
    arrayFn                        shift and go to state 7
    declaration                    shift and go to state 8
    print                          shift and go to state 9
    return                         shift and go to state 10
    function                       shift and go to state 11
    type                           shift and go to state 12
    array                          shift and go to state 14
    set                            shift and go to state 15
    map                            shift and go to state 16
    while                          shift and go to state 17
    for                            shift and go to state 18
    if                             shift and go to state 19
    iniciarMap                     shift and go to state 26
    escribirMap                    shift and go to state 27
    generarMap                     shift and go to state 28

state 227

    (33) soloIf -> IF OPEN_PARENTHESIS controlArg CLOSE_PARENTHESIS OPEN_BRACE expression . CLOSE_BRACE

    CLOSE_BRACE     shift and go to state 257


state 228

    (77) iniciarMap -> variable IGUAL NEW MAP OPEN_PARENTHESIS CLOSE_PARENTHESIS SEMICOLON .

    NAME            reduce using rule 77 (iniciarMap -> variable IGUAL NEW MAP OPEN_PARENTHESIS CLOSE_PARENTHESIS SEMICOLON .)
    PRINT           reduce using rule 77 (iniciarMap -> variable IGUAL NEW MAP OPEN_PARENTHESIS CLOSE_PARENTHESIS SEMICOLON .)
    RETURN          reduce using rule 77 (iniciarMap -> variable IGUAL NEW MAP OPEN_PARENTHESIS CLOSE_PARENTHESIS SEMICOLON .)
    FUNCTION        reduce using rule 77 (iniciarMap -> variable IGUAL NEW MAP OPEN_PARENTHESIS CLOSE_PARENTHESIS SEMICOLON .)
    CONST           reduce using rule 77 (iniciarMap -> variable IGUAL NEW MAP OPEN_PARENTHESIS CLOSE_PARENTHESIS SEMICOLON .)
    LET             reduce using rule 77 (iniciarMap -> variable IGUAL NEW MAP OPEN_PARENTHESIS CLOSE_PARENTHESIS SEMICOLON .)
    VAR             reduce using rule 77 (iniciarMap -> variable IGUAL NEW MAP OPEN_PARENTHESIS CLOSE_PARENTHESIS SEMICOLON .)
    WHILE           reduce using rule 77 (iniciarMap -> variable IGUAL NEW MAP OPEN_PARENTHESIS CLOSE_PARENTHESIS SEMICOLON .)
    FOR             reduce using rule 77 (iniciarMap -> variable IGUAL NEW MAP OPEN_PARENTHESIS CLOSE_PARENTHESIS SEMICOLON .)
    IF              reduce using rule 77 (iniciarMap -> variable IGUAL NEW MAP OPEN_PARENTHESIS CLOSE_PARENTHESIS SEMICOLON .)
    $end            reduce using rule 77 (iniciarMap -> variable IGUAL NEW MAP OPEN_PARENTHESIS CLOSE_PARENTHESIS SEMICOLON .)
    CLOSE_BRACE     reduce using rule 77 (iniciarMap -> variable IGUAL NEW MAP OPEN_PARENTHESIS CLOSE_PARENTHESIS SEMICOLON .)
    COMMA           reduce using rule 77 (iniciarMap -> variable IGUAL NEW MAP OPEN_PARENTHESIS CLOSE_PARENTHESIS SEMICOLON .)


state 229

    (80) claveValor -> clave COLON valor COMMA . claveValor
    (79) claveValor -> . clave COLON valor
    (80) claveValor -> . clave COLON valor COMMA claveValor
    (81) clave -> . datatype
    (51) datatype -> . number
    (52) datatype -> . STRING
    (53) datatype -> . CHAR
    (54) datatype -> . operations
    (14) number -> . INTEGER
    (15) number -> . FLOAT
    (16) number -> . RESTA INTEGER
    (17) number -> . RESTA FLOAT
    (41) operations -> . number operand number
    (42) operations -> . NAME
    (43) operations -> . NAME SUMA SUMA
    (44) operations -> . number
    (45) operations -> . number operand NAME operations
    (46) operations -> . NAME operand number operations
    (47) operations -> . number operand NAME
    (48) operations -> . NAME operand number
    (49) operations -> . NAME operand NAME operations
    (50) operations -> . number operand number operand operations

    STRING          shift and go to state 100
    CHAR            shift and go to state 65
    INTEGER         shift and go to state 45
    FLOAT           shift and go to state 46
    RESTA           shift and go to state 47
    NAME            shift and go to state 101

    clave                          shift and go to state 95
    claveValor                     shift and go to state 258
    datatype                       shift and go to state 97
    number                         shift and go to state 99
    operations                     shift and go to state 66

state 230

    (98) set -> NAME IGUAL . NEW SET OPEN_PARENTHESIS CLOSE_PARENTHESIS SEMICOLON
    (99) set -> NAME IGUAL . NEW SET OPEN_PARENTHESIS OPEN_BRACKET items CLOSE_BRACKET CLOSE_PARENTHESIS SEMICOLON
    (100) set -> NAME IGUAL . NEW SET OPEN_PARENTHESIS element CLOSE_PARENTHESIS SEMICOLON
    (20) variable -> NAME IGUAL . datatype SEMICOLON
    (51) datatype -> . number
    (52) datatype -> . STRING
    (53) datatype -> . CHAR
    (54) datatype -> . operations
    (14) number -> . INTEGER
    (15) number -> . FLOAT
    (16) number -> . RESTA INTEGER
    (17) number -> . RESTA FLOAT
    (41) operations -> . number operand number
    (42) operations -> . NAME
    (43) operations -> . NAME SUMA SUMA
    (44) operations -> . number
    (45) operations -> . number operand NAME operations
    (46) operations -> . NAME operand number operations
    (47) operations -> . number operand NAME
    (48) operations -> . NAME operand number
    (49) operations -> . NAME operand NAME operations
    (50) operations -> . number operand number operand operations

    NEW             shift and go to state 62
    STRING          shift and go to state 100
    CHAR            shift and go to state 65
    INTEGER         shift and go to state 45
    FLOAT           shift and go to state 46
    RESTA           shift and go to state 47
    NAME            shift and go to state 101

    datatype                       shift and go to state 60
    number                         shift and go to state 99
    operations                     shift and go to state 66

state 231

    (72) array -> type NAME . IGUAL OPEN_BRACKET items CLOSE_BRACKET SEMICOLON
    (73) array -> type NAME . IGUAL NEW ARRAY OPEN_PARENTHESIS items CLOSE_PARENTHESIS SEMICOLON
    (95) set -> type NAME . IGUAL NEW SET OPEN_PARENTHESIS CLOSE_PARENTHESIS SEMICOLON
    (96) set -> type NAME . IGUAL NEW SET OPEN_PARENTHESIS OPEN_BRACKET items CLOSE_BRACKET CLOSE_PARENTHESIS SEMICOLON
    (97) set -> type NAME . IGUAL NEW SET OPEN_PARENTHESIS element CLOSE_PARENTHESIS SEMICOLON
    (18) variable -> type NAME . IGUAL datatype SEMICOLON
    (19) variable -> type NAME . IGUAL operations SEMICOLON

    IGUAL           shift and go to state 259


state 232

    (87) tupla -> OPEN_BRACKET datatype CLOSE_BRACKET SEMICOLON .

    COMMA           reduce using rule 87 (tupla -> OPEN_BRACKET datatype CLOSE_BRACKET SEMICOLON .)
    CLOSE_BRACE     reduce using rule 87 (tupla -> OPEN_BRACKET datatype CLOSE_BRACKET SEMICOLON .)


state 233

    (88) tupla -> OPEN_BRACKET datatype COMMA datatype . CLOSE_BRACKET SEMICOLON

    CLOSE_BRACKET   shift and go to state 260


state 234

    (72) array -> type NAME IGUAL OPEN_BRACKET items CLOSE_BRACKET SEMICOLON .

    NAME            reduce using rule 72 (array -> type NAME IGUAL OPEN_BRACKET items CLOSE_BRACKET SEMICOLON .)
    PRINT           reduce using rule 72 (array -> type NAME IGUAL OPEN_BRACKET items CLOSE_BRACKET SEMICOLON .)
    RETURN          reduce using rule 72 (array -> type NAME IGUAL OPEN_BRACKET items CLOSE_BRACKET SEMICOLON .)
    FUNCTION        reduce using rule 72 (array -> type NAME IGUAL OPEN_BRACKET items CLOSE_BRACKET SEMICOLON .)
    CONST           reduce using rule 72 (array -> type NAME IGUAL OPEN_BRACKET items CLOSE_BRACKET SEMICOLON .)
    LET             reduce using rule 72 (array -> type NAME IGUAL OPEN_BRACKET items CLOSE_BRACKET SEMICOLON .)
    VAR             reduce using rule 72 (array -> type NAME IGUAL OPEN_BRACKET items CLOSE_BRACKET SEMICOLON .)
    WHILE           reduce using rule 72 (array -> type NAME IGUAL OPEN_BRACKET items CLOSE_BRACKET SEMICOLON .)
    FOR             reduce using rule 72 (array -> type NAME IGUAL OPEN_BRACKET items CLOSE_BRACKET SEMICOLON .)
    IF              reduce using rule 72 (array -> type NAME IGUAL OPEN_BRACKET items CLOSE_BRACKET SEMICOLON .)
    $end            reduce using rule 72 (array -> type NAME IGUAL OPEN_BRACKET items CLOSE_BRACKET SEMICOLON .)
    CLOSE_BRACE     reduce using rule 72 (array -> type NAME IGUAL OPEN_BRACKET items CLOSE_BRACKET SEMICOLON .)
    COMMA           reduce using rule 72 (array -> type NAME IGUAL OPEN_BRACKET items CLOSE_BRACKET SEMICOLON .)


state 235

    (107) cadena -> STRING COMMA cadena .

    CLOSE_BRACKET   reduce using rule 107 (cadena -> STRING COMMA cadena .)
    CLOSE_PARENTHESIS reduce using rule 107 (cadena -> STRING COMMA cadena .)


state 236

    (73) array -> type NAME IGUAL NEW ARRAY OPEN_PARENTHESIS items . CLOSE_PARENTHESIS SEMICOLON

    CLOSE_PARENTHESIS shift and go to state 261


state 237

    (95) set -> type NAME IGUAL NEW SET OPEN_PARENTHESIS CLOSE_PARENTHESIS . SEMICOLON

    SEMICOLON       shift and go to state 262


state 238

    (96) set -> type NAME IGUAL NEW SET OPEN_PARENTHESIS OPEN_BRACKET . items CLOSE_BRACKET CLOSE_PARENTHESIS SEMICOLON
    (104) items -> . number
    (105) items -> . cadena
    (14) number -> . INTEGER
    (15) number -> . FLOAT
    (16) number -> . RESTA INTEGER
    (17) number -> . RESTA FLOAT
    (106) cadena -> . STRING
    (107) cadena -> . STRING COMMA cadena

    INTEGER         shift and go to state 45
    FLOAT           shift and go to state 46
    RESTA           shift and go to state 47
    STRING          shift and go to state 154

    items                          shift and go to state 263
    number                         shift and go to state 152
    cadena                         shift and go to state 153

state 239

    (97) set -> type NAME IGUAL NEW SET OPEN_PARENTHESIS element . CLOSE_PARENTHESIS SEMICOLON

    CLOSE_PARENTHESIS shift and go to state 264


state 240

    (98) set -> NAME IGUAL NEW SET OPEN_PARENTHESIS CLOSE_PARENTHESIS SEMICOLON .

    NAME            reduce using rule 98 (set -> NAME IGUAL NEW SET OPEN_PARENTHESIS CLOSE_PARENTHESIS SEMICOLON .)
    PRINT           reduce using rule 98 (set -> NAME IGUAL NEW SET OPEN_PARENTHESIS CLOSE_PARENTHESIS SEMICOLON .)
    RETURN          reduce using rule 98 (set -> NAME IGUAL NEW SET OPEN_PARENTHESIS CLOSE_PARENTHESIS SEMICOLON .)
    FUNCTION        reduce using rule 98 (set -> NAME IGUAL NEW SET OPEN_PARENTHESIS CLOSE_PARENTHESIS SEMICOLON .)
    CONST           reduce using rule 98 (set -> NAME IGUAL NEW SET OPEN_PARENTHESIS CLOSE_PARENTHESIS SEMICOLON .)
    LET             reduce using rule 98 (set -> NAME IGUAL NEW SET OPEN_PARENTHESIS CLOSE_PARENTHESIS SEMICOLON .)
    VAR             reduce using rule 98 (set -> NAME IGUAL NEW SET OPEN_PARENTHESIS CLOSE_PARENTHESIS SEMICOLON .)
    WHILE           reduce using rule 98 (set -> NAME IGUAL NEW SET OPEN_PARENTHESIS CLOSE_PARENTHESIS SEMICOLON .)
    FOR             reduce using rule 98 (set -> NAME IGUAL NEW SET OPEN_PARENTHESIS CLOSE_PARENTHESIS SEMICOLON .)
    IF              reduce using rule 98 (set -> NAME IGUAL NEW SET OPEN_PARENTHESIS CLOSE_PARENTHESIS SEMICOLON .)
    $end            reduce using rule 98 (set -> NAME IGUAL NEW SET OPEN_PARENTHESIS CLOSE_PARENTHESIS SEMICOLON .)
    CLOSE_BRACE     reduce using rule 98 (set -> NAME IGUAL NEW SET OPEN_PARENTHESIS CLOSE_PARENTHESIS SEMICOLON .)
    COMMA           reduce using rule 98 (set -> NAME IGUAL NEW SET OPEN_PARENTHESIS CLOSE_PARENTHESIS SEMICOLON .)


state 241

    (99) set -> NAME IGUAL NEW SET OPEN_PARENTHESIS OPEN_BRACKET items . CLOSE_BRACKET CLOSE_PARENTHESIS SEMICOLON

    CLOSE_BRACKET   shift and go to state 265


state 242

    (100) set -> NAME IGUAL NEW SET OPEN_PARENTHESIS element CLOSE_PARENTHESIS . SEMICOLON

    SEMICOLON       shift and go to state 266


state 243

    (50) operations -> number operand number operand operations .

    SEMICOLON       reduce using rule 50 (operations -> number operand number operand operations .)
    COLON           reduce using rule 50 (operations -> number operand number operand operations .)
    CLOSE_BRACKET   reduce using rule 50 (operations -> number operand number operand operations .)
    COMMA           reduce using rule 50 (operations -> number operand number operand operations .)
    CLOSE_PARENTHESIS reduce using rule 50 (operations -> number operand number operand operations .)
    CLOSE_BRACE     reduce using rule 50 (operations -> number operand number operand operations .)


state 244

    (101) methodsSet -> NAME POINT ADD OPEN_PARENTHESIS element CLOSE_PARENTHESIS SEMICOLON .

    $end            reduce using rule 101 (methodsSet -> NAME POINT ADD OPEN_PARENTHESIS element CLOSE_PARENTHESIS SEMICOLON .)
    CLOSE_BRACE     reduce using rule 101 (methodsSet -> NAME POINT ADD OPEN_PARENTHESIS element CLOSE_PARENTHESIS SEMICOLON .)


state 245

    (102) methodsSet -> NAME POINT DELETE OPEN_PARENTHESIS element CLOSE_PARENTHESIS SEMICOLON .

    $end            reduce using rule 102 (methodsSet -> NAME POINT DELETE OPEN_PARENTHESIS element CLOSE_PARENTHESIS SEMICOLON .)
    CLOSE_BRACE     reduce using rule 102 (methodsSet -> NAME POINT DELETE OPEN_PARENTHESIS element CLOSE_PARENTHESIS SEMICOLON .)


state 246

    (90) mapFunctions -> NAME POINT GET OPEN_PARENTHESIS clave CLOSE_PARENTHESIS SEMICOLON .

    $end            reduce using rule 90 (mapFunctions -> NAME POINT GET OPEN_PARENTHESIS clave CLOSE_PARENTHESIS SEMICOLON .)
    CLOSE_BRACE     reduce using rule 90 (mapFunctions -> NAME POINT GET OPEN_PARENTHESIS clave CLOSE_PARENTHESIS SEMICOLON .)


state 247

    (91) mapFunctions -> NAME POINT HAS OPEN_PARENTHESIS clave CLOSE_PARENTHESIS SEMICOLON .

    $end            reduce using rule 91 (mapFunctions -> NAME POINT HAS OPEN_PARENTHESIS clave CLOSE_PARENTHESIS SEMICOLON .)
    CLOSE_BRACE     reduce using rule 91 (mapFunctions -> NAME POINT HAS OPEN_PARENTHESIS clave CLOSE_PARENTHESIS SEMICOLON .)


state 248

    (93) arrayFn -> NAME POINT PUSH OPEN_PARENTHESIS element CLOSE_PARENTHESIS SEMICOLON .

    $end            reduce using rule 93 (arrayFn -> NAME POINT PUSH OPEN_PARENTHESIS element CLOSE_PARENTHESIS SEMICOLON .)
    CLOSE_BRACE     reduce using rule 93 (arrayFn -> NAME POINT PUSH OPEN_PARENTHESIS element CLOSE_PARENTHESIS SEMICOLON .)


state 249

    (94) arrayFn -> NAME POINT UNSHIFT OPEN_PARENTHESIS element CLOSE_PARENTHESIS SEMICOLON .

    $end            reduce using rule 94 (arrayFn -> NAME POINT UNSHIFT OPEN_PARENTHESIS element CLOSE_PARENTHESIS SEMICOLON .)
    CLOSE_BRACE     reduce using rule 94 (arrayFn -> NAME POINT UNSHIFT OPEN_PARENTHESIS element CLOSE_PARENTHESIS SEMICOLON .)


state 250

    (118) function -> FUNCTION NAME OPEN_PARENTHESIS CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE .

    $end            reduce using rule 118 (function -> FUNCTION NAME OPEN_PARENTHESIS CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE .)
    CLOSE_BRACE     reduce using rule 118 (function -> FUNCTION NAME OPEN_PARENTHESIS CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE .)


state 251

    (119) function -> FUNCTION NAME OPEN_PARENTHESIS parameter CLOSE_PARENTHESIS OPEN_BRACE expression . CLOSE_BRACE

    CLOSE_BRACE     shift and go to state 267


state 252

    (27) while -> WHILE OPEN_PARENTHESIS controlArg CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE .

    NAME            reduce using rule 27 (while -> WHILE OPEN_PARENTHESIS controlArg CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE .)
    PRINT           reduce using rule 27 (while -> WHILE OPEN_PARENTHESIS controlArg CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE .)
    RETURN          reduce using rule 27 (while -> WHILE OPEN_PARENTHESIS controlArg CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE .)
    FUNCTION        reduce using rule 27 (while -> WHILE OPEN_PARENTHESIS controlArg CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE .)
    CONST           reduce using rule 27 (while -> WHILE OPEN_PARENTHESIS controlArg CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE .)
    LET             reduce using rule 27 (while -> WHILE OPEN_PARENTHESIS controlArg CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE .)
    VAR             reduce using rule 27 (while -> WHILE OPEN_PARENTHESIS controlArg CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE .)
    WHILE           reduce using rule 27 (while -> WHILE OPEN_PARENTHESIS controlArg CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE .)
    FOR             reduce using rule 27 (while -> WHILE OPEN_PARENTHESIS controlArg CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE .)
    IF              reduce using rule 27 (while -> WHILE OPEN_PARENTHESIS controlArg CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE .)
    $end            reduce using rule 27 (while -> WHILE OPEN_PARENTHESIS controlArg CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE .)
    CLOSE_BRACE     reduce using rule 27 (while -> WHILE OPEN_PARENTHESIS controlArg CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE .)


state 253

    (28) while -> WHILE OPEN_PARENTHESIS bool CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE .

    NAME            reduce using rule 28 (while -> WHILE OPEN_PARENTHESIS bool CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE .)
    PRINT           reduce using rule 28 (while -> WHILE OPEN_PARENTHESIS bool CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE .)
    RETURN          reduce using rule 28 (while -> WHILE OPEN_PARENTHESIS bool CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE .)
    FUNCTION        reduce using rule 28 (while -> WHILE OPEN_PARENTHESIS bool CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE .)
    CONST           reduce using rule 28 (while -> WHILE OPEN_PARENTHESIS bool CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE .)
    LET             reduce using rule 28 (while -> WHILE OPEN_PARENTHESIS bool CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE .)
    VAR             reduce using rule 28 (while -> WHILE OPEN_PARENTHESIS bool CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE .)
    WHILE           reduce using rule 28 (while -> WHILE OPEN_PARENTHESIS bool CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE .)
    FOR             reduce using rule 28 (while -> WHILE OPEN_PARENTHESIS bool CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE .)
    IF              reduce using rule 28 (while -> WHILE OPEN_PARENTHESIS bool CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE .)
    $end            reduce using rule 28 (while -> WHILE OPEN_PARENTHESIS bool CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE .)
    CLOSE_BRACE     reduce using rule 28 (while -> WHILE OPEN_PARENTHESIS bool CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE .)


state 254

    (38) for -> FOR OPEN_PARENTHESIS inicialization SEMICOLON expBoolean SEMICOLON operations . CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE

    CLOSE_PARENTHESIS shift and go to state 268


state 255

    (117) expBoolean -> expBoolean logicalOperator expBoolean .
    (117) expBoolean -> expBoolean . logicalOperator expBoolean
    (112) logicalOperator -> . AND
    (113) logicalOperator -> . OR

  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
    SEMICOLON       reduce using rule 117 (expBoolean -> expBoolean logicalOperator expBoolean .)
    AND             shift and go to state 222
    OR              shift and go to state 223

  ! AND             [ reduce using rule 117 (expBoolean -> expBoolean logicalOperator expBoolean .) ]
  ! OR              [ reduce using rule 117 (expBoolean -> expBoolean logicalOperator expBoolean .) ]

    logicalOperator                shift and go to state 221

state 256

    (34) elseIf -> ELSEIF OPEN_PARENTHESIS controlArg CLOSE_PARENTHESIS OPEN_BRACE expression . CLOSE_BRACE
    (35) elseIf -> ELSEIF OPEN_PARENTHESIS controlArg CLOSE_PARENTHESIS OPEN_BRACE expression . CLOSE_BRACE soloIf

    CLOSE_BRACE     shift and go to state 269


state 257

    (33) soloIf -> IF OPEN_PARENTHESIS controlArg CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE .

    ELSEIF          reduce using rule 33 (soloIf -> IF OPEN_PARENTHESIS controlArg CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE .)
    ELSE            reduce using rule 33 (soloIf -> IF OPEN_PARENTHESIS controlArg CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE .)
    NAME            reduce using rule 33 (soloIf -> IF OPEN_PARENTHESIS controlArg CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE .)
    PRINT           reduce using rule 33 (soloIf -> IF OPEN_PARENTHESIS controlArg CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE .)
    RETURN          reduce using rule 33 (soloIf -> IF OPEN_PARENTHESIS controlArg CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE .)
    FUNCTION        reduce using rule 33 (soloIf -> IF OPEN_PARENTHESIS controlArg CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE .)
    CONST           reduce using rule 33 (soloIf -> IF OPEN_PARENTHESIS controlArg CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE .)
    LET             reduce using rule 33 (soloIf -> IF OPEN_PARENTHESIS controlArg CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE .)
    VAR             reduce using rule 33 (soloIf -> IF OPEN_PARENTHESIS controlArg CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE .)
    WHILE           reduce using rule 33 (soloIf -> IF OPEN_PARENTHESIS controlArg CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE .)
    FOR             reduce using rule 33 (soloIf -> IF OPEN_PARENTHESIS controlArg CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE .)
    IF              reduce using rule 33 (soloIf -> IF OPEN_PARENTHESIS controlArg CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE .)
    $end            reduce using rule 33 (soloIf -> IF OPEN_PARENTHESIS controlArg CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE .)
    CLOSE_BRACE     reduce using rule 33 (soloIf -> IF OPEN_PARENTHESIS controlArg CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE .)


state 258

    (80) claveValor -> clave COLON valor COMMA claveValor .

    CLOSE_BRACE     reduce using rule 80 (claveValor -> clave COLON valor COMMA claveValor .)


state 259

    (72) array -> type NAME IGUAL . OPEN_BRACKET items CLOSE_BRACKET SEMICOLON
    (73) array -> type NAME IGUAL . NEW ARRAY OPEN_PARENTHESIS items CLOSE_PARENTHESIS SEMICOLON
    (95) set -> type NAME IGUAL . NEW SET OPEN_PARENTHESIS CLOSE_PARENTHESIS SEMICOLON
    (96) set -> type NAME IGUAL . NEW SET OPEN_PARENTHESIS OPEN_BRACKET items CLOSE_BRACKET CLOSE_PARENTHESIS SEMICOLON
    (97) set -> type NAME IGUAL . NEW SET OPEN_PARENTHESIS element CLOSE_PARENTHESIS SEMICOLON
    (18) variable -> type NAME IGUAL . datatype SEMICOLON
    (19) variable -> type NAME IGUAL . operations SEMICOLON
    (51) datatype -> . number
    (52) datatype -> . STRING
    (53) datatype -> . CHAR
    (54) datatype -> . operations
    (41) operations -> . number operand number
    (42) operations -> . NAME
    (43) operations -> . NAME SUMA SUMA
    (44) operations -> . number
    (45) operations -> . number operand NAME operations
    (46) operations -> . NAME operand number operations
    (47) operations -> . number operand NAME
    (48) operations -> . NAME operand number
    (49) operations -> . NAME operand NAME operations
    (50) operations -> . number operand number operand operations
    (14) number -> . INTEGER
    (15) number -> . FLOAT
    (16) number -> . RESTA INTEGER
    (17) number -> . RESTA FLOAT

    OPEN_BRACKET    shift and go to state 104
    NEW             shift and go to state 105
    STRING          shift and go to state 100
    CHAR            shift and go to state 65
    NAME            shift and go to state 101
    INTEGER         shift and go to state 45
    FLOAT           shift and go to state 46
    RESTA           shift and go to state 47

    datatype                       shift and go to state 102
    operations                     shift and go to state 103
    number                         shift and go to state 99

state 260

    (88) tupla -> OPEN_BRACKET datatype COMMA datatype CLOSE_BRACKET . SEMICOLON

    SEMICOLON       shift and go to state 270


state 261

    (73) array -> type NAME IGUAL NEW ARRAY OPEN_PARENTHESIS items CLOSE_PARENTHESIS . SEMICOLON

    SEMICOLON       shift and go to state 271


state 262

    (95) set -> type NAME IGUAL NEW SET OPEN_PARENTHESIS CLOSE_PARENTHESIS SEMICOLON .

    NAME            reduce using rule 95 (set -> type NAME IGUAL NEW SET OPEN_PARENTHESIS CLOSE_PARENTHESIS SEMICOLON .)
    PRINT           reduce using rule 95 (set -> type NAME IGUAL NEW SET OPEN_PARENTHESIS CLOSE_PARENTHESIS SEMICOLON .)
    RETURN          reduce using rule 95 (set -> type NAME IGUAL NEW SET OPEN_PARENTHESIS CLOSE_PARENTHESIS SEMICOLON .)
    FUNCTION        reduce using rule 95 (set -> type NAME IGUAL NEW SET OPEN_PARENTHESIS CLOSE_PARENTHESIS SEMICOLON .)
    CONST           reduce using rule 95 (set -> type NAME IGUAL NEW SET OPEN_PARENTHESIS CLOSE_PARENTHESIS SEMICOLON .)
    LET             reduce using rule 95 (set -> type NAME IGUAL NEW SET OPEN_PARENTHESIS CLOSE_PARENTHESIS SEMICOLON .)
    VAR             reduce using rule 95 (set -> type NAME IGUAL NEW SET OPEN_PARENTHESIS CLOSE_PARENTHESIS SEMICOLON .)
    WHILE           reduce using rule 95 (set -> type NAME IGUAL NEW SET OPEN_PARENTHESIS CLOSE_PARENTHESIS SEMICOLON .)
    FOR             reduce using rule 95 (set -> type NAME IGUAL NEW SET OPEN_PARENTHESIS CLOSE_PARENTHESIS SEMICOLON .)
    IF              reduce using rule 95 (set -> type NAME IGUAL NEW SET OPEN_PARENTHESIS CLOSE_PARENTHESIS SEMICOLON .)
    $end            reduce using rule 95 (set -> type NAME IGUAL NEW SET OPEN_PARENTHESIS CLOSE_PARENTHESIS SEMICOLON .)
    CLOSE_BRACE     reduce using rule 95 (set -> type NAME IGUAL NEW SET OPEN_PARENTHESIS CLOSE_PARENTHESIS SEMICOLON .)
    COMMA           reduce using rule 95 (set -> type NAME IGUAL NEW SET OPEN_PARENTHESIS CLOSE_PARENTHESIS SEMICOLON .)


state 263

    (96) set -> type NAME IGUAL NEW SET OPEN_PARENTHESIS OPEN_BRACKET items . CLOSE_BRACKET CLOSE_PARENTHESIS SEMICOLON

    CLOSE_BRACKET   shift and go to state 272


state 264

    (97) set -> type NAME IGUAL NEW SET OPEN_PARENTHESIS element CLOSE_PARENTHESIS . SEMICOLON

    SEMICOLON       shift and go to state 273


state 265

    (99) set -> NAME IGUAL NEW SET OPEN_PARENTHESIS OPEN_BRACKET items CLOSE_BRACKET . CLOSE_PARENTHESIS SEMICOLON

    CLOSE_PARENTHESIS shift and go to state 274


state 266

    (100) set -> NAME IGUAL NEW SET OPEN_PARENTHESIS element CLOSE_PARENTHESIS SEMICOLON .

    NAME            reduce using rule 100 (set -> NAME IGUAL NEW SET OPEN_PARENTHESIS element CLOSE_PARENTHESIS SEMICOLON .)
    PRINT           reduce using rule 100 (set -> NAME IGUAL NEW SET OPEN_PARENTHESIS element CLOSE_PARENTHESIS SEMICOLON .)
    RETURN          reduce using rule 100 (set -> NAME IGUAL NEW SET OPEN_PARENTHESIS element CLOSE_PARENTHESIS SEMICOLON .)
    FUNCTION        reduce using rule 100 (set -> NAME IGUAL NEW SET OPEN_PARENTHESIS element CLOSE_PARENTHESIS SEMICOLON .)
    CONST           reduce using rule 100 (set -> NAME IGUAL NEW SET OPEN_PARENTHESIS element CLOSE_PARENTHESIS SEMICOLON .)
    LET             reduce using rule 100 (set -> NAME IGUAL NEW SET OPEN_PARENTHESIS element CLOSE_PARENTHESIS SEMICOLON .)
    VAR             reduce using rule 100 (set -> NAME IGUAL NEW SET OPEN_PARENTHESIS element CLOSE_PARENTHESIS SEMICOLON .)
    WHILE           reduce using rule 100 (set -> NAME IGUAL NEW SET OPEN_PARENTHESIS element CLOSE_PARENTHESIS SEMICOLON .)
    FOR             reduce using rule 100 (set -> NAME IGUAL NEW SET OPEN_PARENTHESIS element CLOSE_PARENTHESIS SEMICOLON .)
    IF              reduce using rule 100 (set -> NAME IGUAL NEW SET OPEN_PARENTHESIS element CLOSE_PARENTHESIS SEMICOLON .)
    $end            reduce using rule 100 (set -> NAME IGUAL NEW SET OPEN_PARENTHESIS element CLOSE_PARENTHESIS SEMICOLON .)
    CLOSE_BRACE     reduce using rule 100 (set -> NAME IGUAL NEW SET OPEN_PARENTHESIS element CLOSE_PARENTHESIS SEMICOLON .)
    COMMA           reduce using rule 100 (set -> NAME IGUAL NEW SET OPEN_PARENTHESIS element CLOSE_PARENTHESIS SEMICOLON .)


state 267

    (119) function -> FUNCTION NAME OPEN_PARENTHESIS parameter CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE .

    $end            reduce using rule 119 (function -> FUNCTION NAME OPEN_PARENTHESIS parameter CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE .)
    CLOSE_BRACE     reduce using rule 119 (function -> FUNCTION NAME OPEN_PARENTHESIS parameter CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE .)


state 268

    (38) for -> FOR OPEN_PARENTHESIS inicialization SEMICOLON expBoolean SEMICOLON operations CLOSE_PARENTHESIS . OPEN_BRACE expression CLOSE_BRACE

    OPEN_BRACE      shift and go to state 275


state 269

    (34) elseIf -> ELSEIF OPEN_PARENTHESIS controlArg CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE .
    (35) elseIf -> ELSEIF OPEN_PARENTHESIS controlArg CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE . soloIf
    (33) soloIf -> . IF OPEN_PARENTHESIS controlArg CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE

  ! shift/reduce conflict for IF resolved as shift
    ELSE            reduce using rule 34 (elseIf -> ELSEIF OPEN_PARENTHESIS controlArg CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE .)
    NAME            reduce using rule 34 (elseIf -> ELSEIF OPEN_PARENTHESIS controlArg CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE .)
    PRINT           reduce using rule 34 (elseIf -> ELSEIF OPEN_PARENTHESIS controlArg CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE .)
    RETURN          reduce using rule 34 (elseIf -> ELSEIF OPEN_PARENTHESIS controlArg CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE .)
    FUNCTION        reduce using rule 34 (elseIf -> ELSEIF OPEN_PARENTHESIS controlArg CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE .)
    CONST           reduce using rule 34 (elseIf -> ELSEIF OPEN_PARENTHESIS controlArg CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE .)
    LET             reduce using rule 34 (elseIf -> ELSEIF OPEN_PARENTHESIS controlArg CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE .)
    VAR             reduce using rule 34 (elseIf -> ELSEIF OPEN_PARENTHESIS controlArg CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE .)
    WHILE           reduce using rule 34 (elseIf -> ELSEIF OPEN_PARENTHESIS controlArg CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE .)
    FOR             reduce using rule 34 (elseIf -> ELSEIF OPEN_PARENTHESIS controlArg CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE .)
    $end            reduce using rule 34 (elseIf -> ELSEIF OPEN_PARENTHESIS controlArg CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE .)
    CLOSE_BRACE     reduce using rule 34 (elseIf -> ELSEIF OPEN_PARENTHESIS controlArg CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE .)
    IF              shift and go to state 32

  ! IF              [ reduce using rule 34 (elseIf -> ELSEIF OPEN_PARENTHESIS controlArg CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE .) ]

    soloIf                         shift and go to state 276

state 270

    (88) tupla -> OPEN_BRACKET datatype COMMA datatype CLOSE_BRACKET SEMICOLON .

    COMMA           reduce using rule 88 (tupla -> OPEN_BRACKET datatype COMMA datatype CLOSE_BRACKET SEMICOLON .)
    CLOSE_BRACE     reduce using rule 88 (tupla -> OPEN_BRACKET datatype COMMA datatype CLOSE_BRACKET SEMICOLON .)


state 271

    (73) array -> type NAME IGUAL NEW ARRAY OPEN_PARENTHESIS items CLOSE_PARENTHESIS SEMICOLON .

    NAME            reduce using rule 73 (array -> type NAME IGUAL NEW ARRAY OPEN_PARENTHESIS items CLOSE_PARENTHESIS SEMICOLON .)
    PRINT           reduce using rule 73 (array -> type NAME IGUAL NEW ARRAY OPEN_PARENTHESIS items CLOSE_PARENTHESIS SEMICOLON .)
    RETURN          reduce using rule 73 (array -> type NAME IGUAL NEW ARRAY OPEN_PARENTHESIS items CLOSE_PARENTHESIS SEMICOLON .)
    FUNCTION        reduce using rule 73 (array -> type NAME IGUAL NEW ARRAY OPEN_PARENTHESIS items CLOSE_PARENTHESIS SEMICOLON .)
    CONST           reduce using rule 73 (array -> type NAME IGUAL NEW ARRAY OPEN_PARENTHESIS items CLOSE_PARENTHESIS SEMICOLON .)
    LET             reduce using rule 73 (array -> type NAME IGUAL NEW ARRAY OPEN_PARENTHESIS items CLOSE_PARENTHESIS SEMICOLON .)
    VAR             reduce using rule 73 (array -> type NAME IGUAL NEW ARRAY OPEN_PARENTHESIS items CLOSE_PARENTHESIS SEMICOLON .)
    WHILE           reduce using rule 73 (array -> type NAME IGUAL NEW ARRAY OPEN_PARENTHESIS items CLOSE_PARENTHESIS SEMICOLON .)
    FOR             reduce using rule 73 (array -> type NAME IGUAL NEW ARRAY OPEN_PARENTHESIS items CLOSE_PARENTHESIS SEMICOLON .)
    IF              reduce using rule 73 (array -> type NAME IGUAL NEW ARRAY OPEN_PARENTHESIS items CLOSE_PARENTHESIS SEMICOLON .)
    $end            reduce using rule 73 (array -> type NAME IGUAL NEW ARRAY OPEN_PARENTHESIS items CLOSE_PARENTHESIS SEMICOLON .)
    CLOSE_BRACE     reduce using rule 73 (array -> type NAME IGUAL NEW ARRAY OPEN_PARENTHESIS items CLOSE_PARENTHESIS SEMICOLON .)
    COMMA           reduce using rule 73 (array -> type NAME IGUAL NEW ARRAY OPEN_PARENTHESIS items CLOSE_PARENTHESIS SEMICOLON .)


state 272

    (96) set -> type NAME IGUAL NEW SET OPEN_PARENTHESIS OPEN_BRACKET items CLOSE_BRACKET . CLOSE_PARENTHESIS SEMICOLON

    CLOSE_PARENTHESIS shift and go to state 277


state 273

    (97) set -> type NAME IGUAL NEW SET OPEN_PARENTHESIS element CLOSE_PARENTHESIS SEMICOLON .

    NAME            reduce using rule 97 (set -> type NAME IGUAL NEW SET OPEN_PARENTHESIS element CLOSE_PARENTHESIS SEMICOLON .)
    PRINT           reduce using rule 97 (set -> type NAME IGUAL NEW SET OPEN_PARENTHESIS element CLOSE_PARENTHESIS SEMICOLON .)
    RETURN          reduce using rule 97 (set -> type NAME IGUAL NEW SET OPEN_PARENTHESIS element CLOSE_PARENTHESIS SEMICOLON .)
    FUNCTION        reduce using rule 97 (set -> type NAME IGUAL NEW SET OPEN_PARENTHESIS element CLOSE_PARENTHESIS SEMICOLON .)
    CONST           reduce using rule 97 (set -> type NAME IGUAL NEW SET OPEN_PARENTHESIS element CLOSE_PARENTHESIS SEMICOLON .)
    LET             reduce using rule 97 (set -> type NAME IGUAL NEW SET OPEN_PARENTHESIS element CLOSE_PARENTHESIS SEMICOLON .)
    VAR             reduce using rule 97 (set -> type NAME IGUAL NEW SET OPEN_PARENTHESIS element CLOSE_PARENTHESIS SEMICOLON .)
    WHILE           reduce using rule 97 (set -> type NAME IGUAL NEW SET OPEN_PARENTHESIS element CLOSE_PARENTHESIS SEMICOLON .)
    FOR             reduce using rule 97 (set -> type NAME IGUAL NEW SET OPEN_PARENTHESIS element CLOSE_PARENTHESIS SEMICOLON .)
    IF              reduce using rule 97 (set -> type NAME IGUAL NEW SET OPEN_PARENTHESIS element CLOSE_PARENTHESIS SEMICOLON .)
    $end            reduce using rule 97 (set -> type NAME IGUAL NEW SET OPEN_PARENTHESIS element CLOSE_PARENTHESIS SEMICOLON .)
    CLOSE_BRACE     reduce using rule 97 (set -> type NAME IGUAL NEW SET OPEN_PARENTHESIS element CLOSE_PARENTHESIS SEMICOLON .)
    COMMA           reduce using rule 97 (set -> type NAME IGUAL NEW SET OPEN_PARENTHESIS element CLOSE_PARENTHESIS SEMICOLON .)


state 274

    (99) set -> NAME IGUAL NEW SET OPEN_PARENTHESIS OPEN_BRACKET items CLOSE_BRACKET CLOSE_PARENTHESIS . SEMICOLON

    SEMICOLON       shift and go to state 278


state 275

    (38) for -> FOR OPEN_PARENTHESIS inicialization SEMICOLON expBoolean SEMICOLON operations CLOSE_PARENTHESIS OPEN_BRACE . expression CLOSE_BRACE
    (1) expression -> . variable
    (2) expression -> . variable expression
    (3) expression -> . dataStruct
    (4) expression -> . dataStruct expression
    (5) expression -> . controlStruct
    (6) expression -> . controlStruct expression
    (7) expression -> . methodsSet
    (8) expression -> . mapFunctions
    (9) expression -> . arrayFn
    (10) expression -> . declaration
    (11) expression -> . print
    (12) expression -> . return
    (13) expression -> . function
    (18) variable -> . type NAME IGUAL datatype SEMICOLON
    (19) variable -> . type NAME IGUAL operations SEMICOLON
    (20) variable -> . NAME IGUAL datatype SEMICOLON
    (24) dataStruct -> . array
    (25) dataStruct -> . set
    (26) dataStruct -> . map
    (21) controlStruct -> . while
    (22) controlStruct -> . for
    (23) controlStruct -> . if
    (101) methodsSet -> . NAME POINT ADD OPEN_PARENTHESIS element CLOSE_PARENTHESIS SEMICOLON
    (102) methodsSet -> . NAME POINT DELETE OPEN_PARENTHESIS element CLOSE_PARENTHESIS SEMICOLON
    (103) methodsSet -> . NAME POINT CLEAR OPEN_PARENTHESIS CLOSE_PARENTHESIS SEMICOLON
    (89) mapFunctions -> . NAME POINT CLEAR OPEN_PARENTHESIS CLOSE_PARENTHESIS SEMICOLON
    (90) mapFunctions -> . NAME POINT GET OPEN_PARENTHESIS clave CLOSE_PARENTHESIS SEMICOLON
    (91) mapFunctions -> . NAME POINT HAS OPEN_PARENTHESIS clave CLOSE_PARENTHESIS SEMICOLON
    (92) arrayFn -> . NAME POINT POP OPEN_PARENTHESIS CLOSE_PARENTHESIS SEMICOLON
    (93) arrayFn -> . NAME POINT PUSH OPEN_PARENTHESIS element CLOSE_PARENTHESIS SEMICOLON
    (94) arrayFn -> . NAME POINT UNSHIFT OPEN_PARENTHESIS element CLOSE_PARENTHESIS SEMICOLON
    (111) declaration -> . NAME IGUAL element SEMICOLON
    (123) print -> . PRINT OPEN_PARENTHESIS CLOSE_PARENTHESIS SEMICOLON
    (122) return -> . RETURN element SEMICOLON
    (118) function -> . FUNCTION NAME OPEN_PARENTHESIS CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE
    (119) function -> . FUNCTION NAME OPEN_PARENTHESIS parameter CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE
    (61) type -> . CONST
    (62) type -> . LET
    (63) type -> . VAR
    (72) array -> . type NAME IGUAL OPEN_BRACKET items CLOSE_BRACKET SEMICOLON
    (73) array -> . type NAME IGUAL NEW ARRAY OPEN_PARENTHESIS items CLOSE_PARENTHESIS SEMICOLON
    (95) set -> . type NAME IGUAL NEW SET OPEN_PARENTHESIS CLOSE_PARENTHESIS SEMICOLON
    (96) set -> . type NAME IGUAL NEW SET OPEN_PARENTHESIS OPEN_BRACKET items CLOSE_BRACKET CLOSE_PARENTHESIS SEMICOLON
    (97) set -> . type NAME IGUAL NEW SET OPEN_PARENTHESIS element CLOSE_PARENTHESIS SEMICOLON
    (98) set -> . NAME IGUAL NEW SET OPEN_PARENTHESIS CLOSE_PARENTHESIS SEMICOLON
    (99) set -> . NAME IGUAL NEW SET OPEN_PARENTHESIS OPEN_BRACKET items CLOSE_BRACKET CLOSE_PARENTHESIS SEMICOLON
    (100) set -> . NAME IGUAL NEW SET OPEN_PARENTHESIS element CLOSE_PARENTHESIS SEMICOLON
    (74) map -> . iniciarMap
    (75) map -> . escribirMap
    (76) map -> . generarMap
    (27) while -> . WHILE OPEN_PARENTHESIS controlArg CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE
    (28) while -> . WHILE OPEN_PARENTHESIS bool CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE
    (38) for -> . FOR OPEN_PARENTHESIS inicialization SEMICOLON expBoolean SEMICOLON operations CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE
    (29) if -> . soloIf
    (30) if -> . soloIf elseIf
    (31) if -> . soloIf elseIf else
    (32) if -> . soloIf else
    (77) iniciarMap -> . variable IGUAL NEW MAP OPEN_PARENTHESIS CLOSE_PARENTHESIS SEMICOLON
    (78) escribirMap -> . variable IGUAL OPEN_BRACE claveValor CLOSE_BRACE
    (84) generarMap -> . variable IGUAL OPEN_BRACE tuplas CLOSE_BRACE
    (33) soloIf -> . IF OPEN_PARENTHESIS controlArg CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE

    NAME            shift and go to state 13
    PRINT           shift and go to state 20
    RETURN          shift and go to state 21
    FUNCTION        shift and go to state 22
    CONST           shift and go to state 23
    LET             shift and go to state 24
    VAR             shift and go to state 25
    WHILE           shift and go to state 29
    FOR             shift and go to state 30
    IF              shift and go to state 32

    expression                     shift and go to state 279
    variable                       shift and go to state 2
    dataStruct                     shift and go to state 3
    controlStruct                  shift and go to state 4
    methodsSet                     shift and go to state 5
    mapFunctions                   shift and go to state 6
    arrayFn                        shift and go to state 7
    declaration                    shift and go to state 8
    print                          shift and go to state 9
    return                         shift and go to state 10
    function                       shift and go to state 11
    type                           shift and go to state 12
    array                          shift and go to state 14
    set                            shift and go to state 15
    map                            shift and go to state 16
    while                          shift and go to state 17
    for                            shift and go to state 18
    if                             shift and go to state 19
    iniciarMap                     shift and go to state 26
    escribirMap                    shift and go to state 27
    generarMap                     shift and go to state 28
    soloIf                         shift and go to state 31

state 276

    (35) elseIf -> ELSEIF OPEN_PARENTHESIS controlArg CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE soloIf .

    ELSE            reduce using rule 35 (elseIf -> ELSEIF OPEN_PARENTHESIS controlArg CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE soloIf .)
    NAME            reduce using rule 35 (elseIf -> ELSEIF OPEN_PARENTHESIS controlArg CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE soloIf .)
    PRINT           reduce using rule 35 (elseIf -> ELSEIF OPEN_PARENTHESIS controlArg CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE soloIf .)
    RETURN          reduce using rule 35 (elseIf -> ELSEIF OPEN_PARENTHESIS controlArg CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE soloIf .)
    FUNCTION        reduce using rule 35 (elseIf -> ELSEIF OPEN_PARENTHESIS controlArg CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE soloIf .)
    CONST           reduce using rule 35 (elseIf -> ELSEIF OPEN_PARENTHESIS controlArg CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE soloIf .)
    LET             reduce using rule 35 (elseIf -> ELSEIF OPEN_PARENTHESIS controlArg CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE soloIf .)
    VAR             reduce using rule 35 (elseIf -> ELSEIF OPEN_PARENTHESIS controlArg CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE soloIf .)
    WHILE           reduce using rule 35 (elseIf -> ELSEIF OPEN_PARENTHESIS controlArg CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE soloIf .)
    FOR             reduce using rule 35 (elseIf -> ELSEIF OPEN_PARENTHESIS controlArg CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE soloIf .)
    IF              reduce using rule 35 (elseIf -> ELSEIF OPEN_PARENTHESIS controlArg CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE soloIf .)
    $end            reduce using rule 35 (elseIf -> ELSEIF OPEN_PARENTHESIS controlArg CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE soloIf .)
    CLOSE_BRACE     reduce using rule 35 (elseIf -> ELSEIF OPEN_PARENTHESIS controlArg CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE soloIf .)


state 277

    (96) set -> type NAME IGUAL NEW SET OPEN_PARENTHESIS OPEN_BRACKET items CLOSE_BRACKET CLOSE_PARENTHESIS . SEMICOLON

    SEMICOLON       shift and go to state 280


state 278

    (99) set -> NAME IGUAL NEW SET OPEN_PARENTHESIS OPEN_BRACKET items CLOSE_BRACKET CLOSE_PARENTHESIS SEMICOLON .

    NAME            reduce using rule 99 (set -> NAME IGUAL NEW SET OPEN_PARENTHESIS OPEN_BRACKET items CLOSE_BRACKET CLOSE_PARENTHESIS SEMICOLON .)
    PRINT           reduce using rule 99 (set -> NAME IGUAL NEW SET OPEN_PARENTHESIS OPEN_BRACKET items CLOSE_BRACKET CLOSE_PARENTHESIS SEMICOLON .)
    RETURN          reduce using rule 99 (set -> NAME IGUAL NEW SET OPEN_PARENTHESIS OPEN_BRACKET items CLOSE_BRACKET CLOSE_PARENTHESIS SEMICOLON .)
    FUNCTION        reduce using rule 99 (set -> NAME IGUAL NEW SET OPEN_PARENTHESIS OPEN_BRACKET items CLOSE_BRACKET CLOSE_PARENTHESIS SEMICOLON .)
    CONST           reduce using rule 99 (set -> NAME IGUAL NEW SET OPEN_PARENTHESIS OPEN_BRACKET items CLOSE_BRACKET CLOSE_PARENTHESIS SEMICOLON .)
    LET             reduce using rule 99 (set -> NAME IGUAL NEW SET OPEN_PARENTHESIS OPEN_BRACKET items CLOSE_BRACKET CLOSE_PARENTHESIS SEMICOLON .)
    VAR             reduce using rule 99 (set -> NAME IGUAL NEW SET OPEN_PARENTHESIS OPEN_BRACKET items CLOSE_BRACKET CLOSE_PARENTHESIS SEMICOLON .)
    WHILE           reduce using rule 99 (set -> NAME IGUAL NEW SET OPEN_PARENTHESIS OPEN_BRACKET items CLOSE_BRACKET CLOSE_PARENTHESIS SEMICOLON .)
    FOR             reduce using rule 99 (set -> NAME IGUAL NEW SET OPEN_PARENTHESIS OPEN_BRACKET items CLOSE_BRACKET CLOSE_PARENTHESIS SEMICOLON .)
    IF              reduce using rule 99 (set -> NAME IGUAL NEW SET OPEN_PARENTHESIS OPEN_BRACKET items CLOSE_BRACKET CLOSE_PARENTHESIS SEMICOLON .)
    $end            reduce using rule 99 (set -> NAME IGUAL NEW SET OPEN_PARENTHESIS OPEN_BRACKET items CLOSE_BRACKET CLOSE_PARENTHESIS SEMICOLON .)
    CLOSE_BRACE     reduce using rule 99 (set -> NAME IGUAL NEW SET OPEN_PARENTHESIS OPEN_BRACKET items CLOSE_BRACKET CLOSE_PARENTHESIS SEMICOLON .)
    COMMA           reduce using rule 99 (set -> NAME IGUAL NEW SET OPEN_PARENTHESIS OPEN_BRACKET items CLOSE_BRACKET CLOSE_PARENTHESIS SEMICOLON .)


state 279

    (38) for -> FOR OPEN_PARENTHESIS inicialization SEMICOLON expBoolean SEMICOLON operations CLOSE_PARENTHESIS OPEN_BRACE expression . CLOSE_BRACE

    CLOSE_BRACE     shift and go to state 281


state 280

    (96) set -> type NAME IGUAL NEW SET OPEN_PARENTHESIS OPEN_BRACKET items CLOSE_BRACKET CLOSE_PARENTHESIS SEMICOLON .

    NAME            reduce using rule 96 (set -> type NAME IGUAL NEW SET OPEN_PARENTHESIS OPEN_BRACKET items CLOSE_BRACKET CLOSE_PARENTHESIS SEMICOLON .)
    PRINT           reduce using rule 96 (set -> type NAME IGUAL NEW SET OPEN_PARENTHESIS OPEN_BRACKET items CLOSE_BRACKET CLOSE_PARENTHESIS SEMICOLON .)
    RETURN          reduce using rule 96 (set -> type NAME IGUAL NEW SET OPEN_PARENTHESIS OPEN_BRACKET items CLOSE_BRACKET CLOSE_PARENTHESIS SEMICOLON .)
    FUNCTION        reduce using rule 96 (set -> type NAME IGUAL NEW SET OPEN_PARENTHESIS OPEN_BRACKET items CLOSE_BRACKET CLOSE_PARENTHESIS SEMICOLON .)
    CONST           reduce using rule 96 (set -> type NAME IGUAL NEW SET OPEN_PARENTHESIS OPEN_BRACKET items CLOSE_BRACKET CLOSE_PARENTHESIS SEMICOLON .)
    LET             reduce using rule 96 (set -> type NAME IGUAL NEW SET OPEN_PARENTHESIS OPEN_BRACKET items CLOSE_BRACKET CLOSE_PARENTHESIS SEMICOLON .)
    VAR             reduce using rule 96 (set -> type NAME IGUAL NEW SET OPEN_PARENTHESIS OPEN_BRACKET items CLOSE_BRACKET CLOSE_PARENTHESIS SEMICOLON .)
    WHILE           reduce using rule 96 (set -> type NAME IGUAL NEW SET OPEN_PARENTHESIS OPEN_BRACKET items CLOSE_BRACKET CLOSE_PARENTHESIS SEMICOLON .)
    FOR             reduce using rule 96 (set -> type NAME IGUAL NEW SET OPEN_PARENTHESIS OPEN_BRACKET items CLOSE_BRACKET CLOSE_PARENTHESIS SEMICOLON .)
    IF              reduce using rule 96 (set -> type NAME IGUAL NEW SET OPEN_PARENTHESIS OPEN_BRACKET items CLOSE_BRACKET CLOSE_PARENTHESIS SEMICOLON .)
    $end            reduce using rule 96 (set -> type NAME IGUAL NEW SET OPEN_PARENTHESIS OPEN_BRACKET items CLOSE_BRACKET CLOSE_PARENTHESIS SEMICOLON .)
    CLOSE_BRACE     reduce using rule 96 (set -> type NAME IGUAL NEW SET OPEN_PARENTHESIS OPEN_BRACKET items CLOSE_BRACKET CLOSE_PARENTHESIS SEMICOLON .)
    COMMA           reduce using rule 96 (set -> type NAME IGUAL NEW SET OPEN_PARENTHESIS OPEN_BRACKET items CLOSE_BRACKET CLOSE_PARENTHESIS SEMICOLON .)


state 281

    (38) for -> FOR OPEN_PARENTHESIS inicialization SEMICOLON expBoolean SEMICOLON operations CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE .

    NAME            reduce using rule 38 (for -> FOR OPEN_PARENTHESIS inicialization SEMICOLON expBoolean SEMICOLON operations CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE .)
    PRINT           reduce using rule 38 (for -> FOR OPEN_PARENTHESIS inicialization SEMICOLON expBoolean SEMICOLON operations CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE .)
    RETURN          reduce using rule 38 (for -> FOR OPEN_PARENTHESIS inicialization SEMICOLON expBoolean SEMICOLON operations CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE .)
    FUNCTION        reduce using rule 38 (for -> FOR OPEN_PARENTHESIS inicialization SEMICOLON expBoolean SEMICOLON operations CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE .)
    CONST           reduce using rule 38 (for -> FOR OPEN_PARENTHESIS inicialization SEMICOLON expBoolean SEMICOLON operations CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE .)
    LET             reduce using rule 38 (for -> FOR OPEN_PARENTHESIS inicialization SEMICOLON expBoolean SEMICOLON operations CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE .)
    VAR             reduce using rule 38 (for -> FOR OPEN_PARENTHESIS inicialization SEMICOLON expBoolean SEMICOLON operations CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE .)
    WHILE           reduce using rule 38 (for -> FOR OPEN_PARENTHESIS inicialization SEMICOLON expBoolean SEMICOLON operations CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE .)
    FOR             reduce using rule 38 (for -> FOR OPEN_PARENTHESIS inicialization SEMICOLON expBoolean SEMICOLON operations CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE .)
    IF              reduce using rule 38 (for -> FOR OPEN_PARENTHESIS inicialization SEMICOLON expBoolean SEMICOLON operations CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE .)
    $end            reduce using rule 38 (for -> FOR OPEN_PARENTHESIS inicialization SEMICOLON expBoolean SEMICOLON operations CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE .)
    CLOSE_BRACE     reduce using rule 38 (for -> FOR OPEN_PARENTHESIS inicialization SEMICOLON expBoolean SEMICOLON operations CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for SEMICOLON in state 103 resolved as shift
WARNING: shift/reduce conflict for AND in state 224 resolved as shift
WARNING: shift/reduce conflict for OR in state 224 resolved as shift
WARNING: shift/reduce conflict for AND in state 255 resolved as shift
WARNING: shift/reduce conflict for OR in state 255 resolved as shift
WARNING: shift/reduce conflict for IF in state 269 resolved as shift
WARNING: reduce/reduce conflict in state 59 resolved using rule (operations -> NAME)
WARNING: rejected rule (element -> NAME) in state 59
WARNING: reduce/reduce conflict in state 63 resolved using rule (datatype -> number)
WARNING: rejected rule (element -> number) in state 63
WARNING: reduce/reduce conflict in state 63 resolved using rule (operations -> number)
WARNING: rejected rule (datatype -> number) in state 63
WARNING: reduce/reduce conflict in state 64 resolved using rule (datatype -> STRING)
WARNING: rejected rule (element -> STRING) in state 64
WARNING: reduce/reduce conflict in state 99 resolved using rule (operations -> number)
WARNING: rejected rule (datatype -> number) in state 99
WARNING: reduce/reduce conflict in state 210 resolved using rule (mapFunctions -> NAME POINT CLEAR OPEN_PARENTHESIS CLOSE_PARENTHESIS SEMICOLON)
WARNING: rejected rule (methodsSet -> NAME POINT CLEAR OPEN_PARENTHESIS CLOSE_PARENTHESIS SEMICOLON) in state 210
WARNING: Rule (datatype -> number) is never reduced
WARNING: Rule (methodsSet -> NAME POINT CLEAR OPEN_PARENTHESIS CLOSE_PARENTHESIS SEMICOLON) is never reduced

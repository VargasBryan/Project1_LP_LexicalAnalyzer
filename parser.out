Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    AND
    BACKSLASH
    BOOLEAN
    BREAK
    CASE
    CLASS
    COMMENTS
    DEFAULT
    DIVIGUAL
    DOUBLE_QUOTES
    FLOAT
    FUNCTION
    INT
    LENGTH
    LINE_BREAK
    LONGCOMMENT
    MASIGUAL
    MENOSIGUAL
    MODIGUAL
    NOT
    NULL
    OR
    PORIGUAL
    POTIGUAL
    RETURN
    SINGLE_QUOTE
    STATIC
    SWITCH
    THEN
    TOSTRING
    TYPEOF
    UNDEFINED

Grammar

Rule 0     S' -> expression
Rule 1     expression -> variable
Rule 2     expression -> variable expression
Rule 3     expression -> dataStruct
Rule 4     expression -> dataStruct expression
Rule 5     expression -> controlStruct
Rule 6     expression -> controlStruct expression
Rule 7     expression -> methodsSet
Rule 8     expression -> mapFunctions
Rule 9     expression -> arrayFn
Rule 10    expression -> declaration
Rule 11    variable -> type NAME IGUAL datatype SEMICOLON
Rule 12    variable -> type NAME IGUAL operations SEMICOLON
Rule 13    variable -> NAME IGUAL datatype SEMICOLON
Rule 14    controlStruct -> while
Rule 15    controlStruct -> for
Rule 16    controlStruct -> if
Rule 17    dataStruct -> array
Rule 18    dataStruct -> set
Rule 19    dataStruct -> map
Rule 20    while -> WHILE OPEN_PARENTHESIS controlArg CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE
Rule 21    while -> WHILE OPEN_PARENTHESIS bool CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE
Rule 22    if -> soloIf
Rule 23    if -> soloIf elseIf
Rule 24    if -> soloIf elseIf else
Rule 25    if -> soloIf else
Rule 26    soloIf -> IF OPEN_PARENTHESIS controlArg CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE
Rule 27    elseIf -> ELSEIF OPEN_PARENTHESIS controlArg CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE
Rule 28    elseIf -> ELSEIF OPEN_PARENTHESIS controlArg CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE soloIf
Rule 29    else -> ELSE OPEN_BRACE expression CLOSE_BRACE
Rule 30    controlArg -> element clause element
Rule 31    for -> FOR OPEN_PARENTHESIS inicialization SEMICOLON controlArg SEMICOLON operations CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE
Rule 32    inicialization -> type NAME IGUAL NUMBER
Rule 33    inicialization -> NAME IGUAL NUMBER
Rule 34    operations -> NUMBER operand NUMBER
Rule 35    operations -> NAME SUMA SUMA
Rule 36    operations -> NAME RESTA RESTA
Rule 37    datatype -> NUMBER
Rule 38    datatype -> STRING
Rule 39    datatype -> CHAR
Rule 40    operand -> SUMA
Rule 41    operand -> RESTA
Rule 42    operand -> MULTIPLICACION
Rule 43    operand -> DIVISION
Rule 44    bool -> TRUE
Rule 45    bool -> FALSE
Rule 46    type -> CONST
Rule 47    type -> LET
Rule 48    type -> VAR
Rule 49    clause -> IGUALIGUAL
Rule 50    clause -> DIFERENTE
Rule 51    clause -> MAYORQUE
Rule 52    clause -> MAYORIGUALQUE
Rule 53    clause -> MENORQUE
Rule 54    clause -> MENORIGUALQUE
Rule 55    value -> NAME
Rule 56    value -> NUMBER
Rule 57    array -> type NAME IGUAL OPEN_BRACKET items CLOSE_BRACKET SEMICOLON
Rule 58    array -> type NAME IGUAL NEW ARRAY OPEN_PARENTHESIS items CLOSE_PARENTHESIS SEMICOLON
Rule 59    map -> iniciarMap
Rule 60    map -> escribirMap
Rule 61    map -> generarMap
Rule 62    iniciarMap -> variable IGUAL NEW MAP OPEN_PARENTHESIS CLOSE_PARENTHESIS SEMICOLON
Rule 63    escribirMap -> variable IGUAL OPEN_BRACE claveValor CLOSE_BRACE
Rule 64    claveValor -> clave COLON valor
Rule 65    claveValor -> clave COLON valor COMMA claveValor
Rule 66    clave -> datatype
Rule 67    valor -> datatype
Rule 68    valor -> dataStruct
Rule 69    generarMap -> variable IGUAL OPEN_BRACE tuplas CLOSE_BRACE
Rule 70    tuplas -> tupla
Rule 71    tuplas -> tupla COMMA tuplas
Rule 72    tupla -> OPEN_BRACKET datatype CLOSE_BRACKET
Rule 73    tupla -> OPEN_BRACKET datatype COMMA datatype CLOSE_BRACKET
Rule 74    mapFunctions -> NAME POINT CLEAR OPEN_PARENTHESIS CLOSE_PARENTHESIS SEMICOLON
Rule 75    mapFunctions -> NAME POINT GET OPEN_PARENTHESIS clave CLOSE_PARENTHESIS SEMICOLON
Rule 76    mapFunctions -> NAME POINT HAS OPEN_PARENTHESIS clave CLOSE_PARENTHESIS SEMICOLON
Rule 77    arrayFn -> NAME POINT POP OPEN_PARENTHESIS CLOSE_PARENTHESIS
Rule 78    arrayFn -> NAME POINT PUSH OPEN_PARENTHESIS element CLOSE_PARENTHESIS
Rule 79    arrayFn -> NAME POINT UNSHIFT OPEN_PARENTHESIS element CLOSE_PARENTHESIS
Rule 80    set -> type NAME IGUAL NEW SET OPEN_PARENTHESIS CLOSE_PARENTHESIS SEMICOLON
Rule 81    set -> type NAME IGUAL NEW SET OPEN_PARENTHESIS OPEN_BRACKET items CLOSE_BRACKET CLOSE_PARENTHESIS SEMICOLON
Rule 82    set -> type NAME IGUAL NEW SET OPEN_PARENTHESIS element CLOSE_PARENTHESIS SEMICOLON
Rule 83    set -> NAME IGUAL NEW SET OPEN_PARENTHESIS CLOSE_PARENTHESIS SEMICOLON
Rule 84    set -> NAME IGUAL NEW SET OPEN_PARENTHESIS OPEN_BRACKET items CLOSE_BRACKET CLOSE_PARENTHESIS SEMICOLON
Rule 85    set -> NAME IGUAL NEW SET OPEN_PARENTHESIS element CLOSE_PARENTHESIS SEMICOLON
Rule 86    methodsSet -> NAME POINT ADD OPEN_PARENTHESIS element CLOSE_PARENTHESIS SEMICOLON
Rule 87    methodsSet -> NAME POINT DELETE OPEN_PARENTHESIS element CLOSE_PARENTHESIS SEMICOLON
Rule 88    methodsSet -> NAME POINT CLEAR OPEN_PARENTHESIS CLOSE_PARENTHESIS SEMICOLON
Rule 89    items -> numeros
Rule 90    items -> cadena
Rule 91    numeros -> NUMBER
Rule 92    numeros -> NUMBER COMMA numeros
Rule 93    cadena -> STRING
Rule 94    cadena -> STRING COMMA cadena
Rule 95    element -> STRING
Rule 96    element -> NUMBER
Rule 97    element -> NAME
Rule 98    declaration -> NAME IGUAL element

Terminals, with rules where they appear

ADD                  : 86
AND                  : 
ARRAY                : 58
BACKSLASH            : 
BOOLEAN              : 
BREAK                : 
CASE                 : 
CHAR                 : 39
CLASS                : 
CLEAR                : 74 88
CLOSE_BRACE          : 20 21 26 27 28 29 31 63 69
CLOSE_BRACKET        : 57 72 73 81 84
CLOSE_PARENTHESIS    : 20 21 26 27 28 31 58 62 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88
COLON                : 64 65
COMMA                : 65 71 73 92 94
COMMENTS             : 
CONST                : 46
DEFAULT              : 
DELETE               : 87
DIFERENTE            : 50
DIVIGUAL             : 
DIVISION             : 43
DOUBLE_QUOTES        : 
ELSE                 : 29
ELSEIF               : 27 28
FALSE                : 45
FLOAT                : 
FOR                  : 31
FUNCTION             : 
GET                  : 75
HAS                  : 76
IF                   : 26
IGUAL                : 11 12 13 32 33 57 58 62 63 69 80 81 82 83 84 85 98
IGUALIGUAL           : 49
INT                  : 
LENGTH               : 
LET                  : 47
LINE_BREAK           : 
LONGCOMMENT          : 
MAP                  : 62
MASIGUAL             : 
MAYORIGUALQUE        : 52
MAYORQUE             : 51
MENORIGUALQUE        : 54
MENORQUE             : 53
MENOSIGUAL           : 
MODIGUAL             : 
MULTIPLICACION       : 42
NAME                 : 11 12 13 32 33 35 36 55 57 58 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 97 98
NEW                  : 58 62 80 81 82 83 84 85
NOT                  : 
NULL                 : 
NUMBER               : 32 33 34 34 37 56 91 92 96
OPEN_BRACE           : 20 21 26 27 28 29 31 63 69
OPEN_BRACKET         : 57 72 73 81 84
OPEN_PARENTHESIS     : 20 21 26 27 28 31 58 62 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88
OR                   : 
POINT                : 74 75 76 77 78 79 86 87 88
POP                  : 77
PORIGUAL             : 
POTIGUAL             : 
PUSH                 : 78
RESTA                : 36 36 41
RETURN               : 
SEMICOLON            : 11 12 13 31 31 57 58 62 74 75 76 80 81 82 83 84 85 86 87 88
SET                  : 80 81 82 83 84 85
SINGLE_QUOTE         : 
STATIC               : 
STRING               : 38 93 94 95
SUMA                 : 35 35 40
SWITCH               : 
THEN                 : 
TOSTRING             : 
TRUE                 : 44
TYPEOF               : 
UNDEFINED            : 
UNSHIFT              : 79
VAR                  : 48
WHILE                : 20 21
error                : 

Nonterminals, with rules where they appear

array                : 17
arrayFn              : 9
bool                 : 21
cadena               : 90 94
clause               : 30
clave                : 64 65 75 76
claveValor           : 63 65
controlArg           : 20 26 27 28 31
controlStruct        : 5 6
dataStruct           : 3 4 68
datatype             : 11 13 66 67 72 73 73
declaration          : 10
element              : 30 30 78 79 82 85 86 87 98
else                 : 24 25
elseIf               : 23 24
escribirMap          : 60
expression           : 2 4 6 20 21 26 27 28 29 31 0
for                  : 15
generarMap           : 61
if                   : 16
inicialization       : 31
iniciarMap           : 59
items                : 57 58 81 84
map                  : 19
mapFunctions         : 8
methodsSet           : 7
numeros              : 89 92
operand              : 34
operations           : 12 31
set                  : 18
soloIf               : 22 23 24 25 28
tupla                : 70 71
tuplas               : 69 71
type                 : 11 12 32 57 58 80 81 82
valor                : 64 65
value                : 
variable             : 1 2 62 63 69
while                : 14

Parsing method: LALR

state 0

    (0) S' -> . expression
    (1) expression -> . variable
    (2) expression -> . variable expression
    (3) expression -> . dataStruct
    (4) expression -> . dataStruct expression
    (5) expression -> . controlStruct
    (6) expression -> . controlStruct expression
    (7) expression -> . methodsSet
    (8) expression -> . mapFunctions
    (9) expression -> . arrayFn
    (10) expression -> . declaration
    (11) variable -> . type NAME IGUAL datatype SEMICOLON
    (12) variable -> . type NAME IGUAL operations SEMICOLON
    (13) variable -> . NAME IGUAL datatype SEMICOLON
    (17) dataStruct -> . array
    (18) dataStruct -> . set
    (19) dataStruct -> . map
    (14) controlStruct -> . while
    (15) controlStruct -> . for
    (16) controlStruct -> . if
    (86) methodsSet -> . NAME POINT ADD OPEN_PARENTHESIS element CLOSE_PARENTHESIS SEMICOLON
    (87) methodsSet -> . NAME POINT DELETE OPEN_PARENTHESIS element CLOSE_PARENTHESIS SEMICOLON
    (88) methodsSet -> . NAME POINT CLEAR OPEN_PARENTHESIS CLOSE_PARENTHESIS SEMICOLON
    (74) mapFunctions -> . NAME POINT CLEAR OPEN_PARENTHESIS CLOSE_PARENTHESIS SEMICOLON
    (75) mapFunctions -> . NAME POINT GET OPEN_PARENTHESIS clave CLOSE_PARENTHESIS SEMICOLON
    (76) mapFunctions -> . NAME POINT HAS OPEN_PARENTHESIS clave CLOSE_PARENTHESIS SEMICOLON
    (77) arrayFn -> . NAME POINT POP OPEN_PARENTHESIS CLOSE_PARENTHESIS
    (78) arrayFn -> . NAME POINT PUSH OPEN_PARENTHESIS element CLOSE_PARENTHESIS
    (79) arrayFn -> . NAME POINT UNSHIFT OPEN_PARENTHESIS element CLOSE_PARENTHESIS
    (98) declaration -> . NAME IGUAL element
    (46) type -> . CONST
    (47) type -> . LET
    (48) type -> . VAR
    (57) array -> . type NAME IGUAL OPEN_BRACKET items CLOSE_BRACKET SEMICOLON
    (58) array -> . type NAME IGUAL NEW ARRAY OPEN_PARENTHESIS items CLOSE_PARENTHESIS SEMICOLON
    (80) set -> . type NAME IGUAL NEW SET OPEN_PARENTHESIS CLOSE_PARENTHESIS SEMICOLON
    (81) set -> . type NAME IGUAL NEW SET OPEN_PARENTHESIS OPEN_BRACKET items CLOSE_BRACKET CLOSE_PARENTHESIS SEMICOLON
    (82) set -> . type NAME IGUAL NEW SET OPEN_PARENTHESIS element CLOSE_PARENTHESIS SEMICOLON
    (83) set -> . NAME IGUAL NEW SET OPEN_PARENTHESIS CLOSE_PARENTHESIS SEMICOLON
    (84) set -> . NAME IGUAL NEW SET OPEN_PARENTHESIS OPEN_BRACKET items CLOSE_BRACKET CLOSE_PARENTHESIS SEMICOLON
    (85) set -> . NAME IGUAL NEW SET OPEN_PARENTHESIS element CLOSE_PARENTHESIS SEMICOLON
    (59) map -> . iniciarMap
    (60) map -> . escribirMap
    (61) map -> . generarMap
    (20) while -> . WHILE OPEN_PARENTHESIS controlArg CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE
    (21) while -> . WHILE OPEN_PARENTHESIS bool CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE
    (31) for -> . FOR OPEN_PARENTHESIS inicialization SEMICOLON controlArg SEMICOLON operations CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE
    (22) if -> . soloIf
    (23) if -> . soloIf elseIf
    (24) if -> . soloIf elseIf else
    (25) if -> . soloIf else
    (62) iniciarMap -> . variable IGUAL NEW MAP OPEN_PARENTHESIS CLOSE_PARENTHESIS SEMICOLON
    (63) escribirMap -> . variable IGUAL OPEN_BRACE claveValor CLOSE_BRACE
    (69) generarMap -> . variable IGUAL OPEN_BRACE tuplas CLOSE_BRACE
    (26) soloIf -> . IF OPEN_PARENTHESIS controlArg CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE

    NAME            shift and go to state 10
    CONST           shift and go to state 17
    LET             shift and go to state 18
    VAR             shift and go to state 19
    WHILE           shift and go to state 23
    FOR             shift and go to state 24
    IF              shift and go to state 26

    expression                     shift and go to state 1
    variable                       shift and go to state 2
    dataStruct                     shift and go to state 3
    controlStruct                  shift and go to state 4
    methodsSet                     shift and go to state 5
    mapFunctions                   shift and go to state 6
    arrayFn                        shift and go to state 7
    declaration                    shift and go to state 8
    type                           shift and go to state 9
    array                          shift and go to state 11
    set                            shift and go to state 12
    map                            shift and go to state 13
    while                          shift and go to state 14
    for                            shift and go to state 15
    if                             shift and go to state 16
    iniciarMap                     shift and go to state 20
    escribirMap                    shift and go to state 21
    generarMap                     shift and go to state 22
    soloIf                         shift and go to state 25

state 1

    (0) S' -> expression .



state 2

    (1) expression -> variable .
    (2) expression -> variable . expression
    (62) iniciarMap -> variable . IGUAL NEW MAP OPEN_PARENTHESIS CLOSE_PARENTHESIS SEMICOLON
    (63) escribirMap -> variable . IGUAL OPEN_BRACE claveValor CLOSE_BRACE
    (69) generarMap -> variable . IGUAL OPEN_BRACE tuplas CLOSE_BRACE
    (1) expression -> . variable
    (2) expression -> . variable expression
    (3) expression -> . dataStruct
    (4) expression -> . dataStruct expression
    (5) expression -> . controlStruct
    (6) expression -> . controlStruct expression
    (7) expression -> . methodsSet
    (8) expression -> . mapFunctions
    (9) expression -> . arrayFn
    (10) expression -> . declaration
    (11) variable -> . type NAME IGUAL datatype SEMICOLON
    (12) variable -> . type NAME IGUAL operations SEMICOLON
    (13) variable -> . NAME IGUAL datatype SEMICOLON
    (17) dataStruct -> . array
    (18) dataStruct -> . set
    (19) dataStruct -> . map
    (14) controlStruct -> . while
    (15) controlStruct -> . for
    (16) controlStruct -> . if
    (86) methodsSet -> . NAME POINT ADD OPEN_PARENTHESIS element CLOSE_PARENTHESIS SEMICOLON
    (87) methodsSet -> . NAME POINT DELETE OPEN_PARENTHESIS element CLOSE_PARENTHESIS SEMICOLON
    (88) methodsSet -> . NAME POINT CLEAR OPEN_PARENTHESIS CLOSE_PARENTHESIS SEMICOLON
    (74) mapFunctions -> . NAME POINT CLEAR OPEN_PARENTHESIS CLOSE_PARENTHESIS SEMICOLON
    (75) mapFunctions -> . NAME POINT GET OPEN_PARENTHESIS clave CLOSE_PARENTHESIS SEMICOLON
    (76) mapFunctions -> . NAME POINT HAS OPEN_PARENTHESIS clave CLOSE_PARENTHESIS SEMICOLON
    (77) arrayFn -> . NAME POINT POP OPEN_PARENTHESIS CLOSE_PARENTHESIS
    (78) arrayFn -> . NAME POINT PUSH OPEN_PARENTHESIS element CLOSE_PARENTHESIS
    (79) arrayFn -> . NAME POINT UNSHIFT OPEN_PARENTHESIS element CLOSE_PARENTHESIS
    (98) declaration -> . NAME IGUAL element
    (46) type -> . CONST
    (47) type -> . LET
    (48) type -> . VAR
    (57) array -> . type NAME IGUAL OPEN_BRACKET items CLOSE_BRACKET SEMICOLON
    (58) array -> . type NAME IGUAL NEW ARRAY OPEN_PARENTHESIS items CLOSE_PARENTHESIS SEMICOLON
    (80) set -> . type NAME IGUAL NEW SET OPEN_PARENTHESIS CLOSE_PARENTHESIS SEMICOLON
    (81) set -> . type NAME IGUAL NEW SET OPEN_PARENTHESIS OPEN_BRACKET items CLOSE_BRACKET CLOSE_PARENTHESIS SEMICOLON
    (82) set -> . type NAME IGUAL NEW SET OPEN_PARENTHESIS element CLOSE_PARENTHESIS SEMICOLON
    (83) set -> . NAME IGUAL NEW SET OPEN_PARENTHESIS CLOSE_PARENTHESIS SEMICOLON
    (84) set -> . NAME IGUAL NEW SET OPEN_PARENTHESIS OPEN_BRACKET items CLOSE_BRACKET CLOSE_PARENTHESIS SEMICOLON
    (85) set -> . NAME IGUAL NEW SET OPEN_PARENTHESIS element CLOSE_PARENTHESIS SEMICOLON
    (59) map -> . iniciarMap
    (60) map -> . escribirMap
    (61) map -> . generarMap
    (20) while -> . WHILE OPEN_PARENTHESIS controlArg CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE
    (21) while -> . WHILE OPEN_PARENTHESIS bool CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE
    (31) for -> . FOR OPEN_PARENTHESIS inicialization SEMICOLON controlArg SEMICOLON operations CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE
    (22) if -> . soloIf
    (23) if -> . soloIf elseIf
    (24) if -> . soloIf elseIf else
    (25) if -> . soloIf else
    (62) iniciarMap -> . variable IGUAL NEW MAP OPEN_PARENTHESIS CLOSE_PARENTHESIS SEMICOLON
    (63) escribirMap -> . variable IGUAL OPEN_BRACE claveValor CLOSE_BRACE
    (69) generarMap -> . variable IGUAL OPEN_BRACE tuplas CLOSE_BRACE
    (26) soloIf -> . IF OPEN_PARENTHESIS controlArg CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE

    $end            reduce using rule 1 (expression -> variable .)
    CLOSE_BRACE     reduce using rule 1 (expression -> variable .)
    IGUAL           shift and go to state 28
    NAME            shift and go to state 10
    CONST           shift and go to state 17
    LET             shift and go to state 18
    VAR             shift and go to state 19
    WHILE           shift and go to state 23
    FOR             shift and go to state 24
    IF              shift and go to state 26

    variable                       shift and go to state 2
    expression                     shift and go to state 27
    dataStruct                     shift and go to state 3
    controlStruct                  shift and go to state 4
    methodsSet                     shift and go to state 5
    mapFunctions                   shift and go to state 6
    arrayFn                        shift and go to state 7
    declaration                    shift and go to state 8
    type                           shift and go to state 9
    array                          shift and go to state 11
    set                            shift and go to state 12
    map                            shift and go to state 13
    while                          shift and go to state 14
    for                            shift and go to state 15
    if                             shift and go to state 16
    iniciarMap                     shift and go to state 20
    escribirMap                    shift and go to state 21
    generarMap                     shift and go to state 22
    soloIf                         shift and go to state 25

state 3

    (3) expression -> dataStruct .
    (4) expression -> dataStruct . expression
    (1) expression -> . variable
    (2) expression -> . variable expression
    (3) expression -> . dataStruct
    (4) expression -> . dataStruct expression
    (5) expression -> . controlStruct
    (6) expression -> . controlStruct expression
    (7) expression -> . methodsSet
    (8) expression -> . mapFunctions
    (9) expression -> . arrayFn
    (10) expression -> . declaration
    (11) variable -> . type NAME IGUAL datatype SEMICOLON
    (12) variable -> . type NAME IGUAL operations SEMICOLON
    (13) variable -> . NAME IGUAL datatype SEMICOLON
    (17) dataStruct -> . array
    (18) dataStruct -> . set
    (19) dataStruct -> . map
    (14) controlStruct -> . while
    (15) controlStruct -> . for
    (16) controlStruct -> . if
    (86) methodsSet -> . NAME POINT ADD OPEN_PARENTHESIS element CLOSE_PARENTHESIS SEMICOLON
    (87) methodsSet -> . NAME POINT DELETE OPEN_PARENTHESIS element CLOSE_PARENTHESIS SEMICOLON
    (88) methodsSet -> . NAME POINT CLEAR OPEN_PARENTHESIS CLOSE_PARENTHESIS SEMICOLON
    (74) mapFunctions -> . NAME POINT CLEAR OPEN_PARENTHESIS CLOSE_PARENTHESIS SEMICOLON
    (75) mapFunctions -> . NAME POINT GET OPEN_PARENTHESIS clave CLOSE_PARENTHESIS SEMICOLON
    (76) mapFunctions -> . NAME POINT HAS OPEN_PARENTHESIS clave CLOSE_PARENTHESIS SEMICOLON
    (77) arrayFn -> . NAME POINT POP OPEN_PARENTHESIS CLOSE_PARENTHESIS
    (78) arrayFn -> . NAME POINT PUSH OPEN_PARENTHESIS element CLOSE_PARENTHESIS
    (79) arrayFn -> . NAME POINT UNSHIFT OPEN_PARENTHESIS element CLOSE_PARENTHESIS
    (98) declaration -> . NAME IGUAL element
    (46) type -> . CONST
    (47) type -> . LET
    (48) type -> . VAR
    (57) array -> . type NAME IGUAL OPEN_BRACKET items CLOSE_BRACKET SEMICOLON
    (58) array -> . type NAME IGUAL NEW ARRAY OPEN_PARENTHESIS items CLOSE_PARENTHESIS SEMICOLON
    (80) set -> . type NAME IGUAL NEW SET OPEN_PARENTHESIS CLOSE_PARENTHESIS SEMICOLON
    (81) set -> . type NAME IGUAL NEW SET OPEN_PARENTHESIS OPEN_BRACKET items CLOSE_BRACKET CLOSE_PARENTHESIS SEMICOLON
    (82) set -> . type NAME IGUAL NEW SET OPEN_PARENTHESIS element CLOSE_PARENTHESIS SEMICOLON
    (83) set -> . NAME IGUAL NEW SET OPEN_PARENTHESIS CLOSE_PARENTHESIS SEMICOLON
    (84) set -> . NAME IGUAL NEW SET OPEN_PARENTHESIS OPEN_BRACKET items CLOSE_BRACKET CLOSE_PARENTHESIS SEMICOLON
    (85) set -> . NAME IGUAL NEW SET OPEN_PARENTHESIS element CLOSE_PARENTHESIS SEMICOLON
    (59) map -> . iniciarMap
    (60) map -> . escribirMap
    (61) map -> . generarMap
    (20) while -> . WHILE OPEN_PARENTHESIS controlArg CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE
    (21) while -> . WHILE OPEN_PARENTHESIS bool CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE
    (31) for -> . FOR OPEN_PARENTHESIS inicialization SEMICOLON controlArg SEMICOLON operations CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE
    (22) if -> . soloIf
    (23) if -> . soloIf elseIf
    (24) if -> . soloIf elseIf else
    (25) if -> . soloIf else
    (62) iniciarMap -> . variable IGUAL NEW MAP OPEN_PARENTHESIS CLOSE_PARENTHESIS SEMICOLON
    (63) escribirMap -> . variable IGUAL OPEN_BRACE claveValor CLOSE_BRACE
    (69) generarMap -> . variable IGUAL OPEN_BRACE tuplas CLOSE_BRACE
    (26) soloIf -> . IF OPEN_PARENTHESIS controlArg CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE

    $end            reduce using rule 3 (expression -> dataStruct .)
    CLOSE_BRACE     reduce using rule 3 (expression -> dataStruct .)
    NAME            shift and go to state 10
    CONST           shift and go to state 17
    LET             shift and go to state 18
    VAR             shift and go to state 19
    WHILE           shift and go to state 23
    FOR             shift and go to state 24
    IF              shift and go to state 26

    dataStruct                     shift and go to state 3
    expression                     shift and go to state 29
    variable                       shift and go to state 2
    controlStruct                  shift and go to state 4
    methodsSet                     shift and go to state 5
    mapFunctions                   shift and go to state 6
    arrayFn                        shift and go to state 7
    declaration                    shift and go to state 8
    type                           shift and go to state 9
    array                          shift and go to state 11
    set                            shift and go to state 12
    map                            shift and go to state 13
    while                          shift and go to state 14
    for                            shift and go to state 15
    if                             shift and go to state 16
    iniciarMap                     shift and go to state 20
    escribirMap                    shift and go to state 21
    generarMap                     shift and go to state 22
    soloIf                         shift and go to state 25

state 4

    (5) expression -> controlStruct .
    (6) expression -> controlStruct . expression
    (1) expression -> . variable
    (2) expression -> . variable expression
    (3) expression -> . dataStruct
    (4) expression -> . dataStruct expression
    (5) expression -> . controlStruct
    (6) expression -> . controlStruct expression
    (7) expression -> . methodsSet
    (8) expression -> . mapFunctions
    (9) expression -> . arrayFn
    (10) expression -> . declaration
    (11) variable -> . type NAME IGUAL datatype SEMICOLON
    (12) variable -> . type NAME IGUAL operations SEMICOLON
    (13) variable -> . NAME IGUAL datatype SEMICOLON
    (17) dataStruct -> . array
    (18) dataStruct -> . set
    (19) dataStruct -> . map
    (14) controlStruct -> . while
    (15) controlStruct -> . for
    (16) controlStruct -> . if
    (86) methodsSet -> . NAME POINT ADD OPEN_PARENTHESIS element CLOSE_PARENTHESIS SEMICOLON
    (87) methodsSet -> . NAME POINT DELETE OPEN_PARENTHESIS element CLOSE_PARENTHESIS SEMICOLON
    (88) methodsSet -> . NAME POINT CLEAR OPEN_PARENTHESIS CLOSE_PARENTHESIS SEMICOLON
    (74) mapFunctions -> . NAME POINT CLEAR OPEN_PARENTHESIS CLOSE_PARENTHESIS SEMICOLON
    (75) mapFunctions -> . NAME POINT GET OPEN_PARENTHESIS clave CLOSE_PARENTHESIS SEMICOLON
    (76) mapFunctions -> . NAME POINT HAS OPEN_PARENTHESIS clave CLOSE_PARENTHESIS SEMICOLON
    (77) arrayFn -> . NAME POINT POP OPEN_PARENTHESIS CLOSE_PARENTHESIS
    (78) arrayFn -> . NAME POINT PUSH OPEN_PARENTHESIS element CLOSE_PARENTHESIS
    (79) arrayFn -> . NAME POINT UNSHIFT OPEN_PARENTHESIS element CLOSE_PARENTHESIS
    (98) declaration -> . NAME IGUAL element
    (46) type -> . CONST
    (47) type -> . LET
    (48) type -> . VAR
    (57) array -> . type NAME IGUAL OPEN_BRACKET items CLOSE_BRACKET SEMICOLON
    (58) array -> . type NAME IGUAL NEW ARRAY OPEN_PARENTHESIS items CLOSE_PARENTHESIS SEMICOLON
    (80) set -> . type NAME IGUAL NEW SET OPEN_PARENTHESIS CLOSE_PARENTHESIS SEMICOLON
    (81) set -> . type NAME IGUAL NEW SET OPEN_PARENTHESIS OPEN_BRACKET items CLOSE_BRACKET CLOSE_PARENTHESIS SEMICOLON
    (82) set -> . type NAME IGUAL NEW SET OPEN_PARENTHESIS element CLOSE_PARENTHESIS SEMICOLON
    (83) set -> . NAME IGUAL NEW SET OPEN_PARENTHESIS CLOSE_PARENTHESIS SEMICOLON
    (84) set -> . NAME IGUAL NEW SET OPEN_PARENTHESIS OPEN_BRACKET items CLOSE_BRACKET CLOSE_PARENTHESIS SEMICOLON
    (85) set -> . NAME IGUAL NEW SET OPEN_PARENTHESIS element CLOSE_PARENTHESIS SEMICOLON
    (59) map -> . iniciarMap
    (60) map -> . escribirMap
    (61) map -> . generarMap
    (20) while -> . WHILE OPEN_PARENTHESIS controlArg CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE
    (21) while -> . WHILE OPEN_PARENTHESIS bool CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE
    (31) for -> . FOR OPEN_PARENTHESIS inicialization SEMICOLON controlArg SEMICOLON operations CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE
    (22) if -> . soloIf
    (23) if -> . soloIf elseIf
    (24) if -> . soloIf elseIf else
    (25) if -> . soloIf else
    (62) iniciarMap -> . variable IGUAL NEW MAP OPEN_PARENTHESIS CLOSE_PARENTHESIS SEMICOLON
    (63) escribirMap -> . variable IGUAL OPEN_BRACE claveValor CLOSE_BRACE
    (69) generarMap -> . variable IGUAL OPEN_BRACE tuplas CLOSE_BRACE
    (26) soloIf -> . IF OPEN_PARENTHESIS controlArg CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE

    $end            reduce using rule 5 (expression -> controlStruct .)
    CLOSE_BRACE     reduce using rule 5 (expression -> controlStruct .)
    NAME            shift and go to state 10
    CONST           shift and go to state 17
    LET             shift and go to state 18
    VAR             shift and go to state 19
    WHILE           shift and go to state 23
    FOR             shift and go to state 24
    IF              shift and go to state 26

    controlStruct                  shift and go to state 4
    expression                     shift and go to state 30
    variable                       shift and go to state 2
    dataStruct                     shift and go to state 3
    methodsSet                     shift and go to state 5
    mapFunctions                   shift and go to state 6
    arrayFn                        shift and go to state 7
    declaration                    shift and go to state 8
    type                           shift and go to state 9
    array                          shift and go to state 11
    set                            shift and go to state 12
    map                            shift and go to state 13
    while                          shift and go to state 14
    for                            shift and go to state 15
    if                             shift and go to state 16
    iniciarMap                     shift and go to state 20
    escribirMap                    shift and go to state 21
    generarMap                     shift and go to state 22
    soloIf                         shift and go to state 25

state 5

    (7) expression -> methodsSet .

    $end            reduce using rule 7 (expression -> methodsSet .)
    CLOSE_BRACE     reduce using rule 7 (expression -> methodsSet .)


state 6

    (8) expression -> mapFunctions .

    $end            reduce using rule 8 (expression -> mapFunctions .)
    CLOSE_BRACE     reduce using rule 8 (expression -> mapFunctions .)


state 7

    (9) expression -> arrayFn .

    $end            reduce using rule 9 (expression -> arrayFn .)
    CLOSE_BRACE     reduce using rule 9 (expression -> arrayFn .)


state 8

    (10) expression -> declaration .

    $end            reduce using rule 10 (expression -> declaration .)
    CLOSE_BRACE     reduce using rule 10 (expression -> declaration .)


state 9

    (11) variable -> type . NAME IGUAL datatype SEMICOLON
    (12) variable -> type . NAME IGUAL operations SEMICOLON
    (57) array -> type . NAME IGUAL OPEN_BRACKET items CLOSE_BRACKET SEMICOLON
    (58) array -> type . NAME IGUAL NEW ARRAY OPEN_PARENTHESIS items CLOSE_PARENTHESIS SEMICOLON
    (80) set -> type . NAME IGUAL NEW SET OPEN_PARENTHESIS CLOSE_PARENTHESIS SEMICOLON
    (81) set -> type . NAME IGUAL NEW SET OPEN_PARENTHESIS OPEN_BRACKET items CLOSE_BRACKET CLOSE_PARENTHESIS SEMICOLON
    (82) set -> type . NAME IGUAL NEW SET OPEN_PARENTHESIS element CLOSE_PARENTHESIS SEMICOLON

    NAME            shift and go to state 31


state 10

    (13) variable -> NAME . IGUAL datatype SEMICOLON
    (86) methodsSet -> NAME . POINT ADD OPEN_PARENTHESIS element CLOSE_PARENTHESIS SEMICOLON
    (87) methodsSet -> NAME . POINT DELETE OPEN_PARENTHESIS element CLOSE_PARENTHESIS SEMICOLON
    (88) methodsSet -> NAME . POINT CLEAR OPEN_PARENTHESIS CLOSE_PARENTHESIS SEMICOLON
    (74) mapFunctions -> NAME . POINT CLEAR OPEN_PARENTHESIS CLOSE_PARENTHESIS SEMICOLON
    (75) mapFunctions -> NAME . POINT GET OPEN_PARENTHESIS clave CLOSE_PARENTHESIS SEMICOLON
    (76) mapFunctions -> NAME . POINT HAS OPEN_PARENTHESIS clave CLOSE_PARENTHESIS SEMICOLON
    (77) arrayFn -> NAME . POINT POP OPEN_PARENTHESIS CLOSE_PARENTHESIS
    (78) arrayFn -> NAME . POINT PUSH OPEN_PARENTHESIS element CLOSE_PARENTHESIS
    (79) arrayFn -> NAME . POINT UNSHIFT OPEN_PARENTHESIS element CLOSE_PARENTHESIS
    (98) declaration -> NAME . IGUAL element
    (83) set -> NAME . IGUAL NEW SET OPEN_PARENTHESIS CLOSE_PARENTHESIS SEMICOLON
    (84) set -> NAME . IGUAL NEW SET OPEN_PARENTHESIS OPEN_BRACKET items CLOSE_BRACKET CLOSE_PARENTHESIS SEMICOLON
    (85) set -> NAME . IGUAL NEW SET OPEN_PARENTHESIS element CLOSE_PARENTHESIS SEMICOLON

    IGUAL           shift and go to state 32
    POINT           shift and go to state 33


state 11

    (17) dataStruct -> array .

    NAME            reduce using rule 17 (dataStruct -> array .)
    CONST           reduce using rule 17 (dataStruct -> array .)
    LET             reduce using rule 17 (dataStruct -> array .)
    VAR             reduce using rule 17 (dataStruct -> array .)
    WHILE           reduce using rule 17 (dataStruct -> array .)
    FOR             reduce using rule 17 (dataStruct -> array .)
    IF              reduce using rule 17 (dataStruct -> array .)
    $end            reduce using rule 17 (dataStruct -> array .)
    CLOSE_BRACE     reduce using rule 17 (dataStruct -> array .)
    COMMA           reduce using rule 17 (dataStruct -> array .)


state 12

    (18) dataStruct -> set .

    NAME            reduce using rule 18 (dataStruct -> set .)
    CONST           reduce using rule 18 (dataStruct -> set .)
    LET             reduce using rule 18 (dataStruct -> set .)
    VAR             reduce using rule 18 (dataStruct -> set .)
    WHILE           reduce using rule 18 (dataStruct -> set .)
    FOR             reduce using rule 18 (dataStruct -> set .)
    IF              reduce using rule 18 (dataStruct -> set .)
    $end            reduce using rule 18 (dataStruct -> set .)
    CLOSE_BRACE     reduce using rule 18 (dataStruct -> set .)
    COMMA           reduce using rule 18 (dataStruct -> set .)


state 13

    (19) dataStruct -> map .

    NAME            reduce using rule 19 (dataStruct -> map .)
    CONST           reduce using rule 19 (dataStruct -> map .)
    LET             reduce using rule 19 (dataStruct -> map .)
    VAR             reduce using rule 19 (dataStruct -> map .)
    WHILE           reduce using rule 19 (dataStruct -> map .)
    FOR             reduce using rule 19 (dataStruct -> map .)
    IF              reduce using rule 19 (dataStruct -> map .)
    $end            reduce using rule 19 (dataStruct -> map .)
    CLOSE_BRACE     reduce using rule 19 (dataStruct -> map .)
    COMMA           reduce using rule 19 (dataStruct -> map .)


state 14

    (14) controlStruct -> while .

    NAME            reduce using rule 14 (controlStruct -> while .)
    CONST           reduce using rule 14 (controlStruct -> while .)
    LET             reduce using rule 14 (controlStruct -> while .)
    VAR             reduce using rule 14 (controlStruct -> while .)
    WHILE           reduce using rule 14 (controlStruct -> while .)
    FOR             reduce using rule 14 (controlStruct -> while .)
    IF              reduce using rule 14 (controlStruct -> while .)
    $end            reduce using rule 14 (controlStruct -> while .)
    CLOSE_BRACE     reduce using rule 14 (controlStruct -> while .)


state 15

    (15) controlStruct -> for .

    NAME            reduce using rule 15 (controlStruct -> for .)
    CONST           reduce using rule 15 (controlStruct -> for .)
    LET             reduce using rule 15 (controlStruct -> for .)
    VAR             reduce using rule 15 (controlStruct -> for .)
    WHILE           reduce using rule 15 (controlStruct -> for .)
    FOR             reduce using rule 15 (controlStruct -> for .)
    IF              reduce using rule 15 (controlStruct -> for .)
    $end            reduce using rule 15 (controlStruct -> for .)
    CLOSE_BRACE     reduce using rule 15 (controlStruct -> for .)


state 16

    (16) controlStruct -> if .

    NAME            reduce using rule 16 (controlStruct -> if .)
    CONST           reduce using rule 16 (controlStruct -> if .)
    LET             reduce using rule 16 (controlStruct -> if .)
    VAR             reduce using rule 16 (controlStruct -> if .)
    WHILE           reduce using rule 16 (controlStruct -> if .)
    FOR             reduce using rule 16 (controlStruct -> if .)
    IF              reduce using rule 16 (controlStruct -> if .)
    $end            reduce using rule 16 (controlStruct -> if .)
    CLOSE_BRACE     reduce using rule 16 (controlStruct -> if .)


state 17

    (46) type -> CONST .

    NAME            reduce using rule 46 (type -> CONST .)


state 18

    (47) type -> LET .

    NAME            reduce using rule 47 (type -> LET .)


state 19

    (48) type -> VAR .

    NAME            reduce using rule 48 (type -> VAR .)


state 20

    (59) map -> iniciarMap .

    NAME            reduce using rule 59 (map -> iniciarMap .)
    CONST           reduce using rule 59 (map -> iniciarMap .)
    LET             reduce using rule 59 (map -> iniciarMap .)
    VAR             reduce using rule 59 (map -> iniciarMap .)
    WHILE           reduce using rule 59 (map -> iniciarMap .)
    FOR             reduce using rule 59 (map -> iniciarMap .)
    IF              reduce using rule 59 (map -> iniciarMap .)
    $end            reduce using rule 59 (map -> iniciarMap .)
    CLOSE_BRACE     reduce using rule 59 (map -> iniciarMap .)
    COMMA           reduce using rule 59 (map -> iniciarMap .)


state 21

    (60) map -> escribirMap .

    NAME            reduce using rule 60 (map -> escribirMap .)
    CONST           reduce using rule 60 (map -> escribirMap .)
    LET             reduce using rule 60 (map -> escribirMap .)
    VAR             reduce using rule 60 (map -> escribirMap .)
    WHILE           reduce using rule 60 (map -> escribirMap .)
    FOR             reduce using rule 60 (map -> escribirMap .)
    IF              reduce using rule 60 (map -> escribirMap .)
    $end            reduce using rule 60 (map -> escribirMap .)
    CLOSE_BRACE     reduce using rule 60 (map -> escribirMap .)
    COMMA           reduce using rule 60 (map -> escribirMap .)


state 22

    (61) map -> generarMap .

    NAME            reduce using rule 61 (map -> generarMap .)
    CONST           reduce using rule 61 (map -> generarMap .)
    LET             reduce using rule 61 (map -> generarMap .)
    VAR             reduce using rule 61 (map -> generarMap .)
    WHILE           reduce using rule 61 (map -> generarMap .)
    FOR             reduce using rule 61 (map -> generarMap .)
    IF              reduce using rule 61 (map -> generarMap .)
    $end            reduce using rule 61 (map -> generarMap .)
    CLOSE_BRACE     reduce using rule 61 (map -> generarMap .)
    COMMA           reduce using rule 61 (map -> generarMap .)


state 23

    (20) while -> WHILE . OPEN_PARENTHESIS controlArg CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE
    (21) while -> WHILE . OPEN_PARENTHESIS bool CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE

    OPEN_PARENTHESIS shift and go to state 34


state 24

    (31) for -> FOR . OPEN_PARENTHESIS inicialization SEMICOLON controlArg SEMICOLON operations CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE

    OPEN_PARENTHESIS shift and go to state 35


state 25

    (22) if -> soloIf .
    (23) if -> soloIf . elseIf
    (24) if -> soloIf . elseIf else
    (25) if -> soloIf . else
    (27) elseIf -> . ELSEIF OPEN_PARENTHESIS controlArg CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE
    (28) elseIf -> . ELSEIF OPEN_PARENTHESIS controlArg CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE soloIf
    (29) else -> . ELSE OPEN_BRACE expression CLOSE_BRACE

    NAME            reduce using rule 22 (if -> soloIf .)
    CONST           reduce using rule 22 (if -> soloIf .)
    LET             reduce using rule 22 (if -> soloIf .)
    VAR             reduce using rule 22 (if -> soloIf .)
    WHILE           reduce using rule 22 (if -> soloIf .)
    FOR             reduce using rule 22 (if -> soloIf .)
    IF              reduce using rule 22 (if -> soloIf .)
    $end            reduce using rule 22 (if -> soloIf .)
    CLOSE_BRACE     reduce using rule 22 (if -> soloIf .)
    ELSEIF          shift and go to state 38
    ELSE            shift and go to state 39

    elseIf                         shift and go to state 36
    else                           shift and go to state 37

state 26

    (26) soloIf -> IF . OPEN_PARENTHESIS controlArg CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE

    OPEN_PARENTHESIS shift and go to state 40


state 27

    (2) expression -> variable expression .

    $end            reduce using rule 2 (expression -> variable expression .)
    CLOSE_BRACE     reduce using rule 2 (expression -> variable expression .)


state 28

    (62) iniciarMap -> variable IGUAL . NEW MAP OPEN_PARENTHESIS CLOSE_PARENTHESIS SEMICOLON
    (63) escribirMap -> variable IGUAL . OPEN_BRACE claveValor CLOSE_BRACE
    (69) generarMap -> variable IGUAL . OPEN_BRACE tuplas CLOSE_BRACE

    NEW             shift and go to state 41
    OPEN_BRACE      shift and go to state 42


state 29

    (4) expression -> dataStruct expression .

    $end            reduce using rule 4 (expression -> dataStruct expression .)
    CLOSE_BRACE     reduce using rule 4 (expression -> dataStruct expression .)


state 30

    (6) expression -> controlStruct expression .

    $end            reduce using rule 6 (expression -> controlStruct expression .)
    CLOSE_BRACE     reduce using rule 6 (expression -> controlStruct expression .)


state 31

    (11) variable -> type NAME . IGUAL datatype SEMICOLON
    (12) variable -> type NAME . IGUAL operations SEMICOLON
    (57) array -> type NAME . IGUAL OPEN_BRACKET items CLOSE_BRACKET SEMICOLON
    (58) array -> type NAME . IGUAL NEW ARRAY OPEN_PARENTHESIS items CLOSE_PARENTHESIS SEMICOLON
    (80) set -> type NAME . IGUAL NEW SET OPEN_PARENTHESIS CLOSE_PARENTHESIS SEMICOLON
    (81) set -> type NAME . IGUAL NEW SET OPEN_PARENTHESIS OPEN_BRACKET items CLOSE_BRACKET CLOSE_PARENTHESIS SEMICOLON
    (82) set -> type NAME . IGUAL NEW SET OPEN_PARENTHESIS element CLOSE_PARENTHESIS SEMICOLON

    IGUAL           shift and go to state 43


state 32

    (13) variable -> NAME IGUAL . datatype SEMICOLON
    (98) declaration -> NAME IGUAL . element
    (83) set -> NAME IGUAL . NEW SET OPEN_PARENTHESIS CLOSE_PARENTHESIS SEMICOLON
    (84) set -> NAME IGUAL . NEW SET OPEN_PARENTHESIS OPEN_BRACKET items CLOSE_BRACKET CLOSE_PARENTHESIS SEMICOLON
    (85) set -> NAME IGUAL . NEW SET OPEN_PARENTHESIS element CLOSE_PARENTHESIS SEMICOLON
    (37) datatype -> . NUMBER
    (38) datatype -> . STRING
    (39) datatype -> . CHAR
    (95) element -> . STRING
    (96) element -> . NUMBER
    (97) element -> . NAME

    NEW             shift and go to state 47
    NUMBER          shift and go to state 48
    STRING          shift and go to state 49
    CHAR            shift and go to state 50
    NAME            shift and go to state 44

    datatype                       shift and go to state 45
    element                        shift and go to state 46

state 33

    (86) methodsSet -> NAME POINT . ADD OPEN_PARENTHESIS element CLOSE_PARENTHESIS SEMICOLON
    (87) methodsSet -> NAME POINT . DELETE OPEN_PARENTHESIS element CLOSE_PARENTHESIS SEMICOLON
    (88) methodsSet -> NAME POINT . CLEAR OPEN_PARENTHESIS CLOSE_PARENTHESIS SEMICOLON
    (74) mapFunctions -> NAME POINT . CLEAR OPEN_PARENTHESIS CLOSE_PARENTHESIS SEMICOLON
    (75) mapFunctions -> NAME POINT . GET OPEN_PARENTHESIS clave CLOSE_PARENTHESIS SEMICOLON
    (76) mapFunctions -> NAME POINT . HAS OPEN_PARENTHESIS clave CLOSE_PARENTHESIS SEMICOLON
    (77) arrayFn -> NAME POINT . POP OPEN_PARENTHESIS CLOSE_PARENTHESIS
    (78) arrayFn -> NAME POINT . PUSH OPEN_PARENTHESIS element CLOSE_PARENTHESIS
    (79) arrayFn -> NAME POINT . UNSHIFT OPEN_PARENTHESIS element CLOSE_PARENTHESIS

    ADD             shift and go to state 51
    DELETE          shift and go to state 52
    CLEAR           shift and go to state 53
    GET             shift and go to state 54
    HAS             shift and go to state 55
    POP             shift and go to state 56
    PUSH            shift and go to state 57
    UNSHIFT         shift and go to state 58


state 34

    (20) while -> WHILE OPEN_PARENTHESIS . controlArg CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE
    (21) while -> WHILE OPEN_PARENTHESIS . bool CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE
    (30) controlArg -> . element clause element
    (44) bool -> . TRUE
    (45) bool -> . FALSE
    (95) element -> . STRING
    (96) element -> . NUMBER
    (97) element -> . NAME

    TRUE            shift and go to state 62
    FALSE           shift and go to state 63
    STRING          shift and go to state 64
    NUMBER          shift and go to state 65
    NAME            shift and go to state 44

    controlArg                     shift and go to state 59
    bool                           shift and go to state 60
    element                        shift and go to state 61

state 35

    (31) for -> FOR OPEN_PARENTHESIS . inicialization SEMICOLON controlArg SEMICOLON operations CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE
    (32) inicialization -> . type NAME IGUAL NUMBER
    (33) inicialization -> . NAME IGUAL NUMBER
    (46) type -> . CONST
    (47) type -> . LET
    (48) type -> . VAR

    NAME            shift and go to state 68
    CONST           shift and go to state 17
    LET             shift and go to state 18
    VAR             shift and go to state 19

    inicialization                 shift and go to state 66
    type                           shift and go to state 67

state 36

    (23) if -> soloIf elseIf .
    (24) if -> soloIf elseIf . else
    (29) else -> . ELSE OPEN_BRACE expression CLOSE_BRACE

    NAME            reduce using rule 23 (if -> soloIf elseIf .)
    CONST           reduce using rule 23 (if -> soloIf elseIf .)
    LET             reduce using rule 23 (if -> soloIf elseIf .)
    VAR             reduce using rule 23 (if -> soloIf elseIf .)
    WHILE           reduce using rule 23 (if -> soloIf elseIf .)
    FOR             reduce using rule 23 (if -> soloIf elseIf .)
    IF              reduce using rule 23 (if -> soloIf elseIf .)
    $end            reduce using rule 23 (if -> soloIf elseIf .)
    CLOSE_BRACE     reduce using rule 23 (if -> soloIf elseIf .)
    ELSE            shift and go to state 39

    else                           shift and go to state 69

state 37

    (25) if -> soloIf else .

    NAME            reduce using rule 25 (if -> soloIf else .)
    CONST           reduce using rule 25 (if -> soloIf else .)
    LET             reduce using rule 25 (if -> soloIf else .)
    VAR             reduce using rule 25 (if -> soloIf else .)
    WHILE           reduce using rule 25 (if -> soloIf else .)
    FOR             reduce using rule 25 (if -> soloIf else .)
    IF              reduce using rule 25 (if -> soloIf else .)
    $end            reduce using rule 25 (if -> soloIf else .)
    CLOSE_BRACE     reduce using rule 25 (if -> soloIf else .)


state 38

    (27) elseIf -> ELSEIF . OPEN_PARENTHESIS controlArg CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE
    (28) elseIf -> ELSEIF . OPEN_PARENTHESIS controlArg CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE soloIf

    OPEN_PARENTHESIS shift and go to state 70


state 39

    (29) else -> ELSE . OPEN_BRACE expression CLOSE_BRACE

    OPEN_BRACE      shift and go to state 71


state 40

    (26) soloIf -> IF OPEN_PARENTHESIS . controlArg CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE
    (30) controlArg -> . element clause element
    (95) element -> . STRING
    (96) element -> . NUMBER
    (97) element -> . NAME

    STRING          shift and go to state 64
    NUMBER          shift and go to state 65
    NAME            shift and go to state 44

    controlArg                     shift and go to state 72
    element                        shift and go to state 61

state 41

    (62) iniciarMap -> variable IGUAL NEW . MAP OPEN_PARENTHESIS CLOSE_PARENTHESIS SEMICOLON

    MAP             shift and go to state 73


state 42

    (63) escribirMap -> variable IGUAL OPEN_BRACE . claveValor CLOSE_BRACE
    (69) generarMap -> variable IGUAL OPEN_BRACE . tuplas CLOSE_BRACE
    (64) claveValor -> . clave COLON valor
    (65) claveValor -> . clave COLON valor COMMA claveValor
    (70) tuplas -> . tupla
    (71) tuplas -> . tupla COMMA tuplas
    (66) clave -> . datatype
    (72) tupla -> . OPEN_BRACKET datatype CLOSE_BRACKET
    (73) tupla -> . OPEN_BRACKET datatype COMMA datatype CLOSE_BRACKET
    (37) datatype -> . NUMBER
    (38) datatype -> . STRING
    (39) datatype -> . CHAR

    OPEN_BRACKET    shift and go to state 79
    NUMBER          shift and go to state 80
    STRING          shift and go to state 81
    CHAR            shift and go to state 50

    claveValor                     shift and go to state 74
    tuplas                         shift and go to state 75
    clave                          shift and go to state 76
    tupla                          shift and go to state 77
    datatype                       shift and go to state 78

state 43

    (11) variable -> type NAME IGUAL . datatype SEMICOLON
    (12) variable -> type NAME IGUAL . operations SEMICOLON
    (57) array -> type NAME IGUAL . OPEN_BRACKET items CLOSE_BRACKET SEMICOLON
    (58) array -> type NAME IGUAL . NEW ARRAY OPEN_PARENTHESIS items CLOSE_PARENTHESIS SEMICOLON
    (80) set -> type NAME IGUAL . NEW SET OPEN_PARENTHESIS CLOSE_PARENTHESIS SEMICOLON
    (81) set -> type NAME IGUAL . NEW SET OPEN_PARENTHESIS OPEN_BRACKET items CLOSE_BRACKET CLOSE_PARENTHESIS SEMICOLON
    (82) set -> type NAME IGUAL . NEW SET OPEN_PARENTHESIS element CLOSE_PARENTHESIS SEMICOLON
    (37) datatype -> . NUMBER
    (38) datatype -> . STRING
    (39) datatype -> . CHAR
    (34) operations -> . NUMBER operand NUMBER
    (35) operations -> . NAME SUMA SUMA
    (36) operations -> . NAME RESTA RESTA

    OPEN_BRACKET    shift and go to state 85
    NEW             shift and go to state 86
    NUMBER          shift and go to state 87
    STRING          shift and go to state 81
    CHAR            shift and go to state 50
    NAME            shift and go to state 82

    datatype                       shift and go to state 83
    operations                     shift and go to state 84

state 44

    (97) element -> NAME .

    $end            reduce using rule 97 (element -> NAME .)
    CLOSE_BRACE     reduce using rule 97 (element -> NAME .)
    IGUALIGUAL      reduce using rule 97 (element -> NAME .)
    DIFERENTE       reduce using rule 97 (element -> NAME .)
    MAYORQUE        reduce using rule 97 (element -> NAME .)
    MAYORIGUALQUE   reduce using rule 97 (element -> NAME .)
    MENORQUE        reduce using rule 97 (element -> NAME .)
    MENORIGUALQUE   reduce using rule 97 (element -> NAME .)
    CLOSE_PARENTHESIS reduce using rule 97 (element -> NAME .)
    SEMICOLON       reduce using rule 97 (element -> NAME .)


state 45

    (13) variable -> NAME IGUAL datatype . SEMICOLON

    SEMICOLON       shift and go to state 88


state 46

    (98) declaration -> NAME IGUAL element .

    $end            reduce using rule 98 (declaration -> NAME IGUAL element .)
    CLOSE_BRACE     reduce using rule 98 (declaration -> NAME IGUAL element .)


state 47

    (83) set -> NAME IGUAL NEW . SET OPEN_PARENTHESIS CLOSE_PARENTHESIS SEMICOLON
    (84) set -> NAME IGUAL NEW . SET OPEN_PARENTHESIS OPEN_BRACKET items CLOSE_BRACKET CLOSE_PARENTHESIS SEMICOLON
    (85) set -> NAME IGUAL NEW . SET OPEN_PARENTHESIS element CLOSE_PARENTHESIS SEMICOLON

    SET             shift and go to state 89


state 48

    (37) datatype -> NUMBER .
    (96) element -> NUMBER .

    SEMICOLON       reduce using rule 37 (datatype -> NUMBER .)
    $end            reduce using rule 96 (element -> NUMBER .)
    CLOSE_BRACE     reduce using rule 96 (element -> NUMBER .)


state 49

    (38) datatype -> STRING .
    (95) element -> STRING .

    SEMICOLON       reduce using rule 38 (datatype -> STRING .)
    $end            reduce using rule 95 (element -> STRING .)
    CLOSE_BRACE     reduce using rule 95 (element -> STRING .)


state 50

    (39) datatype -> CHAR .

    SEMICOLON       reduce using rule 39 (datatype -> CHAR .)
    COLON           reduce using rule 39 (datatype -> CHAR .)
    CLOSE_BRACKET   reduce using rule 39 (datatype -> CHAR .)
    COMMA           reduce using rule 39 (datatype -> CHAR .)
    CLOSE_PARENTHESIS reduce using rule 39 (datatype -> CHAR .)
    CLOSE_BRACE     reduce using rule 39 (datatype -> CHAR .)


state 51

    (86) methodsSet -> NAME POINT ADD . OPEN_PARENTHESIS element CLOSE_PARENTHESIS SEMICOLON

    OPEN_PARENTHESIS shift and go to state 90


state 52

    (87) methodsSet -> NAME POINT DELETE . OPEN_PARENTHESIS element CLOSE_PARENTHESIS SEMICOLON

    OPEN_PARENTHESIS shift and go to state 91


state 53

    (88) methodsSet -> NAME POINT CLEAR . OPEN_PARENTHESIS CLOSE_PARENTHESIS SEMICOLON
    (74) mapFunctions -> NAME POINT CLEAR . OPEN_PARENTHESIS CLOSE_PARENTHESIS SEMICOLON

    OPEN_PARENTHESIS shift and go to state 92


state 54

    (75) mapFunctions -> NAME POINT GET . OPEN_PARENTHESIS clave CLOSE_PARENTHESIS SEMICOLON

    OPEN_PARENTHESIS shift and go to state 93


state 55

    (76) mapFunctions -> NAME POINT HAS . OPEN_PARENTHESIS clave CLOSE_PARENTHESIS SEMICOLON

    OPEN_PARENTHESIS shift and go to state 94


state 56

    (77) arrayFn -> NAME POINT POP . OPEN_PARENTHESIS CLOSE_PARENTHESIS

    OPEN_PARENTHESIS shift and go to state 95


state 57

    (78) arrayFn -> NAME POINT PUSH . OPEN_PARENTHESIS element CLOSE_PARENTHESIS

    OPEN_PARENTHESIS shift and go to state 96


state 58

    (79) arrayFn -> NAME POINT UNSHIFT . OPEN_PARENTHESIS element CLOSE_PARENTHESIS

    OPEN_PARENTHESIS shift and go to state 97


state 59

    (20) while -> WHILE OPEN_PARENTHESIS controlArg . CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE

    CLOSE_PARENTHESIS shift and go to state 98


state 60

    (21) while -> WHILE OPEN_PARENTHESIS bool . CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE

    CLOSE_PARENTHESIS shift and go to state 99


state 61

    (30) controlArg -> element . clause element
    (49) clause -> . IGUALIGUAL
    (50) clause -> . DIFERENTE
    (51) clause -> . MAYORQUE
    (52) clause -> . MAYORIGUALQUE
    (53) clause -> . MENORQUE
    (54) clause -> . MENORIGUALQUE

    IGUALIGUAL      shift and go to state 101
    DIFERENTE       shift and go to state 102
    MAYORQUE        shift and go to state 103
    MAYORIGUALQUE   shift and go to state 104
    MENORQUE        shift and go to state 105
    MENORIGUALQUE   shift and go to state 106

    clause                         shift and go to state 100

state 62

    (44) bool -> TRUE .

    CLOSE_PARENTHESIS reduce using rule 44 (bool -> TRUE .)


state 63

    (45) bool -> FALSE .

    CLOSE_PARENTHESIS reduce using rule 45 (bool -> FALSE .)


state 64

    (95) element -> STRING .

    IGUALIGUAL      reduce using rule 95 (element -> STRING .)
    DIFERENTE       reduce using rule 95 (element -> STRING .)
    MAYORQUE        reduce using rule 95 (element -> STRING .)
    MAYORIGUALQUE   reduce using rule 95 (element -> STRING .)
    MENORQUE        reduce using rule 95 (element -> STRING .)
    MENORIGUALQUE   reduce using rule 95 (element -> STRING .)
    CLOSE_PARENTHESIS reduce using rule 95 (element -> STRING .)
    SEMICOLON       reduce using rule 95 (element -> STRING .)


state 65

    (96) element -> NUMBER .

    IGUALIGUAL      reduce using rule 96 (element -> NUMBER .)
    DIFERENTE       reduce using rule 96 (element -> NUMBER .)
    MAYORQUE        reduce using rule 96 (element -> NUMBER .)
    MAYORIGUALQUE   reduce using rule 96 (element -> NUMBER .)
    MENORQUE        reduce using rule 96 (element -> NUMBER .)
    MENORIGUALQUE   reduce using rule 96 (element -> NUMBER .)
    CLOSE_PARENTHESIS reduce using rule 96 (element -> NUMBER .)
    SEMICOLON       reduce using rule 96 (element -> NUMBER .)


state 66

    (31) for -> FOR OPEN_PARENTHESIS inicialization . SEMICOLON controlArg SEMICOLON operations CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE

    SEMICOLON       shift and go to state 107


state 67

    (32) inicialization -> type . NAME IGUAL NUMBER

    NAME            shift and go to state 108


state 68

    (33) inicialization -> NAME . IGUAL NUMBER

    IGUAL           shift and go to state 109


state 69

    (24) if -> soloIf elseIf else .

    NAME            reduce using rule 24 (if -> soloIf elseIf else .)
    CONST           reduce using rule 24 (if -> soloIf elseIf else .)
    LET             reduce using rule 24 (if -> soloIf elseIf else .)
    VAR             reduce using rule 24 (if -> soloIf elseIf else .)
    WHILE           reduce using rule 24 (if -> soloIf elseIf else .)
    FOR             reduce using rule 24 (if -> soloIf elseIf else .)
    IF              reduce using rule 24 (if -> soloIf elseIf else .)
    $end            reduce using rule 24 (if -> soloIf elseIf else .)
    CLOSE_BRACE     reduce using rule 24 (if -> soloIf elseIf else .)


state 70

    (27) elseIf -> ELSEIF OPEN_PARENTHESIS . controlArg CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE
    (28) elseIf -> ELSEIF OPEN_PARENTHESIS . controlArg CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE soloIf
    (30) controlArg -> . element clause element
    (95) element -> . STRING
    (96) element -> . NUMBER
    (97) element -> . NAME

    STRING          shift and go to state 64
    NUMBER          shift and go to state 65
    NAME            shift and go to state 44

    controlArg                     shift and go to state 110
    element                        shift and go to state 61

state 71

    (29) else -> ELSE OPEN_BRACE . expression CLOSE_BRACE
    (1) expression -> . variable
    (2) expression -> . variable expression
    (3) expression -> . dataStruct
    (4) expression -> . dataStruct expression
    (5) expression -> . controlStruct
    (6) expression -> . controlStruct expression
    (7) expression -> . methodsSet
    (8) expression -> . mapFunctions
    (9) expression -> . arrayFn
    (10) expression -> . declaration
    (11) variable -> . type NAME IGUAL datatype SEMICOLON
    (12) variable -> . type NAME IGUAL operations SEMICOLON
    (13) variable -> . NAME IGUAL datatype SEMICOLON
    (17) dataStruct -> . array
    (18) dataStruct -> . set
    (19) dataStruct -> . map
    (14) controlStruct -> . while
    (15) controlStruct -> . for
    (16) controlStruct -> . if
    (86) methodsSet -> . NAME POINT ADD OPEN_PARENTHESIS element CLOSE_PARENTHESIS SEMICOLON
    (87) methodsSet -> . NAME POINT DELETE OPEN_PARENTHESIS element CLOSE_PARENTHESIS SEMICOLON
    (88) methodsSet -> . NAME POINT CLEAR OPEN_PARENTHESIS CLOSE_PARENTHESIS SEMICOLON
    (74) mapFunctions -> . NAME POINT CLEAR OPEN_PARENTHESIS CLOSE_PARENTHESIS SEMICOLON
    (75) mapFunctions -> . NAME POINT GET OPEN_PARENTHESIS clave CLOSE_PARENTHESIS SEMICOLON
    (76) mapFunctions -> . NAME POINT HAS OPEN_PARENTHESIS clave CLOSE_PARENTHESIS SEMICOLON
    (77) arrayFn -> . NAME POINT POP OPEN_PARENTHESIS CLOSE_PARENTHESIS
    (78) arrayFn -> . NAME POINT PUSH OPEN_PARENTHESIS element CLOSE_PARENTHESIS
    (79) arrayFn -> . NAME POINT UNSHIFT OPEN_PARENTHESIS element CLOSE_PARENTHESIS
    (98) declaration -> . NAME IGUAL element
    (46) type -> . CONST
    (47) type -> . LET
    (48) type -> . VAR
    (57) array -> . type NAME IGUAL OPEN_BRACKET items CLOSE_BRACKET SEMICOLON
    (58) array -> . type NAME IGUAL NEW ARRAY OPEN_PARENTHESIS items CLOSE_PARENTHESIS SEMICOLON
    (80) set -> . type NAME IGUAL NEW SET OPEN_PARENTHESIS CLOSE_PARENTHESIS SEMICOLON
    (81) set -> . type NAME IGUAL NEW SET OPEN_PARENTHESIS OPEN_BRACKET items CLOSE_BRACKET CLOSE_PARENTHESIS SEMICOLON
    (82) set -> . type NAME IGUAL NEW SET OPEN_PARENTHESIS element CLOSE_PARENTHESIS SEMICOLON
    (83) set -> . NAME IGUAL NEW SET OPEN_PARENTHESIS CLOSE_PARENTHESIS SEMICOLON
    (84) set -> . NAME IGUAL NEW SET OPEN_PARENTHESIS OPEN_BRACKET items CLOSE_BRACKET CLOSE_PARENTHESIS SEMICOLON
    (85) set -> . NAME IGUAL NEW SET OPEN_PARENTHESIS element CLOSE_PARENTHESIS SEMICOLON
    (59) map -> . iniciarMap
    (60) map -> . escribirMap
    (61) map -> . generarMap
    (20) while -> . WHILE OPEN_PARENTHESIS controlArg CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE
    (21) while -> . WHILE OPEN_PARENTHESIS bool CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE
    (31) for -> . FOR OPEN_PARENTHESIS inicialization SEMICOLON controlArg SEMICOLON operations CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE
    (22) if -> . soloIf
    (23) if -> . soloIf elseIf
    (24) if -> . soloIf elseIf else
    (25) if -> . soloIf else
    (62) iniciarMap -> . variable IGUAL NEW MAP OPEN_PARENTHESIS CLOSE_PARENTHESIS SEMICOLON
    (63) escribirMap -> . variable IGUAL OPEN_BRACE claveValor CLOSE_BRACE
    (69) generarMap -> . variable IGUAL OPEN_BRACE tuplas CLOSE_BRACE
    (26) soloIf -> . IF OPEN_PARENTHESIS controlArg CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE

    NAME            shift and go to state 10
    CONST           shift and go to state 17
    LET             shift and go to state 18
    VAR             shift and go to state 19
    WHILE           shift and go to state 23
    FOR             shift and go to state 24
    IF              shift and go to state 26

    expression                     shift and go to state 111
    variable                       shift and go to state 2
    dataStruct                     shift and go to state 3
    controlStruct                  shift and go to state 4
    methodsSet                     shift and go to state 5
    mapFunctions                   shift and go to state 6
    arrayFn                        shift and go to state 7
    declaration                    shift and go to state 8
    type                           shift and go to state 9
    array                          shift and go to state 11
    set                            shift and go to state 12
    map                            shift and go to state 13
    while                          shift and go to state 14
    for                            shift and go to state 15
    if                             shift and go to state 16
    iniciarMap                     shift and go to state 20
    escribirMap                    shift and go to state 21
    generarMap                     shift and go to state 22
    soloIf                         shift and go to state 25

state 72

    (26) soloIf -> IF OPEN_PARENTHESIS controlArg . CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE

    CLOSE_PARENTHESIS shift and go to state 112


state 73

    (62) iniciarMap -> variable IGUAL NEW MAP . OPEN_PARENTHESIS CLOSE_PARENTHESIS SEMICOLON

    OPEN_PARENTHESIS shift and go to state 113


state 74

    (63) escribirMap -> variable IGUAL OPEN_BRACE claveValor . CLOSE_BRACE

    CLOSE_BRACE     shift and go to state 114


state 75

    (69) generarMap -> variable IGUAL OPEN_BRACE tuplas . CLOSE_BRACE

    CLOSE_BRACE     shift and go to state 115


state 76

    (64) claveValor -> clave . COLON valor
    (65) claveValor -> clave . COLON valor COMMA claveValor

    COLON           shift and go to state 116


state 77

    (70) tuplas -> tupla .
    (71) tuplas -> tupla . COMMA tuplas

    CLOSE_BRACE     reduce using rule 70 (tuplas -> tupla .)
    COMMA           shift and go to state 117


state 78

    (66) clave -> datatype .

    COLON           reduce using rule 66 (clave -> datatype .)
    CLOSE_PARENTHESIS reduce using rule 66 (clave -> datatype .)


state 79

    (72) tupla -> OPEN_BRACKET . datatype CLOSE_BRACKET
    (73) tupla -> OPEN_BRACKET . datatype COMMA datatype CLOSE_BRACKET
    (37) datatype -> . NUMBER
    (38) datatype -> . STRING
    (39) datatype -> . CHAR

    NUMBER          shift and go to state 80
    STRING          shift and go to state 81
    CHAR            shift and go to state 50

    datatype                       shift and go to state 118

state 80

    (37) datatype -> NUMBER .

    COLON           reduce using rule 37 (datatype -> NUMBER .)
    CLOSE_BRACKET   reduce using rule 37 (datatype -> NUMBER .)
    COMMA           reduce using rule 37 (datatype -> NUMBER .)
    CLOSE_PARENTHESIS reduce using rule 37 (datatype -> NUMBER .)
    CLOSE_BRACE     reduce using rule 37 (datatype -> NUMBER .)
    SEMICOLON       reduce using rule 37 (datatype -> NUMBER .)


state 81

    (38) datatype -> STRING .

    COLON           reduce using rule 38 (datatype -> STRING .)
    SEMICOLON       reduce using rule 38 (datatype -> STRING .)
    CLOSE_BRACKET   reduce using rule 38 (datatype -> STRING .)
    COMMA           reduce using rule 38 (datatype -> STRING .)
    CLOSE_PARENTHESIS reduce using rule 38 (datatype -> STRING .)
    CLOSE_BRACE     reduce using rule 38 (datatype -> STRING .)


state 82

    (35) operations -> NAME . SUMA SUMA
    (36) operations -> NAME . RESTA RESTA

    SUMA            shift and go to state 119
    RESTA           shift and go to state 120


state 83

    (11) variable -> type NAME IGUAL datatype . SEMICOLON

    SEMICOLON       shift and go to state 121


state 84

    (12) variable -> type NAME IGUAL operations . SEMICOLON

    SEMICOLON       shift and go to state 122


state 85

    (57) array -> type NAME IGUAL OPEN_BRACKET . items CLOSE_BRACKET SEMICOLON
    (89) items -> . numeros
    (90) items -> . cadena
    (91) numeros -> . NUMBER
    (92) numeros -> . NUMBER COMMA numeros
    (93) cadena -> . STRING
    (94) cadena -> . STRING COMMA cadena

    NUMBER          shift and go to state 126
    STRING          shift and go to state 127

    items                          shift and go to state 123
    numeros                        shift and go to state 124
    cadena                         shift and go to state 125

state 86

    (58) array -> type NAME IGUAL NEW . ARRAY OPEN_PARENTHESIS items CLOSE_PARENTHESIS SEMICOLON
    (80) set -> type NAME IGUAL NEW . SET OPEN_PARENTHESIS CLOSE_PARENTHESIS SEMICOLON
    (81) set -> type NAME IGUAL NEW . SET OPEN_PARENTHESIS OPEN_BRACKET items CLOSE_BRACKET CLOSE_PARENTHESIS SEMICOLON
    (82) set -> type NAME IGUAL NEW . SET OPEN_PARENTHESIS element CLOSE_PARENTHESIS SEMICOLON

    ARRAY           shift and go to state 128
    SET             shift and go to state 129


state 87

    (37) datatype -> NUMBER .
    (34) operations -> NUMBER . operand NUMBER
    (40) operand -> . SUMA
    (41) operand -> . RESTA
    (42) operand -> . MULTIPLICACION
    (43) operand -> . DIVISION

    SEMICOLON       reduce using rule 37 (datatype -> NUMBER .)
    SUMA            shift and go to state 131
    RESTA           shift and go to state 132
    MULTIPLICACION  shift and go to state 133
    DIVISION        shift and go to state 134

    operand                        shift and go to state 130

state 88

    (13) variable -> NAME IGUAL datatype SEMICOLON .

    IGUAL           reduce using rule 13 (variable -> NAME IGUAL datatype SEMICOLON .)
    NAME            reduce using rule 13 (variable -> NAME IGUAL datatype SEMICOLON .)
    CONST           reduce using rule 13 (variable -> NAME IGUAL datatype SEMICOLON .)
    LET             reduce using rule 13 (variable -> NAME IGUAL datatype SEMICOLON .)
    VAR             reduce using rule 13 (variable -> NAME IGUAL datatype SEMICOLON .)
    WHILE           reduce using rule 13 (variable -> NAME IGUAL datatype SEMICOLON .)
    FOR             reduce using rule 13 (variable -> NAME IGUAL datatype SEMICOLON .)
    IF              reduce using rule 13 (variable -> NAME IGUAL datatype SEMICOLON .)
    $end            reduce using rule 13 (variable -> NAME IGUAL datatype SEMICOLON .)
    CLOSE_BRACE     reduce using rule 13 (variable -> NAME IGUAL datatype SEMICOLON .)


state 89

    (83) set -> NAME IGUAL NEW SET . OPEN_PARENTHESIS CLOSE_PARENTHESIS SEMICOLON
    (84) set -> NAME IGUAL NEW SET . OPEN_PARENTHESIS OPEN_BRACKET items CLOSE_BRACKET CLOSE_PARENTHESIS SEMICOLON
    (85) set -> NAME IGUAL NEW SET . OPEN_PARENTHESIS element CLOSE_PARENTHESIS SEMICOLON

    OPEN_PARENTHESIS shift and go to state 135


state 90

    (86) methodsSet -> NAME POINT ADD OPEN_PARENTHESIS . element CLOSE_PARENTHESIS SEMICOLON
    (95) element -> . STRING
    (96) element -> . NUMBER
    (97) element -> . NAME

    STRING          shift and go to state 64
    NUMBER          shift and go to state 65
    NAME            shift and go to state 44

    element                        shift and go to state 136

state 91

    (87) methodsSet -> NAME POINT DELETE OPEN_PARENTHESIS . element CLOSE_PARENTHESIS SEMICOLON
    (95) element -> . STRING
    (96) element -> . NUMBER
    (97) element -> . NAME

    STRING          shift and go to state 64
    NUMBER          shift and go to state 65
    NAME            shift and go to state 44

    element                        shift and go to state 137

state 92

    (88) methodsSet -> NAME POINT CLEAR OPEN_PARENTHESIS . CLOSE_PARENTHESIS SEMICOLON
    (74) mapFunctions -> NAME POINT CLEAR OPEN_PARENTHESIS . CLOSE_PARENTHESIS SEMICOLON

    CLOSE_PARENTHESIS shift and go to state 138


state 93

    (75) mapFunctions -> NAME POINT GET OPEN_PARENTHESIS . clave CLOSE_PARENTHESIS SEMICOLON
    (66) clave -> . datatype
    (37) datatype -> . NUMBER
    (38) datatype -> . STRING
    (39) datatype -> . CHAR

    NUMBER          shift and go to state 80
    STRING          shift and go to state 81
    CHAR            shift and go to state 50

    clave                          shift and go to state 139
    datatype                       shift and go to state 78

state 94

    (76) mapFunctions -> NAME POINT HAS OPEN_PARENTHESIS . clave CLOSE_PARENTHESIS SEMICOLON
    (66) clave -> . datatype
    (37) datatype -> . NUMBER
    (38) datatype -> . STRING
    (39) datatype -> . CHAR

    NUMBER          shift and go to state 80
    STRING          shift and go to state 81
    CHAR            shift and go to state 50

    clave                          shift and go to state 140
    datatype                       shift and go to state 78

state 95

    (77) arrayFn -> NAME POINT POP OPEN_PARENTHESIS . CLOSE_PARENTHESIS

    CLOSE_PARENTHESIS shift and go to state 141


state 96

    (78) arrayFn -> NAME POINT PUSH OPEN_PARENTHESIS . element CLOSE_PARENTHESIS
    (95) element -> . STRING
    (96) element -> . NUMBER
    (97) element -> . NAME

    STRING          shift and go to state 64
    NUMBER          shift and go to state 65
    NAME            shift and go to state 44

    element                        shift and go to state 142

state 97

    (79) arrayFn -> NAME POINT UNSHIFT OPEN_PARENTHESIS . element CLOSE_PARENTHESIS
    (95) element -> . STRING
    (96) element -> . NUMBER
    (97) element -> . NAME

    STRING          shift and go to state 64
    NUMBER          shift and go to state 65
    NAME            shift and go to state 44

    element                        shift and go to state 143

state 98

    (20) while -> WHILE OPEN_PARENTHESIS controlArg CLOSE_PARENTHESIS . OPEN_BRACE expression CLOSE_BRACE

    OPEN_BRACE      shift and go to state 144


state 99

    (21) while -> WHILE OPEN_PARENTHESIS bool CLOSE_PARENTHESIS . OPEN_BRACE expression CLOSE_BRACE

    OPEN_BRACE      shift and go to state 145


state 100

    (30) controlArg -> element clause . element
    (95) element -> . STRING
    (96) element -> . NUMBER
    (97) element -> . NAME

    STRING          shift and go to state 64
    NUMBER          shift and go to state 65
    NAME            shift and go to state 44

    element                        shift and go to state 146

state 101

    (49) clause -> IGUALIGUAL .

    STRING          reduce using rule 49 (clause -> IGUALIGUAL .)
    NUMBER          reduce using rule 49 (clause -> IGUALIGUAL .)
    NAME            reduce using rule 49 (clause -> IGUALIGUAL .)


state 102

    (50) clause -> DIFERENTE .

    STRING          reduce using rule 50 (clause -> DIFERENTE .)
    NUMBER          reduce using rule 50 (clause -> DIFERENTE .)
    NAME            reduce using rule 50 (clause -> DIFERENTE .)


state 103

    (51) clause -> MAYORQUE .

    STRING          reduce using rule 51 (clause -> MAYORQUE .)
    NUMBER          reduce using rule 51 (clause -> MAYORQUE .)
    NAME            reduce using rule 51 (clause -> MAYORQUE .)


state 104

    (52) clause -> MAYORIGUALQUE .

    STRING          reduce using rule 52 (clause -> MAYORIGUALQUE .)
    NUMBER          reduce using rule 52 (clause -> MAYORIGUALQUE .)
    NAME            reduce using rule 52 (clause -> MAYORIGUALQUE .)


state 105

    (53) clause -> MENORQUE .

    STRING          reduce using rule 53 (clause -> MENORQUE .)
    NUMBER          reduce using rule 53 (clause -> MENORQUE .)
    NAME            reduce using rule 53 (clause -> MENORQUE .)


state 106

    (54) clause -> MENORIGUALQUE .

    STRING          reduce using rule 54 (clause -> MENORIGUALQUE .)
    NUMBER          reduce using rule 54 (clause -> MENORIGUALQUE .)
    NAME            reduce using rule 54 (clause -> MENORIGUALQUE .)


state 107

    (31) for -> FOR OPEN_PARENTHESIS inicialization SEMICOLON . controlArg SEMICOLON operations CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE
    (30) controlArg -> . element clause element
    (95) element -> . STRING
    (96) element -> . NUMBER
    (97) element -> . NAME

    STRING          shift and go to state 64
    NUMBER          shift and go to state 65
    NAME            shift and go to state 44

    controlArg                     shift and go to state 147
    element                        shift and go to state 61

state 108

    (32) inicialization -> type NAME . IGUAL NUMBER

    IGUAL           shift and go to state 148


state 109

    (33) inicialization -> NAME IGUAL . NUMBER

    NUMBER          shift and go to state 149


state 110

    (27) elseIf -> ELSEIF OPEN_PARENTHESIS controlArg . CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE
    (28) elseIf -> ELSEIF OPEN_PARENTHESIS controlArg . CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE soloIf

    CLOSE_PARENTHESIS shift and go to state 150


state 111

    (29) else -> ELSE OPEN_BRACE expression . CLOSE_BRACE

    CLOSE_BRACE     shift and go to state 151


state 112

    (26) soloIf -> IF OPEN_PARENTHESIS controlArg CLOSE_PARENTHESIS . OPEN_BRACE expression CLOSE_BRACE

    OPEN_BRACE      shift and go to state 152


state 113

    (62) iniciarMap -> variable IGUAL NEW MAP OPEN_PARENTHESIS . CLOSE_PARENTHESIS SEMICOLON

    CLOSE_PARENTHESIS shift and go to state 153


state 114

    (63) escribirMap -> variable IGUAL OPEN_BRACE claveValor CLOSE_BRACE .

    NAME            reduce using rule 63 (escribirMap -> variable IGUAL OPEN_BRACE claveValor CLOSE_BRACE .)
    CONST           reduce using rule 63 (escribirMap -> variable IGUAL OPEN_BRACE claveValor CLOSE_BRACE .)
    LET             reduce using rule 63 (escribirMap -> variable IGUAL OPEN_BRACE claveValor CLOSE_BRACE .)
    VAR             reduce using rule 63 (escribirMap -> variable IGUAL OPEN_BRACE claveValor CLOSE_BRACE .)
    WHILE           reduce using rule 63 (escribirMap -> variable IGUAL OPEN_BRACE claveValor CLOSE_BRACE .)
    FOR             reduce using rule 63 (escribirMap -> variable IGUAL OPEN_BRACE claveValor CLOSE_BRACE .)
    IF              reduce using rule 63 (escribirMap -> variable IGUAL OPEN_BRACE claveValor CLOSE_BRACE .)
    $end            reduce using rule 63 (escribirMap -> variable IGUAL OPEN_BRACE claveValor CLOSE_BRACE .)
    CLOSE_BRACE     reduce using rule 63 (escribirMap -> variable IGUAL OPEN_BRACE claveValor CLOSE_BRACE .)
    COMMA           reduce using rule 63 (escribirMap -> variable IGUAL OPEN_BRACE claveValor CLOSE_BRACE .)


state 115

    (69) generarMap -> variable IGUAL OPEN_BRACE tuplas CLOSE_BRACE .

    NAME            reduce using rule 69 (generarMap -> variable IGUAL OPEN_BRACE tuplas CLOSE_BRACE .)
    CONST           reduce using rule 69 (generarMap -> variable IGUAL OPEN_BRACE tuplas CLOSE_BRACE .)
    LET             reduce using rule 69 (generarMap -> variable IGUAL OPEN_BRACE tuplas CLOSE_BRACE .)
    VAR             reduce using rule 69 (generarMap -> variable IGUAL OPEN_BRACE tuplas CLOSE_BRACE .)
    WHILE           reduce using rule 69 (generarMap -> variable IGUAL OPEN_BRACE tuplas CLOSE_BRACE .)
    FOR             reduce using rule 69 (generarMap -> variable IGUAL OPEN_BRACE tuplas CLOSE_BRACE .)
    IF              reduce using rule 69 (generarMap -> variable IGUAL OPEN_BRACE tuplas CLOSE_BRACE .)
    $end            reduce using rule 69 (generarMap -> variable IGUAL OPEN_BRACE tuplas CLOSE_BRACE .)
    CLOSE_BRACE     reduce using rule 69 (generarMap -> variable IGUAL OPEN_BRACE tuplas CLOSE_BRACE .)
    COMMA           reduce using rule 69 (generarMap -> variable IGUAL OPEN_BRACE tuplas CLOSE_BRACE .)


state 116

    (64) claveValor -> clave COLON . valor
    (65) claveValor -> clave COLON . valor COMMA claveValor
    (67) valor -> . datatype
    (68) valor -> . dataStruct
    (37) datatype -> . NUMBER
    (38) datatype -> . STRING
    (39) datatype -> . CHAR
    (17) dataStruct -> . array
    (18) dataStruct -> . set
    (19) dataStruct -> . map
    (57) array -> . type NAME IGUAL OPEN_BRACKET items CLOSE_BRACKET SEMICOLON
    (58) array -> . type NAME IGUAL NEW ARRAY OPEN_PARENTHESIS items CLOSE_PARENTHESIS SEMICOLON
    (80) set -> . type NAME IGUAL NEW SET OPEN_PARENTHESIS CLOSE_PARENTHESIS SEMICOLON
    (81) set -> . type NAME IGUAL NEW SET OPEN_PARENTHESIS OPEN_BRACKET items CLOSE_BRACKET CLOSE_PARENTHESIS SEMICOLON
    (82) set -> . type NAME IGUAL NEW SET OPEN_PARENTHESIS element CLOSE_PARENTHESIS SEMICOLON
    (83) set -> . NAME IGUAL NEW SET OPEN_PARENTHESIS CLOSE_PARENTHESIS SEMICOLON
    (84) set -> . NAME IGUAL NEW SET OPEN_PARENTHESIS OPEN_BRACKET items CLOSE_BRACKET CLOSE_PARENTHESIS SEMICOLON
    (85) set -> . NAME IGUAL NEW SET OPEN_PARENTHESIS element CLOSE_PARENTHESIS SEMICOLON
    (59) map -> . iniciarMap
    (60) map -> . escribirMap
    (61) map -> . generarMap
    (46) type -> . CONST
    (47) type -> . LET
    (48) type -> . VAR
    (62) iniciarMap -> . variable IGUAL NEW MAP OPEN_PARENTHESIS CLOSE_PARENTHESIS SEMICOLON
    (63) escribirMap -> . variable IGUAL OPEN_BRACE claveValor CLOSE_BRACE
    (69) generarMap -> . variable IGUAL OPEN_BRACE tuplas CLOSE_BRACE
    (11) variable -> . type NAME IGUAL datatype SEMICOLON
    (12) variable -> . type NAME IGUAL operations SEMICOLON
    (13) variable -> . NAME IGUAL datatype SEMICOLON

    NUMBER          shift and go to state 80
    STRING          shift and go to state 81
    CHAR            shift and go to state 50
    NAME            shift and go to state 158
    CONST           shift and go to state 17
    LET             shift and go to state 18
    VAR             shift and go to state 19

    valor                          shift and go to state 154
    datatype                       shift and go to state 155
    dataStruct                     shift and go to state 156
    array                          shift and go to state 11
    set                            shift and go to state 12
    map                            shift and go to state 13
    type                           shift and go to state 157
    iniciarMap                     shift and go to state 20
    escribirMap                    shift and go to state 21
    generarMap                     shift and go to state 22
    variable                       shift and go to state 159

state 117

    (71) tuplas -> tupla COMMA . tuplas
    (70) tuplas -> . tupla
    (71) tuplas -> . tupla COMMA tuplas
    (72) tupla -> . OPEN_BRACKET datatype CLOSE_BRACKET
    (73) tupla -> . OPEN_BRACKET datatype COMMA datatype CLOSE_BRACKET

    OPEN_BRACKET    shift and go to state 79

    tupla                          shift and go to state 77
    tuplas                         shift and go to state 160

state 118

    (72) tupla -> OPEN_BRACKET datatype . CLOSE_BRACKET
    (73) tupla -> OPEN_BRACKET datatype . COMMA datatype CLOSE_BRACKET

    CLOSE_BRACKET   shift and go to state 161
    COMMA           shift and go to state 162


state 119

    (35) operations -> NAME SUMA . SUMA

    SUMA            shift and go to state 163


state 120

    (36) operations -> NAME RESTA . RESTA

    RESTA           shift and go to state 164


state 121

    (11) variable -> type NAME IGUAL datatype SEMICOLON .

    IGUAL           reduce using rule 11 (variable -> type NAME IGUAL datatype SEMICOLON .)
    NAME            reduce using rule 11 (variable -> type NAME IGUAL datatype SEMICOLON .)
    CONST           reduce using rule 11 (variable -> type NAME IGUAL datatype SEMICOLON .)
    LET             reduce using rule 11 (variable -> type NAME IGUAL datatype SEMICOLON .)
    VAR             reduce using rule 11 (variable -> type NAME IGUAL datatype SEMICOLON .)
    WHILE           reduce using rule 11 (variable -> type NAME IGUAL datatype SEMICOLON .)
    FOR             reduce using rule 11 (variable -> type NAME IGUAL datatype SEMICOLON .)
    IF              reduce using rule 11 (variable -> type NAME IGUAL datatype SEMICOLON .)
    $end            reduce using rule 11 (variable -> type NAME IGUAL datatype SEMICOLON .)
    CLOSE_BRACE     reduce using rule 11 (variable -> type NAME IGUAL datatype SEMICOLON .)


state 122

    (12) variable -> type NAME IGUAL operations SEMICOLON .

    IGUAL           reduce using rule 12 (variable -> type NAME IGUAL operations SEMICOLON .)
    NAME            reduce using rule 12 (variable -> type NAME IGUAL operations SEMICOLON .)
    CONST           reduce using rule 12 (variable -> type NAME IGUAL operations SEMICOLON .)
    LET             reduce using rule 12 (variable -> type NAME IGUAL operations SEMICOLON .)
    VAR             reduce using rule 12 (variable -> type NAME IGUAL operations SEMICOLON .)
    WHILE           reduce using rule 12 (variable -> type NAME IGUAL operations SEMICOLON .)
    FOR             reduce using rule 12 (variable -> type NAME IGUAL operations SEMICOLON .)
    IF              reduce using rule 12 (variable -> type NAME IGUAL operations SEMICOLON .)
    $end            reduce using rule 12 (variable -> type NAME IGUAL operations SEMICOLON .)
    CLOSE_BRACE     reduce using rule 12 (variable -> type NAME IGUAL operations SEMICOLON .)


state 123

    (57) array -> type NAME IGUAL OPEN_BRACKET items . CLOSE_BRACKET SEMICOLON

    CLOSE_BRACKET   shift and go to state 165


state 124

    (89) items -> numeros .

    CLOSE_BRACKET   reduce using rule 89 (items -> numeros .)
    CLOSE_PARENTHESIS reduce using rule 89 (items -> numeros .)


state 125

    (90) items -> cadena .

    CLOSE_BRACKET   reduce using rule 90 (items -> cadena .)
    CLOSE_PARENTHESIS reduce using rule 90 (items -> cadena .)


state 126

    (91) numeros -> NUMBER .
    (92) numeros -> NUMBER . COMMA numeros

    CLOSE_BRACKET   reduce using rule 91 (numeros -> NUMBER .)
    CLOSE_PARENTHESIS reduce using rule 91 (numeros -> NUMBER .)
    COMMA           shift and go to state 166


state 127

    (93) cadena -> STRING .
    (94) cadena -> STRING . COMMA cadena

    CLOSE_BRACKET   reduce using rule 93 (cadena -> STRING .)
    CLOSE_PARENTHESIS reduce using rule 93 (cadena -> STRING .)
    COMMA           shift and go to state 167


state 128

    (58) array -> type NAME IGUAL NEW ARRAY . OPEN_PARENTHESIS items CLOSE_PARENTHESIS SEMICOLON

    OPEN_PARENTHESIS shift and go to state 168


state 129

    (80) set -> type NAME IGUAL NEW SET . OPEN_PARENTHESIS CLOSE_PARENTHESIS SEMICOLON
    (81) set -> type NAME IGUAL NEW SET . OPEN_PARENTHESIS OPEN_BRACKET items CLOSE_BRACKET CLOSE_PARENTHESIS SEMICOLON
    (82) set -> type NAME IGUAL NEW SET . OPEN_PARENTHESIS element CLOSE_PARENTHESIS SEMICOLON

    OPEN_PARENTHESIS shift and go to state 169


state 130

    (34) operations -> NUMBER operand . NUMBER

    NUMBER          shift and go to state 170


state 131

    (40) operand -> SUMA .

    NUMBER          reduce using rule 40 (operand -> SUMA .)


state 132

    (41) operand -> RESTA .

    NUMBER          reduce using rule 41 (operand -> RESTA .)


state 133

    (42) operand -> MULTIPLICACION .

    NUMBER          reduce using rule 42 (operand -> MULTIPLICACION .)


state 134

    (43) operand -> DIVISION .

    NUMBER          reduce using rule 43 (operand -> DIVISION .)


state 135

    (83) set -> NAME IGUAL NEW SET OPEN_PARENTHESIS . CLOSE_PARENTHESIS SEMICOLON
    (84) set -> NAME IGUAL NEW SET OPEN_PARENTHESIS . OPEN_BRACKET items CLOSE_BRACKET CLOSE_PARENTHESIS SEMICOLON
    (85) set -> NAME IGUAL NEW SET OPEN_PARENTHESIS . element CLOSE_PARENTHESIS SEMICOLON
    (95) element -> . STRING
    (96) element -> . NUMBER
    (97) element -> . NAME

    CLOSE_PARENTHESIS shift and go to state 171
    OPEN_BRACKET    shift and go to state 172
    STRING          shift and go to state 64
    NUMBER          shift and go to state 65
    NAME            shift and go to state 44

    element                        shift and go to state 173

state 136

    (86) methodsSet -> NAME POINT ADD OPEN_PARENTHESIS element . CLOSE_PARENTHESIS SEMICOLON

    CLOSE_PARENTHESIS shift and go to state 174


state 137

    (87) methodsSet -> NAME POINT DELETE OPEN_PARENTHESIS element . CLOSE_PARENTHESIS SEMICOLON

    CLOSE_PARENTHESIS shift and go to state 175


state 138

    (88) methodsSet -> NAME POINT CLEAR OPEN_PARENTHESIS CLOSE_PARENTHESIS . SEMICOLON
    (74) mapFunctions -> NAME POINT CLEAR OPEN_PARENTHESIS CLOSE_PARENTHESIS . SEMICOLON

    SEMICOLON       shift and go to state 176


state 139

    (75) mapFunctions -> NAME POINT GET OPEN_PARENTHESIS clave . CLOSE_PARENTHESIS SEMICOLON

    CLOSE_PARENTHESIS shift and go to state 177


state 140

    (76) mapFunctions -> NAME POINT HAS OPEN_PARENTHESIS clave . CLOSE_PARENTHESIS SEMICOLON

    CLOSE_PARENTHESIS shift and go to state 178


state 141

    (77) arrayFn -> NAME POINT POP OPEN_PARENTHESIS CLOSE_PARENTHESIS .

    $end            reduce using rule 77 (arrayFn -> NAME POINT POP OPEN_PARENTHESIS CLOSE_PARENTHESIS .)
    CLOSE_BRACE     reduce using rule 77 (arrayFn -> NAME POINT POP OPEN_PARENTHESIS CLOSE_PARENTHESIS .)


state 142

    (78) arrayFn -> NAME POINT PUSH OPEN_PARENTHESIS element . CLOSE_PARENTHESIS

    CLOSE_PARENTHESIS shift and go to state 179


state 143

    (79) arrayFn -> NAME POINT UNSHIFT OPEN_PARENTHESIS element . CLOSE_PARENTHESIS

    CLOSE_PARENTHESIS shift and go to state 180


state 144

    (20) while -> WHILE OPEN_PARENTHESIS controlArg CLOSE_PARENTHESIS OPEN_BRACE . expression CLOSE_BRACE
    (1) expression -> . variable
    (2) expression -> . variable expression
    (3) expression -> . dataStruct
    (4) expression -> . dataStruct expression
    (5) expression -> . controlStruct
    (6) expression -> . controlStruct expression
    (7) expression -> . methodsSet
    (8) expression -> . mapFunctions
    (9) expression -> . arrayFn
    (10) expression -> . declaration
    (11) variable -> . type NAME IGUAL datatype SEMICOLON
    (12) variable -> . type NAME IGUAL operations SEMICOLON
    (13) variable -> . NAME IGUAL datatype SEMICOLON
    (17) dataStruct -> . array
    (18) dataStruct -> . set
    (19) dataStruct -> . map
    (14) controlStruct -> . while
    (15) controlStruct -> . for
    (16) controlStruct -> . if
    (86) methodsSet -> . NAME POINT ADD OPEN_PARENTHESIS element CLOSE_PARENTHESIS SEMICOLON
    (87) methodsSet -> . NAME POINT DELETE OPEN_PARENTHESIS element CLOSE_PARENTHESIS SEMICOLON
    (88) methodsSet -> . NAME POINT CLEAR OPEN_PARENTHESIS CLOSE_PARENTHESIS SEMICOLON
    (74) mapFunctions -> . NAME POINT CLEAR OPEN_PARENTHESIS CLOSE_PARENTHESIS SEMICOLON
    (75) mapFunctions -> . NAME POINT GET OPEN_PARENTHESIS clave CLOSE_PARENTHESIS SEMICOLON
    (76) mapFunctions -> . NAME POINT HAS OPEN_PARENTHESIS clave CLOSE_PARENTHESIS SEMICOLON
    (77) arrayFn -> . NAME POINT POP OPEN_PARENTHESIS CLOSE_PARENTHESIS
    (78) arrayFn -> . NAME POINT PUSH OPEN_PARENTHESIS element CLOSE_PARENTHESIS
    (79) arrayFn -> . NAME POINT UNSHIFT OPEN_PARENTHESIS element CLOSE_PARENTHESIS
    (98) declaration -> . NAME IGUAL element
    (46) type -> . CONST
    (47) type -> . LET
    (48) type -> . VAR
    (57) array -> . type NAME IGUAL OPEN_BRACKET items CLOSE_BRACKET SEMICOLON
    (58) array -> . type NAME IGUAL NEW ARRAY OPEN_PARENTHESIS items CLOSE_PARENTHESIS SEMICOLON
    (80) set -> . type NAME IGUAL NEW SET OPEN_PARENTHESIS CLOSE_PARENTHESIS SEMICOLON
    (81) set -> . type NAME IGUAL NEW SET OPEN_PARENTHESIS OPEN_BRACKET items CLOSE_BRACKET CLOSE_PARENTHESIS SEMICOLON
    (82) set -> . type NAME IGUAL NEW SET OPEN_PARENTHESIS element CLOSE_PARENTHESIS SEMICOLON
    (83) set -> . NAME IGUAL NEW SET OPEN_PARENTHESIS CLOSE_PARENTHESIS SEMICOLON
    (84) set -> . NAME IGUAL NEW SET OPEN_PARENTHESIS OPEN_BRACKET items CLOSE_BRACKET CLOSE_PARENTHESIS SEMICOLON
    (85) set -> . NAME IGUAL NEW SET OPEN_PARENTHESIS element CLOSE_PARENTHESIS SEMICOLON
    (59) map -> . iniciarMap
    (60) map -> . escribirMap
    (61) map -> . generarMap
    (20) while -> . WHILE OPEN_PARENTHESIS controlArg CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE
    (21) while -> . WHILE OPEN_PARENTHESIS bool CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE
    (31) for -> . FOR OPEN_PARENTHESIS inicialization SEMICOLON controlArg SEMICOLON operations CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE
    (22) if -> . soloIf
    (23) if -> . soloIf elseIf
    (24) if -> . soloIf elseIf else
    (25) if -> . soloIf else
    (62) iniciarMap -> . variable IGUAL NEW MAP OPEN_PARENTHESIS CLOSE_PARENTHESIS SEMICOLON
    (63) escribirMap -> . variable IGUAL OPEN_BRACE claveValor CLOSE_BRACE
    (69) generarMap -> . variable IGUAL OPEN_BRACE tuplas CLOSE_BRACE
    (26) soloIf -> . IF OPEN_PARENTHESIS controlArg CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE

    NAME            shift and go to state 10
    CONST           shift and go to state 17
    LET             shift and go to state 18
    VAR             shift and go to state 19
    WHILE           shift and go to state 23
    FOR             shift and go to state 24
    IF              shift and go to state 26

    expression                     shift and go to state 181
    variable                       shift and go to state 2
    dataStruct                     shift and go to state 3
    controlStruct                  shift and go to state 4
    methodsSet                     shift and go to state 5
    mapFunctions                   shift and go to state 6
    arrayFn                        shift and go to state 7
    declaration                    shift and go to state 8
    type                           shift and go to state 9
    array                          shift and go to state 11
    set                            shift and go to state 12
    map                            shift and go to state 13
    while                          shift and go to state 14
    for                            shift and go to state 15
    if                             shift and go to state 16
    iniciarMap                     shift and go to state 20
    escribirMap                    shift and go to state 21
    generarMap                     shift and go to state 22
    soloIf                         shift and go to state 25

state 145

    (21) while -> WHILE OPEN_PARENTHESIS bool CLOSE_PARENTHESIS OPEN_BRACE . expression CLOSE_BRACE
    (1) expression -> . variable
    (2) expression -> . variable expression
    (3) expression -> . dataStruct
    (4) expression -> . dataStruct expression
    (5) expression -> . controlStruct
    (6) expression -> . controlStruct expression
    (7) expression -> . methodsSet
    (8) expression -> . mapFunctions
    (9) expression -> . arrayFn
    (10) expression -> . declaration
    (11) variable -> . type NAME IGUAL datatype SEMICOLON
    (12) variable -> . type NAME IGUAL operations SEMICOLON
    (13) variable -> . NAME IGUAL datatype SEMICOLON
    (17) dataStruct -> . array
    (18) dataStruct -> . set
    (19) dataStruct -> . map
    (14) controlStruct -> . while
    (15) controlStruct -> . for
    (16) controlStruct -> . if
    (86) methodsSet -> . NAME POINT ADD OPEN_PARENTHESIS element CLOSE_PARENTHESIS SEMICOLON
    (87) methodsSet -> . NAME POINT DELETE OPEN_PARENTHESIS element CLOSE_PARENTHESIS SEMICOLON
    (88) methodsSet -> . NAME POINT CLEAR OPEN_PARENTHESIS CLOSE_PARENTHESIS SEMICOLON
    (74) mapFunctions -> . NAME POINT CLEAR OPEN_PARENTHESIS CLOSE_PARENTHESIS SEMICOLON
    (75) mapFunctions -> . NAME POINT GET OPEN_PARENTHESIS clave CLOSE_PARENTHESIS SEMICOLON
    (76) mapFunctions -> . NAME POINT HAS OPEN_PARENTHESIS clave CLOSE_PARENTHESIS SEMICOLON
    (77) arrayFn -> . NAME POINT POP OPEN_PARENTHESIS CLOSE_PARENTHESIS
    (78) arrayFn -> . NAME POINT PUSH OPEN_PARENTHESIS element CLOSE_PARENTHESIS
    (79) arrayFn -> . NAME POINT UNSHIFT OPEN_PARENTHESIS element CLOSE_PARENTHESIS
    (98) declaration -> . NAME IGUAL element
    (46) type -> . CONST
    (47) type -> . LET
    (48) type -> . VAR
    (57) array -> . type NAME IGUAL OPEN_BRACKET items CLOSE_BRACKET SEMICOLON
    (58) array -> . type NAME IGUAL NEW ARRAY OPEN_PARENTHESIS items CLOSE_PARENTHESIS SEMICOLON
    (80) set -> . type NAME IGUAL NEW SET OPEN_PARENTHESIS CLOSE_PARENTHESIS SEMICOLON
    (81) set -> . type NAME IGUAL NEW SET OPEN_PARENTHESIS OPEN_BRACKET items CLOSE_BRACKET CLOSE_PARENTHESIS SEMICOLON
    (82) set -> . type NAME IGUAL NEW SET OPEN_PARENTHESIS element CLOSE_PARENTHESIS SEMICOLON
    (83) set -> . NAME IGUAL NEW SET OPEN_PARENTHESIS CLOSE_PARENTHESIS SEMICOLON
    (84) set -> . NAME IGUAL NEW SET OPEN_PARENTHESIS OPEN_BRACKET items CLOSE_BRACKET CLOSE_PARENTHESIS SEMICOLON
    (85) set -> . NAME IGUAL NEW SET OPEN_PARENTHESIS element CLOSE_PARENTHESIS SEMICOLON
    (59) map -> . iniciarMap
    (60) map -> . escribirMap
    (61) map -> . generarMap
    (20) while -> . WHILE OPEN_PARENTHESIS controlArg CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE
    (21) while -> . WHILE OPEN_PARENTHESIS bool CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE
    (31) for -> . FOR OPEN_PARENTHESIS inicialization SEMICOLON controlArg SEMICOLON operations CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE
    (22) if -> . soloIf
    (23) if -> . soloIf elseIf
    (24) if -> . soloIf elseIf else
    (25) if -> . soloIf else
    (62) iniciarMap -> . variable IGUAL NEW MAP OPEN_PARENTHESIS CLOSE_PARENTHESIS SEMICOLON
    (63) escribirMap -> . variable IGUAL OPEN_BRACE claveValor CLOSE_BRACE
    (69) generarMap -> . variable IGUAL OPEN_BRACE tuplas CLOSE_BRACE
    (26) soloIf -> . IF OPEN_PARENTHESIS controlArg CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE

    NAME            shift and go to state 10
    CONST           shift and go to state 17
    LET             shift and go to state 18
    VAR             shift and go to state 19
    WHILE           shift and go to state 23
    FOR             shift and go to state 24
    IF              shift and go to state 26

    expression                     shift and go to state 182
    variable                       shift and go to state 2
    dataStruct                     shift and go to state 3
    controlStruct                  shift and go to state 4
    methodsSet                     shift and go to state 5
    mapFunctions                   shift and go to state 6
    arrayFn                        shift and go to state 7
    declaration                    shift and go to state 8
    type                           shift and go to state 9
    array                          shift and go to state 11
    set                            shift and go to state 12
    map                            shift and go to state 13
    while                          shift and go to state 14
    for                            shift and go to state 15
    if                             shift and go to state 16
    iniciarMap                     shift and go to state 20
    escribirMap                    shift and go to state 21
    generarMap                     shift and go to state 22
    soloIf                         shift and go to state 25

state 146

    (30) controlArg -> element clause element .

    CLOSE_PARENTHESIS reduce using rule 30 (controlArg -> element clause element .)
    SEMICOLON       reduce using rule 30 (controlArg -> element clause element .)


state 147

    (31) for -> FOR OPEN_PARENTHESIS inicialization SEMICOLON controlArg . SEMICOLON operations CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE

    SEMICOLON       shift and go to state 183


state 148

    (32) inicialization -> type NAME IGUAL . NUMBER

    NUMBER          shift and go to state 184


state 149

    (33) inicialization -> NAME IGUAL NUMBER .

    SEMICOLON       reduce using rule 33 (inicialization -> NAME IGUAL NUMBER .)


state 150

    (27) elseIf -> ELSEIF OPEN_PARENTHESIS controlArg CLOSE_PARENTHESIS . OPEN_BRACE expression CLOSE_BRACE
    (28) elseIf -> ELSEIF OPEN_PARENTHESIS controlArg CLOSE_PARENTHESIS . OPEN_BRACE expression CLOSE_BRACE soloIf

    OPEN_BRACE      shift and go to state 185


state 151

    (29) else -> ELSE OPEN_BRACE expression CLOSE_BRACE .

    NAME            reduce using rule 29 (else -> ELSE OPEN_BRACE expression CLOSE_BRACE .)
    CONST           reduce using rule 29 (else -> ELSE OPEN_BRACE expression CLOSE_BRACE .)
    LET             reduce using rule 29 (else -> ELSE OPEN_BRACE expression CLOSE_BRACE .)
    VAR             reduce using rule 29 (else -> ELSE OPEN_BRACE expression CLOSE_BRACE .)
    WHILE           reduce using rule 29 (else -> ELSE OPEN_BRACE expression CLOSE_BRACE .)
    FOR             reduce using rule 29 (else -> ELSE OPEN_BRACE expression CLOSE_BRACE .)
    IF              reduce using rule 29 (else -> ELSE OPEN_BRACE expression CLOSE_BRACE .)
    $end            reduce using rule 29 (else -> ELSE OPEN_BRACE expression CLOSE_BRACE .)
    CLOSE_BRACE     reduce using rule 29 (else -> ELSE OPEN_BRACE expression CLOSE_BRACE .)


state 152

    (26) soloIf -> IF OPEN_PARENTHESIS controlArg CLOSE_PARENTHESIS OPEN_BRACE . expression CLOSE_BRACE
    (1) expression -> . variable
    (2) expression -> . variable expression
    (3) expression -> . dataStruct
    (4) expression -> . dataStruct expression
    (5) expression -> . controlStruct
    (6) expression -> . controlStruct expression
    (7) expression -> . methodsSet
    (8) expression -> . mapFunctions
    (9) expression -> . arrayFn
    (10) expression -> . declaration
    (11) variable -> . type NAME IGUAL datatype SEMICOLON
    (12) variable -> . type NAME IGUAL operations SEMICOLON
    (13) variable -> . NAME IGUAL datatype SEMICOLON
    (17) dataStruct -> . array
    (18) dataStruct -> . set
    (19) dataStruct -> . map
    (14) controlStruct -> . while
    (15) controlStruct -> . for
    (16) controlStruct -> . if
    (86) methodsSet -> . NAME POINT ADD OPEN_PARENTHESIS element CLOSE_PARENTHESIS SEMICOLON
    (87) methodsSet -> . NAME POINT DELETE OPEN_PARENTHESIS element CLOSE_PARENTHESIS SEMICOLON
    (88) methodsSet -> . NAME POINT CLEAR OPEN_PARENTHESIS CLOSE_PARENTHESIS SEMICOLON
    (74) mapFunctions -> . NAME POINT CLEAR OPEN_PARENTHESIS CLOSE_PARENTHESIS SEMICOLON
    (75) mapFunctions -> . NAME POINT GET OPEN_PARENTHESIS clave CLOSE_PARENTHESIS SEMICOLON
    (76) mapFunctions -> . NAME POINT HAS OPEN_PARENTHESIS clave CLOSE_PARENTHESIS SEMICOLON
    (77) arrayFn -> . NAME POINT POP OPEN_PARENTHESIS CLOSE_PARENTHESIS
    (78) arrayFn -> . NAME POINT PUSH OPEN_PARENTHESIS element CLOSE_PARENTHESIS
    (79) arrayFn -> . NAME POINT UNSHIFT OPEN_PARENTHESIS element CLOSE_PARENTHESIS
    (98) declaration -> . NAME IGUAL element
    (46) type -> . CONST
    (47) type -> . LET
    (48) type -> . VAR
    (57) array -> . type NAME IGUAL OPEN_BRACKET items CLOSE_BRACKET SEMICOLON
    (58) array -> . type NAME IGUAL NEW ARRAY OPEN_PARENTHESIS items CLOSE_PARENTHESIS SEMICOLON
    (80) set -> . type NAME IGUAL NEW SET OPEN_PARENTHESIS CLOSE_PARENTHESIS SEMICOLON
    (81) set -> . type NAME IGUAL NEW SET OPEN_PARENTHESIS OPEN_BRACKET items CLOSE_BRACKET CLOSE_PARENTHESIS SEMICOLON
    (82) set -> . type NAME IGUAL NEW SET OPEN_PARENTHESIS element CLOSE_PARENTHESIS SEMICOLON
    (83) set -> . NAME IGUAL NEW SET OPEN_PARENTHESIS CLOSE_PARENTHESIS SEMICOLON
    (84) set -> . NAME IGUAL NEW SET OPEN_PARENTHESIS OPEN_BRACKET items CLOSE_BRACKET CLOSE_PARENTHESIS SEMICOLON
    (85) set -> . NAME IGUAL NEW SET OPEN_PARENTHESIS element CLOSE_PARENTHESIS SEMICOLON
    (59) map -> . iniciarMap
    (60) map -> . escribirMap
    (61) map -> . generarMap
    (20) while -> . WHILE OPEN_PARENTHESIS controlArg CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE
    (21) while -> . WHILE OPEN_PARENTHESIS bool CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE
    (31) for -> . FOR OPEN_PARENTHESIS inicialization SEMICOLON controlArg SEMICOLON operations CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE
    (22) if -> . soloIf
    (23) if -> . soloIf elseIf
    (24) if -> . soloIf elseIf else
    (25) if -> . soloIf else
    (62) iniciarMap -> . variable IGUAL NEW MAP OPEN_PARENTHESIS CLOSE_PARENTHESIS SEMICOLON
    (63) escribirMap -> . variable IGUAL OPEN_BRACE claveValor CLOSE_BRACE
    (69) generarMap -> . variable IGUAL OPEN_BRACE tuplas CLOSE_BRACE
    (26) soloIf -> . IF OPEN_PARENTHESIS controlArg CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE

    NAME            shift and go to state 10
    CONST           shift and go to state 17
    LET             shift and go to state 18
    VAR             shift and go to state 19
    WHILE           shift and go to state 23
    FOR             shift and go to state 24
    IF              shift and go to state 26

    expression                     shift and go to state 186
    variable                       shift and go to state 2
    dataStruct                     shift and go to state 3
    controlStruct                  shift and go to state 4
    methodsSet                     shift and go to state 5
    mapFunctions                   shift and go to state 6
    arrayFn                        shift and go to state 7
    declaration                    shift and go to state 8
    type                           shift and go to state 9
    array                          shift and go to state 11
    set                            shift and go to state 12
    map                            shift and go to state 13
    while                          shift and go to state 14
    for                            shift and go to state 15
    if                             shift and go to state 16
    iniciarMap                     shift and go to state 20
    escribirMap                    shift and go to state 21
    generarMap                     shift and go to state 22
    soloIf                         shift and go to state 25

state 153

    (62) iniciarMap -> variable IGUAL NEW MAP OPEN_PARENTHESIS CLOSE_PARENTHESIS . SEMICOLON

    SEMICOLON       shift and go to state 187


state 154

    (64) claveValor -> clave COLON valor .
    (65) claveValor -> clave COLON valor . COMMA claveValor

    CLOSE_BRACE     reduce using rule 64 (claveValor -> clave COLON valor .)
    COMMA           shift and go to state 188


state 155

    (67) valor -> datatype .

    COMMA           reduce using rule 67 (valor -> datatype .)
    CLOSE_BRACE     reduce using rule 67 (valor -> datatype .)


state 156

    (68) valor -> dataStruct .

    COMMA           reduce using rule 68 (valor -> dataStruct .)
    CLOSE_BRACE     reduce using rule 68 (valor -> dataStruct .)


state 157

    (57) array -> type . NAME IGUAL OPEN_BRACKET items CLOSE_BRACKET SEMICOLON
    (58) array -> type . NAME IGUAL NEW ARRAY OPEN_PARENTHESIS items CLOSE_PARENTHESIS SEMICOLON
    (80) set -> type . NAME IGUAL NEW SET OPEN_PARENTHESIS CLOSE_PARENTHESIS SEMICOLON
    (81) set -> type . NAME IGUAL NEW SET OPEN_PARENTHESIS OPEN_BRACKET items CLOSE_BRACKET CLOSE_PARENTHESIS SEMICOLON
    (82) set -> type . NAME IGUAL NEW SET OPEN_PARENTHESIS element CLOSE_PARENTHESIS SEMICOLON
    (11) variable -> type . NAME IGUAL datatype SEMICOLON
    (12) variable -> type . NAME IGUAL operations SEMICOLON

    NAME            shift and go to state 189


state 158

    (83) set -> NAME . IGUAL NEW SET OPEN_PARENTHESIS CLOSE_PARENTHESIS SEMICOLON
    (84) set -> NAME . IGUAL NEW SET OPEN_PARENTHESIS OPEN_BRACKET items CLOSE_BRACKET CLOSE_PARENTHESIS SEMICOLON
    (85) set -> NAME . IGUAL NEW SET OPEN_PARENTHESIS element CLOSE_PARENTHESIS SEMICOLON
    (13) variable -> NAME . IGUAL datatype SEMICOLON

    IGUAL           shift and go to state 190


state 159

    (62) iniciarMap -> variable . IGUAL NEW MAP OPEN_PARENTHESIS CLOSE_PARENTHESIS SEMICOLON
    (63) escribirMap -> variable . IGUAL OPEN_BRACE claveValor CLOSE_BRACE
    (69) generarMap -> variable . IGUAL OPEN_BRACE tuplas CLOSE_BRACE

    IGUAL           shift and go to state 28


state 160

    (71) tuplas -> tupla COMMA tuplas .

    CLOSE_BRACE     reduce using rule 71 (tuplas -> tupla COMMA tuplas .)


state 161

    (72) tupla -> OPEN_BRACKET datatype CLOSE_BRACKET .

    COMMA           reduce using rule 72 (tupla -> OPEN_BRACKET datatype CLOSE_BRACKET .)
    CLOSE_BRACE     reduce using rule 72 (tupla -> OPEN_BRACKET datatype CLOSE_BRACKET .)


state 162

    (73) tupla -> OPEN_BRACKET datatype COMMA . datatype CLOSE_BRACKET
    (37) datatype -> . NUMBER
    (38) datatype -> . STRING
    (39) datatype -> . CHAR

    NUMBER          shift and go to state 80
    STRING          shift and go to state 81
    CHAR            shift and go to state 50

    datatype                       shift and go to state 191

state 163

    (35) operations -> NAME SUMA SUMA .

    SEMICOLON       reduce using rule 35 (operations -> NAME SUMA SUMA .)
    CLOSE_PARENTHESIS reduce using rule 35 (operations -> NAME SUMA SUMA .)


state 164

    (36) operations -> NAME RESTA RESTA .

    SEMICOLON       reduce using rule 36 (operations -> NAME RESTA RESTA .)
    CLOSE_PARENTHESIS reduce using rule 36 (operations -> NAME RESTA RESTA .)


state 165

    (57) array -> type NAME IGUAL OPEN_BRACKET items CLOSE_BRACKET . SEMICOLON

    SEMICOLON       shift and go to state 192


state 166

    (92) numeros -> NUMBER COMMA . numeros
    (91) numeros -> . NUMBER
    (92) numeros -> . NUMBER COMMA numeros

    NUMBER          shift and go to state 126

    numeros                        shift and go to state 193

state 167

    (94) cadena -> STRING COMMA . cadena
    (93) cadena -> . STRING
    (94) cadena -> . STRING COMMA cadena

    STRING          shift and go to state 127

    cadena                         shift and go to state 194

state 168

    (58) array -> type NAME IGUAL NEW ARRAY OPEN_PARENTHESIS . items CLOSE_PARENTHESIS SEMICOLON
    (89) items -> . numeros
    (90) items -> . cadena
    (91) numeros -> . NUMBER
    (92) numeros -> . NUMBER COMMA numeros
    (93) cadena -> . STRING
    (94) cadena -> . STRING COMMA cadena

    NUMBER          shift and go to state 126
    STRING          shift and go to state 127

    items                          shift and go to state 195
    numeros                        shift and go to state 124
    cadena                         shift and go to state 125

state 169

    (80) set -> type NAME IGUAL NEW SET OPEN_PARENTHESIS . CLOSE_PARENTHESIS SEMICOLON
    (81) set -> type NAME IGUAL NEW SET OPEN_PARENTHESIS . OPEN_BRACKET items CLOSE_BRACKET CLOSE_PARENTHESIS SEMICOLON
    (82) set -> type NAME IGUAL NEW SET OPEN_PARENTHESIS . element CLOSE_PARENTHESIS SEMICOLON
    (95) element -> . STRING
    (96) element -> . NUMBER
    (97) element -> . NAME

    CLOSE_PARENTHESIS shift and go to state 196
    OPEN_BRACKET    shift and go to state 197
    STRING          shift and go to state 64
    NUMBER          shift and go to state 65
    NAME            shift and go to state 44

    element                        shift and go to state 198

state 170

    (34) operations -> NUMBER operand NUMBER .

    SEMICOLON       reduce using rule 34 (operations -> NUMBER operand NUMBER .)
    CLOSE_PARENTHESIS reduce using rule 34 (operations -> NUMBER operand NUMBER .)


state 171

    (83) set -> NAME IGUAL NEW SET OPEN_PARENTHESIS CLOSE_PARENTHESIS . SEMICOLON

    SEMICOLON       shift and go to state 199


state 172

    (84) set -> NAME IGUAL NEW SET OPEN_PARENTHESIS OPEN_BRACKET . items CLOSE_BRACKET CLOSE_PARENTHESIS SEMICOLON
    (89) items -> . numeros
    (90) items -> . cadena
    (91) numeros -> . NUMBER
    (92) numeros -> . NUMBER COMMA numeros
    (93) cadena -> . STRING
    (94) cadena -> . STRING COMMA cadena

    NUMBER          shift and go to state 126
    STRING          shift and go to state 127

    items                          shift and go to state 200
    numeros                        shift and go to state 124
    cadena                         shift and go to state 125

state 173

    (85) set -> NAME IGUAL NEW SET OPEN_PARENTHESIS element . CLOSE_PARENTHESIS SEMICOLON

    CLOSE_PARENTHESIS shift and go to state 201


state 174

    (86) methodsSet -> NAME POINT ADD OPEN_PARENTHESIS element CLOSE_PARENTHESIS . SEMICOLON

    SEMICOLON       shift and go to state 202


state 175

    (87) methodsSet -> NAME POINT DELETE OPEN_PARENTHESIS element CLOSE_PARENTHESIS . SEMICOLON

    SEMICOLON       shift and go to state 203


state 176

    (88) methodsSet -> NAME POINT CLEAR OPEN_PARENTHESIS CLOSE_PARENTHESIS SEMICOLON .
    (74) mapFunctions -> NAME POINT CLEAR OPEN_PARENTHESIS CLOSE_PARENTHESIS SEMICOLON .

  ! reduce/reduce conflict for $end resolved using rule 74 (mapFunctions -> NAME POINT CLEAR OPEN_PARENTHESIS CLOSE_PARENTHESIS SEMICOLON .)
  ! reduce/reduce conflict for CLOSE_BRACE resolved using rule 74 (mapFunctions -> NAME POINT CLEAR OPEN_PARENTHESIS CLOSE_PARENTHESIS SEMICOLON .)
    $end            reduce using rule 74 (mapFunctions -> NAME POINT CLEAR OPEN_PARENTHESIS CLOSE_PARENTHESIS SEMICOLON .)
    CLOSE_BRACE     reduce using rule 74 (mapFunctions -> NAME POINT CLEAR OPEN_PARENTHESIS CLOSE_PARENTHESIS SEMICOLON .)

  ! $end            [ reduce using rule 88 (methodsSet -> NAME POINT CLEAR OPEN_PARENTHESIS CLOSE_PARENTHESIS SEMICOLON .) ]
  ! CLOSE_BRACE     [ reduce using rule 88 (methodsSet -> NAME POINT CLEAR OPEN_PARENTHESIS CLOSE_PARENTHESIS SEMICOLON .) ]


state 177

    (75) mapFunctions -> NAME POINT GET OPEN_PARENTHESIS clave CLOSE_PARENTHESIS . SEMICOLON

    SEMICOLON       shift and go to state 204


state 178

    (76) mapFunctions -> NAME POINT HAS OPEN_PARENTHESIS clave CLOSE_PARENTHESIS . SEMICOLON

    SEMICOLON       shift and go to state 205


state 179

    (78) arrayFn -> NAME POINT PUSH OPEN_PARENTHESIS element CLOSE_PARENTHESIS .

    $end            reduce using rule 78 (arrayFn -> NAME POINT PUSH OPEN_PARENTHESIS element CLOSE_PARENTHESIS .)
    CLOSE_BRACE     reduce using rule 78 (arrayFn -> NAME POINT PUSH OPEN_PARENTHESIS element CLOSE_PARENTHESIS .)


state 180

    (79) arrayFn -> NAME POINT UNSHIFT OPEN_PARENTHESIS element CLOSE_PARENTHESIS .

    $end            reduce using rule 79 (arrayFn -> NAME POINT UNSHIFT OPEN_PARENTHESIS element CLOSE_PARENTHESIS .)
    CLOSE_BRACE     reduce using rule 79 (arrayFn -> NAME POINT UNSHIFT OPEN_PARENTHESIS element CLOSE_PARENTHESIS .)


state 181

    (20) while -> WHILE OPEN_PARENTHESIS controlArg CLOSE_PARENTHESIS OPEN_BRACE expression . CLOSE_BRACE

    CLOSE_BRACE     shift and go to state 206


state 182

    (21) while -> WHILE OPEN_PARENTHESIS bool CLOSE_PARENTHESIS OPEN_BRACE expression . CLOSE_BRACE

    CLOSE_BRACE     shift and go to state 207


state 183

    (31) for -> FOR OPEN_PARENTHESIS inicialization SEMICOLON controlArg SEMICOLON . operations CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE
    (34) operations -> . NUMBER operand NUMBER
    (35) operations -> . NAME SUMA SUMA
    (36) operations -> . NAME RESTA RESTA

    NUMBER          shift and go to state 209
    NAME            shift and go to state 82

    operations                     shift and go to state 208

state 184

    (32) inicialization -> type NAME IGUAL NUMBER .

    SEMICOLON       reduce using rule 32 (inicialization -> type NAME IGUAL NUMBER .)


state 185

    (27) elseIf -> ELSEIF OPEN_PARENTHESIS controlArg CLOSE_PARENTHESIS OPEN_BRACE . expression CLOSE_BRACE
    (28) elseIf -> ELSEIF OPEN_PARENTHESIS controlArg CLOSE_PARENTHESIS OPEN_BRACE . expression CLOSE_BRACE soloIf
    (1) expression -> . variable
    (2) expression -> . variable expression
    (3) expression -> . dataStruct
    (4) expression -> . dataStruct expression
    (5) expression -> . controlStruct
    (6) expression -> . controlStruct expression
    (7) expression -> . methodsSet
    (8) expression -> . mapFunctions
    (9) expression -> . arrayFn
    (10) expression -> . declaration
    (11) variable -> . type NAME IGUAL datatype SEMICOLON
    (12) variable -> . type NAME IGUAL operations SEMICOLON
    (13) variable -> . NAME IGUAL datatype SEMICOLON
    (17) dataStruct -> . array
    (18) dataStruct -> . set
    (19) dataStruct -> . map
    (14) controlStruct -> . while
    (15) controlStruct -> . for
    (16) controlStruct -> . if
    (86) methodsSet -> . NAME POINT ADD OPEN_PARENTHESIS element CLOSE_PARENTHESIS SEMICOLON
    (87) methodsSet -> . NAME POINT DELETE OPEN_PARENTHESIS element CLOSE_PARENTHESIS SEMICOLON
    (88) methodsSet -> . NAME POINT CLEAR OPEN_PARENTHESIS CLOSE_PARENTHESIS SEMICOLON
    (74) mapFunctions -> . NAME POINT CLEAR OPEN_PARENTHESIS CLOSE_PARENTHESIS SEMICOLON
    (75) mapFunctions -> . NAME POINT GET OPEN_PARENTHESIS clave CLOSE_PARENTHESIS SEMICOLON
    (76) mapFunctions -> . NAME POINT HAS OPEN_PARENTHESIS clave CLOSE_PARENTHESIS SEMICOLON
    (77) arrayFn -> . NAME POINT POP OPEN_PARENTHESIS CLOSE_PARENTHESIS
    (78) arrayFn -> . NAME POINT PUSH OPEN_PARENTHESIS element CLOSE_PARENTHESIS
    (79) arrayFn -> . NAME POINT UNSHIFT OPEN_PARENTHESIS element CLOSE_PARENTHESIS
    (98) declaration -> . NAME IGUAL element
    (46) type -> . CONST
    (47) type -> . LET
    (48) type -> . VAR
    (57) array -> . type NAME IGUAL OPEN_BRACKET items CLOSE_BRACKET SEMICOLON
    (58) array -> . type NAME IGUAL NEW ARRAY OPEN_PARENTHESIS items CLOSE_PARENTHESIS SEMICOLON
    (80) set -> . type NAME IGUAL NEW SET OPEN_PARENTHESIS CLOSE_PARENTHESIS SEMICOLON
    (81) set -> . type NAME IGUAL NEW SET OPEN_PARENTHESIS OPEN_BRACKET items CLOSE_BRACKET CLOSE_PARENTHESIS SEMICOLON
    (82) set -> . type NAME IGUAL NEW SET OPEN_PARENTHESIS element CLOSE_PARENTHESIS SEMICOLON
    (83) set -> . NAME IGUAL NEW SET OPEN_PARENTHESIS CLOSE_PARENTHESIS SEMICOLON
    (84) set -> . NAME IGUAL NEW SET OPEN_PARENTHESIS OPEN_BRACKET items CLOSE_BRACKET CLOSE_PARENTHESIS SEMICOLON
    (85) set -> . NAME IGUAL NEW SET OPEN_PARENTHESIS element CLOSE_PARENTHESIS SEMICOLON
    (59) map -> . iniciarMap
    (60) map -> . escribirMap
    (61) map -> . generarMap
    (20) while -> . WHILE OPEN_PARENTHESIS controlArg CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE
    (21) while -> . WHILE OPEN_PARENTHESIS bool CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE
    (31) for -> . FOR OPEN_PARENTHESIS inicialization SEMICOLON controlArg SEMICOLON operations CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE
    (22) if -> . soloIf
    (23) if -> . soloIf elseIf
    (24) if -> . soloIf elseIf else
    (25) if -> . soloIf else
    (62) iniciarMap -> . variable IGUAL NEW MAP OPEN_PARENTHESIS CLOSE_PARENTHESIS SEMICOLON
    (63) escribirMap -> . variable IGUAL OPEN_BRACE claveValor CLOSE_BRACE
    (69) generarMap -> . variable IGUAL OPEN_BRACE tuplas CLOSE_BRACE
    (26) soloIf -> . IF OPEN_PARENTHESIS controlArg CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE

    NAME            shift and go to state 10
    CONST           shift and go to state 17
    LET             shift and go to state 18
    VAR             shift and go to state 19
    WHILE           shift and go to state 23
    FOR             shift and go to state 24
    IF              shift and go to state 26

    expression                     shift and go to state 210
    soloIf                         shift and go to state 25
    variable                       shift and go to state 2
    dataStruct                     shift and go to state 3
    controlStruct                  shift and go to state 4
    methodsSet                     shift and go to state 5
    mapFunctions                   shift and go to state 6
    arrayFn                        shift and go to state 7
    declaration                    shift and go to state 8
    type                           shift and go to state 9
    array                          shift and go to state 11
    set                            shift and go to state 12
    map                            shift and go to state 13
    while                          shift and go to state 14
    for                            shift and go to state 15
    if                             shift and go to state 16
    iniciarMap                     shift and go to state 20
    escribirMap                    shift and go to state 21
    generarMap                     shift and go to state 22

state 186

    (26) soloIf -> IF OPEN_PARENTHESIS controlArg CLOSE_PARENTHESIS OPEN_BRACE expression . CLOSE_BRACE

    CLOSE_BRACE     shift and go to state 211


state 187

    (62) iniciarMap -> variable IGUAL NEW MAP OPEN_PARENTHESIS CLOSE_PARENTHESIS SEMICOLON .

    NAME            reduce using rule 62 (iniciarMap -> variable IGUAL NEW MAP OPEN_PARENTHESIS CLOSE_PARENTHESIS SEMICOLON .)
    CONST           reduce using rule 62 (iniciarMap -> variable IGUAL NEW MAP OPEN_PARENTHESIS CLOSE_PARENTHESIS SEMICOLON .)
    LET             reduce using rule 62 (iniciarMap -> variable IGUAL NEW MAP OPEN_PARENTHESIS CLOSE_PARENTHESIS SEMICOLON .)
    VAR             reduce using rule 62 (iniciarMap -> variable IGUAL NEW MAP OPEN_PARENTHESIS CLOSE_PARENTHESIS SEMICOLON .)
    WHILE           reduce using rule 62 (iniciarMap -> variable IGUAL NEW MAP OPEN_PARENTHESIS CLOSE_PARENTHESIS SEMICOLON .)
    FOR             reduce using rule 62 (iniciarMap -> variable IGUAL NEW MAP OPEN_PARENTHESIS CLOSE_PARENTHESIS SEMICOLON .)
    IF              reduce using rule 62 (iniciarMap -> variable IGUAL NEW MAP OPEN_PARENTHESIS CLOSE_PARENTHESIS SEMICOLON .)
    $end            reduce using rule 62 (iniciarMap -> variable IGUAL NEW MAP OPEN_PARENTHESIS CLOSE_PARENTHESIS SEMICOLON .)
    CLOSE_BRACE     reduce using rule 62 (iniciarMap -> variable IGUAL NEW MAP OPEN_PARENTHESIS CLOSE_PARENTHESIS SEMICOLON .)
    COMMA           reduce using rule 62 (iniciarMap -> variable IGUAL NEW MAP OPEN_PARENTHESIS CLOSE_PARENTHESIS SEMICOLON .)


state 188

    (65) claveValor -> clave COLON valor COMMA . claveValor
    (64) claveValor -> . clave COLON valor
    (65) claveValor -> . clave COLON valor COMMA claveValor
    (66) clave -> . datatype
    (37) datatype -> . NUMBER
    (38) datatype -> . STRING
    (39) datatype -> . CHAR

    NUMBER          shift and go to state 80
    STRING          shift and go to state 81
    CHAR            shift and go to state 50

    clave                          shift and go to state 76
    claveValor                     shift and go to state 212
    datatype                       shift and go to state 78

state 189

    (57) array -> type NAME . IGUAL OPEN_BRACKET items CLOSE_BRACKET SEMICOLON
    (58) array -> type NAME . IGUAL NEW ARRAY OPEN_PARENTHESIS items CLOSE_PARENTHESIS SEMICOLON
    (80) set -> type NAME . IGUAL NEW SET OPEN_PARENTHESIS CLOSE_PARENTHESIS SEMICOLON
    (81) set -> type NAME . IGUAL NEW SET OPEN_PARENTHESIS OPEN_BRACKET items CLOSE_BRACKET CLOSE_PARENTHESIS SEMICOLON
    (82) set -> type NAME . IGUAL NEW SET OPEN_PARENTHESIS element CLOSE_PARENTHESIS SEMICOLON
    (11) variable -> type NAME . IGUAL datatype SEMICOLON
    (12) variable -> type NAME . IGUAL operations SEMICOLON

    IGUAL           shift and go to state 213


state 190

    (83) set -> NAME IGUAL . NEW SET OPEN_PARENTHESIS CLOSE_PARENTHESIS SEMICOLON
    (84) set -> NAME IGUAL . NEW SET OPEN_PARENTHESIS OPEN_BRACKET items CLOSE_BRACKET CLOSE_PARENTHESIS SEMICOLON
    (85) set -> NAME IGUAL . NEW SET OPEN_PARENTHESIS element CLOSE_PARENTHESIS SEMICOLON
    (13) variable -> NAME IGUAL . datatype SEMICOLON
    (37) datatype -> . NUMBER
    (38) datatype -> . STRING
    (39) datatype -> . CHAR

    NEW             shift and go to state 47
    NUMBER          shift and go to state 80
    STRING          shift and go to state 81
    CHAR            shift and go to state 50

    datatype                       shift and go to state 45

state 191

    (73) tupla -> OPEN_BRACKET datatype COMMA datatype . CLOSE_BRACKET

    CLOSE_BRACKET   shift and go to state 214


state 192

    (57) array -> type NAME IGUAL OPEN_BRACKET items CLOSE_BRACKET SEMICOLON .

    NAME            reduce using rule 57 (array -> type NAME IGUAL OPEN_BRACKET items CLOSE_BRACKET SEMICOLON .)
    CONST           reduce using rule 57 (array -> type NAME IGUAL OPEN_BRACKET items CLOSE_BRACKET SEMICOLON .)
    LET             reduce using rule 57 (array -> type NAME IGUAL OPEN_BRACKET items CLOSE_BRACKET SEMICOLON .)
    VAR             reduce using rule 57 (array -> type NAME IGUAL OPEN_BRACKET items CLOSE_BRACKET SEMICOLON .)
    WHILE           reduce using rule 57 (array -> type NAME IGUAL OPEN_BRACKET items CLOSE_BRACKET SEMICOLON .)
    FOR             reduce using rule 57 (array -> type NAME IGUAL OPEN_BRACKET items CLOSE_BRACKET SEMICOLON .)
    IF              reduce using rule 57 (array -> type NAME IGUAL OPEN_BRACKET items CLOSE_BRACKET SEMICOLON .)
    $end            reduce using rule 57 (array -> type NAME IGUAL OPEN_BRACKET items CLOSE_BRACKET SEMICOLON .)
    CLOSE_BRACE     reduce using rule 57 (array -> type NAME IGUAL OPEN_BRACKET items CLOSE_BRACKET SEMICOLON .)
    COMMA           reduce using rule 57 (array -> type NAME IGUAL OPEN_BRACKET items CLOSE_BRACKET SEMICOLON .)


state 193

    (92) numeros -> NUMBER COMMA numeros .

    CLOSE_BRACKET   reduce using rule 92 (numeros -> NUMBER COMMA numeros .)
    CLOSE_PARENTHESIS reduce using rule 92 (numeros -> NUMBER COMMA numeros .)


state 194

    (94) cadena -> STRING COMMA cadena .

    CLOSE_BRACKET   reduce using rule 94 (cadena -> STRING COMMA cadena .)
    CLOSE_PARENTHESIS reduce using rule 94 (cadena -> STRING COMMA cadena .)


state 195

    (58) array -> type NAME IGUAL NEW ARRAY OPEN_PARENTHESIS items . CLOSE_PARENTHESIS SEMICOLON

    CLOSE_PARENTHESIS shift and go to state 215


state 196

    (80) set -> type NAME IGUAL NEW SET OPEN_PARENTHESIS CLOSE_PARENTHESIS . SEMICOLON

    SEMICOLON       shift and go to state 216


state 197

    (81) set -> type NAME IGUAL NEW SET OPEN_PARENTHESIS OPEN_BRACKET . items CLOSE_BRACKET CLOSE_PARENTHESIS SEMICOLON
    (89) items -> . numeros
    (90) items -> . cadena
    (91) numeros -> . NUMBER
    (92) numeros -> . NUMBER COMMA numeros
    (93) cadena -> . STRING
    (94) cadena -> . STRING COMMA cadena

    NUMBER          shift and go to state 126
    STRING          shift and go to state 127

    items                          shift and go to state 217
    numeros                        shift and go to state 124
    cadena                         shift and go to state 125

state 198

    (82) set -> type NAME IGUAL NEW SET OPEN_PARENTHESIS element . CLOSE_PARENTHESIS SEMICOLON

    CLOSE_PARENTHESIS shift and go to state 218


state 199

    (83) set -> NAME IGUAL NEW SET OPEN_PARENTHESIS CLOSE_PARENTHESIS SEMICOLON .

    NAME            reduce using rule 83 (set -> NAME IGUAL NEW SET OPEN_PARENTHESIS CLOSE_PARENTHESIS SEMICOLON .)
    CONST           reduce using rule 83 (set -> NAME IGUAL NEW SET OPEN_PARENTHESIS CLOSE_PARENTHESIS SEMICOLON .)
    LET             reduce using rule 83 (set -> NAME IGUAL NEW SET OPEN_PARENTHESIS CLOSE_PARENTHESIS SEMICOLON .)
    VAR             reduce using rule 83 (set -> NAME IGUAL NEW SET OPEN_PARENTHESIS CLOSE_PARENTHESIS SEMICOLON .)
    WHILE           reduce using rule 83 (set -> NAME IGUAL NEW SET OPEN_PARENTHESIS CLOSE_PARENTHESIS SEMICOLON .)
    FOR             reduce using rule 83 (set -> NAME IGUAL NEW SET OPEN_PARENTHESIS CLOSE_PARENTHESIS SEMICOLON .)
    IF              reduce using rule 83 (set -> NAME IGUAL NEW SET OPEN_PARENTHESIS CLOSE_PARENTHESIS SEMICOLON .)
    $end            reduce using rule 83 (set -> NAME IGUAL NEW SET OPEN_PARENTHESIS CLOSE_PARENTHESIS SEMICOLON .)
    CLOSE_BRACE     reduce using rule 83 (set -> NAME IGUAL NEW SET OPEN_PARENTHESIS CLOSE_PARENTHESIS SEMICOLON .)
    COMMA           reduce using rule 83 (set -> NAME IGUAL NEW SET OPEN_PARENTHESIS CLOSE_PARENTHESIS SEMICOLON .)


state 200

    (84) set -> NAME IGUAL NEW SET OPEN_PARENTHESIS OPEN_BRACKET items . CLOSE_BRACKET CLOSE_PARENTHESIS SEMICOLON

    CLOSE_BRACKET   shift and go to state 219


state 201

    (85) set -> NAME IGUAL NEW SET OPEN_PARENTHESIS element CLOSE_PARENTHESIS . SEMICOLON

    SEMICOLON       shift and go to state 220


state 202

    (86) methodsSet -> NAME POINT ADD OPEN_PARENTHESIS element CLOSE_PARENTHESIS SEMICOLON .

    $end            reduce using rule 86 (methodsSet -> NAME POINT ADD OPEN_PARENTHESIS element CLOSE_PARENTHESIS SEMICOLON .)
    CLOSE_BRACE     reduce using rule 86 (methodsSet -> NAME POINT ADD OPEN_PARENTHESIS element CLOSE_PARENTHESIS SEMICOLON .)


state 203

    (87) methodsSet -> NAME POINT DELETE OPEN_PARENTHESIS element CLOSE_PARENTHESIS SEMICOLON .

    $end            reduce using rule 87 (methodsSet -> NAME POINT DELETE OPEN_PARENTHESIS element CLOSE_PARENTHESIS SEMICOLON .)
    CLOSE_BRACE     reduce using rule 87 (methodsSet -> NAME POINT DELETE OPEN_PARENTHESIS element CLOSE_PARENTHESIS SEMICOLON .)


state 204

    (75) mapFunctions -> NAME POINT GET OPEN_PARENTHESIS clave CLOSE_PARENTHESIS SEMICOLON .

    $end            reduce using rule 75 (mapFunctions -> NAME POINT GET OPEN_PARENTHESIS clave CLOSE_PARENTHESIS SEMICOLON .)
    CLOSE_BRACE     reduce using rule 75 (mapFunctions -> NAME POINT GET OPEN_PARENTHESIS clave CLOSE_PARENTHESIS SEMICOLON .)


state 205

    (76) mapFunctions -> NAME POINT HAS OPEN_PARENTHESIS clave CLOSE_PARENTHESIS SEMICOLON .

    $end            reduce using rule 76 (mapFunctions -> NAME POINT HAS OPEN_PARENTHESIS clave CLOSE_PARENTHESIS SEMICOLON .)
    CLOSE_BRACE     reduce using rule 76 (mapFunctions -> NAME POINT HAS OPEN_PARENTHESIS clave CLOSE_PARENTHESIS SEMICOLON .)


state 206

    (20) while -> WHILE OPEN_PARENTHESIS controlArg CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE .

    NAME            reduce using rule 20 (while -> WHILE OPEN_PARENTHESIS controlArg CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE .)
    CONST           reduce using rule 20 (while -> WHILE OPEN_PARENTHESIS controlArg CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE .)
    LET             reduce using rule 20 (while -> WHILE OPEN_PARENTHESIS controlArg CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE .)
    VAR             reduce using rule 20 (while -> WHILE OPEN_PARENTHESIS controlArg CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE .)
    WHILE           reduce using rule 20 (while -> WHILE OPEN_PARENTHESIS controlArg CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE .)
    FOR             reduce using rule 20 (while -> WHILE OPEN_PARENTHESIS controlArg CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE .)
    IF              reduce using rule 20 (while -> WHILE OPEN_PARENTHESIS controlArg CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE .)
    $end            reduce using rule 20 (while -> WHILE OPEN_PARENTHESIS controlArg CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE .)
    CLOSE_BRACE     reduce using rule 20 (while -> WHILE OPEN_PARENTHESIS controlArg CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE .)


state 207

    (21) while -> WHILE OPEN_PARENTHESIS bool CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE .

    NAME            reduce using rule 21 (while -> WHILE OPEN_PARENTHESIS bool CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE .)
    CONST           reduce using rule 21 (while -> WHILE OPEN_PARENTHESIS bool CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE .)
    LET             reduce using rule 21 (while -> WHILE OPEN_PARENTHESIS bool CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE .)
    VAR             reduce using rule 21 (while -> WHILE OPEN_PARENTHESIS bool CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE .)
    WHILE           reduce using rule 21 (while -> WHILE OPEN_PARENTHESIS bool CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE .)
    FOR             reduce using rule 21 (while -> WHILE OPEN_PARENTHESIS bool CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE .)
    IF              reduce using rule 21 (while -> WHILE OPEN_PARENTHESIS bool CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE .)
    $end            reduce using rule 21 (while -> WHILE OPEN_PARENTHESIS bool CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE .)
    CLOSE_BRACE     reduce using rule 21 (while -> WHILE OPEN_PARENTHESIS bool CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE .)


state 208

    (31) for -> FOR OPEN_PARENTHESIS inicialization SEMICOLON controlArg SEMICOLON operations . CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE

    CLOSE_PARENTHESIS shift and go to state 221


state 209

    (34) operations -> NUMBER . operand NUMBER
    (40) operand -> . SUMA
    (41) operand -> . RESTA
    (42) operand -> . MULTIPLICACION
    (43) operand -> . DIVISION

    SUMA            shift and go to state 131
    RESTA           shift and go to state 132
    MULTIPLICACION  shift and go to state 133
    DIVISION        shift and go to state 134

    operand                        shift and go to state 130

state 210

    (27) elseIf -> ELSEIF OPEN_PARENTHESIS controlArg CLOSE_PARENTHESIS OPEN_BRACE expression . CLOSE_BRACE
    (28) elseIf -> ELSEIF OPEN_PARENTHESIS controlArg CLOSE_PARENTHESIS OPEN_BRACE expression . CLOSE_BRACE soloIf

    CLOSE_BRACE     shift and go to state 222


state 211

    (26) soloIf -> IF OPEN_PARENTHESIS controlArg CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE .

    ELSEIF          reduce using rule 26 (soloIf -> IF OPEN_PARENTHESIS controlArg CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE .)
    ELSE            reduce using rule 26 (soloIf -> IF OPEN_PARENTHESIS controlArg CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE .)
    NAME            reduce using rule 26 (soloIf -> IF OPEN_PARENTHESIS controlArg CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE .)
    CONST           reduce using rule 26 (soloIf -> IF OPEN_PARENTHESIS controlArg CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE .)
    LET             reduce using rule 26 (soloIf -> IF OPEN_PARENTHESIS controlArg CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE .)
    VAR             reduce using rule 26 (soloIf -> IF OPEN_PARENTHESIS controlArg CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE .)
    WHILE           reduce using rule 26 (soloIf -> IF OPEN_PARENTHESIS controlArg CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE .)
    FOR             reduce using rule 26 (soloIf -> IF OPEN_PARENTHESIS controlArg CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE .)
    IF              reduce using rule 26 (soloIf -> IF OPEN_PARENTHESIS controlArg CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE .)
    $end            reduce using rule 26 (soloIf -> IF OPEN_PARENTHESIS controlArg CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE .)
    CLOSE_BRACE     reduce using rule 26 (soloIf -> IF OPEN_PARENTHESIS controlArg CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE .)


state 212

    (65) claveValor -> clave COLON valor COMMA claveValor .

    CLOSE_BRACE     reduce using rule 65 (claveValor -> clave COLON valor COMMA claveValor .)


state 213

    (57) array -> type NAME IGUAL . OPEN_BRACKET items CLOSE_BRACKET SEMICOLON
    (58) array -> type NAME IGUAL . NEW ARRAY OPEN_PARENTHESIS items CLOSE_PARENTHESIS SEMICOLON
    (80) set -> type NAME IGUAL . NEW SET OPEN_PARENTHESIS CLOSE_PARENTHESIS SEMICOLON
    (81) set -> type NAME IGUAL . NEW SET OPEN_PARENTHESIS OPEN_BRACKET items CLOSE_BRACKET CLOSE_PARENTHESIS SEMICOLON
    (82) set -> type NAME IGUAL . NEW SET OPEN_PARENTHESIS element CLOSE_PARENTHESIS SEMICOLON
    (11) variable -> type NAME IGUAL . datatype SEMICOLON
    (12) variable -> type NAME IGUAL . operations SEMICOLON
    (37) datatype -> . NUMBER
    (38) datatype -> . STRING
    (39) datatype -> . CHAR
    (34) operations -> . NUMBER operand NUMBER
    (35) operations -> . NAME SUMA SUMA
    (36) operations -> . NAME RESTA RESTA

    OPEN_BRACKET    shift and go to state 85
    NEW             shift and go to state 86
    NUMBER          shift and go to state 87
    STRING          shift and go to state 81
    CHAR            shift and go to state 50
    NAME            shift and go to state 82

    datatype                       shift and go to state 83
    operations                     shift and go to state 84

state 214

    (73) tupla -> OPEN_BRACKET datatype COMMA datatype CLOSE_BRACKET .

    COMMA           reduce using rule 73 (tupla -> OPEN_BRACKET datatype COMMA datatype CLOSE_BRACKET .)
    CLOSE_BRACE     reduce using rule 73 (tupla -> OPEN_BRACKET datatype COMMA datatype CLOSE_BRACKET .)


state 215

    (58) array -> type NAME IGUAL NEW ARRAY OPEN_PARENTHESIS items CLOSE_PARENTHESIS . SEMICOLON

    SEMICOLON       shift and go to state 223


state 216

    (80) set -> type NAME IGUAL NEW SET OPEN_PARENTHESIS CLOSE_PARENTHESIS SEMICOLON .

    NAME            reduce using rule 80 (set -> type NAME IGUAL NEW SET OPEN_PARENTHESIS CLOSE_PARENTHESIS SEMICOLON .)
    CONST           reduce using rule 80 (set -> type NAME IGUAL NEW SET OPEN_PARENTHESIS CLOSE_PARENTHESIS SEMICOLON .)
    LET             reduce using rule 80 (set -> type NAME IGUAL NEW SET OPEN_PARENTHESIS CLOSE_PARENTHESIS SEMICOLON .)
    VAR             reduce using rule 80 (set -> type NAME IGUAL NEW SET OPEN_PARENTHESIS CLOSE_PARENTHESIS SEMICOLON .)
    WHILE           reduce using rule 80 (set -> type NAME IGUAL NEW SET OPEN_PARENTHESIS CLOSE_PARENTHESIS SEMICOLON .)
    FOR             reduce using rule 80 (set -> type NAME IGUAL NEW SET OPEN_PARENTHESIS CLOSE_PARENTHESIS SEMICOLON .)
    IF              reduce using rule 80 (set -> type NAME IGUAL NEW SET OPEN_PARENTHESIS CLOSE_PARENTHESIS SEMICOLON .)
    $end            reduce using rule 80 (set -> type NAME IGUAL NEW SET OPEN_PARENTHESIS CLOSE_PARENTHESIS SEMICOLON .)
    CLOSE_BRACE     reduce using rule 80 (set -> type NAME IGUAL NEW SET OPEN_PARENTHESIS CLOSE_PARENTHESIS SEMICOLON .)
    COMMA           reduce using rule 80 (set -> type NAME IGUAL NEW SET OPEN_PARENTHESIS CLOSE_PARENTHESIS SEMICOLON .)


state 217

    (81) set -> type NAME IGUAL NEW SET OPEN_PARENTHESIS OPEN_BRACKET items . CLOSE_BRACKET CLOSE_PARENTHESIS SEMICOLON

    CLOSE_BRACKET   shift and go to state 224


state 218

    (82) set -> type NAME IGUAL NEW SET OPEN_PARENTHESIS element CLOSE_PARENTHESIS . SEMICOLON

    SEMICOLON       shift and go to state 225


state 219

    (84) set -> NAME IGUAL NEW SET OPEN_PARENTHESIS OPEN_BRACKET items CLOSE_BRACKET . CLOSE_PARENTHESIS SEMICOLON

    CLOSE_PARENTHESIS shift and go to state 226


state 220

    (85) set -> NAME IGUAL NEW SET OPEN_PARENTHESIS element CLOSE_PARENTHESIS SEMICOLON .

    NAME            reduce using rule 85 (set -> NAME IGUAL NEW SET OPEN_PARENTHESIS element CLOSE_PARENTHESIS SEMICOLON .)
    CONST           reduce using rule 85 (set -> NAME IGUAL NEW SET OPEN_PARENTHESIS element CLOSE_PARENTHESIS SEMICOLON .)
    LET             reduce using rule 85 (set -> NAME IGUAL NEW SET OPEN_PARENTHESIS element CLOSE_PARENTHESIS SEMICOLON .)
    VAR             reduce using rule 85 (set -> NAME IGUAL NEW SET OPEN_PARENTHESIS element CLOSE_PARENTHESIS SEMICOLON .)
    WHILE           reduce using rule 85 (set -> NAME IGUAL NEW SET OPEN_PARENTHESIS element CLOSE_PARENTHESIS SEMICOLON .)
    FOR             reduce using rule 85 (set -> NAME IGUAL NEW SET OPEN_PARENTHESIS element CLOSE_PARENTHESIS SEMICOLON .)
    IF              reduce using rule 85 (set -> NAME IGUAL NEW SET OPEN_PARENTHESIS element CLOSE_PARENTHESIS SEMICOLON .)
    $end            reduce using rule 85 (set -> NAME IGUAL NEW SET OPEN_PARENTHESIS element CLOSE_PARENTHESIS SEMICOLON .)
    CLOSE_BRACE     reduce using rule 85 (set -> NAME IGUAL NEW SET OPEN_PARENTHESIS element CLOSE_PARENTHESIS SEMICOLON .)
    COMMA           reduce using rule 85 (set -> NAME IGUAL NEW SET OPEN_PARENTHESIS element CLOSE_PARENTHESIS SEMICOLON .)


state 221

    (31) for -> FOR OPEN_PARENTHESIS inicialization SEMICOLON controlArg SEMICOLON operations CLOSE_PARENTHESIS . OPEN_BRACE expression CLOSE_BRACE

    OPEN_BRACE      shift and go to state 227


state 222

    (27) elseIf -> ELSEIF OPEN_PARENTHESIS controlArg CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE .
    (28) elseIf -> ELSEIF OPEN_PARENTHESIS controlArg CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE . soloIf
    (26) soloIf -> . IF OPEN_PARENTHESIS controlArg CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE

  ! shift/reduce conflict for IF resolved as shift
    ELSE            reduce using rule 27 (elseIf -> ELSEIF OPEN_PARENTHESIS controlArg CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE .)
    NAME            reduce using rule 27 (elseIf -> ELSEIF OPEN_PARENTHESIS controlArg CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE .)
    CONST           reduce using rule 27 (elseIf -> ELSEIF OPEN_PARENTHESIS controlArg CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE .)
    LET             reduce using rule 27 (elseIf -> ELSEIF OPEN_PARENTHESIS controlArg CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE .)
    VAR             reduce using rule 27 (elseIf -> ELSEIF OPEN_PARENTHESIS controlArg CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE .)
    WHILE           reduce using rule 27 (elseIf -> ELSEIF OPEN_PARENTHESIS controlArg CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE .)
    FOR             reduce using rule 27 (elseIf -> ELSEIF OPEN_PARENTHESIS controlArg CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE .)
    $end            reduce using rule 27 (elseIf -> ELSEIF OPEN_PARENTHESIS controlArg CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE .)
    CLOSE_BRACE     reduce using rule 27 (elseIf -> ELSEIF OPEN_PARENTHESIS controlArg CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE .)
    IF              shift and go to state 26

  ! IF              [ reduce using rule 27 (elseIf -> ELSEIF OPEN_PARENTHESIS controlArg CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE .) ]

    soloIf                         shift and go to state 228

state 223

    (58) array -> type NAME IGUAL NEW ARRAY OPEN_PARENTHESIS items CLOSE_PARENTHESIS SEMICOLON .

    NAME            reduce using rule 58 (array -> type NAME IGUAL NEW ARRAY OPEN_PARENTHESIS items CLOSE_PARENTHESIS SEMICOLON .)
    CONST           reduce using rule 58 (array -> type NAME IGUAL NEW ARRAY OPEN_PARENTHESIS items CLOSE_PARENTHESIS SEMICOLON .)
    LET             reduce using rule 58 (array -> type NAME IGUAL NEW ARRAY OPEN_PARENTHESIS items CLOSE_PARENTHESIS SEMICOLON .)
    VAR             reduce using rule 58 (array -> type NAME IGUAL NEW ARRAY OPEN_PARENTHESIS items CLOSE_PARENTHESIS SEMICOLON .)
    WHILE           reduce using rule 58 (array -> type NAME IGUAL NEW ARRAY OPEN_PARENTHESIS items CLOSE_PARENTHESIS SEMICOLON .)
    FOR             reduce using rule 58 (array -> type NAME IGUAL NEW ARRAY OPEN_PARENTHESIS items CLOSE_PARENTHESIS SEMICOLON .)
    IF              reduce using rule 58 (array -> type NAME IGUAL NEW ARRAY OPEN_PARENTHESIS items CLOSE_PARENTHESIS SEMICOLON .)
    $end            reduce using rule 58 (array -> type NAME IGUAL NEW ARRAY OPEN_PARENTHESIS items CLOSE_PARENTHESIS SEMICOLON .)
    CLOSE_BRACE     reduce using rule 58 (array -> type NAME IGUAL NEW ARRAY OPEN_PARENTHESIS items CLOSE_PARENTHESIS SEMICOLON .)
    COMMA           reduce using rule 58 (array -> type NAME IGUAL NEW ARRAY OPEN_PARENTHESIS items CLOSE_PARENTHESIS SEMICOLON .)


state 224

    (81) set -> type NAME IGUAL NEW SET OPEN_PARENTHESIS OPEN_BRACKET items CLOSE_BRACKET . CLOSE_PARENTHESIS SEMICOLON

    CLOSE_PARENTHESIS shift and go to state 229


state 225

    (82) set -> type NAME IGUAL NEW SET OPEN_PARENTHESIS element CLOSE_PARENTHESIS SEMICOLON .

    NAME            reduce using rule 82 (set -> type NAME IGUAL NEW SET OPEN_PARENTHESIS element CLOSE_PARENTHESIS SEMICOLON .)
    CONST           reduce using rule 82 (set -> type NAME IGUAL NEW SET OPEN_PARENTHESIS element CLOSE_PARENTHESIS SEMICOLON .)
    LET             reduce using rule 82 (set -> type NAME IGUAL NEW SET OPEN_PARENTHESIS element CLOSE_PARENTHESIS SEMICOLON .)
    VAR             reduce using rule 82 (set -> type NAME IGUAL NEW SET OPEN_PARENTHESIS element CLOSE_PARENTHESIS SEMICOLON .)
    WHILE           reduce using rule 82 (set -> type NAME IGUAL NEW SET OPEN_PARENTHESIS element CLOSE_PARENTHESIS SEMICOLON .)
    FOR             reduce using rule 82 (set -> type NAME IGUAL NEW SET OPEN_PARENTHESIS element CLOSE_PARENTHESIS SEMICOLON .)
    IF              reduce using rule 82 (set -> type NAME IGUAL NEW SET OPEN_PARENTHESIS element CLOSE_PARENTHESIS SEMICOLON .)
    $end            reduce using rule 82 (set -> type NAME IGUAL NEW SET OPEN_PARENTHESIS element CLOSE_PARENTHESIS SEMICOLON .)
    CLOSE_BRACE     reduce using rule 82 (set -> type NAME IGUAL NEW SET OPEN_PARENTHESIS element CLOSE_PARENTHESIS SEMICOLON .)
    COMMA           reduce using rule 82 (set -> type NAME IGUAL NEW SET OPEN_PARENTHESIS element CLOSE_PARENTHESIS SEMICOLON .)


state 226

    (84) set -> NAME IGUAL NEW SET OPEN_PARENTHESIS OPEN_BRACKET items CLOSE_BRACKET CLOSE_PARENTHESIS . SEMICOLON

    SEMICOLON       shift and go to state 230


state 227

    (31) for -> FOR OPEN_PARENTHESIS inicialization SEMICOLON controlArg SEMICOLON operations CLOSE_PARENTHESIS OPEN_BRACE . expression CLOSE_BRACE
    (1) expression -> . variable
    (2) expression -> . variable expression
    (3) expression -> . dataStruct
    (4) expression -> . dataStruct expression
    (5) expression -> . controlStruct
    (6) expression -> . controlStruct expression
    (7) expression -> . methodsSet
    (8) expression -> . mapFunctions
    (9) expression -> . arrayFn
    (10) expression -> . declaration
    (11) variable -> . type NAME IGUAL datatype SEMICOLON
    (12) variable -> . type NAME IGUAL operations SEMICOLON
    (13) variable -> . NAME IGUAL datatype SEMICOLON
    (17) dataStruct -> . array
    (18) dataStruct -> . set
    (19) dataStruct -> . map
    (14) controlStruct -> . while
    (15) controlStruct -> . for
    (16) controlStruct -> . if
    (86) methodsSet -> . NAME POINT ADD OPEN_PARENTHESIS element CLOSE_PARENTHESIS SEMICOLON
    (87) methodsSet -> . NAME POINT DELETE OPEN_PARENTHESIS element CLOSE_PARENTHESIS SEMICOLON
    (88) methodsSet -> . NAME POINT CLEAR OPEN_PARENTHESIS CLOSE_PARENTHESIS SEMICOLON
    (74) mapFunctions -> . NAME POINT CLEAR OPEN_PARENTHESIS CLOSE_PARENTHESIS SEMICOLON
    (75) mapFunctions -> . NAME POINT GET OPEN_PARENTHESIS clave CLOSE_PARENTHESIS SEMICOLON
    (76) mapFunctions -> . NAME POINT HAS OPEN_PARENTHESIS clave CLOSE_PARENTHESIS SEMICOLON
    (77) arrayFn -> . NAME POINT POP OPEN_PARENTHESIS CLOSE_PARENTHESIS
    (78) arrayFn -> . NAME POINT PUSH OPEN_PARENTHESIS element CLOSE_PARENTHESIS
    (79) arrayFn -> . NAME POINT UNSHIFT OPEN_PARENTHESIS element CLOSE_PARENTHESIS
    (98) declaration -> . NAME IGUAL element
    (46) type -> . CONST
    (47) type -> . LET
    (48) type -> . VAR
    (57) array -> . type NAME IGUAL OPEN_BRACKET items CLOSE_BRACKET SEMICOLON
    (58) array -> . type NAME IGUAL NEW ARRAY OPEN_PARENTHESIS items CLOSE_PARENTHESIS SEMICOLON
    (80) set -> . type NAME IGUAL NEW SET OPEN_PARENTHESIS CLOSE_PARENTHESIS SEMICOLON
    (81) set -> . type NAME IGUAL NEW SET OPEN_PARENTHESIS OPEN_BRACKET items CLOSE_BRACKET CLOSE_PARENTHESIS SEMICOLON
    (82) set -> . type NAME IGUAL NEW SET OPEN_PARENTHESIS element CLOSE_PARENTHESIS SEMICOLON
    (83) set -> . NAME IGUAL NEW SET OPEN_PARENTHESIS CLOSE_PARENTHESIS SEMICOLON
    (84) set -> . NAME IGUAL NEW SET OPEN_PARENTHESIS OPEN_BRACKET items CLOSE_BRACKET CLOSE_PARENTHESIS SEMICOLON
    (85) set -> . NAME IGUAL NEW SET OPEN_PARENTHESIS element CLOSE_PARENTHESIS SEMICOLON
    (59) map -> . iniciarMap
    (60) map -> . escribirMap
    (61) map -> . generarMap
    (20) while -> . WHILE OPEN_PARENTHESIS controlArg CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE
    (21) while -> . WHILE OPEN_PARENTHESIS bool CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE
    (31) for -> . FOR OPEN_PARENTHESIS inicialization SEMICOLON controlArg SEMICOLON operations CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE
    (22) if -> . soloIf
    (23) if -> . soloIf elseIf
    (24) if -> . soloIf elseIf else
    (25) if -> . soloIf else
    (62) iniciarMap -> . variable IGUAL NEW MAP OPEN_PARENTHESIS CLOSE_PARENTHESIS SEMICOLON
    (63) escribirMap -> . variable IGUAL OPEN_BRACE claveValor CLOSE_BRACE
    (69) generarMap -> . variable IGUAL OPEN_BRACE tuplas CLOSE_BRACE
    (26) soloIf -> . IF OPEN_PARENTHESIS controlArg CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE

    NAME            shift and go to state 10
    CONST           shift and go to state 17
    LET             shift and go to state 18
    VAR             shift and go to state 19
    WHILE           shift and go to state 23
    FOR             shift and go to state 24
    IF              shift and go to state 26

    expression                     shift and go to state 231
    variable                       shift and go to state 2
    dataStruct                     shift and go to state 3
    controlStruct                  shift and go to state 4
    methodsSet                     shift and go to state 5
    mapFunctions                   shift and go to state 6
    arrayFn                        shift and go to state 7
    declaration                    shift and go to state 8
    type                           shift and go to state 9
    array                          shift and go to state 11
    set                            shift and go to state 12
    map                            shift and go to state 13
    while                          shift and go to state 14
    for                            shift and go to state 15
    if                             shift and go to state 16
    iniciarMap                     shift and go to state 20
    escribirMap                    shift and go to state 21
    generarMap                     shift and go to state 22
    soloIf                         shift and go to state 25

state 228

    (28) elseIf -> ELSEIF OPEN_PARENTHESIS controlArg CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE soloIf .

    ELSE            reduce using rule 28 (elseIf -> ELSEIF OPEN_PARENTHESIS controlArg CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE soloIf .)
    NAME            reduce using rule 28 (elseIf -> ELSEIF OPEN_PARENTHESIS controlArg CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE soloIf .)
    CONST           reduce using rule 28 (elseIf -> ELSEIF OPEN_PARENTHESIS controlArg CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE soloIf .)
    LET             reduce using rule 28 (elseIf -> ELSEIF OPEN_PARENTHESIS controlArg CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE soloIf .)
    VAR             reduce using rule 28 (elseIf -> ELSEIF OPEN_PARENTHESIS controlArg CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE soloIf .)
    WHILE           reduce using rule 28 (elseIf -> ELSEIF OPEN_PARENTHESIS controlArg CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE soloIf .)
    FOR             reduce using rule 28 (elseIf -> ELSEIF OPEN_PARENTHESIS controlArg CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE soloIf .)
    IF              reduce using rule 28 (elseIf -> ELSEIF OPEN_PARENTHESIS controlArg CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE soloIf .)
    $end            reduce using rule 28 (elseIf -> ELSEIF OPEN_PARENTHESIS controlArg CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE soloIf .)
    CLOSE_BRACE     reduce using rule 28 (elseIf -> ELSEIF OPEN_PARENTHESIS controlArg CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE soloIf .)


state 229

    (81) set -> type NAME IGUAL NEW SET OPEN_PARENTHESIS OPEN_BRACKET items CLOSE_BRACKET CLOSE_PARENTHESIS . SEMICOLON

    SEMICOLON       shift and go to state 232


state 230

    (84) set -> NAME IGUAL NEW SET OPEN_PARENTHESIS OPEN_BRACKET items CLOSE_BRACKET CLOSE_PARENTHESIS SEMICOLON .

    NAME            reduce using rule 84 (set -> NAME IGUAL NEW SET OPEN_PARENTHESIS OPEN_BRACKET items CLOSE_BRACKET CLOSE_PARENTHESIS SEMICOLON .)
    CONST           reduce using rule 84 (set -> NAME IGUAL NEW SET OPEN_PARENTHESIS OPEN_BRACKET items CLOSE_BRACKET CLOSE_PARENTHESIS SEMICOLON .)
    LET             reduce using rule 84 (set -> NAME IGUAL NEW SET OPEN_PARENTHESIS OPEN_BRACKET items CLOSE_BRACKET CLOSE_PARENTHESIS SEMICOLON .)
    VAR             reduce using rule 84 (set -> NAME IGUAL NEW SET OPEN_PARENTHESIS OPEN_BRACKET items CLOSE_BRACKET CLOSE_PARENTHESIS SEMICOLON .)
    WHILE           reduce using rule 84 (set -> NAME IGUAL NEW SET OPEN_PARENTHESIS OPEN_BRACKET items CLOSE_BRACKET CLOSE_PARENTHESIS SEMICOLON .)
    FOR             reduce using rule 84 (set -> NAME IGUAL NEW SET OPEN_PARENTHESIS OPEN_BRACKET items CLOSE_BRACKET CLOSE_PARENTHESIS SEMICOLON .)
    IF              reduce using rule 84 (set -> NAME IGUAL NEW SET OPEN_PARENTHESIS OPEN_BRACKET items CLOSE_BRACKET CLOSE_PARENTHESIS SEMICOLON .)
    $end            reduce using rule 84 (set -> NAME IGUAL NEW SET OPEN_PARENTHESIS OPEN_BRACKET items CLOSE_BRACKET CLOSE_PARENTHESIS SEMICOLON .)
    CLOSE_BRACE     reduce using rule 84 (set -> NAME IGUAL NEW SET OPEN_PARENTHESIS OPEN_BRACKET items CLOSE_BRACKET CLOSE_PARENTHESIS SEMICOLON .)
    COMMA           reduce using rule 84 (set -> NAME IGUAL NEW SET OPEN_PARENTHESIS OPEN_BRACKET items CLOSE_BRACKET CLOSE_PARENTHESIS SEMICOLON .)


state 231

    (31) for -> FOR OPEN_PARENTHESIS inicialization SEMICOLON controlArg SEMICOLON operations CLOSE_PARENTHESIS OPEN_BRACE expression . CLOSE_BRACE

    CLOSE_BRACE     shift and go to state 233


state 232

    (81) set -> type NAME IGUAL NEW SET OPEN_PARENTHESIS OPEN_BRACKET items CLOSE_BRACKET CLOSE_PARENTHESIS SEMICOLON .

    NAME            reduce using rule 81 (set -> type NAME IGUAL NEW SET OPEN_PARENTHESIS OPEN_BRACKET items CLOSE_BRACKET CLOSE_PARENTHESIS SEMICOLON .)
    CONST           reduce using rule 81 (set -> type NAME IGUAL NEW SET OPEN_PARENTHESIS OPEN_BRACKET items CLOSE_BRACKET CLOSE_PARENTHESIS SEMICOLON .)
    LET             reduce using rule 81 (set -> type NAME IGUAL NEW SET OPEN_PARENTHESIS OPEN_BRACKET items CLOSE_BRACKET CLOSE_PARENTHESIS SEMICOLON .)
    VAR             reduce using rule 81 (set -> type NAME IGUAL NEW SET OPEN_PARENTHESIS OPEN_BRACKET items CLOSE_BRACKET CLOSE_PARENTHESIS SEMICOLON .)
    WHILE           reduce using rule 81 (set -> type NAME IGUAL NEW SET OPEN_PARENTHESIS OPEN_BRACKET items CLOSE_BRACKET CLOSE_PARENTHESIS SEMICOLON .)
    FOR             reduce using rule 81 (set -> type NAME IGUAL NEW SET OPEN_PARENTHESIS OPEN_BRACKET items CLOSE_BRACKET CLOSE_PARENTHESIS SEMICOLON .)
    IF              reduce using rule 81 (set -> type NAME IGUAL NEW SET OPEN_PARENTHESIS OPEN_BRACKET items CLOSE_BRACKET CLOSE_PARENTHESIS SEMICOLON .)
    $end            reduce using rule 81 (set -> type NAME IGUAL NEW SET OPEN_PARENTHESIS OPEN_BRACKET items CLOSE_BRACKET CLOSE_PARENTHESIS SEMICOLON .)
    CLOSE_BRACE     reduce using rule 81 (set -> type NAME IGUAL NEW SET OPEN_PARENTHESIS OPEN_BRACKET items CLOSE_BRACKET CLOSE_PARENTHESIS SEMICOLON .)
    COMMA           reduce using rule 81 (set -> type NAME IGUAL NEW SET OPEN_PARENTHESIS OPEN_BRACKET items CLOSE_BRACKET CLOSE_PARENTHESIS SEMICOLON .)


state 233

    (31) for -> FOR OPEN_PARENTHESIS inicialization SEMICOLON controlArg SEMICOLON operations CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE .

    NAME            reduce using rule 31 (for -> FOR OPEN_PARENTHESIS inicialization SEMICOLON controlArg SEMICOLON operations CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE .)
    CONST           reduce using rule 31 (for -> FOR OPEN_PARENTHESIS inicialization SEMICOLON controlArg SEMICOLON operations CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE .)
    LET             reduce using rule 31 (for -> FOR OPEN_PARENTHESIS inicialization SEMICOLON controlArg SEMICOLON operations CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE .)
    VAR             reduce using rule 31 (for -> FOR OPEN_PARENTHESIS inicialization SEMICOLON controlArg SEMICOLON operations CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE .)
    WHILE           reduce using rule 31 (for -> FOR OPEN_PARENTHESIS inicialization SEMICOLON controlArg SEMICOLON operations CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE .)
    FOR             reduce using rule 31 (for -> FOR OPEN_PARENTHESIS inicialization SEMICOLON controlArg SEMICOLON operations CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE .)
    IF              reduce using rule 31 (for -> FOR OPEN_PARENTHESIS inicialization SEMICOLON controlArg SEMICOLON operations CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE .)
    $end            reduce using rule 31 (for -> FOR OPEN_PARENTHESIS inicialization SEMICOLON controlArg SEMICOLON operations CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE .)
    CLOSE_BRACE     reduce using rule 31 (for -> FOR OPEN_PARENTHESIS inicialization SEMICOLON controlArg SEMICOLON operations CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for IF in state 222 resolved as shift
WARNING: reduce/reduce conflict in state 176 resolved using rule (mapFunctions -> NAME POINT CLEAR OPEN_PARENTHESIS CLOSE_PARENTHESIS SEMICOLON)
WARNING: rejected rule (methodsSet -> NAME POINT CLEAR OPEN_PARENTHESIS CLOSE_PARENTHESIS SEMICOLON) in state 176
WARNING: Rule (methodsSet -> NAME POINT CLEAR OPEN_PARENTHESIS CLOSE_PARENTHESIS SEMICOLON) is never reduced

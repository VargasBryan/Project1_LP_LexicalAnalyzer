
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'ADD AND ARRAY BACKSLASH BOOLEAN BREAK CASE CHAR CLASS CLEAR CLOSE_BRACE CLOSE_BRACKET CLOSE_PARENTHESIS COLON COMMA COMMENTS CONST DEFAULT DELETE DIFERENTE DIVIGUAL DIVISION DOUBLE_QUOTES ELSE ELSEIF FALSE FLOAT FOR FUNCTION GET HAS IF IGUAL IGUALIGUAL INT LENGTH LET LINE_BREAK LONGCOMMENT MAP MASIGUAL MAYORIGUALQUE MAYORQUE MENORIGUALQUE MENORQUE MENOSIGUAL MODIGUAL MULTIPLICACION NAME NEW NOT NULL NUMBER OPEN_BRACE OPEN_BRACKET OPEN_PARENTHESIS OR POINT POP PORIGUAL POTIGUAL PUSH RESTA RETURN SEMICOLON SET SINGLE_QUOTE STATIC STRING SUMA SWITCH THEN TOSTRING TRUE TYPEOF UNDEFINED UNSHIFT VAR WHILEexpression : variable\n    | variable expression\n    | dataStruct\n    | dataStruct expression\n    | controlStruct\n    | controlStruct expression\n    | methodsSet\n    | mapFunctions\n    | arrayFn\n    | declaration variable : type NAME IGUAL datatype SEMICOLON\n        | type NAME IGUAL operations SEMICOLON\n        | NAME IGUAL datatype SEMICOLONcontrolStruct : while\n    | for\n    | ifdataStruct : array\n    | set\n    | map while : WHILE OPEN_PARENTHESIS controlArg CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE\n    | WHILE OPEN_PARENTHESIS bool CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACEif : soloIf \n    | soloIf elseIf\n    | soloIf elseIf else\n    | soloIf else soloIf : IF OPEN_PARENTHESIS controlArg CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE elseIf : ELSEIF OPEN_PARENTHESIS controlArg CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE\n        | ELSEIF OPEN_PARENTHESIS controlArg CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE soloIf else : ELSE OPEN_BRACE expression CLOSE_BRACEcontrolArg : element clause elementfor : FOR OPEN_PARENTHESIS inicialization SEMICOLON expBoolean SEMICOLON operations CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE inicialization : type NAME IGUAL NUMBER\n    | NAME IGUAL NUMBERoperations : NUMBER operand NUMBER\n    | NAME\n    | NUMBER\n    | NUMBER operand NAME operations\n    | NAME operand NUMBER operations\n    | NUMBER operand NAME \n    | NAME operand NUMBER \n    | NAME operand NAME operations\n    | OPEN_PARENTHESIS NAME operand NAME CLOSE_PARENTHESIS operand operations\n    | OPEN_PARENTHESIS NUMBER operand NUMBER CLOSE_PARENTHESIS operand operationsdatatype : NUMBER\n    | STRING\n    | CHARoperand : SUMA \n    | RESTA \n    | MULTIPLICACION \n    | DIVISIONbool : TRUE\n    | FALSEtype : CONST\n    | LET\n    | VARclause :  IGUALIGUAL\n    | DIFERENTE\n    | MAYORQUE\n    | MAYORIGUALQUE\n    | MENORQUE\n    | MENORIGUALQUE value : NAME\n    | NUMBERarray : type NAME IGUAL OPEN_BRACKET items CLOSE_BRACKET SEMICOLON\n    | type NAME IGUAL NEW ARRAY OPEN_PARENTHESIS items CLOSE_PARENTHESIS SEMICOLONmap : iniciarMap\n        | escribirMap\n        | generarMap iniciarMap : variable IGUAL NEW MAP OPEN_PARENTHESIS CLOSE_PARENTHESIS SEMICOLONescribirMap : variable IGUAL OPEN_BRACE claveValor CLOSE_BRACEclaveValor : clave COLON valor\n    | clave COLON valor COMMA claveValorclave : datatypevalor : datatype\n        | dataStructgenerarMap : variable IGUAL OPEN_BRACE tuplas CLOSE_BRACEtuplas : tupla\n        | tupla COMMA tuplas  tupla : OPEN_BRACKET datatype CLOSE_BRACKET\n        | OPEN_BRACKET datatype COMMA datatype CLOSE_BRACKETmapFunctions : NAME POINT CLEAR OPEN_PARENTHESIS CLOSE_PARENTHESIS SEMICOLON\n        | NAME POINT GET OPEN_PARENTHESIS clave CLOSE_PARENTHESIS SEMICOLON\n        | NAME POINT HAS OPEN_PARENTHESIS clave CLOSE_PARENTHESIS SEMICOLONarrayFn : NAME POINT POP OPEN_PARENTHESIS CLOSE_PARENTHESIS\n    | NAME POINT PUSH OPEN_PARENTHESIS element CLOSE_PARENTHESIS\n    | NAME POINT UNSHIFT OPEN_PARENTHESIS element CLOSE_PARENTHESISset : type NAME IGUAL NEW SET OPEN_PARENTHESIS CLOSE_PARENTHESIS SEMICOLON\n    | type NAME IGUAL NEW SET OPEN_PARENTHESIS OPEN_BRACKET items CLOSE_BRACKET CLOSE_PARENTHESIS SEMICOLON\n    | type NAME IGUAL NEW SET OPEN_PARENTHESIS element CLOSE_PARENTHESIS SEMICOLON\n    | NAME IGUAL NEW SET OPEN_PARENTHESIS CLOSE_PARENTHESIS SEMICOLON\n    | NAME IGUAL NEW SET OPEN_PARENTHESIS OPEN_BRACKET items CLOSE_BRACKET CLOSE_PARENTHESIS SEMICOLON\n    | NAME IGUAL NEW SET OPEN_PARENTHESIS element CLOSE_PARENTHESIS SEMICOLONmethodsSet : NAME POINT ADD OPEN_PARENTHESIS element CLOSE_PARENTHESIS SEMICOLON\n    | NAME POINT DELETE OPEN_PARENTHESIS element CLOSE_PARENTHESIS SEMICOLON\n    | NAME POINT CLEAR OPEN_PARENTHESIS CLOSE_PARENTHESIS SEMICOLON items : numeros\n    | cadenanumeros : NUMBER\n    | NUMBER COMMA numeroscadena : STRING \n    | STRING COMMA cadenaelement : STRING\n    | NUMBER\n    | NAMEdeclaration : NAME IGUAL element SEMICOLONlogicalOperator : AND\n    | ORexpBoolean : controlArg\n    | bool\n    | NOT expBoolean\n    | expBoolean logicalOperator expBoolean'
    
_lr_action_items = {'NAME':([0,2,3,4,9,11,12,13,14,15,16,17,18,19,20,21,22,25,32,34,35,36,37,40,43,67,69,70,71,87,89,92,93,98,99,102,103,104,105,106,107,108,109,116,117,118,121,122,123,124,125,126,127,137,138,147,148,153,157,158,163,169,170,175,176,179,192,193,194,195,198,200,208,218,225,226,230,232,235,241,243,244,246,247,248,250,251,255,257,258,],[10,10,10,10,31,-17,-18,-19,-14,-15,-16,-53,-54,-55,-66,-67,-68,-22,44,44,68,-23,-25,44,82,110,-24,44,10,135,-13,44,44,44,44,44,-56,-57,-58,-59,-60,-61,44,-70,-76,164,169,-47,-48,-49,-50,-11,-12,179,44,10,10,44,-29,10,202,82,82,44,215,82,82,44,-106,-107,10,-69,-64,-90,-20,-21,-26,82,-87,-92,-27,-65,-89,82,82,10,-28,-91,-88,-31,]),'CONST':([0,2,3,4,11,12,13,14,15,16,20,21,22,25,35,36,37,69,71,89,116,117,118,126,127,147,148,157,158,198,200,208,218,225,226,230,235,241,243,244,246,250,251,255,257,258,],[17,17,17,17,-17,-18,-19,-14,-15,-16,-66,-67,-68,-22,17,-23,-25,-24,17,-13,-70,-76,17,-11,-12,17,17,-29,17,17,-69,-64,-90,-20,-21,-26,-87,-92,-27,-65,-89,17,-28,-91,-88,-31,]),'LET':([0,2,3,4,11,12,13,14,15,16,20,21,22,25,35,36,37,69,71,89,116,117,118,126,127,147,148,157,158,198,200,208,218,225,226,230,235,241,243,244,246,250,251,255,257,258,],[18,18,18,18,-17,-18,-19,-14,-15,-16,-66,-67,-68,-22,18,-23,-25,-24,18,-13,-70,-76,18,-11,-12,18,18,-29,18,18,-69,-64,-90,-20,-21,-26,-87,-92,-27,-65,-89,18,-28,-91,-88,-31,]),'VAR':([0,2,3,4,11,12,13,14,15,16,20,21,22,25,35,36,37,69,71,89,116,117,118,126,127,147,148,157,158,198,200,208,218,225,226,230,235,241,243,244,246,250,251,255,257,258,],[19,19,19,19,-17,-18,-19,-14,-15,-16,-66,-67,-68,-22,19,-23,-25,-24,19,-13,-70,-76,19,-11,-12,19,19,-29,19,19,-69,-64,-90,-20,-21,-26,-87,-92,-27,-65,-89,19,-28,-91,-88,-31,]),'WHILE':([0,2,3,4,11,12,13,14,15,16,20,21,22,25,36,37,69,71,89,116,117,126,127,147,148,157,158,198,200,208,218,225,226,230,235,241,243,244,246,250,251,255,257,258,],[23,23,23,23,-17,-18,-19,-14,-15,-16,-66,-67,-68,-22,-23,-25,-24,23,-13,-70,-76,-11,-12,23,23,-29,23,23,-69,-64,-90,-20,-21,-26,-87,-92,-27,-65,-89,23,-28,-91,-88,-31,]),'FOR':([0,2,3,4,11,12,13,14,15,16,20,21,22,25,36,37,69,71,89,116,117,126,127,147,148,157,158,198,200,208,218,225,226,230,235,241,243,244,246,250,251,255,257,258,],[24,24,24,24,-17,-18,-19,-14,-15,-16,-66,-67,-68,-22,-23,-25,-24,24,-13,-70,-76,-11,-12,24,24,-29,24,24,-69,-64,-90,-20,-21,-26,-87,-92,-27,-65,-89,24,-28,-91,-88,-31,]),'IF':([0,2,3,4,11,12,13,14,15,16,20,21,22,25,36,37,69,71,89,116,117,126,127,147,148,157,158,198,200,208,218,225,226,230,235,241,243,244,246,250,251,255,257,258,],[26,26,26,26,-17,-18,-19,-14,-15,-16,-66,-67,-68,-22,-23,-25,-24,26,-13,-70,-76,-11,-12,26,26,-29,26,26,-69,-64,-90,-20,-21,-26,-87,-92,26,-65,-89,26,-28,-91,-88,-31,]),'$end':([1,2,3,4,5,6,7,8,11,12,13,14,15,16,20,21,22,25,27,29,30,36,37,69,89,90,116,117,126,127,144,157,185,188,189,200,208,218,221,222,223,224,225,226,230,235,241,243,244,246,251,255,257,258,],[0,-1,-3,-5,-7,-8,-9,-10,-17,-18,-19,-14,-15,-16,-66,-67,-68,-22,-2,-4,-6,-23,-25,-24,-13,-105,-70,-76,-11,-12,-84,-29,-81,-85,-86,-69,-64,-90,-93,-94,-82,-83,-20,-21,-26,-87,-92,-27,-65,-89,-28,-91,-88,-31,]),'CLOSE_BRACE':([2,3,4,5,6,7,8,11,12,13,14,15,16,20,21,22,25,27,29,30,36,37,50,69,74,75,77,80,81,89,90,113,116,117,126,127,144,157,160,161,162,166,167,185,188,189,190,191,199,200,208,218,221,222,223,224,225,226,229,230,231,233,235,241,243,244,246,251,255,256,257,258,],[-1,-3,-5,-7,-8,-9,-10,-17,-18,-19,-14,-15,-16,-66,-67,-68,-22,-2,-4,-6,-23,-25,-46,-24,116,117,-77,-44,-45,-13,-105,157,-70,-76,-11,-12,-84,-29,-71,-74,-75,-78,-79,-81,-85,-86,225,226,230,-69,-64,-90,-93,-94,-82,-83,-20,-21,243,-26,-72,-80,-87,-92,-27,-65,-89,-28,-91,258,-88,-31,]),'IGUAL':([2,10,31,68,89,110,126,127,164,165,202,],[28,32,43,111,-13,154,-11,-12,203,28,232,]),'POINT':([10,],[33,]),'COMMA':([11,12,13,20,21,22,50,77,80,81,116,117,120,131,132,160,161,162,167,200,208,218,233,235,241,244,246,255,257,],[-17,-18,-19,-66,-67,-68,-46,119,-44,-45,-70,-76,168,172,173,201,-74,-75,-79,-69,-64,-90,-80,-87,-92,-65,-89,-91,-88,]),'OPEN_PARENTHESIS':([23,24,26,38,43,51,52,53,54,55,56,57,58,73,91,122,123,124,125,133,134,169,170,179,192,232,247,248,],[34,35,40,70,87,92,93,94,95,96,97,98,99,115,138,-47,-48,-49,-50,174,175,87,87,87,87,87,87,87,]),'ELSEIF':([25,230,],[38,-26,]),'ELSE':([25,36,230,243,251,],[39,39,-26,-27,-28,]),'NEW':([28,32,43,203,232,],[41,47,86,47,86,]),'OPEN_BRACE':([28,39,100,101,114,156,242,],[42,71,147,148,158,198,250,]),'NUMBER':([32,34,40,42,43,70,79,85,87,92,93,95,96,98,99,102,103,104,105,106,107,108,109,111,118,121,122,123,124,125,137,138,153,154,168,169,170,172,174,175,177,179,181,192,193,194,195,201,203,213,232,247,248,],[48,65,65,80,88,65,80,131,136,65,65,80,80,65,65,65,-56,-57,-58,-59,-60,-61,65,155,80,170,-47,-48,-49,-50,178,65,65,197,80,206,206,131,131,65,216,206,131,206,65,-106,-107,80,80,131,88,206,206,]),'STRING':([32,34,40,42,43,70,79,85,92,93,95,96,98,99,102,103,104,105,106,107,108,109,118,138,153,168,173,174,175,181,193,194,195,201,203,213,232,],[49,64,64,81,81,64,81,132,64,64,81,81,64,64,64,-56,-57,-58,-59,-60,-61,64,81,64,64,81,132,132,64,132,64,-106,-107,81,81,132,81,]),'CHAR':([32,42,43,79,95,96,118,168,201,203,232,],[50,50,50,50,50,50,50,50,50,50,50,]),'ADD':([33,],[51,]),'DELETE':([33,],[52,]),'CLEAR':([33,],[53,]),'GET':([33,],[54,]),'HAS':([33,],[55,]),'POP':([33,],[56,]),'PUSH':([33,],[57,]),'UNSHIFT':([33,],[58,]),'TRUE':([34,109,153,193,194,195,],[62,62,62,62,-106,-107,]),'FALSE':([34,109,153,193,194,195,],[63,63,63,63,-106,-107,]),'MAP':([41,],[73,]),'OPEN_BRACKET':([42,43,119,138,175,232,],[79,85,79,181,213,85,]),'SEMICOLON':([44,45,46,48,49,50,62,63,64,65,66,80,81,82,83,84,88,141,149,150,151,152,155,159,170,171,178,179,180,183,184,186,187,196,197,205,206,207,212,217,220,228,234,237,249,252,253,254,],[-104,89,90,-44,-45,-46,-51,-52,-102,-103,109,-44,-45,-35,126,127,-36,185,-30,192,-108,-109,-33,200,-40,208,-34,-39,218,221,222,223,224,-110,-32,-41,-36,-38,235,-37,241,-111,244,246,255,257,-42,-43,]),'IGUALIGUAL':([44,61,64,65,],[-104,103,-102,-103,]),'DIFERENTE':([44,61,64,65,],[-104,104,-102,-103,]),'MAYORQUE':([44,61,64,65,],[-104,105,-102,-103,]),'MAYORIGUALQUE':([44,61,64,65,],[-104,106,-102,-103,]),'MENORQUE':([44,61,64,65,],[-104,107,-102,-103,]),'MENORIGUALQUE':([44,61,64,65,],[-104,108,-102,-103,]),'CLOSE_PARENTHESIS':([44,50,59,60,62,63,64,65,72,78,80,81,82,94,97,112,115,129,130,131,132,138,139,140,142,143,145,146,149,170,175,178,179,182,205,206,207,209,210,211,214,215,216,217,227,240,245,253,254,],[-104,-46,100,101,-51,-52,-102,-103,114,-73,-44,-45,-35,141,144,156,159,-96,-97,-98,-100,180,183,184,186,187,188,189,-30,-40,212,-34,-39,220,-41,-36,-38,-99,-101,234,237,238,239,-37,242,249,252,-42,-43,]),'AND':([44,62,63,64,65,149,150,151,152,196,228,],[-104,-51,-52,-102,-103,-30,194,-108,-109,194,194,]),'OR':([44,62,63,64,65,149,150,151,152,196,228,],[-104,-51,-52,-102,-103,-30,195,-108,-109,195,195,]),'SET':([47,86,],[91,134,]),'COLON':([50,76,78,80,81,],[-46,118,-73,-44,-45,]),'CLOSE_BRACKET':([50,80,81,120,128,129,130,131,132,204,209,210,219,236,],[-46,-44,-45,167,171,-96,-97,-98,-100,233,-99,-101,240,245,]),'SUMA':([82,88,135,136,206,238,239,],[122,122,122,122,122,122,122,]),'RESTA':([82,88,135,136,206,238,239,],[123,123,123,123,123,123,123,]),'MULTIPLICACION':([82,88,135,136,206,238,239,],[124,124,124,124,124,124,124,]),'DIVISION':([82,88,135,136,206,238,239,],[125,125,125,125,125,125,125,]),'ARRAY':([86,],[133,]),'NOT':([109,153,193,194,195,],[153,153,153,-106,-107,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'expression':([0,2,3,4,71,147,148,158,198,250,],[1,27,29,30,113,190,191,199,229,256,]),'variable':([0,2,3,4,71,118,147,148,158,198,250,],[2,2,2,2,2,165,2,2,2,2,2,]),'dataStruct':([0,2,3,4,71,118,147,148,158,198,250,],[3,3,3,3,3,162,3,3,3,3,3,]),'controlStruct':([0,2,3,4,71,147,148,158,198,250,],[4,4,4,4,4,4,4,4,4,4,]),'methodsSet':([0,2,3,4,71,147,148,158,198,250,],[5,5,5,5,5,5,5,5,5,5,]),'mapFunctions':([0,2,3,4,71,147,148,158,198,250,],[6,6,6,6,6,6,6,6,6,6,]),'arrayFn':([0,2,3,4,71,147,148,158,198,250,],[7,7,7,7,7,7,7,7,7,7,]),'declaration':([0,2,3,4,71,147,148,158,198,250,],[8,8,8,8,8,8,8,8,8,8,]),'type':([0,2,3,4,35,71,118,147,148,158,198,250,],[9,9,9,9,67,9,163,9,9,9,9,9,]),'array':([0,2,3,4,71,118,147,148,158,198,250,],[11,11,11,11,11,11,11,11,11,11,11,]),'set':([0,2,3,4,71,118,147,148,158,198,250,],[12,12,12,12,12,12,12,12,12,12,12,]),'map':([0,2,3,4,71,118,147,148,158,198,250,],[13,13,13,13,13,13,13,13,13,13,13,]),'while':([0,2,3,4,71,147,148,158,198,250,],[14,14,14,14,14,14,14,14,14,14,]),'for':([0,2,3,4,71,147,148,158,198,250,],[15,15,15,15,15,15,15,15,15,15,]),'if':([0,2,3,4,71,147,148,158,198,250,],[16,16,16,16,16,16,16,16,16,16,]),'iniciarMap':([0,2,3,4,71,118,147,148,158,198,250,],[20,20,20,20,20,20,20,20,20,20,20,]),'escribirMap':([0,2,3,4,71,118,147,148,158,198,250,],[21,21,21,21,21,21,21,21,21,21,21,]),'generarMap':([0,2,3,4,71,118,147,148,158,198,250,],[22,22,22,22,22,22,22,22,22,22,22,]),'soloIf':([0,2,3,4,71,147,148,158,198,243,250,],[25,25,25,25,25,25,25,25,25,251,25,]),'elseIf':([25,],[36,]),'else':([25,36,],[37,69,]),'datatype':([32,42,43,79,95,96,118,168,201,203,232,],[45,78,83,120,78,78,161,204,78,45,83,]),'element':([32,34,40,70,92,93,98,99,102,109,138,153,175,193,],[46,61,61,61,139,140,145,146,149,61,182,61,214,61,]),'controlArg':([34,40,70,109,153,193,],[59,72,112,151,151,151,]),'bool':([34,109,153,193,],[60,152,152,152,]),'inicialization':([35,],[66,]),'claveValor':([42,201,],[74,231,]),'tuplas':([42,119,],[75,166,]),'clave':([42,95,96,201,],[76,142,143,76,]),'tupla':([42,119,],[77,77,]),'operations':([43,169,170,179,192,232,247,248,],[84,205,207,217,227,84,253,254,]),'clause':([61,],[102,]),'operand':([82,88,135,136,206,238,239,],[121,137,176,177,137,247,248,]),'items':([85,174,181,213,],[128,211,219,236,]),'numeros':([85,172,174,181,213,],[129,209,129,129,129,]),'cadena':([85,173,174,181,213,],[130,210,130,130,130,]),'expBoolean':([109,153,193,],[150,196,228,]),'valor':([118,],[160,]),'logicalOperator':([150,196,228,],[193,193,193,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> expression","S'",1,None,None,None),
  ('expression -> variable','expression',1,'p_expression_expr','sintactical.py',12),
  ('expression -> variable expression','expression',2,'p_expression_expr','sintactical.py',13),
  ('expression -> dataStruct','expression',1,'p_expression_expr','sintactical.py',14),
  ('expression -> dataStruct expression','expression',2,'p_expression_expr','sintactical.py',15),
  ('expression -> controlStruct','expression',1,'p_expression_expr','sintactical.py',16),
  ('expression -> controlStruct expression','expression',2,'p_expression_expr','sintactical.py',17),
  ('expression -> methodsSet','expression',1,'p_expression_expr','sintactical.py',18),
  ('expression -> mapFunctions','expression',1,'p_expression_expr','sintactical.py',19),
  ('expression -> arrayFn','expression',1,'p_expression_expr','sintactical.py',20),
  ('expression -> declaration','expression',1,'p_expression_expr','sintactical.py',21),
  ('variable -> type NAME IGUAL datatype SEMICOLON','variable',5,'p_variable_expr','sintactical.py',24),
  ('variable -> type NAME IGUAL operations SEMICOLON','variable',5,'p_variable_expr','sintactical.py',25),
  ('variable -> NAME IGUAL datatype SEMICOLON','variable',4,'p_variable_expr','sintactical.py',26),
  ('controlStruct -> while','controlStruct',1,'p_controlStruct_expr','sintactical.py',29),
  ('controlStruct -> for','controlStruct',1,'p_controlStruct_expr','sintactical.py',30),
  ('controlStruct -> if','controlStruct',1,'p_controlStruct_expr','sintactical.py',31),
  ('dataStruct -> array','dataStruct',1,'p_dataStruct_expr','sintactical.py',34),
  ('dataStruct -> set','dataStruct',1,'p_dataStruct_expr','sintactical.py',35),
  ('dataStruct -> map','dataStruct',1,'p_dataStruct_expr','sintactical.py',36),
  ('while -> WHILE OPEN_PARENTHESIS controlArg CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE','while',7,'p_while_expr','sintactical.py',39),
  ('while -> WHILE OPEN_PARENTHESIS bool CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE','while',7,'p_while_expr','sintactical.py',40),
  ('if -> soloIf','if',1,'p_if_expr','sintactical.py',43),
  ('if -> soloIf elseIf','if',2,'p_if_expr','sintactical.py',44),
  ('if -> soloIf elseIf else','if',3,'p_if_expr','sintactical.py',45),
  ('if -> soloIf else','if',2,'p_if_expr','sintactical.py',46),
  ('soloIf -> IF OPEN_PARENTHESIS controlArg CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE','soloIf',7,'p_soloIf_expr','sintactical.py',49),
  ('elseIf -> ELSEIF OPEN_PARENTHESIS controlArg CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE','elseIf',7,'p_elseIf_expr','sintactical.py',52),
  ('elseIf -> ELSEIF OPEN_PARENTHESIS controlArg CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE soloIf','elseIf',8,'p_elseIf_expr','sintactical.py',53),
  ('else -> ELSE OPEN_BRACE expression CLOSE_BRACE','else',4,'p_else_expr','sintactical.py',56),
  ('controlArg -> element clause element','controlArg',3,'p_controlArg_expr','sintactical.py',59),
  ('for -> FOR OPEN_PARENTHESIS inicialization SEMICOLON expBoolean SEMICOLON operations CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE','for',11,'p_for_expr','sintactical.py',62),
  ('inicialization -> type NAME IGUAL NUMBER','inicialization',4,'p_inicialization','sintactical.py',65),
  ('inicialization -> NAME IGUAL NUMBER','inicialization',3,'p_inicialization','sintactical.py',66),
  ('operations -> NUMBER operand NUMBER','operations',3,'p_operations','sintactical.py',69),
  ('operations -> NAME','operations',1,'p_operations','sintactical.py',70),
  ('operations -> NUMBER','operations',1,'p_operations','sintactical.py',71),
  ('operations -> NUMBER operand NAME operations','operations',4,'p_operations','sintactical.py',72),
  ('operations -> NAME operand NUMBER operations','operations',4,'p_operations','sintactical.py',73),
  ('operations -> NUMBER operand NAME','operations',3,'p_operations','sintactical.py',74),
  ('operations -> NAME operand NUMBER','operations',3,'p_operations','sintactical.py',75),
  ('operations -> NAME operand NAME operations','operations',4,'p_operations','sintactical.py',76),
  ('operations -> OPEN_PARENTHESIS NAME operand NAME CLOSE_PARENTHESIS operand operations','operations',7,'p_operations','sintactical.py',77),
  ('operations -> OPEN_PARENTHESIS NUMBER operand NUMBER CLOSE_PARENTHESIS operand operations','operations',7,'p_operations','sintactical.py',78),
  ('datatype -> NUMBER','datatype',1,'p_datatype_expr','sintactical.py',81),
  ('datatype -> STRING','datatype',1,'p_datatype_expr','sintactical.py',82),
  ('datatype -> CHAR','datatype',1,'p_datatype_expr','sintactical.py',83),
  ('operand -> SUMA','operand',1,'p_operand_expr','sintactical.py',86),
  ('operand -> RESTA','operand',1,'p_operand_expr','sintactical.py',87),
  ('operand -> MULTIPLICACION','operand',1,'p_operand_expr','sintactical.py',88),
  ('operand -> DIVISION','operand',1,'p_operand_expr','sintactical.py',89),
  ('bool -> TRUE','bool',1,'p_bool_expr','sintactical.py',92),
  ('bool -> FALSE','bool',1,'p_bool_expr','sintactical.py',93),
  ('type -> CONST','type',1,'p_type_expr','sintactical.py',96),
  ('type -> LET','type',1,'p_type_expr','sintactical.py',97),
  ('type -> VAR','type',1,'p_type_expr','sintactical.py',98),
  ('clause -> IGUALIGUAL','clause',1,'p_clause_expr','sintactical.py',101),
  ('clause -> DIFERENTE','clause',1,'p_clause_expr','sintactical.py',102),
  ('clause -> MAYORQUE','clause',1,'p_clause_expr','sintactical.py',103),
  ('clause -> MAYORIGUALQUE','clause',1,'p_clause_expr','sintactical.py',104),
  ('clause -> MENORQUE','clause',1,'p_clause_expr','sintactical.py',105),
  ('clause -> MENORIGUALQUE','clause',1,'p_clause_expr','sintactical.py',106),
  ('value -> NAME','value',1,'p_value_expr','sintactical.py',109),
  ('value -> NUMBER','value',1,'p_value_expr','sintactical.py',110),
  ('array -> type NAME IGUAL OPEN_BRACKET items CLOSE_BRACKET SEMICOLON','array',7,'p_array_expr','sintactical.py',113),
  ('array -> type NAME IGUAL NEW ARRAY OPEN_PARENTHESIS items CLOSE_PARENTHESIS SEMICOLON','array',9,'p_array_expr','sintactical.py',114),
  ('map -> iniciarMap','map',1,'p_map_expr','sintactical.py',117),
  ('map -> escribirMap','map',1,'p_map_expr','sintactical.py',118),
  ('map -> generarMap','map',1,'p_map_expr','sintactical.py',119),
  ('iniciarMap -> variable IGUAL NEW MAP OPEN_PARENTHESIS CLOSE_PARENTHESIS SEMICOLON','iniciarMap',7,'p_iniciarMap_expr','sintactical.py',122),
  ('escribirMap -> variable IGUAL OPEN_BRACE claveValor CLOSE_BRACE','escribirMap',5,'p_escribirMap_expr','sintactical.py',125),
  ('claveValor -> clave COLON valor','claveValor',3,'p_claveValor_expr','sintactical.py',128),
  ('claveValor -> clave COLON valor COMMA claveValor','claveValor',5,'p_claveValor_expr','sintactical.py',129),
  ('clave -> datatype','clave',1,'p_clave_expr','sintactical.py',132),
  ('valor -> datatype','valor',1,'p_valor_expr','sintactical.py',135),
  ('valor -> dataStruct','valor',1,'p_valor_expr','sintactical.py',136),
  ('generarMap -> variable IGUAL OPEN_BRACE tuplas CLOSE_BRACE','generarMap',5,'p_generarMap_expr','sintactical.py',139),
  ('tuplas -> tupla','tuplas',1,'p_tuplas_expr','sintactical.py',142),
  ('tuplas -> tupla COMMA tuplas','tuplas',3,'p_tuplas_expr','sintactical.py',143),
  ('tupla -> OPEN_BRACKET datatype CLOSE_BRACKET','tupla',3,'p_tupla_expr','sintactical.py',146),
  ('tupla -> OPEN_BRACKET datatype COMMA datatype CLOSE_BRACKET','tupla',5,'p_tupla_expr','sintactical.py',147),
  ('mapFunctions -> NAME POINT CLEAR OPEN_PARENTHESIS CLOSE_PARENTHESIS SEMICOLON','mapFunctions',6,'p_mapFunctions_expr','sintactical.py',150),
  ('mapFunctions -> NAME POINT GET OPEN_PARENTHESIS clave CLOSE_PARENTHESIS SEMICOLON','mapFunctions',7,'p_mapFunctions_expr','sintactical.py',151),
  ('mapFunctions -> NAME POINT HAS OPEN_PARENTHESIS clave CLOSE_PARENTHESIS SEMICOLON','mapFunctions',7,'p_mapFunctions_expr','sintactical.py',152),
  ('arrayFn -> NAME POINT POP OPEN_PARENTHESIS CLOSE_PARENTHESIS','arrayFn',5,'p_arrayFn_expr','sintactical.py',155),
  ('arrayFn -> NAME POINT PUSH OPEN_PARENTHESIS element CLOSE_PARENTHESIS','arrayFn',6,'p_arrayFn_expr','sintactical.py',156),
  ('arrayFn -> NAME POINT UNSHIFT OPEN_PARENTHESIS element CLOSE_PARENTHESIS','arrayFn',6,'p_arrayFn_expr','sintactical.py',157),
  ('set -> type NAME IGUAL NEW SET OPEN_PARENTHESIS CLOSE_PARENTHESIS SEMICOLON','set',8,'p_set_expr','sintactical.py',160),
  ('set -> type NAME IGUAL NEW SET OPEN_PARENTHESIS OPEN_BRACKET items CLOSE_BRACKET CLOSE_PARENTHESIS SEMICOLON','set',11,'p_set_expr','sintactical.py',161),
  ('set -> type NAME IGUAL NEW SET OPEN_PARENTHESIS element CLOSE_PARENTHESIS SEMICOLON','set',9,'p_set_expr','sintactical.py',162),
  ('set -> NAME IGUAL NEW SET OPEN_PARENTHESIS CLOSE_PARENTHESIS SEMICOLON','set',7,'p_set_expr','sintactical.py',163),
  ('set -> NAME IGUAL NEW SET OPEN_PARENTHESIS OPEN_BRACKET items CLOSE_BRACKET CLOSE_PARENTHESIS SEMICOLON','set',10,'p_set_expr','sintactical.py',164),
  ('set -> NAME IGUAL NEW SET OPEN_PARENTHESIS element CLOSE_PARENTHESIS SEMICOLON','set',8,'p_set_expr','sintactical.py',165),
  ('methodsSet -> NAME POINT ADD OPEN_PARENTHESIS element CLOSE_PARENTHESIS SEMICOLON','methodsSet',7,'p_methodsSet_expr','sintactical.py',168),
  ('methodsSet -> NAME POINT DELETE OPEN_PARENTHESIS element CLOSE_PARENTHESIS SEMICOLON','methodsSet',7,'p_methodsSet_expr','sintactical.py',169),
  ('methodsSet -> NAME POINT CLEAR OPEN_PARENTHESIS CLOSE_PARENTHESIS SEMICOLON','methodsSet',6,'p_methodsSet_expr','sintactical.py',170),
  ('items -> numeros','items',1,'p_items_expr','sintactical.py',173),
  ('items -> cadena','items',1,'p_items_expr','sintactical.py',174),
  ('numeros -> NUMBER','numeros',1,'p_numeros_expr','sintactical.py',177),
  ('numeros -> NUMBER COMMA numeros','numeros',3,'p_numeros_expr','sintactical.py',178),
  ('cadena -> STRING','cadena',1,'p_cadena_expr','sintactical.py',181),
  ('cadena -> STRING COMMA cadena','cadena',3,'p_cadena_expr','sintactical.py',182),
  ('element -> STRING','element',1,'p_element_expr','sintactical.py',185),
  ('element -> NUMBER','element',1,'p_element_expr','sintactical.py',186),
  ('element -> NAME','element',1,'p_element_expr','sintactical.py',187),
  ('declaration -> NAME IGUAL element SEMICOLON','declaration',4,'p_declaration_expr','sintactical.py',190),
  ('logicalOperator -> AND','logicalOperator',1,'p_logicalOperator_exp','sintactical.py',193),
  ('logicalOperator -> OR','logicalOperator',1,'p_logicalOperator_exp','sintactical.py',194),
  ('expBoolean -> controlArg','expBoolean',1,'p_expBoolean_expr','sintactical.py',197),
  ('expBoolean -> bool','expBoolean',1,'p_expBoolean_expr','sintactical.py',198),
  ('expBoolean -> NOT expBoolean','expBoolean',2,'p_expBoolean_expr','sintactical.py',199),
  ('expBoolean -> expBoolean logicalOperator expBoolean','expBoolean',3,'p_expBoolean_expr','sintactical.py',200),
]

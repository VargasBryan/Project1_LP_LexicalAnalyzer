
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'ADD AND ARRAY BACKSLASH BOOLEAN CHAR CLEAR CLOSE_BRACE CLOSE_BRACKET CLOSE_PARENTHESIS COLON COMMA COMMENTS CONST DELETE DIFERENTE DIVIGUAL DIVISION DOUBLE_QUOTES ELSE ELSEIF FALSE FLOAT FOR FUNCTION GET HAS IF IGUAL IGUALIGUAL INT INTEGER LET LINE_BREAK LONGCOMMENT MAP MASIGUAL MAYORIGUALQUE MAYORQUE MENORIGUALQUE MENORQUE MENOSIGUAL MODIGUAL MULTIPLICACION NAME NEW NOT NULL OPEN_BRACE OPEN_BRACKET OPEN_PARENTHESIS OR POINT POP PORIGUAL POTIGUAL PRINT PUSH RESTA RETURN SEMICOLON SET SINGLE_QUOTE STRING SUMA TRUE UNSHIFT VAR WHILEexpression : variable\n    | variable expression\n    | dataStruct\n    | dataStruct expression\n    | controlStruct\n    | controlStruct expression\n    | methodsSet\n    | mapFunctions\n    | arrayFn\n    | declaration\n    | print\n    | return\n    | functionnumber : INTEGER\n    | FLOAT\n    | RESTA INTEGER\n    | RESTA FLOATvariable : type NAME IGUAL datatype SEMICOLON\n        | type NAME IGUAL operations SEMICOLON\n        | NAME IGUAL datatype SEMICOLONcontrolStruct : while\n    | for\n    | ifdataStruct : array\n    | set\n    | map while : WHILE OPEN_PARENTHESIS controlArg CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE\n    | WHILE OPEN_PARENTHESIS bool CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACEif : soloIf \n    | soloIf elseIf\n    | soloIf elseIf else\n    | soloIf else soloIf : IF OPEN_PARENTHESIS controlArg CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE elseIf : ELSEIF OPEN_PARENTHESIS controlArg CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE\n        | ELSEIF OPEN_PARENTHESIS controlArg CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE soloIf else : ELSE OPEN_BRACE expression CLOSE_BRACEcontrolArg : element clause elementfor : FOR OPEN_PARENTHESIS inicialization SEMICOLON expBoolean SEMICOLON operations CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE inicialization : type NAME IGUAL number\n    | NAME IGUAL numberoperations : number operand number\n    | NAME\n    | NAME SUMA SUMA\n    | number\n    | number operand NAME operations\n    | NAME operand number operations\n    | number operand NAME\n    | NAME operand number\n    | NAME operand NAME operations\n    | number operand number operand operationsdatatype : number\n    | STRING\n    | CHAR\n    | operationsoperand : SUMA \n    | RESTA \n    | MULTIPLICACION \n    | DIVISIONbool : TRUE\n    | FALSEtype : CONST\n    | LET\n    | VARclause :  IGUALIGUAL\n    | DIFERENTE\n    | MAYORQUE\n    | MAYORIGUALQUE\n    | MENORQUE\n    | MENORIGUALQUE value : NAME\n    | numberarray : type NAME IGUAL OPEN_BRACKET items CLOSE_BRACKET SEMICOLON\n    | type NAME IGUAL NEW ARRAY OPEN_PARENTHESIS items CLOSE_PARENTHESIS SEMICOLONmap : iniciarMap\n        | escribirMap\n        | generarMap iniciarMap : variable IGUAL NEW MAP OPEN_PARENTHESIS CLOSE_PARENTHESIS SEMICOLONescribirMap : variable IGUAL OPEN_BRACE claveValor CLOSE_BRACEclaveValor : clave COLON valor\n    | clave COLON valor COMMA claveValorclave : datatypevalor : datatype\n        | dataStructgenerarMap : variable IGUAL OPEN_BRACE tuplas CLOSE_BRACEtuplas : tupla\n        | tupla COMMA tuplas  tupla : OPEN_BRACKET datatype CLOSE_BRACKET SEMICOLON\n        | OPEN_BRACKET datatype COMMA datatype CLOSE_BRACKET SEMICOLONmapFunctions : NAME POINT CLEAR OPEN_PARENTHESIS CLOSE_PARENTHESIS SEMICOLON\n        | NAME POINT GET OPEN_PARENTHESIS clave CLOSE_PARENTHESIS SEMICOLON\n        | NAME POINT HAS OPEN_PARENTHESIS clave CLOSE_PARENTHESIS SEMICOLONarrayFn : NAME POINT POP OPEN_PARENTHESIS CLOSE_PARENTHESIS SEMICOLON\n    | NAME POINT PUSH OPEN_PARENTHESIS element CLOSE_PARENTHESIS SEMICOLON\n    | NAME POINT UNSHIFT OPEN_PARENTHESIS element CLOSE_PARENTHESIS SEMICOLONset : type NAME IGUAL NEW SET OPEN_PARENTHESIS CLOSE_PARENTHESIS SEMICOLON\n    | type NAME IGUAL NEW SET OPEN_PARENTHESIS OPEN_BRACKET items CLOSE_BRACKET CLOSE_PARENTHESIS SEMICOLON\n    | type NAME IGUAL NEW SET OPEN_PARENTHESIS element CLOSE_PARENTHESIS SEMICOLON\n    | NAME IGUAL NEW SET OPEN_PARENTHESIS CLOSE_PARENTHESIS SEMICOLON\n    | NAME IGUAL NEW SET OPEN_PARENTHESIS OPEN_BRACKET items CLOSE_BRACKET CLOSE_PARENTHESIS SEMICOLON\n    | NAME IGUAL NEW SET OPEN_PARENTHESIS element CLOSE_PARENTHESIS SEMICOLONmethodsSet : NAME POINT ADD OPEN_PARENTHESIS element CLOSE_PARENTHESIS SEMICOLON\n    | NAME POINT DELETE OPEN_PARENTHESIS element CLOSE_PARENTHESIS SEMICOLON\n    | NAME POINT CLEAR OPEN_PARENTHESIS CLOSE_PARENTHESIS SEMICOLON items : number\n    | cadenacadena : STRING \n    | STRING COMMA cadenaelement : STRING\n    | number\n    | NAMEdeclaration : NAME IGUAL element SEMICOLONlogicalOperator : AND\n    | ORexpBoolean : controlArg\n    | bool\n    | NOT expBoolean\n    | expBoolean logicalOperator expBooleanfunction : FUNCTION NAME OPEN_PARENTHESIS CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE\n    | FUNCTION NAME OPEN_PARENTHESIS parameter CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE parameter : element\n    | element parameter\n    return : RETURN element SEMICOLONprint : PRINT OPEN_PARENTHESIS CLOSE_PARENTHESIS SEMICOLON'
    
_lr_action_items = {'NAME':([0,2,3,4,12,14,15,16,17,18,19,21,22,23,24,25,26,27,28,31,38,42,43,44,45,46,49,50,51,52,55,57,58,77,78,79,86,88,89,90,98,106,107,108,109,110,111,114,115,116,117,119,120,122,123,127,130,131,132,133,134,135,136,137,144,145,146,149,150,158,159,160,162,171,174,175,180,184,185,191,195,199,206,217,220,221,222,223,226,228,229,230,234,240,252,253,257,259,262,266,269,271,273,275,276,278,280,281,],[13,13,13,13,37,-24,-25,-26,-21,-22,-23,44,48,-61,-62,-63,-74,-75,-76,-29,59,-108,-109,-110,-14,-15,44,87,-30,-32,44,101,101,-16,-17,44,138,-31,44,13,101,-55,158,-56,-57,-58,-20,162,-55,44,44,101,101,44,44,44,44,-64,-65,-66,-67,-68,-69,44,-78,-84,190,-18,-19,101,101,44,101,13,13,13,44,-36,13,231,101,44,101,13,101,44,-112,-113,13,-77,101,101,-72,-98,-27,-28,-33,101,-95,-100,-34,-73,-97,13,-35,-99,-96,-38,]),'PRINT':([0,2,3,4,14,15,16,17,18,19,26,27,28,31,51,52,88,90,111,144,145,149,150,171,174,175,184,185,217,226,228,234,240,252,253,257,262,266,269,271,273,275,276,278,280,281,],[20,20,20,20,-24,-25,-26,-21,-22,-23,-74,-75,-76,-29,-30,-32,-31,20,-20,-78,-84,-18,-19,20,20,20,-36,20,20,20,-77,-72,-98,-27,-28,-33,-95,-100,-34,-73,-97,20,-35,-99,-96,-38,]),'RETURN':([0,2,3,4,14,15,16,17,18,19,26,27,28,31,51,52,88,90,111,144,145,149,150,171,174,175,184,185,217,226,228,234,240,252,253,257,262,266,269,271,273,275,276,278,280,281,],[21,21,21,21,-24,-25,-26,-21,-22,-23,-74,-75,-76,-29,-30,-32,-31,21,-20,-78,-84,-18,-19,21,21,21,-36,21,21,21,-77,-72,-98,-27,-28,-33,-95,-100,-34,-73,-97,21,-35,-99,-96,-38,]),'FUNCTION':([0,2,3,4,14,15,16,17,18,19,26,27,28,31,51,52,88,90,111,144,145,149,150,171,174,175,184,185,217,226,228,234,240,252,253,257,262,266,269,271,273,275,276,278,280,281,],[22,22,22,22,-24,-25,-26,-21,-22,-23,-74,-75,-76,-29,-30,-32,-31,22,-20,-78,-84,-18,-19,22,22,22,-36,22,22,22,-77,-72,-98,-27,-28,-33,-95,-100,-34,-73,-97,22,-35,-99,-96,-38,]),'CONST':([0,2,3,4,14,15,16,17,18,19,26,27,28,31,50,51,52,88,90,111,144,145,146,149,150,171,174,175,184,185,217,226,228,234,240,252,253,257,262,266,269,271,273,275,276,278,280,281,],[23,23,23,23,-24,-25,-26,-21,-22,-23,-74,-75,-76,-29,23,-30,-32,-31,23,-20,-78,-84,23,-18,-19,23,23,23,-36,23,23,23,-77,-72,-98,-27,-28,-33,-95,-100,-34,-73,-97,23,-35,-99,-96,-38,]),'LET':([0,2,3,4,14,15,16,17,18,19,26,27,28,31,50,51,52,88,90,111,144,145,146,149,150,171,174,175,184,185,217,226,228,234,240,252,253,257,262,266,269,271,273,275,276,278,280,281,],[24,24,24,24,-24,-25,-26,-21,-22,-23,-74,-75,-76,-29,24,-30,-32,-31,24,-20,-78,-84,24,-18,-19,24,24,24,-36,24,24,24,-77,-72,-98,-27,-28,-33,-95,-100,-34,-73,-97,24,-35,-99,-96,-38,]),'VAR':([0,2,3,4,14,15,16,17,18,19,26,27,28,31,50,51,52,88,90,111,144,145,146,149,150,171,174,175,184,185,217,226,228,234,240,252,253,257,262,266,269,271,273,275,276,278,280,281,],[25,25,25,25,-24,-25,-26,-21,-22,-23,-74,-75,-76,-29,25,-30,-32,-31,25,-20,-78,-84,25,-18,-19,25,25,25,-36,25,25,25,-77,-72,-98,-27,-28,-33,-95,-100,-34,-73,-97,25,-35,-99,-96,-38,]),'WHILE':([0,2,3,4,14,15,16,17,18,19,26,27,28,31,51,52,88,90,111,144,145,149,150,171,174,175,184,185,217,226,228,234,240,252,253,257,262,266,269,271,273,275,276,278,280,281,],[29,29,29,29,-24,-25,-26,-21,-22,-23,-74,-75,-76,-29,-30,-32,-31,29,-20,-78,-84,-18,-19,29,29,29,-36,29,29,29,-77,-72,-98,-27,-28,-33,-95,-100,-34,-73,-97,29,-35,-99,-96,-38,]),'FOR':([0,2,3,4,14,15,16,17,18,19,26,27,28,31,51,52,88,90,111,144,145,149,150,171,174,175,184,185,217,226,228,234,240,252,253,257,262,266,269,271,273,275,276,278,280,281,],[30,30,30,30,-24,-25,-26,-21,-22,-23,-74,-75,-76,-29,-30,-32,-31,30,-20,-78,-84,-18,-19,30,30,30,-36,30,30,30,-77,-72,-98,-27,-28,-33,-95,-100,-34,-73,-97,30,-35,-99,-96,-38,]),'IF':([0,2,3,4,14,15,16,17,18,19,26,27,28,31,51,52,88,90,111,144,145,149,150,171,174,175,184,185,217,226,228,234,240,252,253,257,262,266,269,271,273,275,276,278,280,281,],[32,32,32,32,-24,-25,-26,-21,-22,-23,-74,-75,-76,-29,-30,-32,-31,32,-20,-78,-84,-18,-19,32,32,32,-36,32,32,32,-77,-72,-98,-27,-28,-33,-95,-100,32,-73,-97,32,-35,-99,-96,-38,]),'$end':([1,2,3,4,5,6,7,8,9,10,11,14,15,16,17,18,19,26,27,28,31,33,35,36,51,52,76,88,111,112,124,144,145,149,150,184,210,213,228,234,240,244,245,246,247,248,249,250,252,253,257,262,266,267,269,271,273,276,278,280,281,],[0,-1,-3,-5,-7,-8,-9,-10,-11,-12,-13,-24,-25,-26,-21,-22,-23,-74,-75,-76,-29,-2,-4,-6,-30,-32,-122,-31,-20,-111,-123,-78,-84,-18,-19,-36,-89,-92,-77,-72,-98,-101,-102,-90,-91,-93,-94,-118,-27,-28,-33,-95,-100,-119,-34,-73,-97,-35,-99,-96,-38,]),'CLOSE_BRACE':([2,3,4,5,6,7,8,9,10,11,14,15,16,17,18,19,26,27,28,31,33,35,36,45,46,51,52,65,66,76,77,78,88,93,94,96,99,100,101,111,112,124,141,144,145,149,150,157,159,161,162,184,187,188,189,190,193,200,201,202,207,210,213,216,218,219,227,228,232,234,240,243,244,245,246,247,248,249,250,251,252,253,256,257,258,262,266,267,269,270,271,273,276,278,279,280,281,],[-1,-3,-5,-7,-8,-9,-10,-11,-12,-13,-24,-25,-26,-21,-22,-23,-74,-75,-76,-29,-2,-4,-6,-14,-15,-30,-32,-53,-54,-122,-16,-17,-31,144,145,-85,-44,-52,-42,-20,-111,-123,184,-78,-84,-18,-19,-43,-48,-41,-47,-36,-79,-82,-83,-42,-86,-49,-44,-46,-45,-89,-92,250,252,253,257,-77,-87,-72,-98,-50,-101,-102,-90,-91,-93,-94,-118,267,-27,-28,269,-33,-80,-95,-100,-119,-34,-88,-73,-97,-35,-99,281,-96,-38,]),'IGUAL':([2,13,37,87,111,138,149,150,190,192,231,],[34,38,58,139,-20,181,-18,-19,230,34,259,]),'POINT':([13,],[39,]),'COMMA':([14,15,16,26,27,28,45,46,65,66,77,78,96,99,100,101,144,145,148,154,157,159,161,162,187,188,189,190,200,201,202,207,228,232,234,240,243,262,266,270,271,273,278,280,],[-24,-25,-26,-74,-75,-76,-14,-15,-53,-54,-16,-17,147,-44,-52,-42,-78,-84,195,197,-43,-48,-41,-47,229,-82,-83,-42,-49,-44,-46,-45,-77,-87,-72,-98,-50,-95,-100,-88,-73,-97,-99,-96,]),'OPEN_PARENTHESIS':([20,29,30,32,48,53,67,68,69,70,71,72,73,74,92,113,155,156,],[40,49,50,55,79,89,116,117,118,119,120,121,122,123,143,160,198,199,]),'STRING':([21,38,42,43,44,45,46,49,55,57,58,77,78,79,89,98,104,116,117,119,120,122,123,127,130,131,132,133,134,135,136,137,146,160,180,195,197,198,199,204,221,222,223,229,230,238,259,],[42,64,-108,-109,-110,-14,-15,42,42,100,100,-16,-17,42,42,100,154,42,42,100,100,42,42,42,42,-64,-65,-66,-67,-68,-69,42,100,42,42,100,154,154,42,154,42,-112,-113,100,100,154,100,]),'INTEGER':([21,38,42,43,44,45,46,47,49,55,57,58,77,78,79,89,98,104,106,107,108,109,110,114,115,116,117,119,120,122,123,127,130,131,132,133,134,135,136,137,139,146,158,159,160,162,180,181,195,198,199,204,206,220,221,222,223,229,230,238,259,],[45,45,-108,-109,-110,-14,-15,77,45,45,45,45,-16,-17,45,45,45,45,-55,45,-56,-57,-58,45,-55,45,45,45,45,45,45,45,45,-64,-65,-66,-67,-68,-69,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,-112,-113,45,45,45,45,]),'FLOAT':([21,38,42,43,44,45,46,47,49,55,57,58,77,78,79,89,98,104,106,107,108,109,110,114,115,116,117,119,120,122,123,127,130,131,132,133,134,135,136,137,139,146,158,159,160,162,180,181,195,198,199,204,206,220,221,222,223,229,230,238,259,],[46,46,-108,-109,-110,-14,-15,78,46,46,46,46,-16,-17,46,46,46,46,-55,46,-56,-57,-58,46,-55,46,46,46,46,46,46,46,46,-64,-65,-66,-67,-68,-69,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,-112,-113,46,46,46,46,]),'RESTA':([21,38,42,43,44,45,46,49,55,57,58,59,63,77,78,79,89,98,99,101,104,106,107,108,109,110,114,115,116,117,119,120,122,123,127,130,131,132,133,134,135,136,137,139,146,158,159,160,161,162,180,181,190,195,198,199,201,204,206,220,221,222,223,229,230,238,259,],[47,47,-108,-109,-110,-14,-15,47,47,47,47,108,108,-16,-17,47,47,47,108,108,47,-55,47,-56,-57,-58,47,-55,47,47,47,47,47,47,47,47,-64,-65,-66,-67,-68,-69,47,47,47,47,47,47,108,47,47,47,108,47,47,47,108,47,47,47,47,-112,-113,47,47,47,47,]),'ELSEIF':([31,257,],[53,-33,]),'ELSE':([31,51,257,269,276,],[54,54,-33,-34,-35,]),'NEW':([34,38,58,230,259,],[56,62,105,62,105,]),'OPEN_BRACE':([34,54,125,128,129,142,172,183,268,],[57,90,171,174,175,185,217,226,275,]),'CHAR':([38,57,58,98,119,120,146,195,229,230,259,],[65,65,65,65,65,65,65,65,65,65,65,]),'ADD':([39,],[67,]),'DELETE':([39,],[68,]),'CLEAR':([39,],[69,]),'GET':([39,],[70,]),'HAS':([39,],[71,]),'POP':([39,],[72,]),'PUSH':([39,],[73,]),'UNSHIFT':([39,],[74,]),'CLOSE_PARENTHESIS':([40,42,43,44,45,46,65,66,77,78,79,80,81,83,84,91,97,99,100,101,118,121,126,127,140,143,152,153,154,157,159,160,161,162,163,164,166,167,169,170,173,176,199,200,201,202,205,207,235,236,239,243,254,265,272,],[75,-108,-109,-110,-14,-15,-53,-54,-16,-17,125,128,129,-59,-60,142,-81,-44,-52,-42,165,168,172,-120,183,186,-104,-105,-106,-43,-48,203,-41,-47,208,209,211,212,214,215,-121,-37,237,-49,-44,-46,242,-45,-107,261,264,-50,268,274,277,]),'SEMICOLON':([41,42,43,44,45,46,59,60,61,63,64,65,66,75,77,78,83,84,85,99,100,101,102,103,157,159,161,162,165,168,176,177,178,179,182,186,194,196,200,201,202,203,207,208,209,211,212,214,215,224,225,237,242,243,255,260,261,264,274,277,],[76,-108,-109,-110,-14,-15,-42,111,112,-44,-52,-53,-54,124,-16,-17,-59,-60,137,-44,-52,-42,149,150,-43,-48,-41,-47,210,213,-37,220,-114,-115,-40,228,232,234,-49,-44,-46,240,-45,244,245,246,247,248,249,-116,-39,262,266,-50,-117,270,271,273,278,280,]),'IGUALIGUAL':([42,43,44,45,46,77,78,82,],[-108,-109,-110,-14,-15,-16,-17,131,]),'DIFERENTE':([42,43,44,45,46,77,78,82,],[-108,-109,-110,-14,-15,-16,-17,132,]),'MAYORQUE':([42,43,44,45,46,77,78,82,],[-108,-109,-110,-14,-15,-16,-17,133,]),'MAYORIGUALQUE':([42,43,44,45,46,77,78,82,],[-108,-109,-110,-14,-15,-16,-17,134,]),'MENORQUE':([42,43,44,45,46,77,78,82,],[-108,-109,-110,-14,-15,-16,-17,135,]),'MENORIGUALQUE':([42,43,44,45,46,77,78,82,],[-108,-109,-110,-14,-15,-16,-17,136,]),'AND':([42,43,44,45,46,77,78,83,84,176,177,178,179,224,255,],[-108,-109,-110,-14,-15,-16,-17,-59,-60,-37,222,-114,-115,222,222,]),'OR':([42,43,44,45,46,77,78,83,84,176,177,178,179,224,255,],[-108,-109,-110,-14,-15,-16,-17,-59,-60,-37,223,-114,-115,223,223,]),'SUMA':([45,46,59,63,77,78,99,101,106,161,190,201,],[-14,-15,106,115,-16,-17,115,106,157,115,106,115,]),'MULTIPLICACION':([45,46,59,63,77,78,99,101,161,190,201,],[-14,-15,109,109,-16,-17,109,109,109,109,109,]),'DIVISION':([45,46,59,63,77,78,99,101,161,190,201,],[-14,-15,110,110,-16,-17,110,110,110,110,110,]),'COLON':([45,46,65,66,77,78,95,97,99,100,101,157,159,161,162,200,201,202,207,243,],[-14,-15,-53,-54,-16,-17,146,-81,-44,-52,-42,-43,-48,-41,-47,-49,-44,-46,-45,-50,]),'CLOSE_BRACKET':([45,46,65,66,77,78,99,100,101,148,151,152,153,154,157,159,161,162,200,201,202,207,233,235,241,243,263,],[-14,-15,-53,-54,-16,-17,-44,-52,-42,194,196,-104,-105,-106,-43,-48,-41,-47,-49,-44,-46,-45,260,-107,265,-50,272,]),'TRUE':([49,137,180,221,222,223,],[83,83,83,83,-112,-113,]),'FALSE':([49,137,180,221,222,223,],[84,84,84,84,-112,-113,]),'MAP':([56,],[92,]),'OPEN_BRACKET':([57,58,147,160,199,259,],[98,104,98,204,238,104,]),'SET':([62,105,],[113,156,]),'ARRAY':([105,],[155,]),'NOT':([137,180,221,222,223,],[180,180,180,-112,-113,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'expression':([0,2,3,4,90,171,174,175,185,217,226,275,],[1,33,35,36,141,216,218,219,227,251,256,279,]),'variable':([0,2,3,4,90,146,171,174,175,185,217,226,275,],[2,2,2,2,2,192,2,2,2,2,2,2,2,]),'dataStruct':([0,2,3,4,90,146,171,174,175,185,217,226,275,],[3,3,3,3,3,189,3,3,3,3,3,3,3,]),'controlStruct':([0,2,3,4,90,171,174,175,185,217,226,275,],[4,4,4,4,4,4,4,4,4,4,4,4,]),'methodsSet':([0,2,3,4,90,171,174,175,185,217,226,275,],[5,5,5,5,5,5,5,5,5,5,5,5,]),'mapFunctions':([0,2,3,4,90,171,174,175,185,217,226,275,],[6,6,6,6,6,6,6,6,6,6,6,6,]),'arrayFn':([0,2,3,4,90,171,174,175,185,217,226,275,],[7,7,7,7,7,7,7,7,7,7,7,7,]),'declaration':([0,2,3,4,90,171,174,175,185,217,226,275,],[8,8,8,8,8,8,8,8,8,8,8,8,]),'print':([0,2,3,4,90,171,174,175,185,217,226,275,],[9,9,9,9,9,9,9,9,9,9,9,9,]),'return':([0,2,3,4,90,171,174,175,185,217,226,275,],[10,10,10,10,10,10,10,10,10,10,10,10,]),'function':([0,2,3,4,90,171,174,175,185,217,226,275,],[11,11,11,11,11,11,11,11,11,11,11,11,]),'type':([0,2,3,4,50,90,146,171,174,175,185,217,226,275,],[12,12,12,12,86,12,191,12,12,12,12,12,12,12,]),'array':([0,2,3,4,90,146,171,174,175,185,217,226,275,],[14,14,14,14,14,14,14,14,14,14,14,14,14,]),'set':([0,2,3,4,90,146,171,174,175,185,217,226,275,],[15,15,15,15,15,15,15,15,15,15,15,15,15,]),'map':([0,2,3,4,90,146,171,174,175,185,217,226,275,],[16,16,16,16,16,16,16,16,16,16,16,16,16,]),'while':([0,2,3,4,90,171,174,175,185,217,226,275,],[17,17,17,17,17,17,17,17,17,17,17,17,]),'for':([0,2,3,4,90,171,174,175,185,217,226,275,],[18,18,18,18,18,18,18,18,18,18,18,18,]),'if':([0,2,3,4,90,171,174,175,185,217,226,275,],[19,19,19,19,19,19,19,19,19,19,19,19,]),'iniciarMap':([0,2,3,4,90,146,171,174,175,185,217,226,275,],[26,26,26,26,26,26,26,26,26,26,26,26,26,]),'escribirMap':([0,2,3,4,90,146,171,174,175,185,217,226,275,],[27,27,27,27,27,27,27,27,27,27,27,27,27,]),'generarMap':([0,2,3,4,90,146,171,174,175,185,217,226,275,],[28,28,28,28,28,28,28,28,28,28,28,28,28,]),'soloIf':([0,2,3,4,90,171,174,175,185,217,226,269,275,],[31,31,31,31,31,31,31,31,31,31,31,276,31,]),'element':([21,38,49,55,79,89,116,117,122,123,127,130,137,160,180,199,221,],[41,61,82,82,127,82,163,164,169,170,127,176,82,205,82,239,82,]),'number':([21,38,49,55,57,58,79,89,98,104,107,114,116,117,119,120,122,123,127,130,137,139,146,158,159,160,162,180,181,195,198,199,204,206,220,221,229,230,238,259,],[43,63,43,43,99,99,43,43,99,152,159,161,43,43,99,99,43,43,43,43,43,182,99,201,201,43,201,43,225,99,152,43,152,201,201,43,99,99,152,99,]),'elseIf':([31,],[51,]),'else':([31,51,],[52,88,]),'datatype':([38,57,58,98,119,120,146,195,229,230,259,],[60,97,102,148,97,97,188,233,97,60,102,]),'operations':([38,57,58,98,119,120,146,158,159,162,195,206,220,229,230,259,],[66,66,103,66,66,66,66,200,202,207,66,243,254,66,66,103,]),'controlArg':([49,55,89,137,180,221,],[80,91,140,178,178,178,]),'bool':([49,137,180,221,],[81,179,179,179,]),'inicialization':([50,],[85,]),'claveValor':([57,229,],[93,258,]),'tuplas':([57,147,],[94,193,]),'clave':([57,119,120,229,],[95,166,167,95,]),'tupla':([57,147,],[96,96,]),'operand':([59,63,99,101,161,190,201,],[107,114,114,107,206,107,114,]),'parameter':([79,127,],[126,173,]),'clause':([82,],[130,]),'items':([104,198,204,238,],[151,236,241,263,]),'cadena':([104,197,198,204,238,],[153,235,153,153,153,]),'expBoolean':([137,180,221,],[177,224,255,]),'valor':([146,],[187,]),'logicalOperator':([177,224,255,],[221,221,221,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> expression","S'",1,None,None,None),
  ('expression -> variable','expression',1,'p_expression_expr','sintactical.py',12),
  ('expression -> variable expression','expression',2,'p_expression_expr','sintactical.py',13),
  ('expression -> dataStruct','expression',1,'p_expression_expr','sintactical.py',14),
  ('expression -> dataStruct expression','expression',2,'p_expression_expr','sintactical.py',15),
  ('expression -> controlStruct','expression',1,'p_expression_expr','sintactical.py',16),
  ('expression -> controlStruct expression','expression',2,'p_expression_expr','sintactical.py',17),
  ('expression -> methodsSet','expression',1,'p_expression_expr','sintactical.py',18),
  ('expression -> mapFunctions','expression',1,'p_expression_expr','sintactical.py',19),
  ('expression -> arrayFn','expression',1,'p_expression_expr','sintactical.py',20),
  ('expression -> declaration','expression',1,'p_expression_expr','sintactical.py',21),
  ('expression -> print','expression',1,'p_expression_expr','sintactical.py',22),
  ('expression -> return','expression',1,'p_expression_expr','sintactical.py',23),
  ('expression -> function','expression',1,'p_expression_expr','sintactical.py',24),
  ('number -> INTEGER','number',1,'p_number_expr','sintactical.py',27),
  ('number -> FLOAT','number',1,'p_number_expr','sintactical.py',28),
  ('number -> RESTA INTEGER','number',2,'p_number_expr','sintactical.py',29),
  ('number -> RESTA FLOAT','number',2,'p_number_expr','sintactical.py',30),
  ('variable -> type NAME IGUAL datatype SEMICOLON','variable',5,'p_variable_expr','sintactical.py',32),
  ('variable -> type NAME IGUAL operations SEMICOLON','variable',5,'p_variable_expr','sintactical.py',33),
  ('variable -> NAME IGUAL datatype SEMICOLON','variable',4,'p_variable_expr','sintactical.py',34),
  ('controlStruct -> while','controlStruct',1,'p_controlStruct_expr','sintactical.py',37),
  ('controlStruct -> for','controlStruct',1,'p_controlStruct_expr','sintactical.py',38),
  ('controlStruct -> if','controlStruct',1,'p_controlStruct_expr','sintactical.py',39),
  ('dataStruct -> array','dataStruct',1,'p_dataStruct_expr','sintactical.py',42),
  ('dataStruct -> set','dataStruct',1,'p_dataStruct_expr','sintactical.py',43),
  ('dataStruct -> map','dataStruct',1,'p_dataStruct_expr','sintactical.py',44),
  ('while -> WHILE OPEN_PARENTHESIS controlArg CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE','while',7,'p_while_expr','sintactical.py',47),
  ('while -> WHILE OPEN_PARENTHESIS bool CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE','while',7,'p_while_expr','sintactical.py',48),
  ('if -> soloIf','if',1,'p_if_expr','sintactical.py',51),
  ('if -> soloIf elseIf','if',2,'p_if_expr','sintactical.py',52),
  ('if -> soloIf elseIf else','if',3,'p_if_expr','sintactical.py',53),
  ('if -> soloIf else','if',2,'p_if_expr','sintactical.py',54),
  ('soloIf -> IF OPEN_PARENTHESIS controlArg CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE','soloIf',7,'p_soloIf_expr','sintactical.py',57),
  ('elseIf -> ELSEIF OPEN_PARENTHESIS controlArg CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE','elseIf',7,'p_elseIf_expr','sintactical.py',60),
  ('elseIf -> ELSEIF OPEN_PARENTHESIS controlArg CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE soloIf','elseIf',8,'p_elseIf_expr','sintactical.py',61),
  ('else -> ELSE OPEN_BRACE expression CLOSE_BRACE','else',4,'p_else_expr','sintactical.py',64),
  ('controlArg -> element clause element','controlArg',3,'p_controlArg_expr','sintactical.py',67),
  ('for -> FOR OPEN_PARENTHESIS inicialization SEMICOLON expBoolean SEMICOLON operations CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE','for',11,'p_for_expr','sintactical.py',70),
  ('inicialization -> type NAME IGUAL number','inicialization',4,'p_inicialization','sintactical.py',73),
  ('inicialization -> NAME IGUAL number','inicialization',3,'p_inicialization','sintactical.py',74),
  ('operations -> number operand number','operations',3,'p_operations','sintactical.py',77),
  ('operations -> NAME','operations',1,'p_operations','sintactical.py',78),
  ('operations -> NAME SUMA SUMA','operations',3,'p_operations','sintactical.py',79),
  ('operations -> number','operations',1,'p_operations','sintactical.py',80),
  ('operations -> number operand NAME operations','operations',4,'p_operations','sintactical.py',81),
  ('operations -> NAME operand number operations','operations',4,'p_operations','sintactical.py',82),
  ('operations -> number operand NAME','operations',3,'p_operations','sintactical.py',83),
  ('operations -> NAME operand number','operations',3,'p_operations','sintactical.py',84),
  ('operations -> NAME operand NAME operations','operations',4,'p_operations','sintactical.py',85),
  ('operations -> number operand number operand operations','operations',5,'p_operations','sintactical.py',86),
  ('datatype -> number','datatype',1,'p_datatype_expr','sintactical.py',89),
  ('datatype -> STRING','datatype',1,'p_datatype_expr','sintactical.py',90),
  ('datatype -> CHAR','datatype',1,'p_datatype_expr','sintactical.py',91),
  ('datatype -> operations','datatype',1,'p_datatype_expr','sintactical.py',92),
  ('operand -> SUMA','operand',1,'p_operand_expr','sintactical.py',95),
  ('operand -> RESTA','operand',1,'p_operand_expr','sintactical.py',96),
  ('operand -> MULTIPLICACION','operand',1,'p_operand_expr','sintactical.py',97),
  ('operand -> DIVISION','operand',1,'p_operand_expr','sintactical.py',98),
  ('bool -> TRUE','bool',1,'p_bool_expr','sintactical.py',101),
  ('bool -> FALSE','bool',1,'p_bool_expr','sintactical.py',102),
  ('type -> CONST','type',1,'p_type_expr','sintactical.py',105),
  ('type -> LET','type',1,'p_type_expr','sintactical.py',106),
  ('type -> VAR','type',1,'p_type_expr','sintactical.py',107),
  ('clause -> IGUALIGUAL','clause',1,'p_clause_expr','sintactical.py',110),
  ('clause -> DIFERENTE','clause',1,'p_clause_expr','sintactical.py',111),
  ('clause -> MAYORQUE','clause',1,'p_clause_expr','sintactical.py',112),
  ('clause -> MAYORIGUALQUE','clause',1,'p_clause_expr','sintactical.py',113),
  ('clause -> MENORQUE','clause',1,'p_clause_expr','sintactical.py',114),
  ('clause -> MENORIGUALQUE','clause',1,'p_clause_expr','sintactical.py',115),
  ('value -> NAME','value',1,'p_value_expr','sintactical.py',118),
  ('value -> number','value',1,'p_value_expr','sintactical.py',119),
  ('array -> type NAME IGUAL OPEN_BRACKET items CLOSE_BRACKET SEMICOLON','array',7,'p_array_expr','sintactical.py',122),
  ('array -> type NAME IGUAL NEW ARRAY OPEN_PARENTHESIS items CLOSE_PARENTHESIS SEMICOLON','array',9,'p_array_expr','sintactical.py',123),
  ('map -> iniciarMap','map',1,'p_map_expr','sintactical.py',126),
  ('map -> escribirMap','map',1,'p_map_expr','sintactical.py',127),
  ('map -> generarMap','map',1,'p_map_expr','sintactical.py',128),
  ('iniciarMap -> variable IGUAL NEW MAP OPEN_PARENTHESIS CLOSE_PARENTHESIS SEMICOLON','iniciarMap',7,'p_iniciarMap_expr','sintactical.py',131),
  ('escribirMap -> variable IGUAL OPEN_BRACE claveValor CLOSE_BRACE','escribirMap',5,'p_escribirMap_expr','sintactical.py',134),
  ('claveValor -> clave COLON valor','claveValor',3,'p_claveValor_expr','sintactical.py',137),
  ('claveValor -> clave COLON valor COMMA claveValor','claveValor',5,'p_claveValor_expr','sintactical.py',138),
  ('clave -> datatype','clave',1,'p_clave_expr','sintactical.py',141),
  ('valor -> datatype','valor',1,'p_valor_expr','sintactical.py',144),
  ('valor -> dataStruct','valor',1,'p_valor_expr','sintactical.py',145),
  ('generarMap -> variable IGUAL OPEN_BRACE tuplas CLOSE_BRACE','generarMap',5,'p_generarMap_expr','sintactical.py',148),
  ('tuplas -> tupla','tuplas',1,'p_tuplas_expr','sintactical.py',151),
  ('tuplas -> tupla COMMA tuplas','tuplas',3,'p_tuplas_expr','sintactical.py',152),
  ('tupla -> OPEN_BRACKET datatype CLOSE_BRACKET SEMICOLON','tupla',4,'p_tupla_expr','sintactical.py',155),
  ('tupla -> OPEN_BRACKET datatype COMMA datatype CLOSE_BRACKET SEMICOLON','tupla',6,'p_tupla_expr','sintactical.py',156),
  ('mapFunctions -> NAME POINT CLEAR OPEN_PARENTHESIS CLOSE_PARENTHESIS SEMICOLON','mapFunctions',6,'p_mapFunctions_expr','sintactical.py',159),
  ('mapFunctions -> NAME POINT GET OPEN_PARENTHESIS clave CLOSE_PARENTHESIS SEMICOLON','mapFunctions',7,'p_mapFunctions_expr','sintactical.py',160),
  ('mapFunctions -> NAME POINT HAS OPEN_PARENTHESIS clave CLOSE_PARENTHESIS SEMICOLON','mapFunctions',7,'p_mapFunctions_expr','sintactical.py',161),
  ('arrayFn -> NAME POINT POP OPEN_PARENTHESIS CLOSE_PARENTHESIS SEMICOLON','arrayFn',6,'p_arrayFn_expr','sintactical.py',164),
  ('arrayFn -> NAME POINT PUSH OPEN_PARENTHESIS element CLOSE_PARENTHESIS SEMICOLON','arrayFn',7,'p_arrayFn_expr','sintactical.py',165),
  ('arrayFn -> NAME POINT UNSHIFT OPEN_PARENTHESIS element CLOSE_PARENTHESIS SEMICOLON','arrayFn',7,'p_arrayFn_expr','sintactical.py',166),
  ('set -> type NAME IGUAL NEW SET OPEN_PARENTHESIS CLOSE_PARENTHESIS SEMICOLON','set',8,'p_set_expr','sintactical.py',169),
  ('set -> type NAME IGUAL NEW SET OPEN_PARENTHESIS OPEN_BRACKET items CLOSE_BRACKET CLOSE_PARENTHESIS SEMICOLON','set',11,'p_set_expr','sintactical.py',170),
  ('set -> type NAME IGUAL NEW SET OPEN_PARENTHESIS element CLOSE_PARENTHESIS SEMICOLON','set',9,'p_set_expr','sintactical.py',171),
  ('set -> NAME IGUAL NEW SET OPEN_PARENTHESIS CLOSE_PARENTHESIS SEMICOLON','set',7,'p_set_expr','sintactical.py',172),
  ('set -> NAME IGUAL NEW SET OPEN_PARENTHESIS OPEN_BRACKET items CLOSE_BRACKET CLOSE_PARENTHESIS SEMICOLON','set',10,'p_set_expr','sintactical.py',173),
  ('set -> NAME IGUAL NEW SET OPEN_PARENTHESIS element CLOSE_PARENTHESIS SEMICOLON','set',8,'p_set_expr','sintactical.py',174),
  ('methodsSet -> NAME POINT ADD OPEN_PARENTHESIS element CLOSE_PARENTHESIS SEMICOLON','methodsSet',7,'p_methodsSet_expr','sintactical.py',177),
  ('methodsSet -> NAME POINT DELETE OPEN_PARENTHESIS element CLOSE_PARENTHESIS SEMICOLON','methodsSet',7,'p_methodsSet_expr','sintactical.py',178),
  ('methodsSet -> NAME POINT CLEAR OPEN_PARENTHESIS CLOSE_PARENTHESIS SEMICOLON','methodsSet',6,'p_methodsSet_expr','sintactical.py',179),
  ('items -> number','items',1,'p_items_expr','sintactical.py',182),
  ('items -> cadena','items',1,'p_items_expr','sintactical.py',183),
  ('cadena -> STRING','cadena',1,'p_cadena_expr','sintactical.py',190),
  ('cadena -> STRING COMMA cadena','cadena',3,'p_cadena_expr','sintactical.py',191),
  ('element -> STRING','element',1,'p_element_expr','sintactical.py',194),
  ('element -> number','element',1,'p_element_expr','sintactical.py',195),
  ('element -> NAME','element',1,'p_element_expr','sintactical.py',196),
  ('declaration -> NAME IGUAL element SEMICOLON','declaration',4,'p_declaration_expr','sintactical.py',199),
  ('logicalOperator -> AND','logicalOperator',1,'p_logicalOperator_expr','sintactical.py',202),
  ('logicalOperator -> OR','logicalOperator',1,'p_logicalOperator_expr','sintactical.py',203),
  ('expBoolean -> controlArg','expBoolean',1,'p_expBoolean_expr','sintactical.py',206),
  ('expBoolean -> bool','expBoolean',1,'p_expBoolean_expr','sintactical.py',207),
  ('expBoolean -> NOT expBoolean','expBoolean',2,'p_expBoolean_expr','sintactical.py',208),
  ('expBoolean -> expBoolean logicalOperator expBoolean','expBoolean',3,'p_expBoolean_expr','sintactical.py',209),
  ('function -> FUNCTION NAME OPEN_PARENTHESIS CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE','function',7,'p_function_expr','sintactical.py',212),
  ('function -> FUNCTION NAME OPEN_PARENTHESIS parameter CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE','function',8,'p_function_expr','sintactical.py',213),
  ('parameter -> element','parameter',1,'p_parameter_expr','sintactical.py',216),
  ('parameter -> element parameter','parameter',2,'p_parameter_expr','sintactical.py',217),
  ('return -> RETURN element SEMICOLON','return',3,'p_return_expr','sintactical.py',221),
  ('print -> PRINT OPEN_PARENTHESIS CLOSE_PARENTHESIS SEMICOLON','print',4,'p_print_expr','sintactical.py',224),
]

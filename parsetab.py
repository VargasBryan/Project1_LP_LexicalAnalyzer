
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'ADD AND ARRAY CHAR CLEAR CLOSE_BRACE CLOSE_BRACKET CLOSE_PARENTHESIS COLON COMMA COMMENTS CONST DELETE DIFERENTE DIVIGUAL DIVISION DOUBLE_QUOTES ELSE ELSEIF FALSE FLOAT FOR FUNCTION GET HAS IF IGUAL IGUALIGUAL INT INTEGER LET LINE_BREAK LONGCOMMENT MAP MASIGUAL MAYORIGUALQUE MAYORQUE MENORIGUALQUE MENORQUE MENOSIGUAL MODIGUAL MULTIPLICACION NAME NEW NOT NULL OPEN_BRACE OPEN_BRACKET OPEN_PARENTHESIS OR POINT POP PORIGUAL POTIGUAL PRINT PUSH RESTA RETURN SEMICOLON SET SINGLE_QUOTE STRING SUMA TRUE UNSHIFT VAR WHILEexpression : semiExpression\n    | semiExpression expressionsemiExpression : variable\n    | dataStruct\n    | controlStruct\n    | methodsSet\n    | mapFunctions\n    | arrayFn\n    | declaration\n    | print\n    | return\n    | function\n    | COMMENTS\n    | asigOpnumber : INTEGER\n    | FLOAT\n    | OPEN_PARENTHESIS RESTA INTEGER CLOSE_PARENTHESIS\n    | OPEN_PARENTHESIS RESTA FLOAT CLOSE_PARENTHESISvariable : type NAME IGUAL datatype SEMICOLON\n        | NAME IGUAL datatype SEMICOLONcontrolStruct : while\n    | for\n    | ifdataStruct : array\n    | set\n    | map while : WHILE OPEN_PARENTHESIS controlArg CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE\n    | WHILE OPEN_PARENTHESIS bool CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACEif : soloIf \n    | soloIf elseIf\n    | soloIf elseIf else\n    | soloIf else soloIf : IF OPEN_PARENTHESIS controlArg CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE elseIf : ELSEIF OPEN_PARENTHESIS controlArg CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE\n        | ELSEIF OPEN_PARENTHESIS controlArg CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE soloIf else : ELSE OPEN_BRACE expression CLOSE_BRACEcontrolArg : element clause elementfor : FOR OPEN_PARENTHESIS inicialization SEMICOLON expBoolean SEMICOLON operations CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE inicialization : type NAME IGUAL number\n    | NAME IGUAL numberoperations : number operand number\n    | NAME\n    | number\n    | number operand NAME operations\n    | NAME operand number operations\n    | number operand NAME\n    | NAME operand number\n    | NAME operand NAME operations\n    | number operand number operand operations\n    | NAME SUMA SUMA\n    | NAME RESTA RESTAdatatype : number\n    | STRING\n    | CHAR\n    | operations\n    | dataStructoperand : SUMA \n    | RESTA \n    | MULTIPLICACION \n    | DIVISIONoperadorAsig : MASIGUAL\n    | MENOSIGUAL\n    | PORIGUAL\n    | DIVIGUAL\n    | MODIGUAL\n    | POTIGUALasigOp : NAME operadorAsig number SEMICOLONbool : TRUE\n    | FALSEtype : CONST\n    | LET\n    | VARclause :  IGUALIGUAL\n    | DIFERENTE\n    | MAYORQUE\n    | MAYORIGUALQUE\n    | MENORQUE\n    | MENORIGUALQUE array : OPEN_BRACKET items CLOSE_BRACKET SEMICOLON\n    | NEW ARRAY OPEN_PARENTHESIS items CLOSE_PARENTHESIS SEMICOLONmap : iniciarMap\n        | escribirMap\n        | generarMap iniciarMap : NEW MAP OPEN_PARENTHESIS CLOSE_PARENTHESIS SEMICOLONescribirMap : OPEN_BRACE claveValor CLOSE_BRACEclaveValor : clave COLON datatype\n    | clave COLON datatype COMMA claveValorclave : datatypegenerarMap : OPEN_BRACE tuplas CLOSE_BRACEtuplas : tupla\n        | tupla COMMA tuplas  tupla : OPEN_BRACKET datatype CLOSE_BRACKET SEMICOLON\n        | OPEN_BRACKET datatype COMMA datatype CLOSE_BRACKET SEMICOLONmapFunctions : NAME POINT CLEAR OPEN_PARENTHESIS CLOSE_PARENTHESIS SEMICOLON\n        | NAME POINT GET OPEN_PARENTHESIS clave CLOSE_PARENTHESIS SEMICOLON\n        | NAME POINT HAS OPEN_PARENTHESIS clave CLOSE_PARENTHESIS SEMICOLONarrayFn : NAME POINT POP OPEN_PARENTHESIS CLOSE_PARENTHESIS SEMICOLON\n    | NAME POINT PUSH OPEN_PARENTHESIS element CLOSE_PARENTHESIS SEMICOLON\n    | NAME POINT UNSHIFT OPEN_PARENTHESIS element CLOSE_PARENTHESIS SEMICOLONset : NEW SET OPEN_PARENTHESIS CLOSE_PARENTHESIS SEMICOLON\n    | NEW SET OPEN_PARENTHESIS OPEN_BRACKET items CLOSE_BRACKET CLOSE_PARENTHESIS SEMICOLON\n    | NEW SET OPEN_PARENTHESIS element CLOSE_PARENTHESIS SEMICOLONmethodsSet : NAME POINT ADD OPEN_PARENTHESIS element CLOSE_PARENTHESIS SEMICOLON\n    | NAME POINT DELETE OPEN_PARENTHESIS element CLOSE_PARENTHESIS SEMICOLON\n    | NAME POINT CLEAR OPEN_PARENTHESIS CLOSE_PARENTHESIS SEMICOLON items : item\n    | item COMMA itemsitem : number\n    | STRING\n    | expBoolean\n    | NAME\n    | datatypecadena : STRING \n    | STRING COMMA cadenaelement : STRING\n    | number\n    | NAMEdeclaration : NAME IGUAL element SEMICOLONlogicalOperator : AND\n    | ORexpBoolean : controlArg\n    | bool\n    | NOT expBoolean\n    | expBoolean logicalOperator expBooleanfunction : FUNCTION NAME OPEN_PARENTHESIS CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE\n    | FUNCTION NAME OPEN_PARENTHESIS parameter CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE parameter : element\n    | element parameter\n    return : RETURN element SEMICOLONprint : PRINT OPEN_PARENTHESIS CLOSE_PARENTHESIS SEMICOLON'
    
_lr_action_items = {'COMMENTS':([0,2,3,4,5,6,7,8,9,10,11,12,13,14,17,18,19,20,21,22,32,33,34,37,89,90,110,113,114,150,152,155,156,165,166,183,200,211,224,227,228,229,234,235,238,241,245,249,251,256,258,259,260,261,262,263,264,268,269,272,273,274,276,277,278,280,],[13,13,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-24,-25,-26,-21,-22,-23,-81,-82,-83,-29,-30,-32,-129,-85,-89,-31,13,-20,-118,-67,-130,-79,-19,13,-100,-84,13,13,-36,13,-94,-97,13,-80,-102,13,-103,-104,-95,-96,-98,-99,-125,-27,-28,-33,-126,-101,-34,13,-35,-38,]),'NAME':([0,2,3,4,5,6,7,8,9,10,11,12,13,14,15,17,18,19,20,21,22,24,25,26,27,28,29,30,32,33,34,37,41,52,53,54,55,56,64,80,87,88,89,90,93,94,110,112,113,114,115,121,122,123,124,125,126,127,128,130,131,132,133,135,136,137,138,139,140,141,142,143,148,150,151,152,155,156,157,158,160,161,163,164,165,166,171,174,176,178,179,180,183,189,194,200,209,210,211,214,218,224,227,228,229,234,235,238,241,245,249,251,254,256,258,259,260,261,262,263,264,268,269,272,273,274,276,277,278,280,],[16,16,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,40,-24,-25,-26,-21,-22,-23,54,58,70,-70,-71,-72,76,-81,-82,-83,-29,95,-115,-116,-117,-15,-16,120,54,54,149,-30,-32,54,70,-129,54,-85,-89,70,178,-57,-58,-59,-60,179,-57,-58,76,54,-119,-120,54,-73,-74,-75,-76,-77,-78,76,54,195,-31,54,16,-20,-118,54,54,70,70,54,54,-67,-130,54,70,70,70,70,70,-79,76,54,-19,-17,-18,16,70,70,-100,-84,16,16,-36,16,-94,-97,16,-80,-102,70,16,-103,-104,-95,-96,-98,-99,-125,-27,-28,-33,-126,-101,-34,16,-35,-38,]),'PRINT':([0,2,3,4,5,6,7,8,9,10,11,12,13,14,17,18,19,20,21,22,32,33,34,37,89,90,110,113,114,150,152,155,156,165,166,183,200,211,224,227,228,229,234,235,238,241,245,249,251,256,258,259,260,261,262,263,264,268,269,272,273,274,276,277,278,280,],[23,23,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-24,-25,-26,-21,-22,-23,-81,-82,-83,-29,-30,-32,-129,-85,-89,-31,23,-20,-118,-67,-130,-79,-19,23,-100,-84,23,23,-36,23,-94,-97,23,-80,-102,23,-103,-104,-95,-96,-98,-99,-125,-27,-28,-33,-126,-101,-34,23,-35,-38,]),'RETURN':([0,2,3,4,5,6,7,8,9,10,11,12,13,14,17,18,19,20,21,22,32,33,34,37,89,90,110,113,114,150,152,155,156,165,166,183,200,211,224,227,228,229,234,235,238,241,245,249,251,256,258,259,260,261,262,263,264,268,269,272,273,274,276,277,278,280,],[24,24,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-24,-25,-26,-21,-22,-23,-81,-82,-83,-29,-30,-32,-129,-85,-89,-31,24,-20,-118,-67,-130,-79,-19,24,-100,-84,24,24,-36,24,-94,-97,24,-80,-102,24,-103,-104,-95,-96,-98,-99,-125,-27,-28,-33,-126,-101,-34,24,-35,-38,]),'FUNCTION':([0,2,3,4,5,6,7,8,9,10,11,12,13,14,17,18,19,20,21,22,32,33,34,37,89,90,110,113,114,150,152,155,156,165,166,183,200,211,224,227,228,229,234,235,238,241,245,249,251,256,258,259,260,261,262,263,264,268,269,272,273,274,276,277,278,280,],[25,25,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-24,-25,-26,-21,-22,-23,-81,-82,-83,-29,-30,-32,-129,-85,-89,-31,25,-20,-118,-67,-130,-79,-19,25,-100,-84,25,25,-36,25,-94,-97,25,-80,-102,25,-103,-104,-95,-96,-98,-99,-125,-27,-28,-33,-126,-101,-34,25,-35,-38,]),'CONST':([0,2,3,4,5,6,7,8,9,10,11,12,13,14,17,18,19,20,21,22,32,33,34,37,88,89,90,110,113,114,150,152,155,156,165,166,183,200,211,224,227,228,229,234,235,238,241,245,249,251,256,258,259,260,261,262,263,264,268,269,272,273,274,276,277,278,280,],[27,27,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-24,-25,-26,-21,-22,-23,-81,-82,-83,-29,27,-30,-32,-129,-85,-89,-31,27,-20,-118,-67,-130,-79,-19,27,-100,-84,27,27,-36,27,-94,-97,27,-80,-102,27,-103,-104,-95,-96,-98,-99,-125,-27,-28,-33,-126,-101,-34,27,-35,-38,]),'LET':([0,2,3,4,5,6,7,8,9,10,11,12,13,14,17,18,19,20,21,22,32,33,34,37,88,89,90,110,113,114,150,152,155,156,165,166,183,200,211,224,227,228,229,234,235,238,241,245,249,251,256,258,259,260,261,262,263,264,268,269,272,273,274,276,277,278,280,],[28,28,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-24,-25,-26,-21,-22,-23,-81,-82,-83,-29,28,-30,-32,-129,-85,-89,-31,28,-20,-118,-67,-130,-79,-19,28,-100,-84,28,28,-36,28,-94,-97,28,-80,-102,28,-103,-104,-95,-96,-98,-99,-125,-27,-28,-33,-126,-101,-34,28,-35,-38,]),'VAR':([0,2,3,4,5,6,7,8,9,10,11,12,13,14,17,18,19,20,21,22,32,33,34,37,88,89,90,110,113,114,150,152,155,156,165,166,183,200,211,224,227,228,229,234,235,238,241,245,249,251,256,258,259,260,261,262,263,264,268,269,272,273,274,276,277,278,280,],[29,29,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-24,-25,-26,-21,-22,-23,-81,-82,-83,-29,29,-30,-32,-129,-85,-89,-31,29,-20,-118,-67,-130,-79,-19,29,-100,-84,29,29,-36,29,-94,-97,29,-80,-102,29,-103,-104,-95,-96,-98,-99,-125,-27,-28,-33,-126,-101,-34,29,-35,-38,]),'OPEN_BRACKET':([0,2,3,4,5,6,7,8,9,10,11,12,13,14,17,18,19,20,21,22,26,30,32,33,34,37,41,64,89,90,94,110,113,114,115,116,130,142,143,150,152,155,156,160,161,165,166,174,176,183,189,200,211,214,224,227,228,229,234,235,238,241,245,249,251,256,258,259,260,261,262,263,264,268,269,272,273,274,276,277,278,280,],[30,30,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-24,-25,-26,-21,-22,-23,64,30,-81,-82,-83,-29,30,30,-30,-32,30,-129,-85,-89,30,174,30,30,189,-31,30,-20,-118,30,30,-67,-130,30,30,-79,30,-19,30,30,-100,-84,30,30,-36,30,-94,-97,30,-80,-102,30,-103,-104,-95,-96,-98,-99,-125,-27,-28,-33,-126,-101,-34,30,-35,-38,]),'NEW':([0,2,3,4,5,6,7,8,9,10,11,12,13,14,17,18,19,20,21,22,26,30,32,33,34,37,41,64,89,90,94,110,113,114,115,130,142,150,152,155,156,160,161,165,166,174,176,183,189,200,211,214,224,227,228,229,234,235,238,241,245,249,251,256,258,259,260,261,262,263,264,268,269,272,273,274,276,277,278,280,],[31,31,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-24,-25,-26,-21,-22,-23,31,31,-81,-82,-83,-29,31,31,-30,-32,31,-129,-85,-89,31,31,31,-31,31,-20,-118,31,31,-67,-130,31,31,-79,31,-19,31,31,-100,-84,31,31,-36,31,-94,-97,31,-80,-102,31,-103,-104,-95,-96,-98,-99,-125,-27,-28,-33,-126,-101,-34,31,-35,-38,]),'WHILE':([0,2,3,4,5,6,7,8,9,10,11,12,13,14,17,18,19,20,21,22,32,33,34,37,89,90,110,113,114,150,152,155,156,165,166,183,200,211,224,227,228,229,234,235,238,241,245,249,251,256,258,259,260,261,262,263,264,268,269,272,273,274,276,277,278,280,],[35,35,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-24,-25,-26,-21,-22,-23,-81,-82,-83,-29,-30,-32,-129,-85,-89,-31,35,-20,-118,-67,-130,-79,-19,35,-100,-84,35,35,-36,35,-94,-97,35,-80,-102,35,-103,-104,-95,-96,-98,-99,-125,-27,-28,-33,-126,-101,-34,35,-35,-38,]),'FOR':([0,2,3,4,5,6,7,8,9,10,11,12,13,14,17,18,19,20,21,22,32,33,34,37,89,90,110,113,114,150,152,155,156,165,166,183,200,211,224,227,228,229,234,235,238,241,245,249,251,256,258,259,260,261,262,263,264,268,269,272,273,274,276,277,278,280,],[36,36,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-24,-25,-26,-21,-22,-23,-81,-82,-83,-29,-30,-32,-129,-85,-89,-31,36,-20,-118,-67,-130,-79,-19,36,-100,-84,36,36,-36,36,-94,-97,36,-80,-102,36,-103,-104,-95,-96,-98,-99,-125,-27,-28,-33,-126,-101,-34,36,-35,-38,]),'OPEN_BRACE':([0,2,3,4,5,6,7,8,9,10,11,12,13,14,17,18,19,20,21,22,26,30,32,33,34,37,41,64,89,90,92,94,110,113,114,115,130,142,150,152,155,156,160,161,165,166,169,174,176,183,189,192,193,199,200,211,212,214,224,227,228,229,233,234,235,238,241,245,249,251,256,258,259,260,261,262,263,264,268,269,272,273,274,275,276,277,278,280,],[26,26,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-24,-25,-26,-21,-22,-23,26,26,-81,-82,-83,-29,26,26,-30,-32,152,26,-129,-85,-89,26,26,26,-31,26,-20,-118,26,26,-67,-130,211,26,26,-79,26,228,229,235,-19,26,245,26,-100,-84,26,26,256,-36,26,-94,-97,26,-80,-102,26,-103,-104,-95,-96,-98,-99,-125,-27,-28,-33,-126,-101,277,-34,26,-35,-38,]),'IF':([0,2,3,4,5,6,7,8,9,10,11,12,13,14,17,18,19,20,21,22,32,33,34,37,89,90,110,113,114,150,152,155,156,165,166,183,200,211,224,227,228,229,234,235,238,241,245,249,251,256,258,259,260,261,262,263,264,268,269,272,273,274,276,277,278,280,],[38,38,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-24,-25,-26,-21,-22,-23,-81,-82,-83,-29,-30,-32,-129,-85,-89,-31,38,-20,-118,-67,-130,-79,-19,38,-100,-84,38,38,-36,38,-94,-97,38,-80,-102,38,-103,-104,-95,-96,-98,-99,-125,-27,-28,-33,-126,-101,38,38,-35,-38,]),'$end':([1,2,3,4,5,6,7,8,9,10,11,12,13,14,17,18,19,20,21,22,32,33,34,37,39,89,90,110,113,114,150,155,156,165,166,183,200,224,227,234,238,241,249,251,258,259,260,261,262,263,264,268,269,272,273,274,276,278,280,],[0,-1,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-24,-25,-26,-21,-22,-23,-81,-82,-83,-29,-2,-30,-32,-129,-85,-89,-31,-20,-118,-67,-130,-79,-19,-100,-84,-36,-94,-97,-80,-102,-103,-104,-95,-96,-98,-99,-125,-27,-28,-33,-126,-101,-34,-35,-38,]),'CLOSE_BRACE':([2,3,4,5,6,7,8,9,10,11,12,13,14,17,18,19,20,21,22,32,33,34,37,39,55,56,59,60,63,65,66,67,68,69,70,89,90,110,113,114,150,155,156,165,166,172,173,177,178,180,181,182,183,198,200,209,210,216,219,220,221,222,224,227,234,238,241,244,246,248,249,251,252,253,257,258,259,260,261,262,263,264,265,266,268,269,271,272,273,274,276,278,279,280,],[-1,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-24,-25,-26,-21,-22,-23,-81,-82,-83,-29,-2,-15,-16,113,114,-90,-43,-53,-54,-55,-56,-42,-30,-32,-129,-85,-89,-31,-20,-118,-67,-130,-86,-91,-41,-46,-47,-50,-51,-79,234,-19,-17,-18,-92,-43,-44,-48,-45,-100,-84,-36,-94,-97,264,-87,-49,-80,-102,268,269,272,-103,-104,-95,-96,-98,-99,-125,273,-93,-27,-28,276,-33,-126,-101,-34,-35,280,-38,]),'IGUAL':([16,40,149,195,],[41,94,196,231,]),'POINT':([16,],[42,]),'MASIGUAL':([16,],[44,]),'MENOSIGUAL':([16,],[45,]),'PORIGUAL':([16,],[46,]),'DIVIGUAL':([16,],[47,]),'MODIGUAL':([16,],[48,]),'POTIGUAL':([16,],[49,]),'COLON':([17,18,19,32,33,34,55,56,61,62,65,66,67,68,69,70,113,114,177,178,180,181,182,183,209,210,219,220,221,222,224,227,248,249,251,274,],[-24,-25,-26,-81,-82,-83,-15,-16,115,-88,-43,-53,-54,-55,-56,-42,-85,-89,-41,-46,-47,-50,-51,-79,-17,-18,-43,-44,-48,-45,-100,-84,-49,-80,-102,-101,]),'COMMA':([17,18,19,32,33,34,52,53,54,55,56,63,65,66,67,68,69,70,72,73,74,75,76,77,78,79,82,83,113,114,117,118,119,120,134,172,177,178,180,181,182,183,185,186,209,210,215,216,219,220,221,222,224,227,248,249,251,266,274,],[-24,-25,-26,-81,-82,-83,-115,-116,-117,-15,-16,116,-43,-53,-54,-55,-56,-42,130,-43,-53,-110,-42,-112,-121,-122,-68,-69,-85,-89,176,-43,-53,-42,-123,214,-41,-46,-47,-50,-51,-79,-124,-37,-17,-18,176,-92,-43,-44,-48,-45,-100,-84,-49,-80,-102,-93,-101,]),'CLOSE_BRACKET':([17,18,19,32,33,34,52,53,54,55,56,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,82,83,113,114,117,118,119,120,134,177,178,180,181,182,183,184,185,186,209,210,215,217,219,220,221,222,224,225,227,248,249,251,274,],[-24,-25,-26,-81,-82,-83,-115,-116,-117,-15,-16,-43,-53,-54,-55,-56,-42,129,-106,-43,-53,-110,-42,-112,-121,-122,-68,-69,-85,-89,175,-43,-53,-42,-123,-41,-46,-47,-50,-51,-79,-107,-124,-37,-17,-18,175,247,-43,-44,-48,-45,-100,250,-84,-49,-80,-102,-101,]),'SEMICOLON':([17,18,19,32,33,34,51,52,53,54,55,56,65,66,67,68,69,70,78,79,82,83,95,96,97,98,99,108,109,113,114,129,134,147,154,175,177,178,180,181,182,183,185,186,188,191,203,206,209,210,219,220,221,222,223,224,226,227,230,232,236,237,239,240,242,243,247,248,249,251,255,267,274,],[-24,-25,-26,-81,-82,-83,110,-115,-116,-117,-15,-16,-43,-53,-54,-55,-56,-42,-121,-122,-68,-69,-42,155,156,-43,-53,165,166,-85,-89,183,-123,194,200,216,-41,-46,-47,-50,-51,-79,-124,-37,224,227,238,241,-17,-18,-43,-44,-48,-45,249,-100,251,-84,254,-40,258,259,260,261,262,263,266,-49,-80,-102,-39,274,-101,]),'CLOSE_PARENTHESIS':([17,18,19,32,33,34,50,52,53,54,55,56,62,65,66,67,68,69,70,72,73,74,75,76,77,78,79,82,83,112,113,114,134,143,144,145,146,153,159,162,167,168,170,171,177,178,180,181,182,183,184,185,186,187,190,197,201,202,204,205,207,208,209,210,213,219,220,221,222,224,227,248,249,250,251,270,274,],[-24,-25,-26,-81,-82,-83,109,-115,-116,-117,-15,-16,-88,-43,-53,-54,-55,-56,-42,-106,-43,-53,-110,-42,-112,-121,-122,-68,-69,169,-85,-89,-123,188,191,192,193,199,203,206,209,210,212,-127,-41,-46,-47,-50,-51,-79,-107,-124,-37,223,226,233,236,237,239,240,242,243,-17,-18,-128,-43,-44,-48,-45,-100,-84,-49,-80,267,-102,275,-101,]),'OPEN_PARENTHESIS':([23,24,26,30,35,36,38,41,43,44,45,46,47,48,49,52,53,54,55,56,58,64,80,84,85,86,87,91,93,94,100,101,102,103,104,105,106,107,112,115,121,122,123,124,125,126,127,128,130,131,132,133,135,136,137,138,139,140,141,142,143,151,157,158,160,161,163,164,171,174,176,178,179,180,189,194,196,209,210,214,218,231,254,],[50,57,57,57,87,88,93,57,57,-61,-62,-63,-64,-65,-66,-115,-116,-117,-15,-16,112,57,57,142,143,144,57,151,57,57,157,158,159,160,161,162,163,164,57,57,57,-57,-58,-59,-60,57,-57,-58,57,57,-119,-120,57,-73,-74,-75,-76,-77,-78,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,-17,-18,57,57,57,57,]),'STRING':([24,26,30,41,52,53,54,55,56,64,80,87,93,94,112,115,130,131,132,133,135,136,137,138,139,140,141,142,143,151,157,158,160,161,163,164,171,174,176,189,194,209,210,214,],[52,66,74,99,-115,-116,-117,-15,-16,119,52,52,52,66,52,66,74,52,-119,-120,52,-73,-74,-75,-76,-77,-78,74,52,52,52,52,66,66,52,52,52,66,66,74,52,-17,-18,66,]),'INTEGER':([24,26,30,41,43,44,45,46,47,48,49,52,53,54,55,56,64,80,87,93,94,111,112,115,121,122,123,124,125,126,127,128,130,131,132,133,135,136,137,138,139,140,141,142,143,151,157,158,160,161,163,164,171,174,176,178,179,180,189,194,196,209,210,214,218,231,254,],[55,55,55,55,55,-61,-62,-63,-64,-65,-66,-115,-116,-117,-15,-16,55,55,55,55,55,167,55,55,55,-57,-58,-59,-60,55,-57,-58,55,55,-119,-120,55,-73,-74,-75,-76,-77,-78,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,-17,-18,55,55,55,55,]),'FLOAT':([24,26,30,41,43,44,45,46,47,48,49,52,53,54,55,56,64,80,87,93,94,111,112,115,121,122,123,124,125,126,127,128,130,131,132,133,135,136,137,138,139,140,141,142,143,151,157,158,160,161,163,164,171,174,176,178,179,180,189,194,196,209,210,214,218,231,254,],[56,56,56,56,56,-61,-62,-63,-64,-65,-66,-115,-116,-117,-15,-16,56,56,56,56,56,168,56,56,56,-57,-58,-59,-60,56,-57,-58,56,56,-119,-120,56,-73,-74,-75,-76,-77,-78,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,-17,-18,56,56,56,56,]),'CHAR':([26,30,41,64,94,115,130,142,160,161,174,176,189,214,],[67,67,67,67,67,67,67,67,67,67,67,67,67,67,]),'NOT':([30,64,80,130,131,132,133,142,189,194,],[80,80,80,80,80,-119,-120,80,80,80,]),'TRUE':([30,64,80,87,130,131,132,133,142,189,194,],[82,82,82,82,82,82,-119,-120,82,82,82,]),'FALSE':([30,64,80,87,130,131,132,133,142,189,194,],[83,83,83,83,83,83,-119,-120,83,83,83,]),'ARRAY':([31,],[84,]),'SET':([31,],[85,]),'MAP':([31,],[86,]),'ELSEIF':([37,272,],[91,-33,]),'ELSE':([37,89,272,276,278,],[92,92,-33,-34,-35,]),'ADD':([42,],[100,]),'DELETE':([42,],[101,]),'CLEAR':([42,],[102,]),'GET':([42,],[103,]),'HAS':([42,],[104,]),'POP':([42,],[105,]),'PUSH':([42,],[106,]),'UNSHIFT':([42,],[107,]),'IGUALIGUAL':([52,53,54,55,56,73,74,76,81,118,119,120,209,210,],[-115,-116,-117,-15,-16,-116,-115,-117,136,-116,-115,-117,-17,-18,]),'DIFERENTE':([52,53,54,55,56,73,74,76,81,118,119,120,209,210,],[-115,-116,-117,-15,-16,-116,-115,-117,137,-116,-115,-117,-17,-18,]),'MAYORQUE':([52,53,54,55,56,73,74,76,81,118,119,120,209,210,],[-115,-116,-117,-15,-16,-116,-115,-117,138,-116,-115,-117,-17,-18,]),'MAYORIGUALQUE':([52,53,54,55,56,73,74,76,81,118,119,120,209,210,],[-115,-116,-117,-15,-16,-116,-115,-117,139,-116,-115,-117,-17,-18,]),'MENORQUE':([52,53,54,55,56,73,74,76,81,118,119,120,209,210,],[-115,-116,-117,-15,-16,-116,-115,-117,140,-116,-115,-117,-17,-18,]),'MENORIGUALQUE':([52,53,54,55,56,73,74,76,81,118,119,120,209,210,],[-115,-116,-117,-15,-16,-116,-115,-117,141,-116,-115,-117,-17,-18,]),'AND':([52,53,54,55,56,75,78,79,82,83,134,185,186,209,210,230,],[-115,-116,-117,-15,-16,132,-121,-122,-68,-69,132,132,-37,-17,-18,132,]),'OR':([52,53,54,55,56,75,78,79,82,83,134,185,186,209,210,230,],[-115,-116,-117,-15,-16,133,-121,-122,-68,-69,133,133,-37,-17,-18,133,]),'SUMA':([55,56,65,70,73,76,95,98,118,120,127,177,209,210,219,],[-15,-16,122,127,122,127,127,122,122,127,181,122,-17,-18,122,]),'RESTA':([55,56,57,65,70,73,76,95,98,118,120,128,177,209,210,219,],[-15,-16,111,123,128,123,128,128,123,123,128,182,123,-17,-18,123,]),'MULTIPLICACION':([55,56,65,70,73,76,95,98,118,120,177,209,210,219,],[-15,-16,124,124,124,124,124,124,124,124,124,-17,-18,124,]),'DIVISION':([55,56,65,70,73,76,95,98,118,120,177,209,210,219,],[-15,-16,125,125,125,125,125,125,125,125,125,-17,-18,125,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'expression':([0,2,152,211,228,229,235,245,256,277,],[1,39,198,244,252,253,257,265,271,279,]),'semiExpression':([0,2,152,211,228,229,235,245,256,277,],[2,2,2,2,2,2,2,2,2,2,]),'variable':([0,2,152,211,228,229,235,245,256,277,],[3,3,3,3,3,3,3,3,3,3,]),'dataStruct':([0,2,26,30,41,64,94,115,130,142,152,160,161,174,176,189,211,214,228,229,235,245,256,277,],[4,4,69,69,69,69,69,69,69,69,4,69,69,69,69,69,4,69,4,4,4,4,4,4,]),'controlStruct':([0,2,152,211,228,229,235,245,256,277,],[5,5,5,5,5,5,5,5,5,5,]),'methodsSet':([0,2,152,211,228,229,235,245,256,277,],[6,6,6,6,6,6,6,6,6,6,]),'mapFunctions':([0,2,152,211,228,229,235,245,256,277,],[7,7,7,7,7,7,7,7,7,7,]),'arrayFn':([0,2,152,211,228,229,235,245,256,277,],[8,8,8,8,8,8,8,8,8,8,]),'declaration':([0,2,152,211,228,229,235,245,256,277,],[9,9,9,9,9,9,9,9,9,9,]),'print':([0,2,152,211,228,229,235,245,256,277,],[10,10,10,10,10,10,10,10,10,10,]),'return':([0,2,152,211,228,229,235,245,256,277,],[11,11,11,11,11,11,11,11,11,11,]),'function':([0,2,152,211,228,229,235,245,256,277,],[12,12,12,12,12,12,12,12,12,12,]),'asigOp':([0,2,152,211,228,229,235,245,256,277,],[14,14,14,14,14,14,14,14,14,14,]),'type':([0,2,88,152,211,228,229,235,245,256,277,],[15,15,148,15,15,15,15,15,15,15,15,]),'array':([0,2,26,30,41,64,94,115,130,142,152,160,161,174,176,189,211,214,228,229,235,245,256,277,],[17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,]),'set':([0,2,26,30,41,64,94,115,130,142,152,160,161,174,176,189,211,214,228,229,235,245,256,277,],[18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,]),'map':([0,2,26,30,41,64,94,115,130,142,152,160,161,174,176,189,211,214,228,229,235,245,256,277,],[19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,]),'while':([0,2,152,211,228,229,235,245,256,277,],[20,20,20,20,20,20,20,20,20,20,]),'for':([0,2,152,211,228,229,235,245,256,277,],[21,21,21,21,21,21,21,21,21,21,]),'if':([0,2,152,211,228,229,235,245,256,277,],[22,22,22,22,22,22,22,22,22,22,]),'iniciarMap':([0,2,26,30,41,64,94,115,130,142,152,160,161,174,176,189,211,214,228,229,235,245,256,277,],[32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,]),'escribirMap':([0,2,26,30,41,64,94,115,130,142,152,160,161,174,176,189,211,214,228,229,235,245,256,277,],[33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,]),'generarMap':([0,2,26,30,41,64,94,115,130,142,152,160,161,174,176,189,211,214,228,229,235,245,256,277,],[34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,]),'soloIf':([0,2,152,211,228,229,235,245,256,276,277,],[37,37,37,37,37,37,37,37,37,278,37,]),'operadorAsig':([16,],[43,]),'element':([24,30,41,64,80,87,93,112,130,131,135,142,143,151,157,158,163,164,171,189,194,],[51,81,97,81,81,81,81,171,81,81,186,81,190,81,201,202,207,208,171,81,81,]),'number':([24,26,30,41,43,64,80,87,93,94,112,115,121,126,130,131,135,142,143,151,157,158,160,161,163,164,171,174,176,178,179,180,189,194,196,214,218,231,254,],[53,65,73,98,108,118,53,53,53,65,53,65,177,180,73,53,53,73,53,53,53,53,65,65,53,53,53,65,65,219,219,219,73,53,232,65,219,255,219,]),'claveValor':([26,214,],[59,246,]),'tuplas':([26,116,],[60,173,]),'clave':([26,160,161,214,],[61,204,205,61,]),'datatype':([26,30,41,64,94,115,130,142,160,161,174,176,189,214,],[62,77,96,117,154,172,77,77,62,62,215,217,77,62,]),'tupla':([26,116,],[63,63,]),'operations':([26,30,41,64,94,115,130,142,160,161,174,176,178,179,180,189,214,218,254,],[68,68,68,68,68,68,68,68,68,68,68,68,220,221,222,68,68,248,270,]),'items':([30,64,130,142,189,],[71,71,184,187,225,]),'item':([30,64,130,142,189,],[72,72,72,72,72,]),'expBoolean':([30,64,80,130,131,142,189,194,],[75,75,134,75,185,75,75,230,]),'controlArg':([30,64,80,87,93,130,131,142,151,189,194,],[78,78,78,145,153,78,78,78,197,78,78,]),'bool':([30,64,80,87,130,131,142,189,194,],[79,79,79,146,79,79,79,79,79,]),'elseIf':([37,],[89,]),'else':([37,89,],[90,150,]),'operand':([65,70,73,76,95,98,118,120,177,219,],[121,126,121,126,126,121,121,126,218,121,]),'logicalOperator':([75,134,185,230,],[131,131,131,131,]),'clause':([81,],[135,]),'inicialization':([88,],[147,]),'parameter':([112,171,],[170,213,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> expression","S'",1,None,None,None),
  ('expression -> semiExpression','expression',1,'p_expression_expr','sintactical.py',12),
  ('expression -> semiExpression expression','expression',2,'p_expression_expr','sintactical.py',13),
  ('semiExpression -> variable','semiExpression',1,'p_semiExpression_exp','sintactical.py',16),
  ('semiExpression -> dataStruct','semiExpression',1,'p_semiExpression_exp','sintactical.py',17),
  ('semiExpression -> controlStruct','semiExpression',1,'p_semiExpression_exp','sintactical.py',18),
  ('semiExpression -> methodsSet','semiExpression',1,'p_semiExpression_exp','sintactical.py',19),
  ('semiExpression -> mapFunctions','semiExpression',1,'p_semiExpression_exp','sintactical.py',20),
  ('semiExpression -> arrayFn','semiExpression',1,'p_semiExpression_exp','sintactical.py',21),
  ('semiExpression -> declaration','semiExpression',1,'p_semiExpression_exp','sintactical.py',22),
  ('semiExpression -> print','semiExpression',1,'p_semiExpression_exp','sintactical.py',23),
  ('semiExpression -> return','semiExpression',1,'p_semiExpression_exp','sintactical.py',24),
  ('semiExpression -> function','semiExpression',1,'p_semiExpression_exp','sintactical.py',25),
  ('semiExpression -> COMMENTS','semiExpression',1,'p_semiExpression_exp','sintactical.py',26),
  ('semiExpression -> asigOp','semiExpression',1,'p_semiExpression_exp','sintactical.py',27),
  ('number -> INTEGER','number',1,'p_number_expr','sintactical.py',30),
  ('number -> FLOAT','number',1,'p_number_expr','sintactical.py',31),
  ('number -> OPEN_PARENTHESIS RESTA INTEGER CLOSE_PARENTHESIS','number',4,'p_number_expr','sintactical.py',32),
  ('number -> OPEN_PARENTHESIS RESTA FLOAT CLOSE_PARENTHESIS','number',4,'p_number_expr','sintactical.py',33),
  ('variable -> type NAME IGUAL datatype SEMICOLON','variable',5,'p_variable_expr','sintactical.py',36),
  ('variable -> NAME IGUAL datatype SEMICOLON','variable',4,'p_variable_expr','sintactical.py',37),
  ('controlStruct -> while','controlStruct',1,'p_controlStruct_expr','sintactical.py',40),
  ('controlStruct -> for','controlStruct',1,'p_controlStruct_expr','sintactical.py',41),
  ('controlStruct -> if','controlStruct',1,'p_controlStruct_expr','sintactical.py',42),
  ('dataStruct -> array','dataStruct',1,'p_dataStruct_expr','sintactical.py',45),
  ('dataStruct -> set','dataStruct',1,'p_dataStruct_expr','sintactical.py',46),
  ('dataStruct -> map','dataStruct',1,'p_dataStruct_expr','sintactical.py',47),
  ('while -> WHILE OPEN_PARENTHESIS controlArg CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE','while',7,'p_while_expr','sintactical.py',50),
  ('while -> WHILE OPEN_PARENTHESIS bool CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE','while',7,'p_while_expr','sintactical.py',51),
  ('if -> soloIf','if',1,'p_if_expr','sintactical.py',54),
  ('if -> soloIf elseIf','if',2,'p_if_expr','sintactical.py',55),
  ('if -> soloIf elseIf else','if',3,'p_if_expr','sintactical.py',56),
  ('if -> soloIf else','if',2,'p_if_expr','sintactical.py',57),
  ('soloIf -> IF OPEN_PARENTHESIS controlArg CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE','soloIf',7,'p_soloIf_expr','sintactical.py',60),
  ('elseIf -> ELSEIF OPEN_PARENTHESIS controlArg CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE','elseIf',7,'p_elseIf_expr','sintactical.py',63),
  ('elseIf -> ELSEIF OPEN_PARENTHESIS controlArg CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE soloIf','elseIf',8,'p_elseIf_expr','sintactical.py',64),
  ('else -> ELSE OPEN_BRACE expression CLOSE_BRACE','else',4,'p_else_expr','sintactical.py',67),
  ('controlArg -> element clause element','controlArg',3,'p_controlArg_expr','sintactical.py',70),
  ('for -> FOR OPEN_PARENTHESIS inicialization SEMICOLON expBoolean SEMICOLON operations CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE','for',11,'p_for_expr','sintactical.py',73),
  ('inicialization -> type NAME IGUAL number','inicialization',4,'p_inicialization','sintactical.py',76),
  ('inicialization -> NAME IGUAL number','inicialization',3,'p_inicialization','sintactical.py',77),
  ('operations -> number operand number','operations',3,'p_operations','sintactical.py',80),
  ('operations -> NAME','operations',1,'p_operations','sintactical.py',81),
  ('operations -> number','operations',1,'p_operations','sintactical.py',82),
  ('operations -> number operand NAME operations','operations',4,'p_operations','sintactical.py',83),
  ('operations -> NAME operand number operations','operations',4,'p_operations','sintactical.py',84),
  ('operations -> number operand NAME','operations',3,'p_operations','sintactical.py',85),
  ('operations -> NAME operand number','operations',3,'p_operations','sintactical.py',86),
  ('operations -> NAME operand NAME operations','operations',4,'p_operations','sintactical.py',87),
  ('operations -> number operand number operand operations','operations',5,'p_operations','sintactical.py',88),
  ('operations -> NAME SUMA SUMA','operations',3,'p_operations','sintactical.py',89),
  ('operations -> NAME RESTA RESTA','operations',3,'p_operations','sintactical.py',90),
  ('datatype -> number','datatype',1,'p_datatype_expr','sintactical.py',93),
  ('datatype -> STRING','datatype',1,'p_datatype_expr','sintactical.py',94),
  ('datatype -> CHAR','datatype',1,'p_datatype_expr','sintactical.py',95),
  ('datatype -> operations','datatype',1,'p_datatype_expr','sintactical.py',96),
  ('datatype -> dataStruct','datatype',1,'p_datatype_expr','sintactical.py',97),
  ('operand -> SUMA','operand',1,'p_operand_expr','sintactical.py',100),
  ('operand -> RESTA','operand',1,'p_operand_expr','sintactical.py',101),
  ('operand -> MULTIPLICACION','operand',1,'p_operand_expr','sintactical.py',102),
  ('operand -> DIVISION','operand',1,'p_operand_expr','sintactical.py',103),
  ('operadorAsig -> MASIGUAL','operadorAsig',1,'p_operadorAsig_expr','sintactical.py',106),
  ('operadorAsig -> MENOSIGUAL','operadorAsig',1,'p_operadorAsig_expr','sintactical.py',107),
  ('operadorAsig -> PORIGUAL','operadorAsig',1,'p_operadorAsig_expr','sintactical.py',108),
  ('operadorAsig -> DIVIGUAL','operadorAsig',1,'p_operadorAsig_expr','sintactical.py',109),
  ('operadorAsig -> MODIGUAL','operadorAsig',1,'p_operadorAsig_expr','sintactical.py',110),
  ('operadorAsig -> POTIGUAL','operadorAsig',1,'p_operadorAsig_expr','sintactical.py',111),
  ('asigOp -> NAME operadorAsig number SEMICOLON','asigOp',4,'p_asigOp_expr','sintactical.py',114),
  ('bool -> TRUE','bool',1,'p_bool_expr','sintactical.py',117),
  ('bool -> FALSE','bool',1,'p_bool_expr','sintactical.py',118),
  ('type -> CONST','type',1,'p_type_expr','sintactical.py',121),
  ('type -> LET','type',1,'p_type_expr','sintactical.py',122),
  ('type -> VAR','type',1,'p_type_expr','sintactical.py',123),
  ('clause -> IGUALIGUAL','clause',1,'p_clause_expr','sintactical.py',126),
  ('clause -> DIFERENTE','clause',1,'p_clause_expr','sintactical.py',127),
  ('clause -> MAYORQUE','clause',1,'p_clause_expr','sintactical.py',128),
  ('clause -> MAYORIGUALQUE','clause',1,'p_clause_expr','sintactical.py',129),
  ('clause -> MENORQUE','clause',1,'p_clause_expr','sintactical.py',130),
  ('clause -> MENORIGUALQUE','clause',1,'p_clause_expr','sintactical.py',131),
  ('array -> OPEN_BRACKET items CLOSE_BRACKET SEMICOLON','array',4,'p_array_expr','sintactical.py',139),
  ('array -> NEW ARRAY OPEN_PARENTHESIS items CLOSE_PARENTHESIS SEMICOLON','array',6,'p_array_expr','sintactical.py',140),
  ('map -> iniciarMap','map',1,'p_map_expr','sintactical.py',143),
  ('map -> escribirMap','map',1,'p_map_expr','sintactical.py',144),
  ('map -> generarMap','map',1,'p_map_expr','sintactical.py',145),
  ('iniciarMap -> NEW MAP OPEN_PARENTHESIS CLOSE_PARENTHESIS SEMICOLON','iniciarMap',5,'p_iniciarMap_expr','sintactical.py',148),
  ('escribirMap -> OPEN_BRACE claveValor CLOSE_BRACE','escribirMap',3,'p_escribirMap_expr','sintactical.py',151),
  ('claveValor -> clave COLON datatype','claveValor',3,'p_claveValor_expr','sintactical.py',154),
  ('claveValor -> clave COLON datatype COMMA claveValor','claveValor',5,'p_claveValor_expr','sintactical.py',155),
  ('clave -> datatype','clave',1,'p_clave_expr','sintactical.py',158),
  ('generarMap -> OPEN_BRACE tuplas CLOSE_BRACE','generarMap',3,'p_generarMap_expr','sintactical.py',165),
  ('tuplas -> tupla','tuplas',1,'p_tuplas_expr','sintactical.py',168),
  ('tuplas -> tupla COMMA tuplas','tuplas',3,'p_tuplas_expr','sintactical.py',169),
  ('tupla -> OPEN_BRACKET datatype CLOSE_BRACKET SEMICOLON','tupla',4,'p_tupla_expr','sintactical.py',172),
  ('tupla -> OPEN_BRACKET datatype COMMA datatype CLOSE_BRACKET SEMICOLON','tupla',6,'p_tupla_expr','sintactical.py',173),
  ('mapFunctions -> NAME POINT CLEAR OPEN_PARENTHESIS CLOSE_PARENTHESIS SEMICOLON','mapFunctions',6,'p_mapFunctions_expr','sintactical.py',176),
  ('mapFunctions -> NAME POINT GET OPEN_PARENTHESIS clave CLOSE_PARENTHESIS SEMICOLON','mapFunctions',7,'p_mapFunctions_expr','sintactical.py',177),
  ('mapFunctions -> NAME POINT HAS OPEN_PARENTHESIS clave CLOSE_PARENTHESIS SEMICOLON','mapFunctions',7,'p_mapFunctions_expr','sintactical.py',178),
  ('arrayFn -> NAME POINT POP OPEN_PARENTHESIS CLOSE_PARENTHESIS SEMICOLON','arrayFn',6,'p_arrayFn_expr','sintactical.py',181),
  ('arrayFn -> NAME POINT PUSH OPEN_PARENTHESIS element CLOSE_PARENTHESIS SEMICOLON','arrayFn',7,'p_arrayFn_expr','sintactical.py',182),
  ('arrayFn -> NAME POINT UNSHIFT OPEN_PARENTHESIS element CLOSE_PARENTHESIS SEMICOLON','arrayFn',7,'p_arrayFn_expr','sintactical.py',183),
  ('set -> NEW SET OPEN_PARENTHESIS CLOSE_PARENTHESIS SEMICOLON','set',5,'p_set_expr','sintactical.py',186),
  ('set -> NEW SET OPEN_PARENTHESIS OPEN_BRACKET items CLOSE_BRACKET CLOSE_PARENTHESIS SEMICOLON','set',8,'p_set_expr','sintactical.py',187),
  ('set -> NEW SET OPEN_PARENTHESIS element CLOSE_PARENTHESIS SEMICOLON','set',6,'p_set_expr','sintactical.py',188),
  ('methodsSet -> NAME POINT ADD OPEN_PARENTHESIS element CLOSE_PARENTHESIS SEMICOLON','methodsSet',7,'p_methodsSet_expr','sintactical.py',191),
  ('methodsSet -> NAME POINT DELETE OPEN_PARENTHESIS element CLOSE_PARENTHESIS SEMICOLON','methodsSet',7,'p_methodsSet_expr','sintactical.py',192),
  ('methodsSet -> NAME POINT CLEAR OPEN_PARENTHESIS CLOSE_PARENTHESIS SEMICOLON','methodsSet',6,'p_methodsSet_expr','sintactical.py',193),
  ('items -> item','items',1,'p_items_expr','sintactical.py',197),
  ('items -> item COMMA items','items',3,'p_items_expr','sintactical.py',198),
  ('item -> number','item',1,'p_item_expr','sintactical.py',201),
  ('item -> STRING','item',1,'p_item_expr','sintactical.py',202),
  ('item -> expBoolean','item',1,'p_item_expr','sintactical.py',203),
  ('item -> NAME','item',1,'p_item_expr','sintactical.py',204),
  ('item -> datatype','item',1,'p_item_expr','sintactical.py',205),
  ('cadena -> STRING','cadena',1,'p_cadena_expr','sintactical.py',208),
  ('cadena -> STRING COMMA cadena','cadena',3,'p_cadena_expr','sintactical.py',209),
  ('element -> STRING','element',1,'p_element_expr','sintactical.py',213),
  ('element -> number','element',1,'p_element_expr','sintactical.py',214),
  ('element -> NAME','element',1,'p_element_expr','sintactical.py',215),
  ('declaration -> NAME IGUAL element SEMICOLON','declaration',4,'p_declaration_expr','sintactical.py',218),
  ('logicalOperator -> AND','logicalOperator',1,'p_logicalOperator_expr','sintactical.py',221),
  ('logicalOperator -> OR','logicalOperator',1,'p_logicalOperator_expr','sintactical.py',222),
  ('expBoolean -> controlArg','expBoolean',1,'p_expBoolean_expr','sintactical.py',225),
  ('expBoolean -> bool','expBoolean',1,'p_expBoolean_expr','sintactical.py',226),
  ('expBoolean -> NOT expBoolean','expBoolean',2,'p_expBoolean_expr','sintactical.py',227),
  ('expBoolean -> expBoolean logicalOperator expBoolean','expBoolean',3,'p_expBoolean_expr','sintactical.py',228),
  ('function -> FUNCTION NAME OPEN_PARENTHESIS CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE','function',7,'p_function_expr','sintactical.py',231),
  ('function -> FUNCTION NAME OPEN_PARENTHESIS parameter CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE','function',8,'p_function_expr','sintactical.py',232),
  ('parameter -> element','parameter',1,'p_parameter_expr','sintactical.py',235),
  ('parameter -> element parameter','parameter',2,'p_parameter_expr','sintactical.py',236),
  ('return -> RETURN element SEMICOLON','return',3,'p_return_expr','sintactical.py',240),
  ('print -> PRINT OPEN_PARENTHESIS CLOSE_PARENTHESIS SEMICOLON','print',4,'p_print_expr','sintactical.py',243),
]

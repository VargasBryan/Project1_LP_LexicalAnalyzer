
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'ADD AND ARRAY BACKSLASH BOOLEAN CHAR CLEAR CLOSE_BRACE CLOSE_BRACKET CLOSE_PARENTHESIS COLON COMMA COMMENTS CONST DELETE DIFERENTE DIVIGUAL DIVISION DOUBLE_QUOTES ELSE ELSEIF FALSE FLOAT FOR FUNCTION GET HAS IF IGUAL IGUALIGUAL INT INTEGER LET LINE_BREAK LONGCOMMENT MAP MASIGUAL MAYORIGUALQUE MAYORQUE MENORIGUALQUE MENORQUE MENOSIGUAL MODIGUAL MULTIPLICACION NAME NEW NOT NULL OPEN_BRACE OPEN_BRACKET OPEN_PARENTHESIS OR POINT POP PORIGUAL POTIGUAL PRINT PUSH RESTA RETURN SEMICOLON SET SINGLE_QUOTE STRING SUMA TRUE UNSHIFT VAR WHILEexpression : variable\n    | variable expression\n    | dataStruct\n    | dataStruct expression\n    | controlStruct\n    | controlStruct expression\n    | methodsSet\n    | mapFunctions\n    | arrayFn\n    | declaration\n    | print\n    | return\n    | functionnumber : INTEGER\n    | FLOAT\n    | RESTA INTEGER\n    | RESTA FLOATvariable : type NAME IGUAL datatype SEMICOLON\n        | type NAME IGUAL operations SEMICOLON\n        | NAME IGUAL datatype SEMICOLONcontrolStruct : while\n    | for\n    | ifdataStruct : array\n    | set\n    | map while : WHILE OPEN_PARENTHESIS controlArg CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE\n    | WHILE OPEN_PARENTHESIS bool CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACEif : soloIf \n    | soloIf elseIf\n    | soloIf elseIf else\n    | soloIf else soloIf : IF OPEN_PARENTHESIS controlArg CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE elseIf : ELSEIF OPEN_PARENTHESIS controlArg CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE\n        | ELSEIF OPEN_PARENTHESIS controlArg CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE soloIf else : ELSE OPEN_BRACE expression CLOSE_BRACEcontrolArg : element clause elementfor : FOR OPEN_PARENTHESIS inicialization SEMICOLON expBoolean SEMICOLON operations CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE inicialization : type NAME IGUAL number\n    | NAME IGUAL numberoperations : number operand number\n    | NAME\n    | number\n    | number operand NAME operations\n    | NAME operand number operations\n    | number operand NAME\n    | NAME operand number\n    | NAME operand NAME operations\n    | number operand number operand operationsdatatype : number\n    | STRING\n    | CHAR\n    | operationsoperand : SUMA \n    | RESTA \n    | MULTIPLICACION \n    | DIVISIONbool : TRUE\n    | FALSEtype : CONST\n    | LET\n    | VARclause :  IGUALIGUAL\n    | DIFERENTE\n    | MAYORQUE\n    | MAYORIGUALQUE\n    | MENORQUE\n    | MENORIGUALQUE value : NAME\n    | numberarray : type NAME IGUAL OPEN_BRACKET items CLOSE_BRACKET SEMICOLON\n    | type NAME IGUAL NEW ARRAY OPEN_PARENTHESIS items CLOSE_PARENTHESIS SEMICOLONmap : iniciarMap\n        | escribirMap\n        | generarMap iniciarMap : variable IGUAL NEW MAP OPEN_PARENTHESIS CLOSE_PARENTHESIS SEMICOLONescribirMap : variable IGUAL OPEN_BRACE claveValor CLOSE_BRACEclaveValor : clave COLON valor\n    | clave COLON valor COMMA claveValorclave : datatypevalor : datatype\n        | dataStructgenerarMap : variable IGUAL OPEN_BRACE tuplas CLOSE_BRACEtuplas : tupla\n        | tupla COMMA tuplas  tupla : OPEN_BRACKET datatype CLOSE_BRACKET SEMICOLON\n        | OPEN_BRACKET datatype COMMA datatype CLOSE_BRACKET SEMICOLONmapFunctions : NAME POINT CLEAR OPEN_PARENTHESIS CLOSE_PARENTHESIS SEMICOLON\n        | NAME POINT GET OPEN_PARENTHESIS clave CLOSE_PARENTHESIS SEMICOLON\n        | NAME POINT HAS OPEN_PARENTHESIS clave CLOSE_PARENTHESIS SEMICOLONarrayFn : NAME POINT POP OPEN_PARENTHESIS CLOSE_PARENTHESIS SEMICOLON\n    | NAME POINT PUSH OPEN_PARENTHESIS element CLOSE_PARENTHESIS SEMICOLON\n    | NAME POINT UNSHIFT OPEN_PARENTHESIS element CLOSE_PARENTHESIS SEMICOLONset : type NAME IGUAL NEW SET OPEN_PARENTHESIS CLOSE_PARENTHESIS SEMICOLON\n    | type NAME IGUAL NEW SET OPEN_PARENTHESIS OPEN_BRACKET items CLOSE_BRACKET CLOSE_PARENTHESIS SEMICOLON\n    | type NAME IGUAL NEW SET OPEN_PARENTHESIS element CLOSE_PARENTHESIS SEMICOLON\n    | NAME IGUAL NEW SET OPEN_PARENTHESIS CLOSE_PARENTHESIS SEMICOLON\n    | NAME IGUAL NEW SET OPEN_PARENTHESIS OPEN_BRACKET items CLOSE_BRACKET CLOSE_PARENTHESIS SEMICOLON\n    | NAME IGUAL NEW SET OPEN_PARENTHESIS element CLOSE_PARENTHESIS SEMICOLONmethodsSet : NAME POINT ADD OPEN_PARENTHESIS element CLOSE_PARENTHESIS SEMICOLON\n    | NAME POINT DELETE OPEN_PARENTHESIS element CLOSE_PARENTHESIS SEMICOLON\n    | NAME POINT CLEAR OPEN_PARENTHESIS CLOSE_PARENTHESIS SEMICOLON items : number\n    | cadenacadena : STRING \n    | STRING COMMA cadenaelement : STRING\n    | number\n    | NAMEdeclaration : NAME IGUAL element SEMICOLONlogicalOperator : AND\n    | ORexpBoolean : controlArg\n    | bool\n    | NOT expBoolean\n    | expBoolean logicalOperator expBooleanfunction : FUNCTION NAME OPEN_PARENTHESIS CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE\n    | FUNCTION NAME OPEN_PARENTHESIS parameter CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE parameter : element\n    | element parameter\n    return : RETURN element SEMICOLONprint : PRINT OPEN_PARENTHESIS CLOSE_PARENTHESIS SEMICOLON'
    
_lr_action_items = {'NAME':([0,2,3,4,12,14,15,16,17,18,19,21,22,23,24,25,26,27,28,31,38,42,43,44,45,46,49,50,51,52,55,57,58,77,78,79,86,88,89,90,98,106,107,108,109,110,111,114,115,116,118,119,121,122,126,129,130,131,132,133,134,135,136,143,144,145,148,149,156,157,158,160,169,172,173,178,182,183,189,193,197,204,215,218,219,220,221,224,226,227,228,232,238,250,251,255,257,260,264,267,269,271,273,274,276,278,279,],[13,13,13,13,37,-24,-25,-26,-21,-22,-23,44,48,-60,-61,-62,-73,-74,-75,-29,59,-107,-108,-109,-14,-15,44,87,-30,-32,44,101,101,-16,-17,44,137,-31,44,13,101,156,-54,-55,-56,-57,-20,160,44,44,101,101,44,44,44,44,-63,-64,-65,-66,-67,-68,44,-77,-83,188,-18,-19,101,101,44,101,13,13,13,44,-36,13,229,101,44,101,13,101,44,-111,-112,13,-76,101,101,-71,-97,-27,-28,-33,101,-94,-99,-34,-72,-96,13,-35,-98,-95,-38,]),'PRINT':([0,2,3,4,14,15,16,17,18,19,26,27,28,31,51,52,88,90,111,143,144,148,149,169,172,173,182,183,215,224,226,232,238,250,251,255,260,264,267,269,271,273,274,276,278,279,],[20,20,20,20,-24,-25,-26,-21,-22,-23,-73,-74,-75,-29,-30,-32,-31,20,-20,-77,-83,-18,-19,20,20,20,-36,20,20,20,-76,-71,-97,-27,-28,-33,-94,-99,-34,-72,-96,20,-35,-98,-95,-38,]),'RETURN':([0,2,3,4,14,15,16,17,18,19,26,27,28,31,51,52,88,90,111,143,144,148,149,169,172,173,182,183,215,224,226,232,238,250,251,255,260,264,267,269,271,273,274,276,278,279,],[21,21,21,21,-24,-25,-26,-21,-22,-23,-73,-74,-75,-29,-30,-32,-31,21,-20,-77,-83,-18,-19,21,21,21,-36,21,21,21,-76,-71,-97,-27,-28,-33,-94,-99,-34,-72,-96,21,-35,-98,-95,-38,]),'FUNCTION':([0,2,3,4,14,15,16,17,18,19,26,27,28,31,51,52,88,90,111,143,144,148,149,169,172,173,182,183,215,224,226,232,238,250,251,255,260,264,267,269,271,273,274,276,278,279,],[22,22,22,22,-24,-25,-26,-21,-22,-23,-73,-74,-75,-29,-30,-32,-31,22,-20,-77,-83,-18,-19,22,22,22,-36,22,22,22,-76,-71,-97,-27,-28,-33,-94,-99,-34,-72,-96,22,-35,-98,-95,-38,]),'CONST':([0,2,3,4,14,15,16,17,18,19,26,27,28,31,50,51,52,88,90,111,143,144,145,148,149,169,172,173,182,183,215,224,226,232,238,250,251,255,260,264,267,269,271,273,274,276,278,279,],[23,23,23,23,-24,-25,-26,-21,-22,-23,-73,-74,-75,-29,23,-30,-32,-31,23,-20,-77,-83,23,-18,-19,23,23,23,-36,23,23,23,-76,-71,-97,-27,-28,-33,-94,-99,-34,-72,-96,23,-35,-98,-95,-38,]),'LET':([0,2,3,4,14,15,16,17,18,19,26,27,28,31,50,51,52,88,90,111,143,144,145,148,149,169,172,173,182,183,215,224,226,232,238,250,251,255,260,264,267,269,271,273,274,276,278,279,],[24,24,24,24,-24,-25,-26,-21,-22,-23,-73,-74,-75,-29,24,-30,-32,-31,24,-20,-77,-83,24,-18,-19,24,24,24,-36,24,24,24,-76,-71,-97,-27,-28,-33,-94,-99,-34,-72,-96,24,-35,-98,-95,-38,]),'VAR':([0,2,3,4,14,15,16,17,18,19,26,27,28,31,50,51,52,88,90,111,143,144,145,148,149,169,172,173,182,183,215,224,226,232,238,250,251,255,260,264,267,269,271,273,274,276,278,279,],[25,25,25,25,-24,-25,-26,-21,-22,-23,-73,-74,-75,-29,25,-30,-32,-31,25,-20,-77,-83,25,-18,-19,25,25,25,-36,25,25,25,-76,-71,-97,-27,-28,-33,-94,-99,-34,-72,-96,25,-35,-98,-95,-38,]),'WHILE':([0,2,3,4,14,15,16,17,18,19,26,27,28,31,51,52,88,90,111,143,144,148,149,169,172,173,182,183,215,224,226,232,238,250,251,255,260,264,267,269,271,273,274,276,278,279,],[29,29,29,29,-24,-25,-26,-21,-22,-23,-73,-74,-75,-29,-30,-32,-31,29,-20,-77,-83,-18,-19,29,29,29,-36,29,29,29,-76,-71,-97,-27,-28,-33,-94,-99,-34,-72,-96,29,-35,-98,-95,-38,]),'FOR':([0,2,3,4,14,15,16,17,18,19,26,27,28,31,51,52,88,90,111,143,144,148,149,169,172,173,182,183,215,224,226,232,238,250,251,255,260,264,267,269,271,273,274,276,278,279,],[30,30,30,30,-24,-25,-26,-21,-22,-23,-73,-74,-75,-29,-30,-32,-31,30,-20,-77,-83,-18,-19,30,30,30,-36,30,30,30,-76,-71,-97,-27,-28,-33,-94,-99,-34,-72,-96,30,-35,-98,-95,-38,]),'IF':([0,2,3,4,14,15,16,17,18,19,26,27,28,31,51,52,88,90,111,143,144,148,149,169,172,173,182,183,215,224,226,232,238,250,251,255,260,264,267,269,271,273,274,276,278,279,],[32,32,32,32,-24,-25,-26,-21,-22,-23,-73,-74,-75,-29,-30,-32,-31,32,-20,-77,-83,-18,-19,32,32,32,-36,32,32,32,-76,-71,-97,-27,-28,-33,-94,-99,32,-72,-96,32,-35,-98,-95,-38,]),'$end':([1,2,3,4,5,6,7,8,9,10,11,14,15,16,17,18,19,26,27,28,31,33,35,36,51,52,76,88,111,112,123,143,144,148,149,182,208,211,226,232,238,242,243,244,245,246,247,248,250,251,255,260,264,265,267,269,271,274,276,278,279,],[0,-1,-3,-5,-7,-8,-9,-10,-11,-12,-13,-24,-25,-26,-21,-22,-23,-73,-74,-75,-29,-2,-4,-6,-30,-32,-121,-31,-20,-110,-122,-77,-83,-18,-19,-36,-88,-91,-76,-71,-97,-100,-101,-89,-90,-92,-93,-117,-27,-28,-33,-94,-99,-118,-34,-72,-96,-35,-98,-95,-38,]),'CLOSE_BRACE':([2,3,4,5,6,7,8,9,10,11,14,15,16,17,18,19,26,27,28,31,33,35,36,45,46,51,52,65,66,76,77,78,88,93,94,96,99,100,101,111,112,123,140,143,144,148,149,157,159,160,182,185,186,187,188,191,198,199,200,205,208,211,214,216,217,225,226,230,232,238,241,242,243,244,245,246,247,248,249,250,251,254,255,256,260,264,265,267,268,269,271,274,276,277,278,279,],[-1,-3,-5,-7,-8,-9,-10,-11,-12,-13,-24,-25,-26,-21,-22,-23,-73,-74,-75,-29,-2,-4,-6,-14,-15,-30,-32,-52,-53,-121,-16,-17,-31,143,144,-84,-43,-51,-42,-20,-110,-122,182,-77,-83,-18,-19,-47,-41,-46,-36,-78,-81,-82,-42,-85,-48,-43,-45,-44,-88,-91,248,250,251,255,-76,-86,-71,-97,-49,-100,-101,-89,-90,-92,-93,-117,265,-27,-28,267,-33,-79,-94,-99,-118,-34,-87,-72,-96,-35,-98,279,-95,-38,]),'IGUAL':([2,13,37,87,111,137,148,149,188,190,229,],[34,38,58,138,-20,179,-18,-19,228,34,257,]),'POINT':([13,],[39,]),'COMMA':([14,15,16,26,27,28,45,46,65,66,77,78,96,99,100,101,143,144,147,153,157,159,160,185,186,187,188,198,199,200,205,226,230,232,238,241,260,264,268,269,271,276,278,],[-24,-25,-26,-73,-74,-75,-14,-15,-52,-53,-16,-17,146,-43,-51,-42,-77,-83,193,195,-47,-41,-46,227,-81,-82,-42,-48,-43,-45,-44,-76,-86,-71,-97,-49,-94,-99,-87,-72,-96,-98,-95,]),'OPEN_PARENTHESIS':([20,29,30,32,48,53,67,68,69,70,71,72,73,74,92,113,154,155,],[40,49,50,55,79,89,115,116,117,118,119,120,121,122,142,158,196,197,]),'STRING':([21,38,42,43,44,45,46,49,55,57,58,77,78,79,89,98,104,115,116,118,119,121,122,126,129,130,131,132,133,134,135,136,145,158,178,193,195,196,197,202,219,220,221,227,228,236,257,],[42,64,-107,-108,-109,-14,-15,42,42,100,100,-16,-17,42,42,100,153,42,42,100,100,42,42,42,42,-63,-64,-65,-66,-67,-68,42,100,42,42,100,153,153,42,153,42,-111,-112,100,100,153,100,]),'INTEGER':([21,38,42,43,44,45,46,47,49,55,57,58,77,78,79,89,98,104,106,107,108,109,110,114,115,116,118,119,121,122,126,129,130,131,132,133,134,135,136,138,145,156,157,158,160,178,179,193,196,197,202,204,218,219,220,221,227,228,236,257,],[45,45,-107,-108,-109,-14,-15,77,45,45,45,45,-16,-17,45,45,45,45,45,-54,-55,-56,-57,45,45,45,45,45,45,45,45,45,-63,-64,-65,-66,-67,-68,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,-111,-112,45,45,45,45,]),'FLOAT':([21,38,42,43,44,45,46,47,49,55,57,58,77,78,79,89,98,104,106,107,108,109,110,114,115,116,118,119,121,122,126,129,130,131,132,133,134,135,136,138,145,156,157,158,160,178,179,193,196,197,202,204,218,219,220,221,227,228,236,257,],[46,46,-107,-108,-109,-14,-15,78,46,46,46,46,-16,-17,46,46,46,46,46,-54,-55,-56,-57,46,46,46,46,46,46,46,46,46,-63,-64,-65,-66,-67,-68,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,-111,-112,46,46,46,46,]),'RESTA':([21,38,42,43,44,45,46,49,55,57,58,59,63,77,78,79,89,98,99,101,104,106,107,108,109,110,114,115,116,118,119,121,122,126,129,130,131,132,133,134,135,136,138,145,156,157,158,159,160,178,179,188,193,196,197,199,202,204,218,219,220,221,227,228,236,257,],[47,47,-107,-108,-109,-14,-15,47,47,47,47,108,108,-16,-17,47,47,47,108,108,47,47,-54,-55,-56,-57,47,47,47,47,47,47,47,47,47,-63,-64,-65,-66,-67,-68,47,47,47,47,47,47,108,47,47,47,108,47,47,47,108,47,47,47,47,-111,-112,47,47,47,47,]),'ELSEIF':([31,255,],[53,-33,]),'ELSE':([31,51,255,267,274,],[54,54,-33,-34,-35,]),'NEW':([34,38,58,228,257,],[56,62,105,62,105,]),'OPEN_BRACE':([34,54,124,127,128,141,170,181,266,],[57,90,169,172,173,183,215,224,273,]),'CHAR':([38,57,58,98,118,119,145,193,227,228,257,],[65,65,65,65,65,65,65,65,65,65,65,]),'ADD':([39,],[67,]),'DELETE':([39,],[68,]),'CLEAR':([39,],[69,]),'GET':([39,],[70,]),'HAS':([39,],[71,]),'POP':([39,],[72,]),'PUSH':([39,],[73,]),'UNSHIFT':([39,],[74,]),'CLOSE_PARENTHESIS':([40,42,43,44,45,46,65,66,77,78,79,80,81,83,84,91,97,99,100,101,117,120,125,126,139,142,151,152,153,157,158,159,160,161,162,164,165,167,168,171,174,197,198,199,200,203,205,233,234,237,241,252,263,270,],[75,-107,-108,-109,-14,-15,-52,-53,-16,-17,124,127,128,-58,-59,141,-80,-43,-51,-42,163,166,170,-119,181,184,-103,-104,-105,-47,201,-41,-46,206,207,209,210,212,213,-120,-37,235,-48,-43,-45,240,-44,-106,259,262,-49,266,272,275,]),'SEMICOLON':([41,42,43,44,45,46,59,60,61,63,64,65,66,75,77,78,83,84,85,99,100,101,102,103,157,159,160,163,166,174,175,176,177,180,184,192,194,198,199,200,201,205,206,207,209,210,212,213,222,223,235,240,241,253,258,259,262,272,275,],[76,-107,-108,-109,-14,-15,-42,111,112,-43,-51,-52,-53,123,-16,-17,-58,-59,136,-43,-51,-42,148,149,-47,-41,-46,208,211,-37,218,-113,-114,-40,226,230,232,-48,-43,-45,238,-44,242,243,244,245,246,247,-115,-39,260,264,-49,-116,268,269,271,276,278,]),'IGUALIGUAL':([42,43,44,45,46,77,78,82,],[-107,-108,-109,-14,-15,-16,-17,130,]),'DIFERENTE':([42,43,44,45,46,77,78,82,],[-107,-108,-109,-14,-15,-16,-17,131,]),'MAYORQUE':([42,43,44,45,46,77,78,82,],[-107,-108,-109,-14,-15,-16,-17,132,]),'MAYORIGUALQUE':([42,43,44,45,46,77,78,82,],[-107,-108,-109,-14,-15,-16,-17,133,]),'MENORQUE':([42,43,44,45,46,77,78,82,],[-107,-108,-109,-14,-15,-16,-17,134,]),'MENORIGUALQUE':([42,43,44,45,46,77,78,82,],[-107,-108,-109,-14,-15,-16,-17,135,]),'AND':([42,43,44,45,46,77,78,83,84,174,175,176,177,222,253,],[-107,-108,-109,-14,-15,-16,-17,-58,-59,-37,220,-113,-114,220,220,]),'OR':([42,43,44,45,46,77,78,83,84,174,175,176,177,222,253,],[-107,-108,-109,-14,-15,-16,-17,-58,-59,-37,221,-113,-114,221,221,]),'SUMA':([45,46,59,63,77,78,99,101,159,188,199,],[-14,-15,107,107,-16,-17,107,107,107,107,107,]),'MULTIPLICACION':([45,46,59,63,77,78,99,101,159,188,199,],[-14,-15,109,109,-16,-17,109,109,109,109,109,]),'DIVISION':([45,46,59,63,77,78,99,101,159,188,199,],[-14,-15,110,110,-16,-17,110,110,110,110,110,]),'COLON':([45,46,65,66,77,78,95,97,99,100,101,157,159,160,198,199,200,205,241,],[-14,-15,-52,-53,-16,-17,145,-80,-43,-51,-42,-47,-41,-46,-48,-43,-45,-44,-49,]),'CLOSE_BRACKET':([45,46,65,66,77,78,99,100,101,147,150,151,152,153,157,159,160,198,199,200,205,231,233,239,241,261,],[-14,-15,-52,-53,-16,-17,-43,-51,-42,192,194,-103,-104,-105,-47,-41,-46,-48,-43,-45,-44,258,-106,263,-49,270,]),'TRUE':([49,136,178,219,220,221,],[83,83,83,83,-111,-112,]),'FALSE':([49,136,178,219,220,221,],[84,84,84,84,-111,-112,]),'MAP':([56,],[92,]),'OPEN_BRACKET':([57,58,146,158,197,257,],[98,104,98,202,236,104,]),'SET':([62,105,],[113,155,]),'ARRAY':([105,],[154,]),'NOT':([136,178,219,220,221,],[178,178,178,-111,-112,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'expression':([0,2,3,4,90,169,172,173,183,215,224,273,],[1,33,35,36,140,214,216,217,225,249,254,277,]),'variable':([0,2,3,4,90,145,169,172,173,183,215,224,273,],[2,2,2,2,2,190,2,2,2,2,2,2,2,]),'dataStruct':([0,2,3,4,90,145,169,172,173,183,215,224,273,],[3,3,3,3,3,187,3,3,3,3,3,3,3,]),'controlStruct':([0,2,3,4,90,169,172,173,183,215,224,273,],[4,4,4,4,4,4,4,4,4,4,4,4,]),'methodsSet':([0,2,3,4,90,169,172,173,183,215,224,273,],[5,5,5,5,5,5,5,5,5,5,5,5,]),'mapFunctions':([0,2,3,4,90,169,172,173,183,215,224,273,],[6,6,6,6,6,6,6,6,6,6,6,6,]),'arrayFn':([0,2,3,4,90,169,172,173,183,215,224,273,],[7,7,7,7,7,7,7,7,7,7,7,7,]),'declaration':([0,2,3,4,90,169,172,173,183,215,224,273,],[8,8,8,8,8,8,8,8,8,8,8,8,]),'print':([0,2,3,4,90,169,172,173,183,215,224,273,],[9,9,9,9,9,9,9,9,9,9,9,9,]),'return':([0,2,3,4,90,169,172,173,183,215,224,273,],[10,10,10,10,10,10,10,10,10,10,10,10,]),'function':([0,2,3,4,90,169,172,173,183,215,224,273,],[11,11,11,11,11,11,11,11,11,11,11,11,]),'type':([0,2,3,4,50,90,145,169,172,173,183,215,224,273,],[12,12,12,12,86,12,189,12,12,12,12,12,12,12,]),'array':([0,2,3,4,90,145,169,172,173,183,215,224,273,],[14,14,14,14,14,14,14,14,14,14,14,14,14,]),'set':([0,2,3,4,90,145,169,172,173,183,215,224,273,],[15,15,15,15,15,15,15,15,15,15,15,15,15,]),'map':([0,2,3,4,90,145,169,172,173,183,215,224,273,],[16,16,16,16,16,16,16,16,16,16,16,16,16,]),'while':([0,2,3,4,90,169,172,173,183,215,224,273,],[17,17,17,17,17,17,17,17,17,17,17,17,]),'for':([0,2,3,4,90,169,172,173,183,215,224,273,],[18,18,18,18,18,18,18,18,18,18,18,18,]),'if':([0,2,3,4,90,169,172,173,183,215,224,273,],[19,19,19,19,19,19,19,19,19,19,19,19,]),'iniciarMap':([0,2,3,4,90,145,169,172,173,183,215,224,273,],[26,26,26,26,26,26,26,26,26,26,26,26,26,]),'escribirMap':([0,2,3,4,90,145,169,172,173,183,215,224,273,],[27,27,27,27,27,27,27,27,27,27,27,27,27,]),'generarMap':([0,2,3,4,90,145,169,172,173,183,215,224,273,],[28,28,28,28,28,28,28,28,28,28,28,28,28,]),'soloIf':([0,2,3,4,90,169,172,173,183,215,224,267,273,],[31,31,31,31,31,31,31,31,31,31,31,274,31,]),'element':([21,38,49,55,79,89,115,116,121,122,126,129,136,158,178,197,219,],[41,61,82,82,126,82,161,162,167,168,126,174,82,203,82,237,82,]),'number':([21,38,49,55,57,58,79,89,98,104,106,114,115,116,118,119,121,122,126,129,136,138,145,156,157,158,160,178,179,193,196,197,202,204,218,219,227,228,236,257,],[43,63,43,43,99,99,43,43,99,151,157,159,43,43,99,99,43,43,43,43,43,180,99,199,199,43,199,43,223,99,151,43,151,199,199,43,99,99,151,99,]),'elseIf':([31,],[51,]),'else':([31,51,],[52,88,]),'datatype':([38,57,58,98,118,119,145,193,227,228,257,],[60,97,102,147,97,97,186,231,97,60,102,]),'operations':([38,57,58,98,118,119,145,156,157,160,193,204,218,227,228,257,],[66,66,103,66,66,66,66,198,200,205,66,241,252,66,66,103,]),'controlArg':([49,55,89,136,178,219,],[80,91,139,176,176,176,]),'bool':([49,136,178,219,],[81,177,177,177,]),'inicialization':([50,],[85,]),'claveValor':([57,227,],[93,256,]),'tuplas':([57,146,],[94,191,]),'clave':([57,118,119,227,],[95,164,165,95,]),'tupla':([57,146,],[96,96,]),'operand':([59,63,99,101,159,188,199,],[106,114,114,106,204,106,114,]),'parameter':([79,126,],[125,171,]),'clause':([82,],[129,]),'items':([104,196,202,236,],[150,234,239,261,]),'cadena':([104,195,196,202,236,],[152,233,152,152,152,]),'expBoolean':([136,178,219,],[175,222,253,]),'valor':([145,],[185,]),'logicalOperator':([175,222,253,],[219,219,219,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> expression","S'",1,None,None,None),
  ('expression -> variable','expression',1,'p_expression_expr','sintactical.py',12),
  ('expression -> variable expression','expression',2,'p_expression_expr','sintactical.py',13),
  ('expression -> dataStruct','expression',1,'p_expression_expr','sintactical.py',14),
  ('expression -> dataStruct expression','expression',2,'p_expression_expr','sintactical.py',15),
  ('expression -> controlStruct','expression',1,'p_expression_expr','sintactical.py',16),
  ('expression -> controlStruct expression','expression',2,'p_expression_expr','sintactical.py',17),
  ('expression -> methodsSet','expression',1,'p_expression_expr','sintactical.py',18),
  ('expression -> mapFunctions','expression',1,'p_expression_expr','sintactical.py',19),
  ('expression -> arrayFn','expression',1,'p_expression_expr','sintactical.py',20),
  ('expression -> declaration','expression',1,'p_expression_expr','sintactical.py',21),
  ('expression -> print','expression',1,'p_expression_expr','sintactical.py',22),
  ('expression -> return','expression',1,'p_expression_expr','sintactical.py',23),
  ('expression -> function','expression',1,'p_expression_expr','sintactical.py',24),
  ('number -> INTEGER','number',1,'p_number_expr','sintactical.py',27),
  ('number -> FLOAT','number',1,'p_number_expr','sintactical.py',28),
  ('number -> RESTA INTEGER','number',2,'p_number_expr','sintactical.py',29),
  ('number -> RESTA FLOAT','number',2,'p_number_expr','sintactical.py',30),
  ('variable -> type NAME IGUAL datatype SEMICOLON','variable',5,'p_variable_expr','sintactical.py',32),
  ('variable -> type NAME IGUAL operations SEMICOLON','variable',5,'p_variable_expr','sintactical.py',33),
  ('variable -> NAME IGUAL datatype SEMICOLON','variable',4,'p_variable_expr','sintactical.py',34),
  ('controlStruct -> while','controlStruct',1,'p_controlStruct_expr','sintactical.py',37),
  ('controlStruct -> for','controlStruct',1,'p_controlStruct_expr','sintactical.py',38),
  ('controlStruct -> if','controlStruct',1,'p_controlStruct_expr','sintactical.py',39),
  ('dataStruct -> array','dataStruct',1,'p_dataStruct_expr','sintactical.py',42),
  ('dataStruct -> set','dataStruct',1,'p_dataStruct_expr','sintactical.py',43),
  ('dataStruct -> map','dataStruct',1,'p_dataStruct_expr','sintactical.py',44),
  ('while -> WHILE OPEN_PARENTHESIS controlArg CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE','while',7,'p_while_expr','sintactical.py',47),
  ('while -> WHILE OPEN_PARENTHESIS bool CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE','while',7,'p_while_expr','sintactical.py',48),
  ('if -> soloIf','if',1,'p_if_expr','sintactical.py',51),
  ('if -> soloIf elseIf','if',2,'p_if_expr','sintactical.py',52),
  ('if -> soloIf elseIf else','if',3,'p_if_expr','sintactical.py',53),
  ('if -> soloIf else','if',2,'p_if_expr','sintactical.py',54),
  ('soloIf -> IF OPEN_PARENTHESIS controlArg CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE','soloIf',7,'p_soloIf_expr','sintactical.py',57),
  ('elseIf -> ELSEIF OPEN_PARENTHESIS controlArg CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE','elseIf',7,'p_elseIf_expr','sintactical.py',60),
  ('elseIf -> ELSEIF OPEN_PARENTHESIS controlArg CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE soloIf','elseIf',8,'p_elseIf_expr','sintactical.py',61),
  ('else -> ELSE OPEN_BRACE expression CLOSE_BRACE','else',4,'p_else_expr','sintactical.py',64),
  ('controlArg -> element clause element','controlArg',3,'p_controlArg_expr','sintactical.py',67),
  ('for -> FOR OPEN_PARENTHESIS inicialization SEMICOLON expBoolean SEMICOLON operations CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE','for',11,'p_for_expr','sintactical.py',70),
  ('inicialization -> type NAME IGUAL number','inicialization',4,'p_inicialization','sintactical.py',73),
  ('inicialization -> NAME IGUAL number','inicialization',3,'p_inicialization','sintactical.py',74),
  ('operations -> number operand number','operations',3,'p_operations','sintactical.py',77),
  ('operations -> NAME','operations',1,'p_operations','sintactical.py',78),
  ('operations -> number','operations',1,'p_operations','sintactical.py',79),
  ('operations -> number operand NAME operations','operations',4,'p_operations','sintactical.py',80),
  ('operations -> NAME operand number operations','operations',4,'p_operations','sintactical.py',81),
  ('operations -> number operand NAME','operations',3,'p_operations','sintactical.py',82),
  ('operations -> NAME operand number','operations',3,'p_operations','sintactical.py',83),
  ('operations -> NAME operand NAME operations','operations',4,'p_operations','sintactical.py',84),
  ('operations -> number operand number operand operations','operations',5,'p_operations','sintactical.py',85),
  ('datatype -> number','datatype',1,'p_datatype_expr','sintactical.py',88),
  ('datatype -> STRING','datatype',1,'p_datatype_expr','sintactical.py',89),
  ('datatype -> CHAR','datatype',1,'p_datatype_expr','sintactical.py',90),
  ('datatype -> operations','datatype',1,'p_datatype_expr','sintactical.py',91),
  ('operand -> SUMA','operand',1,'p_operand_expr','sintactical.py',94),
  ('operand -> RESTA','operand',1,'p_operand_expr','sintactical.py',95),
  ('operand -> MULTIPLICACION','operand',1,'p_operand_expr','sintactical.py',96),
  ('operand -> DIVISION','operand',1,'p_operand_expr','sintactical.py',97),
  ('bool -> TRUE','bool',1,'p_bool_expr','sintactical.py',100),
  ('bool -> FALSE','bool',1,'p_bool_expr','sintactical.py',101),
  ('type -> CONST','type',1,'p_type_expr','sintactical.py',104),
  ('type -> LET','type',1,'p_type_expr','sintactical.py',105),
  ('type -> VAR','type',1,'p_type_expr','sintactical.py',106),
  ('clause -> IGUALIGUAL','clause',1,'p_clause_expr','sintactical.py',109),
  ('clause -> DIFERENTE','clause',1,'p_clause_expr','sintactical.py',110),
  ('clause -> MAYORQUE','clause',1,'p_clause_expr','sintactical.py',111),
  ('clause -> MAYORIGUALQUE','clause',1,'p_clause_expr','sintactical.py',112),
  ('clause -> MENORQUE','clause',1,'p_clause_expr','sintactical.py',113),
  ('clause -> MENORIGUALQUE','clause',1,'p_clause_expr','sintactical.py',114),
  ('value -> NAME','value',1,'p_value_expr','sintactical.py',117),
  ('value -> number','value',1,'p_value_expr','sintactical.py',118),
  ('array -> type NAME IGUAL OPEN_BRACKET items CLOSE_BRACKET SEMICOLON','array',7,'p_array_expr','sintactical.py',121),
  ('array -> type NAME IGUAL NEW ARRAY OPEN_PARENTHESIS items CLOSE_PARENTHESIS SEMICOLON','array',9,'p_array_expr','sintactical.py',122),
  ('map -> iniciarMap','map',1,'p_map_expr','sintactical.py',125),
  ('map -> escribirMap','map',1,'p_map_expr','sintactical.py',126),
  ('map -> generarMap','map',1,'p_map_expr','sintactical.py',127),
  ('iniciarMap -> variable IGUAL NEW MAP OPEN_PARENTHESIS CLOSE_PARENTHESIS SEMICOLON','iniciarMap',7,'p_iniciarMap_expr','sintactical.py',130),
  ('escribirMap -> variable IGUAL OPEN_BRACE claveValor CLOSE_BRACE','escribirMap',5,'p_escribirMap_expr','sintactical.py',133),
  ('claveValor -> clave COLON valor','claveValor',3,'p_claveValor_expr','sintactical.py',136),
  ('claveValor -> clave COLON valor COMMA claveValor','claveValor',5,'p_claveValor_expr','sintactical.py',137),
  ('clave -> datatype','clave',1,'p_clave_expr','sintactical.py',140),
  ('valor -> datatype','valor',1,'p_valor_expr','sintactical.py',143),
  ('valor -> dataStruct','valor',1,'p_valor_expr','sintactical.py',144),
  ('generarMap -> variable IGUAL OPEN_BRACE tuplas CLOSE_BRACE','generarMap',5,'p_generarMap_expr','sintactical.py',147),
  ('tuplas -> tupla','tuplas',1,'p_tuplas_expr','sintactical.py',150),
  ('tuplas -> tupla COMMA tuplas','tuplas',3,'p_tuplas_expr','sintactical.py',151),
  ('tupla -> OPEN_BRACKET datatype CLOSE_BRACKET SEMICOLON','tupla',4,'p_tupla_expr','sintactical.py',154),
  ('tupla -> OPEN_BRACKET datatype COMMA datatype CLOSE_BRACKET SEMICOLON','tupla',6,'p_tupla_expr','sintactical.py',155),
  ('mapFunctions -> NAME POINT CLEAR OPEN_PARENTHESIS CLOSE_PARENTHESIS SEMICOLON','mapFunctions',6,'p_mapFunctions_expr','sintactical.py',158),
  ('mapFunctions -> NAME POINT GET OPEN_PARENTHESIS clave CLOSE_PARENTHESIS SEMICOLON','mapFunctions',7,'p_mapFunctions_expr','sintactical.py',159),
  ('mapFunctions -> NAME POINT HAS OPEN_PARENTHESIS clave CLOSE_PARENTHESIS SEMICOLON','mapFunctions',7,'p_mapFunctions_expr','sintactical.py',160),
  ('arrayFn -> NAME POINT POP OPEN_PARENTHESIS CLOSE_PARENTHESIS SEMICOLON','arrayFn',6,'p_arrayFn_expr','sintactical.py',163),
  ('arrayFn -> NAME POINT PUSH OPEN_PARENTHESIS element CLOSE_PARENTHESIS SEMICOLON','arrayFn',7,'p_arrayFn_expr','sintactical.py',164),
  ('arrayFn -> NAME POINT UNSHIFT OPEN_PARENTHESIS element CLOSE_PARENTHESIS SEMICOLON','arrayFn',7,'p_arrayFn_expr','sintactical.py',165),
  ('set -> type NAME IGUAL NEW SET OPEN_PARENTHESIS CLOSE_PARENTHESIS SEMICOLON','set',8,'p_set_expr','sintactical.py',168),
  ('set -> type NAME IGUAL NEW SET OPEN_PARENTHESIS OPEN_BRACKET items CLOSE_BRACKET CLOSE_PARENTHESIS SEMICOLON','set',11,'p_set_expr','sintactical.py',169),
  ('set -> type NAME IGUAL NEW SET OPEN_PARENTHESIS element CLOSE_PARENTHESIS SEMICOLON','set',9,'p_set_expr','sintactical.py',170),
  ('set -> NAME IGUAL NEW SET OPEN_PARENTHESIS CLOSE_PARENTHESIS SEMICOLON','set',7,'p_set_expr','sintactical.py',171),
  ('set -> NAME IGUAL NEW SET OPEN_PARENTHESIS OPEN_BRACKET items CLOSE_BRACKET CLOSE_PARENTHESIS SEMICOLON','set',10,'p_set_expr','sintactical.py',172),
  ('set -> NAME IGUAL NEW SET OPEN_PARENTHESIS element CLOSE_PARENTHESIS SEMICOLON','set',8,'p_set_expr','sintactical.py',173),
  ('methodsSet -> NAME POINT ADD OPEN_PARENTHESIS element CLOSE_PARENTHESIS SEMICOLON','methodsSet',7,'p_methodsSet_expr','sintactical.py',176),
  ('methodsSet -> NAME POINT DELETE OPEN_PARENTHESIS element CLOSE_PARENTHESIS SEMICOLON','methodsSet',7,'p_methodsSet_expr','sintactical.py',177),
  ('methodsSet -> NAME POINT CLEAR OPEN_PARENTHESIS CLOSE_PARENTHESIS SEMICOLON','methodsSet',6,'p_methodsSet_expr','sintactical.py',178),
  ('items -> number','items',1,'p_items_expr','sintactical.py',181),
  ('items -> cadena','items',1,'p_items_expr','sintactical.py',182),
  ('cadena -> STRING','cadena',1,'p_cadena_expr','sintactical.py',189),
  ('cadena -> STRING COMMA cadena','cadena',3,'p_cadena_expr','sintactical.py',190),
  ('element -> STRING','element',1,'p_element_expr','sintactical.py',193),
  ('element -> number','element',1,'p_element_expr','sintactical.py',194),
  ('element -> NAME','element',1,'p_element_expr','sintactical.py',195),
  ('declaration -> NAME IGUAL element SEMICOLON','declaration',4,'p_declaration_expr','sintactical.py',198),
  ('logicalOperator -> AND','logicalOperator',1,'p_logicalOperator_expr','sintactical.py',201),
  ('logicalOperator -> OR','logicalOperator',1,'p_logicalOperator_expr','sintactical.py',202),
  ('expBoolean -> controlArg','expBoolean',1,'p_expBoolean_expr','sintactical.py',205),
  ('expBoolean -> bool','expBoolean',1,'p_expBoolean_expr','sintactical.py',206),
  ('expBoolean -> NOT expBoolean','expBoolean',2,'p_expBoolean_expr','sintactical.py',207),
  ('expBoolean -> expBoolean logicalOperator expBoolean','expBoolean',3,'p_expBoolean_expr','sintactical.py',208),
  ('function -> FUNCTION NAME OPEN_PARENTHESIS CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE','function',7,'p_function_expr','sintactical.py',211),
  ('function -> FUNCTION NAME OPEN_PARENTHESIS parameter CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE','function',8,'p_function_expr','sintactical.py',212),
  ('parameter -> element','parameter',1,'p_parameter_expr','sintactical.py',215),
  ('parameter -> element parameter','parameter',2,'p_parameter_expr','sintactical.py',216),
  ('return -> RETURN element SEMICOLON','return',3,'p_return_expr','sintactical.py',220),
  ('print -> PRINT OPEN_PARENTHESIS CLOSE_PARENTHESIS SEMICOLON','print',4,'p_print_expr','sintactical.py',223),
]

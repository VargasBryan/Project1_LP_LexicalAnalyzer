
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'ADD AND ARRAY CHAR CLEAR CLOSE_BRACE CLOSE_BRACKET CLOSE_PARENTHESIS COLON COMMA COMMENTS CONST DELETE DIFERENTE DIVIGUAL DIVISION ELSE ELSEIF FALSE FLOAT FOR FUNCTION GET HAS IF IGUAL IGUALIGUAL INTEGER LET LONGCOMMENT MAP MASIGUAL MAYORIGUALQUE MAYORQUE MENORIGUALQUE MENORQUE MENOSIGUAL MODIGUAL MULTIPLICACION NAME NEW NOT OPEN_BRACE OPEN_BRACKET OPEN_PARENTHESIS OR POINT POP PORIGUAL POTIGUAL PRINT PUSH RESTA RETURN SEMICOLON SET STRING SUMA TRUE UNSHIFT VAR WHILEexpression : semiExpression\n    | semiExpression expressionsemiExpression : variable\n    | dataStruct\n    | controlStruct\n    | methodsSet\n    | mapFunctions\n    | arrayFn\n    | declaration\n    | print\n    | return\n    | function\n    | COMMENTS\n    | LONGCOMMENT\n    | asigOpnumber : INTEGER\n    | FLOAT\n    | OPEN_PARENTHESIS RESTA INTEGER CLOSE_PARENTHESIS\n    | OPEN_PARENTHESIS RESTA FLOAT CLOSE_PARENTHESISvariable : type NAME IGUAL datatype SEMICOLON\n        | NAME IGUAL datatype SEMICOLONcontrolStruct : while\n    | for\n    | ifdataStruct : array\n    | set\n    | map while : WHILE OPEN_PARENTHESIS controlArg CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE\n    | WHILE OPEN_PARENTHESIS bool CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACEif : soloIf \n    | soloIf elseIf\n    | soloIf elseIf else\n    | soloIf else soloIf : IF OPEN_PARENTHESIS controlArg CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE elseIf : ELSEIF OPEN_PARENTHESIS controlArg CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE\n        | ELSEIF OPEN_PARENTHESIS controlArg CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE soloIf else : ELSE OPEN_BRACE expression CLOSE_BRACEcontrolArg : element clause elementfor : FOR OPEN_PARENTHESIS inicialization SEMICOLON expBoolean SEMICOLON operations CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE inicialization : type NAME IGUAL number\n    | NAME IGUAL numberoperations : number operand number\n    | NAME\n    | number\n    | number operand NAME operations\n    | NAME operand number operations\n    | number operand NAME\n    | NAME operand number\n    | NAME operand NAME operations\n    | number operand number operand operations\n    | NAME SUMA SUMA\n    | NAME operand NAME\n    | NAME RESTA RESTAdatatype : number\n    | NAME\n    | STRING\n    | CHAR\n    | operations\n    | dataStructoperand : SUMA \n    | RESTA \n    | MULTIPLICACION \n    | DIVISIONoperadorAsig : MASIGUAL\n    | MENOSIGUAL\n    | PORIGUAL\n    | DIVIGUAL\n    | MODIGUAL\n    | POTIGUALasigOp : NAME operadorAsig number SEMICOLONbool : TRUE\n    | FALSEtype : CONST\n    | LET\n    | VARclause :  IGUALIGUAL\n    | DIFERENTE\n    | MAYORQUE\n    | MAYORIGUALQUE\n    | MENORQUE\n    | MENORIGUALQUE array : OPEN_BRACKET items CLOSE_BRACKET \n    | NEW ARRAY OPEN_PARENTHESIS items CLOSE_PARENTHESIS map : iniciarMap\n        | escribirMap\n        | generarMap iniciarMap : NEW MAP OPEN_PARENTHESIS CLOSE_PARENTHESISescribirMap : OPEN_BRACE claveValor CLOSE_BRACEclaveValor : clave COLON datatype\n    | clave COLON datatype COMMA claveValorclave : datatypegenerarMap : OPEN_BRACE tuplas CLOSE_BRACEtuplas : tupla\n        | tupla COMMA tuplas  tupla : OPEN_BRACKET datatype CLOSE_BRACKET SEMICOLON\n        | OPEN_BRACKET datatype COMMA datatype CLOSE_BRACKET SEMICOLONmapFunctions : NAME POINT CLEAR OPEN_PARENTHESIS CLOSE_PARENTHESIS SEMICOLON\n        | NAME POINT GET OPEN_PARENTHESIS clave CLOSE_PARENTHESIS SEMICOLON\n        | NAME POINT HAS OPEN_PARENTHESIS clave CLOSE_PARENTHESIS SEMICOLONarrayFn : NAME POINT POP OPEN_PARENTHESIS CLOSE_PARENTHESIS SEMICOLON\n    | NAME POINT PUSH OPEN_PARENTHESIS element CLOSE_PARENTHESIS SEMICOLON\n    | NAME POINT UNSHIFT OPEN_PARENTHESIS element CLOSE_PARENTHESIS SEMICOLONset : NEW SET OPEN_PARENTHESIS CLOSE_PARENTHESIS \n    | NEW SET OPEN_PARENTHESIS OPEN_BRACKET items CLOSE_BRACKET CLOSE_PARENTHESIS \n    | NEW SET OPEN_PARENTHESIS element CLOSE_PARENTHESISmethodsSet : NAME POINT ADD OPEN_PARENTHESIS element CLOSE_PARENTHESIS SEMICOLON\n    | NAME POINT DELETE OPEN_PARENTHESIS element CLOSE_PARENTHESIS SEMICOLON\n    | NAME POINT CLEAR OPEN_PARENTHESIS CLOSE_PARENTHESIS SEMICOLON items : item\n    | item COMMA itemsitem : number\n    | STRING\n    | expBoolean\n    | NAME\n    | datatypeelement : STRING\n    | number\n    | NAMEdeclaration : NAME IGUAL element SEMICOLONlogicalOperator : AND\n    | ORexpBoolean : controlArg\n    | bool\n    | NOT expBoolean\n    | expBoolean logicalOperator expBooleanfunction : FUNCTION NAME OPEN_PARENTHESIS CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE\n    | FUNCTION NAME OPEN_PARENTHESIS parameter CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE parameter : datatype\n    | datatype COMMA parameter\n    return : RETURN datatype SEMICOLONprint : PRINT OPEN_PARENTHESIS datatype CLOSE_PARENTHESIS SEMICOLON\n    | PRINT OPEN_PARENTHESIS CLOSE_PARENTHESIS SEMICOLON'
    
_lr_action_items = {'COMMENTS':([0,2,3,4,5,6,7,8,9,10,11,12,13,14,15,18,19,20,21,22,23,33,34,35,38,87,88,109,120,121,128,152,154,157,158,167,169,190,193,202,211,220,227,229,230,231,236,237,240,243,248,257,259,260,261,262,263,264,265,268,269,270,273,274,276,277,278,280,],[13,13,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-25,-26,-27,-22,-23,-24,-84,-85,-86,-30,-31,-33,-130,-88,-92,-82,-32,13,-21,-119,-70,-132,-103,-87,-20,-131,13,-83,-105,13,13,-37,13,-97,-100,13,13,-106,-107,-98,-99,-101,-102,-126,-104,-28,-29,-34,-127,-35,13,-36,-39,]),'LONGCOMMENT':([0,2,3,4,5,6,7,8,9,10,11,12,13,14,15,18,19,20,21,22,23,33,34,35,38,87,88,109,120,121,128,152,154,157,158,167,169,190,193,202,211,220,227,229,230,231,236,237,240,243,248,257,259,260,261,262,263,264,265,268,269,270,273,274,276,277,278,280,],[14,14,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-25,-26,-27,-22,-23,-24,-84,-85,-86,-30,-31,-33,-130,-88,-92,-82,-32,14,-21,-119,-70,-132,-103,-87,-20,-131,14,-83,-105,14,14,-37,14,-97,-100,14,14,-106,-107,-98,-99,-101,-102,-126,-104,-28,-29,-34,-127,-35,14,-36,-39,]),'NAME':([0,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,18,19,20,21,22,23,25,26,27,28,29,30,31,33,34,35,38,42,51,59,60,68,78,85,86,87,88,91,92,109,110,111,112,113,114,115,116,117,119,120,121,122,128,129,130,131,132,137,138,139,140,141,142,143,144,145,150,152,153,154,157,158,159,160,162,163,165,166,167,169,171,172,173,183,185,190,191,193,196,202,211,212,218,219,220,222,223,227,229,230,231,236,237,240,243,248,255,257,259,260,261,262,263,264,265,268,269,270,273,274,276,277,278,280,],[17,17,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,41,-25,-26,-27,-22,-23,-24,54,62,54,-73,-74,-75,74,-84,-85,-86,-30,93,54,-16,-17,126,136,136,151,-31,-33,136,54,-130,171,-60,-61,-62,-63,172,-60,-61,54,-88,-92,54,-82,74,136,-120,-121,136,-76,-77,-78,-79,-80,-81,74,136,197,-32,136,17,-21,-119,136,136,54,54,136,136,-70,-132,214,214,214,54,54,-103,74,-87,136,-20,-131,214,-18,-19,17,54,54,-83,-105,17,17,-37,17,-97,-100,17,214,17,-106,-107,-98,-99,-101,-102,-126,-104,-28,-29,-34,-127,-35,17,-36,-39,]),'PRINT':([0,2,3,4,5,6,7,8,9,10,11,12,13,14,15,18,19,20,21,22,23,33,34,35,38,87,88,109,120,121,128,152,154,157,158,167,169,190,193,202,211,220,227,229,230,231,236,237,240,243,248,257,259,260,261,262,263,264,265,268,269,270,273,274,276,277,278,280,],[24,24,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-25,-26,-27,-22,-23,-24,-84,-85,-86,-30,-31,-33,-130,-88,-92,-82,-32,24,-21,-119,-70,-132,-103,-87,-20,-131,24,-83,-105,24,24,-37,24,-97,-100,24,24,-106,-107,-98,-99,-101,-102,-126,-104,-28,-29,-34,-127,-35,24,-36,-39,]),'RETURN':([0,2,3,4,5,6,7,8,9,10,11,12,13,14,15,18,19,20,21,22,23,33,34,35,38,87,88,109,120,121,128,152,154,157,158,167,169,190,193,202,211,220,227,229,230,231,236,237,240,243,248,257,259,260,261,262,263,264,265,268,269,270,273,274,276,277,278,280,],[25,25,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-25,-26,-27,-22,-23,-24,-84,-85,-86,-30,-31,-33,-130,-88,-92,-82,-32,25,-21,-119,-70,-132,-103,-87,-20,-131,25,-83,-105,25,25,-37,25,-97,-100,25,25,-106,-107,-98,-99,-101,-102,-126,-104,-28,-29,-34,-127,-35,25,-36,-39,]),'FUNCTION':([0,2,3,4,5,6,7,8,9,10,11,12,13,14,15,18,19,20,21,22,23,33,34,35,38,87,88,109,120,121,128,152,154,157,158,167,169,190,193,202,211,220,227,229,230,231,236,237,240,243,248,257,259,260,261,262,263,264,265,268,269,270,273,274,276,277,278,280,],[26,26,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-25,-26,-27,-22,-23,-24,-84,-85,-86,-30,-31,-33,-130,-88,-92,-82,-32,26,-21,-119,-70,-132,-103,-87,-20,-131,26,-83,-105,26,26,-37,26,-97,-100,26,26,-106,-107,-98,-99,-101,-102,-126,-104,-28,-29,-34,-127,-35,26,-36,-39,]),'CONST':([0,2,3,4,5,6,7,8,9,10,11,12,13,14,15,18,19,20,21,22,23,33,34,35,38,86,87,88,109,120,121,128,152,154,157,158,167,169,190,193,202,211,220,227,229,230,231,236,237,240,243,248,257,259,260,261,262,263,264,265,268,269,270,273,274,276,277,278,280,],[28,28,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-25,-26,-27,-22,-23,-24,-84,-85,-86,-30,28,-31,-33,-130,-88,-92,-82,-32,28,-21,-119,-70,-132,-103,-87,-20,-131,28,-83,-105,28,28,-37,28,-97,-100,28,28,-106,-107,-98,-99,-101,-102,-126,-104,-28,-29,-34,-127,-35,28,-36,-39,]),'LET':([0,2,3,4,5,6,7,8,9,10,11,12,13,14,15,18,19,20,21,22,23,33,34,35,38,86,87,88,109,120,121,128,152,154,157,158,167,169,190,193,202,211,220,227,229,230,231,236,237,240,243,248,257,259,260,261,262,263,264,265,268,269,270,273,274,276,277,278,280,],[29,29,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-25,-26,-27,-22,-23,-24,-84,-85,-86,-30,29,-31,-33,-130,-88,-92,-82,-32,29,-21,-119,-70,-132,-103,-87,-20,-131,29,-83,-105,29,29,-37,29,-97,-100,29,29,-106,-107,-98,-99,-101,-102,-126,-104,-28,-29,-34,-127,-35,29,-36,-39,]),'VAR':([0,2,3,4,5,6,7,8,9,10,11,12,13,14,15,18,19,20,21,22,23,33,34,35,38,86,87,88,109,120,121,128,152,154,157,158,167,169,190,193,202,211,220,227,229,230,231,236,237,240,243,248,257,259,260,261,262,263,264,265,268,269,270,273,274,276,277,278,280,],[30,30,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-25,-26,-27,-22,-23,-24,-84,-85,-86,-30,30,-31,-33,-130,-88,-92,-82,-32,30,-21,-119,-70,-132,-103,-87,-20,-131,30,-83,-105,30,30,-37,30,-97,-100,30,30,-106,-107,-98,-99,-101,-102,-126,-104,-28,-29,-34,-127,-35,30,-36,-39,]),'OPEN_BRACKET':([0,2,3,4,5,6,7,8,9,10,11,12,13,14,15,18,19,20,21,22,23,25,27,31,33,34,35,38,42,51,68,87,88,92,109,119,120,121,122,123,128,129,144,145,152,154,157,158,162,163,167,169,183,185,190,191,193,202,211,220,222,223,227,229,230,231,236,237,240,243,248,257,259,260,261,262,263,264,265,268,269,270,273,274,276,277,278,280,],[31,31,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-25,-26,-27,-22,-23,-24,31,68,31,-84,-85,-86,-30,31,31,31,-31,-33,31,-130,31,-88,-92,31,183,-82,31,31,191,-32,31,-21,-119,31,31,-70,-132,31,31,-103,31,-87,-20,-131,31,31,31,-83,-105,31,31,-37,31,-97,-100,31,31,-106,-107,-98,-99,-101,-102,-126,-104,-28,-29,-34,-127,-35,31,-36,-39,]),'NEW':([0,2,3,4,5,6,7,8,9,10,11,12,13,14,15,18,19,20,21,22,23,25,27,31,33,34,35,38,42,51,68,87,88,92,109,119,120,121,122,128,129,144,152,154,157,158,162,163,167,169,183,185,190,191,193,202,211,220,222,223,227,229,230,231,236,237,240,243,248,257,259,260,261,262,263,264,265,268,269,270,273,274,276,277,278,280,],[32,32,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-25,-26,-27,-22,-23,-24,32,32,32,-84,-85,-86,-30,32,32,32,-31,-33,32,-130,32,-88,-92,32,-82,32,32,-32,32,-21,-119,32,32,-70,-132,32,32,-103,32,-87,-20,-131,32,32,32,-83,-105,32,32,-37,32,-97,-100,32,32,-106,-107,-98,-99,-101,-102,-126,-104,-28,-29,-34,-127,-35,32,-36,-39,]),'WHILE':([0,2,3,4,5,6,7,8,9,10,11,12,13,14,15,18,19,20,21,22,23,33,34,35,38,87,88,109,120,121,128,152,154,157,158,167,169,190,193,202,211,220,227,229,230,231,236,237,240,243,248,257,259,260,261,262,263,264,265,268,269,270,273,274,276,277,278,280,],[36,36,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-25,-26,-27,-22,-23,-24,-84,-85,-86,-30,-31,-33,-130,-88,-92,-82,-32,36,-21,-119,-70,-132,-103,-87,-20,-131,36,-83,-105,36,36,-37,36,-97,-100,36,36,-106,-107,-98,-99,-101,-102,-126,-104,-28,-29,-34,-127,-35,36,-36,-39,]),'FOR':([0,2,3,4,5,6,7,8,9,10,11,12,13,14,15,18,19,20,21,22,23,33,34,35,38,87,88,109,120,121,128,152,154,157,158,167,169,190,193,202,211,220,227,229,230,231,236,237,240,243,248,257,259,260,261,262,263,264,265,268,269,270,273,274,276,277,278,280,],[37,37,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-25,-26,-27,-22,-23,-24,-84,-85,-86,-30,-31,-33,-130,-88,-92,-82,-32,37,-21,-119,-70,-132,-103,-87,-20,-131,37,-83,-105,37,37,-37,37,-97,-100,37,37,-106,-107,-98,-99,-101,-102,-126,-104,-28,-29,-34,-127,-35,37,-36,-39,]),'OPEN_BRACE':([0,2,3,4,5,6,7,8,9,10,11,12,13,14,15,18,19,20,21,22,23,25,27,31,33,34,35,38,42,51,68,87,88,90,92,109,119,120,121,122,128,129,144,152,154,157,158,162,163,167,169,178,183,185,190,191,193,194,195,201,202,211,220,221,222,223,227,229,230,231,235,236,237,240,243,248,257,259,260,261,262,263,264,265,268,269,270,273,274,275,276,277,278,280,],[27,27,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-25,-26,-27,-22,-23,-24,27,27,27,-84,-85,-86,-30,27,27,27,-31,-33,154,27,-130,27,-88,-92,27,-82,27,27,-32,27,-21,-119,27,27,-70,-132,220,27,27,-103,27,-87,230,231,237,-20,-131,27,248,27,27,-83,-105,27,27,257,-37,27,-97,-100,27,27,-106,-107,-98,-99,-101,-102,-126,-104,-28,-29,-34,-127,277,-35,27,-36,-39,]),'IF':([0,2,3,4,5,6,7,8,9,10,11,12,13,14,15,18,19,20,21,22,23,33,34,35,38,87,88,109,120,121,128,152,154,157,158,167,169,190,193,202,211,220,227,229,230,231,236,237,240,243,248,257,259,260,261,262,263,264,265,268,269,270,273,274,276,277,278,280,],[39,39,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-25,-26,-27,-22,-23,-24,-84,-85,-86,-30,-31,-33,-130,-88,-92,-82,-32,39,-21,-119,-70,-132,-103,-87,-20,-131,39,-83,-105,39,39,-37,39,-97,-100,39,39,-106,-107,-98,-99,-101,-102,-126,-104,-28,-29,-34,-127,39,39,-36,-39,]),'$end':([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,18,19,20,21,22,23,33,34,35,38,40,87,88,109,120,121,128,152,157,158,167,169,190,193,202,211,227,229,236,240,243,259,260,261,262,263,264,265,268,269,270,273,274,276,278,280,],[0,-1,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-25,-26,-27,-22,-23,-24,-84,-85,-86,-30,-2,-31,-33,-130,-88,-92,-82,-32,-21,-119,-70,-132,-103,-87,-20,-131,-83,-105,-37,-97,-100,-106,-107,-98,-99,-101,-102,-126,-104,-28,-29,-34,-127,-35,-36,-39,]),'CLOSE_BRACE':([2,3,4,5,6,7,8,9,10,11,12,13,14,15,18,19,20,21,22,23,33,34,35,38,40,53,54,55,56,57,58,59,60,63,64,67,87,88,109,120,121,128,152,157,158,167,169,170,171,172,173,174,175,181,182,190,193,200,202,211,213,214,215,216,217,218,219,225,227,229,236,240,243,246,247,250,253,254,258,259,260,261,262,263,264,265,266,267,268,269,270,272,273,274,276,278,279,280,],[-1,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-25,-26,-27,-22,-23,-24,-84,-85,-86,-30,-2,-44,-43,-56,-57,-58,-59,-16,-17,120,121,-93,-31,-33,-130,-88,-92,-82,-32,-21,-119,-70,-132,-42,-47,-52,-48,-51,-53,-89,-94,-103,-87,236,-20,-131,-44,-43,-45,-49,-46,-18,-19,-95,-83,-105,-37,-97,-100,-50,265,-90,269,270,273,-106,-107,-98,-99,-101,-102,-126,274,-96,-104,-28,-29,276,-34,-127,-35,-36,280,-39,]),'IGUAL':([17,41,151,197,],[42,92,198,233,]),'POINT':([17,],[43,]),'MASIGUAL':([17,],[45,]),'MENOSIGUAL':([17,],[46,]),'PORIGUAL':([17,],[47,]),'DIVIGUAL':([17,],[48,]),'MODIGUAL':([17,],[49,]),'POTIGUAL':([17,],[50,]),'SEMICOLON':([18,19,20,33,34,35,52,53,54,55,56,57,58,59,60,76,77,80,81,93,94,95,96,97,106,108,120,121,128,133,134,135,136,149,156,168,170,171,172,173,174,175,184,187,188,190,193,205,208,213,214,215,216,217,218,219,227,229,232,234,238,239,241,242,244,245,246,251,256,268,],[-25,-26,-27,-84,-85,-86,109,-44,-43,-56,-57,-58,-59,-16,-17,-122,-123,-71,-72,-43,157,158,-44,-56,167,169,-88,-92,-82,-124,-116,-117,-118,196,202,211,-42,-47,-52,-48,-51,-53,225,-125,-38,-103,-87,240,243,-44,-43,-45,-49,-46,-18,-19,-83,-105,255,-41,259,260,261,262,263,264,-50,267,-40,-104,]),'COLON':([18,19,20,33,34,35,53,54,55,56,57,58,59,60,65,66,120,121,128,170,171,172,173,174,175,190,193,213,214,215,216,217,218,219,227,229,246,268,],[-25,-26,-27,-84,-85,-86,-44,-43,-56,-57,-58,-59,-16,-17,122,-91,-88,-92,-82,-42,-47,-52,-48,-51,-53,-103,-87,-44,-43,-45,-49,-46,-18,-19,-83,-105,-50,-104,]),'COMMA':([18,19,20,33,34,35,53,54,55,56,57,58,59,60,67,70,71,72,73,74,75,76,77,80,81,120,121,124,125,126,127,128,133,134,135,136,170,171,172,173,174,175,180,181,187,188,190,193,213,214,215,216,217,218,219,224,225,227,229,246,267,268,],[-25,-26,-27,-84,-85,-86,-44,-43,-56,-57,-58,-59,-16,-17,123,129,-44,-56,-113,-43,-115,-122,-123,-71,-72,-88,-92,185,-44,-43,-56,-82,-124,-116,-117,-118,-42,-47,-52,-48,-51,-53,222,223,-125,-38,-103,-87,-44,-43,-45,-49,-46,-18,-19,185,-95,-83,-105,-50,-96,-104,]),'CLOSE_BRACKET':([18,19,20,33,34,35,53,54,55,56,57,58,59,60,69,70,71,72,73,74,75,76,77,80,81,120,121,124,125,126,127,128,133,134,135,136,170,171,172,173,174,175,186,187,188,190,193,213,214,215,216,217,218,219,224,226,227,228,229,246,268,],[-25,-26,-27,-84,-85,-86,-44,-43,-56,-57,-58,-59,-16,-17,128,-109,-44,-56,-113,-43,-115,-122,-123,-71,-72,-88,-92,184,-44,-43,-56,-82,-124,-116,-117,-118,-42,-47,-52,-48,-51,-53,-110,-125,-38,-103,-87,-44,-43,-45,-49,-46,-18,-19,184,251,-83,252,-105,-50,-104,]),'CLOSE_PARENTHESIS':([18,19,20,33,34,35,51,53,54,55,56,57,58,59,60,66,70,71,72,73,74,75,76,77,80,81,107,119,120,121,128,133,134,135,136,145,146,147,148,155,161,164,170,171,172,173,174,175,176,177,179,180,186,187,188,189,190,192,193,199,203,204,206,207,209,210,213,214,215,216,217,218,219,227,229,246,249,252,268,271,],[-25,-26,-27,-84,-85,-86,108,-44,-43,-56,-57,-58,-59,-16,-17,-91,-109,-44,-56,-113,-43,-115,-122,-123,-71,-72,168,178,-88,-92,-82,-124,-116,-117,-118,190,193,194,195,201,205,208,-42,-47,-52,-48,-51,-53,218,219,221,-128,-110,-125,-38,227,-103,229,-87,235,238,239,241,242,244,245,-44,-43,-45,-49,-46,-18,-19,-83,-105,-50,-129,268,-104,275,]),'OPEN_PARENTHESIS':([24,25,27,31,36,37,39,42,44,45,46,47,48,49,50,51,59,60,62,68,78,82,83,84,85,89,91,92,98,99,100,101,102,103,104,105,110,111,112,113,114,115,116,117,119,122,129,130,131,132,137,138,139,140,141,142,143,144,145,153,159,160,162,163,165,166,171,172,173,183,185,191,196,198,212,218,219,222,223,233,255,],[51,61,61,61,85,86,91,61,61,-64,-65,-66,-67,-68,-69,61,-16,-17,119,61,61,144,145,146,61,153,61,61,159,160,161,162,163,164,165,166,61,-60,-61,-62,-63,61,-60,-61,61,61,61,61,-120,-121,61,-76,-77,-78,-79,-80,-81,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,-18,-19,61,61,61,61,]),'STRING':([25,27,31,42,51,68,78,85,91,92,119,122,129,130,131,132,137,138,139,140,141,142,143,144,145,153,159,160,162,163,165,166,183,185,191,196,222,223,],[55,55,72,97,55,127,134,134,134,55,55,55,72,134,-120,-121,134,-76,-77,-78,-79,-80,-81,72,134,134,134,134,55,55,134,134,55,55,72,134,55,55,]),'CHAR':([25,27,31,42,51,68,92,119,122,129,144,162,163,183,185,191,222,223,],[56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,]),'INTEGER':([25,27,31,42,44,45,46,47,48,49,50,51,59,60,68,78,85,91,92,110,111,112,113,114,115,116,117,118,119,122,129,130,131,132,137,138,139,140,141,142,143,144,145,153,159,160,162,163,165,166,171,172,173,183,185,191,196,198,212,218,219,222,223,233,255,],[59,59,59,59,59,-64,-65,-66,-67,-68,-69,59,-16,-17,59,59,59,59,59,59,-60,-61,-62,-63,59,-60,-61,176,59,59,59,59,-120,-121,59,-76,-77,-78,-79,-80,-81,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,-18,-19,59,59,59,59,]),'FLOAT':([25,27,31,42,44,45,46,47,48,49,50,51,59,60,68,78,85,91,92,110,111,112,113,114,115,116,117,118,119,122,129,130,131,132,137,138,139,140,141,142,143,144,145,153,159,160,162,163,165,166,171,172,173,183,185,191,196,198,212,218,219,222,223,233,255,],[60,60,60,60,60,-64,-65,-66,-67,-68,-69,60,-16,-17,60,60,60,60,60,60,-60,-61,-62,-63,60,-60,-61,177,60,60,60,60,-120,-121,60,-76,-77,-78,-79,-80,-81,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,-18,-19,60,60,60,60,]),'NOT':([31,68,78,129,130,131,132,144,191,196,],[78,78,78,78,78,-120,-121,78,78,78,]),'TRUE':([31,68,78,85,129,130,131,132,144,191,196,],[80,80,80,80,80,80,-120,-121,80,80,80,]),'FALSE':([31,68,78,85,129,130,131,132,144,191,196,],[81,81,81,81,81,81,-120,-121,81,81,81,]),'ARRAY':([32,],[82,]),'SET':([32,],[83,]),'MAP':([32,],[84,]),'ELSEIF':([38,273,],[89,-34,]),'ELSE':([38,87,273,276,278,],[90,90,-34,-35,-36,]),'ADD':([43,],[98,]),'DELETE':([43,],[99,]),'CLEAR':([43,],[100,]),'GET':([43,],[101,]),'HAS':([43,],[102,]),'POP':([43,],[103,]),'PUSH':([43,],[104,]),'UNSHIFT':([43,],[105,]),'SUMA':([53,54,59,60,71,74,93,96,116,125,126,170,213,214,218,219,],[111,116,-16,-17,111,116,116,111,174,111,116,111,111,116,-18,-19,]),'RESTA':([53,54,59,60,61,71,74,93,96,117,125,126,170,213,214,218,219,],[112,117,-16,-17,118,112,117,117,112,175,112,117,112,112,117,-18,-19,]),'MULTIPLICACION':([53,54,59,60,71,74,93,96,125,126,170,213,214,218,219,],[113,113,-16,-17,113,113,113,113,113,113,113,113,113,-18,-19,]),'DIVISION':([53,54,59,60,71,74,93,96,125,126,170,213,214,218,219,],[114,114,-16,-17,114,114,114,114,114,114,114,114,114,-18,-19,]),'IGUALIGUAL':([59,60,71,72,74,79,125,126,127,134,135,136,218,219,],[-16,-17,-117,-116,-118,138,-117,-118,-116,-116,-117,-118,-18,-19,]),'DIFERENTE':([59,60,71,72,74,79,125,126,127,134,135,136,218,219,],[-16,-17,-117,-116,-118,139,-117,-118,-116,-116,-117,-118,-18,-19,]),'MAYORQUE':([59,60,71,72,74,79,125,126,127,134,135,136,218,219,],[-16,-17,-117,-116,-118,140,-117,-118,-116,-116,-117,-118,-18,-19,]),'MAYORIGUALQUE':([59,60,71,72,74,79,125,126,127,134,135,136,218,219,],[-16,-17,-117,-116,-118,141,-117,-118,-116,-116,-117,-118,-18,-19,]),'MENORQUE':([59,60,71,72,74,79,125,126,127,134,135,136,218,219,],[-16,-17,-117,-116,-118,142,-117,-118,-116,-116,-117,-118,-18,-19,]),'MENORIGUALQUE':([59,60,71,72,74,79,125,126,127,134,135,136,218,219,],[-16,-17,-117,-116,-118,143,-117,-118,-116,-116,-117,-118,-18,-19,]),'AND':([59,60,73,76,77,80,81,133,134,135,136,187,188,218,219,232,],[-16,-17,131,-122,-123,-71,-72,131,-116,-117,-118,131,-38,-18,-19,131,]),'OR':([59,60,73,76,77,80,81,133,134,135,136,187,188,218,219,232,],[-16,-17,132,-122,-123,-71,-72,132,-116,-117,-118,132,-38,-18,-19,132,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'expression':([0,2,154,220,230,231,237,248,257,277,],[1,40,200,247,253,254,258,266,272,279,]),'semiExpression':([0,2,154,220,230,231,237,248,257,277,],[2,2,2,2,2,2,2,2,2,2,]),'variable':([0,2,154,220,230,231,237,248,257,277,],[3,3,3,3,3,3,3,3,3,3,]),'dataStruct':([0,2,25,27,31,42,51,68,92,119,122,129,144,154,162,163,183,185,191,220,222,223,230,231,237,248,257,277,],[4,4,58,58,58,58,58,58,58,58,58,58,58,4,58,58,58,58,58,4,58,58,4,4,4,4,4,4,]),'controlStruct':([0,2,154,220,230,231,237,248,257,277,],[5,5,5,5,5,5,5,5,5,5,]),'methodsSet':([0,2,154,220,230,231,237,248,257,277,],[6,6,6,6,6,6,6,6,6,6,]),'mapFunctions':([0,2,154,220,230,231,237,248,257,277,],[7,7,7,7,7,7,7,7,7,7,]),'arrayFn':([0,2,154,220,230,231,237,248,257,277,],[8,8,8,8,8,8,8,8,8,8,]),'declaration':([0,2,154,220,230,231,237,248,257,277,],[9,9,9,9,9,9,9,9,9,9,]),'print':([0,2,154,220,230,231,237,248,257,277,],[10,10,10,10,10,10,10,10,10,10,]),'return':([0,2,154,220,230,231,237,248,257,277,],[11,11,11,11,11,11,11,11,11,11,]),'function':([0,2,154,220,230,231,237,248,257,277,],[12,12,12,12,12,12,12,12,12,12,]),'asigOp':([0,2,154,220,230,231,237,248,257,277,],[15,15,15,15,15,15,15,15,15,15,]),'type':([0,2,86,154,220,230,231,237,248,257,277,],[16,16,150,16,16,16,16,16,16,16,16,]),'array':([0,2,25,27,31,42,51,68,92,119,122,129,144,154,162,163,183,185,191,220,222,223,230,231,237,248,257,277,],[18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,]),'set':([0,2,25,27,31,42,51,68,92,119,122,129,144,154,162,163,183,185,191,220,222,223,230,231,237,248,257,277,],[19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,]),'map':([0,2,25,27,31,42,51,68,92,119,122,129,144,154,162,163,183,185,191,220,222,223,230,231,237,248,257,277,],[20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,]),'while':([0,2,154,220,230,231,237,248,257,277,],[21,21,21,21,21,21,21,21,21,21,]),'for':([0,2,154,220,230,231,237,248,257,277,],[22,22,22,22,22,22,22,22,22,22,]),'if':([0,2,154,220,230,231,237,248,257,277,],[23,23,23,23,23,23,23,23,23,23,]),'iniciarMap':([0,2,25,27,31,42,51,68,92,119,122,129,144,154,162,163,183,185,191,220,222,223,230,231,237,248,257,277,],[33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,]),'escribirMap':([0,2,25,27,31,42,51,68,92,119,122,129,144,154,162,163,183,185,191,220,222,223,230,231,237,248,257,277,],[34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,]),'generarMap':([0,2,25,27,31,42,51,68,92,119,122,129,144,154,162,163,183,185,191,220,222,223,230,231,237,248,257,277,],[35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,]),'soloIf':([0,2,154,220,230,231,237,248,257,276,277,],[38,38,38,38,38,38,38,38,38,278,38,]),'operadorAsig':([17,],[44,]),'datatype':([25,27,31,42,51,68,92,119,122,129,144,162,163,183,185,191,222,223,],[52,66,75,94,107,124,156,180,181,75,75,66,66,224,226,75,180,66,]),'number':([25,27,31,42,44,51,68,78,85,91,92,110,115,119,122,129,130,137,144,145,153,159,160,162,163,165,166,171,172,173,183,185,191,196,198,212,222,223,233,255,],[53,53,71,96,106,53,125,135,135,135,53,170,173,53,53,71,135,135,71,135,135,135,135,53,53,135,135,213,213,213,53,53,71,135,234,213,53,53,256,213,]),'operations':([25,27,31,42,51,68,92,119,122,129,144,162,163,171,172,173,183,185,191,212,222,223,255,],[57,57,57,57,57,57,57,57,57,57,57,57,57,215,216,217,57,57,57,246,57,57,271,]),'claveValor':([27,223,],[63,250,]),'tuplas':([27,123,],[64,182,]),'clave':([27,162,163,223,],[65,206,207,65,]),'tupla':([27,123,],[67,67,]),'items':([31,68,129,144,191,],[69,69,186,189,228,]),'item':([31,68,129,144,191,],[70,70,70,70,70,]),'expBoolean':([31,68,78,129,130,144,191,196,],[73,73,133,73,187,73,73,232,]),'controlArg':([31,68,78,85,91,129,130,144,153,191,196,],[76,76,76,147,155,76,76,76,199,76,76,]),'bool':([31,68,78,85,129,130,144,191,196,],[77,77,77,148,77,77,77,77,77,]),'element':([31,42,68,78,85,91,129,130,137,144,145,153,159,160,165,166,191,196,],[79,95,79,79,79,79,79,79,188,79,192,79,203,204,209,210,79,79,]),'elseIf':([38,],[87,]),'else':([38,87,],[88,152,]),'operand':([53,54,71,74,93,96,125,126,170,213,214,],[110,115,110,115,115,110,110,115,212,110,115,]),'logicalOperator':([73,133,187,232,],[130,130,130,130,]),'clause':([79,],[137,]),'inicialization':([86,],[149,]),'parameter':([119,222,],[179,249,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> expression","S'",1,None,None,None),
  ('expression -> semiExpression','expression',1,'p_expression_expr','sintactical.py',9),
  ('expression -> semiExpression expression','expression',2,'p_expression_expr','sintactical.py',10),
  ('semiExpression -> variable','semiExpression',1,'p_semiExpression_exp','sintactical.py',13),
  ('semiExpression -> dataStruct','semiExpression',1,'p_semiExpression_exp','sintactical.py',14),
  ('semiExpression -> controlStruct','semiExpression',1,'p_semiExpression_exp','sintactical.py',15),
  ('semiExpression -> methodsSet','semiExpression',1,'p_semiExpression_exp','sintactical.py',16),
  ('semiExpression -> mapFunctions','semiExpression',1,'p_semiExpression_exp','sintactical.py',17),
  ('semiExpression -> arrayFn','semiExpression',1,'p_semiExpression_exp','sintactical.py',18),
  ('semiExpression -> declaration','semiExpression',1,'p_semiExpression_exp','sintactical.py',19),
  ('semiExpression -> print','semiExpression',1,'p_semiExpression_exp','sintactical.py',20),
  ('semiExpression -> return','semiExpression',1,'p_semiExpression_exp','sintactical.py',21),
  ('semiExpression -> function','semiExpression',1,'p_semiExpression_exp','sintactical.py',22),
  ('semiExpression -> COMMENTS','semiExpression',1,'p_semiExpression_exp','sintactical.py',23),
  ('semiExpression -> LONGCOMMENT','semiExpression',1,'p_semiExpression_exp','sintactical.py',24),
  ('semiExpression -> asigOp','semiExpression',1,'p_semiExpression_exp','sintactical.py',25),
  ('number -> INTEGER','number',1,'p_number_expr','sintactical.py',28),
  ('number -> FLOAT','number',1,'p_number_expr','sintactical.py',29),
  ('number -> OPEN_PARENTHESIS RESTA INTEGER CLOSE_PARENTHESIS','number',4,'p_number_expr','sintactical.py',30),
  ('number -> OPEN_PARENTHESIS RESTA FLOAT CLOSE_PARENTHESIS','number',4,'p_number_expr','sintactical.py',31),
  ('variable -> type NAME IGUAL datatype SEMICOLON','variable',5,'p_variable_expr','sintactical.py',34),
  ('variable -> NAME IGUAL datatype SEMICOLON','variable',4,'p_variable_expr','sintactical.py',35),
  ('controlStruct -> while','controlStruct',1,'p_controlStruct_expr','sintactical.py',38),
  ('controlStruct -> for','controlStruct',1,'p_controlStruct_expr','sintactical.py',39),
  ('controlStruct -> if','controlStruct',1,'p_controlStruct_expr','sintactical.py',40),
  ('dataStruct -> array','dataStruct',1,'p_dataStruct_expr','sintactical.py',43),
  ('dataStruct -> set','dataStruct',1,'p_dataStruct_expr','sintactical.py',44),
  ('dataStruct -> map','dataStruct',1,'p_dataStruct_expr','sintactical.py',45),
  ('while -> WHILE OPEN_PARENTHESIS controlArg CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE','while',7,'p_while_expr','sintactical.py',48),
  ('while -> WHILE OPEN_PARENTHESIS bool CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE','while',7,'p_while_expr','sintactical.py',49),
  ('if -> soloIf','if',1,'p_if_expr','sintactical.py',52),
  ('if -> soloIf elseIf','if',2,'p_if_expr','sintactical.py',53),
  ('if -> soloIf elseIf else','if',3,'p_if_expr','sintactical.py',54),
  ('if -> soloIf else','if',2,'p_if_expr','sintactical.py',55),
  ('soloIf -> IF OPEN_PARENTHESIS controlArg CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE','soloIf',7,'p_soloIf_expr','sintactical.py',58),
  ('elseIf -> ELSEIF OPEN_PARENTHESIS controlArg CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE','elseIf',7,'p_elseIf_expr','sintactical.py',61),
  ('elseIf -> ELSEIF OPEN_PARENTHESIS controlArg CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE soloIf','elseIf',8,'p_elseIf_expr','sintactical.py',62),
  ('else -> ELSE OPEN_BRACE expression CLOSE_BRACE','else',4,'p_else_expr','sintactical.py',65),
  ('controlArg -> element clause element','controlArg',3,'p_controlArg_expr','sintactical.py',68),
  ('for -> FOR OPEN_PARENTHESIS inicialization SEMICOLON expBoolean SEMICOLON operations CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE','for',11,'p_for_expr','sintactical.py',71),
  ('inicialization -> type NAME IGUAL number','inicialization',4,'p_inicialization','sintactical.py',74),
  ('inicialization -> NAME IGUAL number','inicialization',3,'p_inicialization','sintactical.py',75),
  ('operations -> number operand number','operations',3,'p_operations','sintactical.py',78),
  ('operations -> NAME','operations',1,'p_operations','sintactical.py',79),
  ('operations -> number','operations',1,'p_operations','sintactical.py',80),
  ('operations -> number operand NAME operations','operations',4,'p_operations','sintactical.py',81),
  ('operations -> NAME operand number operations','operations',4,'p_operations','sintactical.py',82),
  ('operations -> number operand NAME','operations',3,'p_operations','sintactical.py',83),
  ('operations -> NAME operand number','operations',3,'p_operations','sintactical.py',84),
  ('operations -> NAME operand NAME operations','operations',4,'p_operations','sintactical.py',85),
  ('operations -> number operand number operand operations','operations',5,'p_operations','sintactical.py',86),
  ('operations -> NAME SUMA SUMA','operations',3,'p_operations','sintactical.py',87),
  ('operations -> NAME operand NAME','operations',3,'p_operations','sintactical.py',88),
  ('operations -> NAME RESTA RESTA','operations',3,'p_operations','sintactical.py',89),
  ('datatype -> number','datatype',1,'p_datatype_expr','sintactical.py',92),
  ('datatype -> NAME','datatype',1,'p_datatype_expr','sintactical.py',93),
  ('datatype -> STRING','datatype',1,'p_datatype_expr','sintactical.py',94),
  ('datatype -> CHAR','datatype',1,'p_datatype_expr','sintactical.py',95),
  ('datatype -> operations','datatype',1,'p_datatype_expr','sintactical.py',96),
  ('datatype -> dataStruct','datatype',1,'p_datatype_expr','sintactical.py',97),
  ('operand -> SUMA','operand',1,'p_operand_expr','sintactical.py',100),
  ('operand -> RESTA','operand',1,'p_operand_expr','sintactical.py',101),
  ('operand -> MULTIPLICACION','operand',1,'p_operand_expr','sintactical.py',102),
  ('operand -> DIVISION','operand',1,'p_operand_expr','sintactical.py',103),
  ('operadorAsig -> MASIGUAL','operadorAsig',1,'p_operadorAsig_expr','sintactical.py',106),
  ('operadorAsig -> MENOSIGUAL','operadorAsig',1,'p_operadorAsig_expr','sintactical.py',107),
  ('operadorAsig -> PORIGUAL','operadorAsig',1,'p_operadorAsig_expr','sintactical.py',108),
  ('operadorAsig -> DIVIGUAL','operadorAsig',1,'p_operadorAsig_expr','sintactical.py',109),
  ('operadorAsig -> MODIGUAL','operadorAsig',1,'p_operadorAsig_expr','sintactical.py',110),
  ('operadorAsig -> POTIGUAL','operadorAsig',1,'p_operadorAsig_expr','sintactical.py',111),
  ('asigOp -> NAME operadorAsig number SEMICOLON','asigOp',4,'p_asigOp_expr','sintactical.py',114),
  ('bool -> TRUE','bool',1,'p_bool_expr','sintactical.py',117),
  ('bool -> FALSE','bool',1,'p_bool_expr','sintactical.py',118),
  ('type -> CONST','type',1,'p_type_expr','sintactical.py',121),
  ('type -> LET','type',1,'p_type_expr','sintactical.py',122),
  ('type -> VAR','type',1,'p_type_expr','sintactical.py',123),
  ('clause -> IGUALIGUAL','clause',1,'p_clause_expr','sintactical.py',126),
  ('clause -> DIFERENTE','clause',1,'p_clause_expr','sintactical.py',127),
  ('clause -> MAYORQUE','clause',1,'p_clause_expr','sintactical.py',128),
  ('clause -> MAYORIGUALQUE','clause',1,'p_clause_expr','sintactical.py',129),
  ('clause -> MENORQUE','clause',1,'p_clause_expr','sintactical.py',130),
  ('clause -> MENORIGUALQUE','clause',1,'p_clause_expr','sintactical.py',131),
  ('array -> OPEN_BRACKET items CLOSE_BRACKET','array',3,'p_array_expr','sintactical.py',134),
  ('array -> NEW ARRAY OPEN_PARENTHESIS items CLOSE_PARENTHESIS','array',5,'p_array_expr','sintactical.py',135),
  ('map -> iniciarMap','map',1,'p_map_expr','sintactical.py',138),
  ('map -> escribirMap','map',1,'p_map_expr','sintactical.py',139),
  ('map -> generarMap','map',1,'p_map_expr','sintactical.py',140),
  ('iniciarMap -> NEW MAP OPEN_PARENTHESIS CLOSE_PARENTHESIS','iniciarMap',4,'p_iniciarMap_expr','sintactical.py',143),
  ('escribirMap -> OPEN_BRACE claveValor CLOSE_BRACE','escribirMap',3,'p_escribirMap_expr','sintactical.py',146),
  ('claveValor -> clave COLON datatype','claveValor',3,'p_claveValor_expr','sintactical.py',149),
  ('claveValor -> clave COLON datatype COMMA claveValor','claveValor',5,'p_claveValor_expr','sintactical.py',150),
  ('clave -> datatype','clave',1,'p_clave_expr','sintactical.py',153),
  ('generarMap -> OPEN_BRACE tuplas CLOSE_BRACE','generarMap',3,'p_generarMap_expr','sintactical.py',156),
  ('tuplas -> tupla','tuplas',1,'p_tuplas_expr','sintactical.py',159),
  ('tuplas -> tupla COMMA tuplas','tuplas',3,'p_tuplas_expr','sintactical.py',160),
  ('tupla -> OPEN_BRACKET datatype CLOSE_BRACKET SEMICOLON','tupla',4,'p_tupla_expr','sintactical.py',163),
  ('tupla -> OPEN_BRACKET datatype COMMA datatype CLOSE_BRACKET SEMICOLON','tupla',6,'p_tupla_expr','sintactical.py',164),
  ('mapFunctions -> NAME POINT CLEAR OPEN_PARENTHESIS CLOSE_PARENTHESIS SEMICOLON','mapFunctions',6,'p_mapFunctions_expr','sintactical.py',167),
  ('mapFunctions -> NAME POINT GET OPEN_PARENTHESIS clave CLOSE_PARENTHESIS SEMICOLON','mapFunctions',7,'p_mapFunctions_expr','sintactical.py',168),
  ('mapFunctions -> NAME POINT HAS OPEN_PARENTHESIS clave CLOSE_PARENTHESIS SEMICOLON','mapFunctions',7,'p_mapFunctions_expr','sintactical.py',169),
  ('arrayFn -> NAME POINT POP OPEN_PARENTHESIS CLOSE_PARENTHESIS SEMICOLON','arrayFn',6,'p_arrayFn_expr','sintactical.py',172),
  ('arrayFn -> NAME POINT PUSH OPEN_PARENTHESIS element CLOSE_PARENTHESIS SEMICOLON','arrayFn',7,'p_arrayFn_expr','sintactical.py',173),
  ('arrayFn -> NAME POINT UNSHIFT OPEN_PARENTHESIS element CLOSE_PARENTHESIS SEMICOLON','arrayFn',7,'p_arrayFn_expr','sintactical.py',174),
  ('set -> NEW SET OPEN_PARENTHESIS CLOSE_PARENTHESIS','set',4,'p_set_expr','sintactical.py',177),
  ('set -> NEW SET OPEN_PARENTHESIS OPEN_BRACKET items CLOSE_BRACKET CLOSE_PARENTHESIS','set',7,'p_set_expr','sintactical.py',178),
  ('set -> NEW SET OPEN_PARENTHESIS element CLOSE_PARENTHESIS','set',5,'p_set_expr','sintactical.py',179),
  ('methodsSet -> NAME POINT ADD OPEN_PARENTHESIS element CLOSE_PARENTHESIS SEMICOLON','methodsSet',7,'p_methodsSet_expr','sintactical.py',182),
  ('methodsSet -> NAME POINT DELETE OPEN_PARENTHESIS element CLOSE_PARENTHESIS SEMICOLON','methodsSet',7,'p_methodsSet_expr','sintactical.py',183),
  ('methodsSet -> NAME POINT CLEAR OPEN_PARENTHESIS CLOSE_PARENTHESIS SEMICOLON','methodsSet',6,'p_methodsSet_expr','sintactical.py',184),
  ('items -> item','items',1,'p_items_expr','sintactical.py',188),
  ('items -> item COMMA items','items',3,'p_items_expr','sintactical.py',189),
  ('item -> number','item',1,'p_item_expr','sintactical.py',192),
  ('item -> STRING','item',1,'p_item_expr','sintactical.py',193),
  ('item -> expBoolean','item',1,'p_item_expr','sintactical.py',194),
  ('item -> NAME','item',1,'p_item_expr','sintactical.py',195),
  ('item -> datatype','item',1,'p_item_expr','sintactical.py',196),
  ('element -> STRING','element',1,'p_element_expr','sintactical.py',199),
  ('element -> number','element',1,'p_element_expr','sintactical.py',200),
  ('element -> NAME','element',1,'p_element_expr','sintactical.py',201),
  ('declaration -> NAME IGUAL element SEMICOLON','declaration',4,'p_declaration_expr','sintactical.py',204),
  ('logicalOperator -> AND','logicalOperator',1,'p_logicalOperator_expr','sintactical.py',207),
  ('logicalOperator -> OR','logicalOperator',1,'p_logicalOperator_expr','sintactical.py',208),
  ('expBoolean -> controlArg','expBoolean',1,'p_expBoolean_expr','sintactical.py',211),
  ('expBoolean -> bool','expBoolean',1,'p_expBoolean_expr','sintactical.py',212),
  ('expBoolean -> NOT expBoolean','expBoolean',2,'p_expBoolean_expr','sintactical.py',213),
  ('expBoolean -> expBoolean logicalOperator expBoolean','expBoolean',3,'p_expBoolean_expr','sintactical.py',214),
  ('function -> FUNCTION NAME OPEN_PARENTHESIS CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE','function',7,'p_function_expr','sintactical.py',217),
  ('function -> FUNCTION NAME OPEN_PARENTHESIS parameter CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE','function',8,'p_function_expr','sintactical.py',218),
  ('parameter -> datatype','parameter',1,'p_parameter_expr','sintactical.py',221),
  ('parameter -> datatype COMMA parameter','parameter',3,'p_parameter_expr','sintactical.py',222),
  ('return -> RETURN datatype SEMICOLON','return',3,'p_return_expr','sintactical.py',226),
  ('print -> PRINT OPEN_PARENTHESIS datatype CLOSE_PARENTHESIS SEMICOLON','print',5,'p_print_expr','sintactical.py',229),
  ('print -> PRINT OPEN_PARENTHESIS CLOSE_PARENTHESIS SEMICOLON','print',4,'p_print_expr','sintactical.py',230),
]


# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'ADD AND ARRAY BACKSLASH BOOLEAN BREAK CASE CHAR CLASS CLEAR CLOSE_BRACE CLOSE_BRACKET CLOSE_PARENTHESIS COLON COMMA COMMENTS CONST DEFAULT DELETE DIFERENTE DIVIGUAL DIVISION DOUBLE_QUOTES ELSE ELSEIF FALSE FLOAT FOR FUNCTION GET HAS IF IGUAL IGUALIGUAL INT LENGTH LET LINE_BREAK LONGCOMMENT MAP MASIGUAL MAYORIGUALQUE MAYORQUE MENORIGUALQUE MENORQUE MENOSIGUAL MODIGUAL MULTIPLICACION NAME NEW NOT NULL NUMBER OPEN_BRACE OPEN_BRACKET OPEN_PARENTHESIS OR POINT POP PORIGUAL POTIGUAL PUSH RESTA RETURN SEMICOLON SET SINGLE_QUOTE STATIC STRING SUMA SWITCH THEN TOSTRING TRUE TYPEOF UNDEFINED UNSHIFT VAR WHILEexpression : variable\n    | variable expression\n    | dataStruct\n    | dataStruct expression\n    | controlStruct\n    | controlStruct expression\n    | methodsSet\n    | mapFunctions\n    | arrayFn\n    | declaration variable : type NAME IGUAL datatype SEMICOLON\n        | type NAME IGUAL operations SEMICOLON\n        | NAME IGUAL datatype SEMICOLONcontrolStruct : while\n    | for\n    | ifdataStruct : array\n    | set\n    | map while : WHILE OPEN_PARENTHESIS controlArg CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE\n    | WHILE OPEN_PARENTHESIS bool CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACEif : soloIf \n    | soloIf elseIf\n    | soloIf elseIf else\n    | soloIf else soloIf : IF OPEN_PARENTHESIS controlArg CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE elseIf : ELSEIF OPEN_PARENTHESIS controlArg CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE\n        | ELSEIF OPEN_PARENTHESIS controlArg CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE soloIf else : ELSE OPEN_BRACE expression CLOSE_BRACEcontrolArg : element clause elementfor : FOR OPEN_PARENTHESIS inicialization SEMICOLON controlArg SEMICOLON operations CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE inicialization : type NAME IGUAL NUMBER\n    | NAME IGUAL NUMBERoperations : NUMBER operand NUMBER\n    | NAME\n    | NUMBER\n    | NUMBER operand NAME operations\n    | NAME operand NUMBER operations\n    | NUMBER operand NAME \n    | NAME operand NUMBER \n    | NAME operand NAME operationsdatatype : NUMBER\n    | STRING\n    | CHARoperand : SUMA \n    | RESTA \n    | MULTIPLICACION \n    | DIVISIONbool : TRUE\n    | FALSEtype : CONST\n    | LET\n    | VARclause :  IGUALIGUAL\n    | DIFERENTE\n    | MAYORQUE\n    | MAYORIGUALQUE\n    | MENORQUE\n    | MENORIGUALQUE value : NAME\n    | NUMBERarray : type NAME IGUAL OPEN_BRACKET items CLOSE_BRACKET SEMICOLON\n    | type NAME IGUAL NEW ARRAY OPEN_PARENTHESIS items CLOSE_PARENTHESIS SEMICOLONmap : iniciarMap\n        | escribirMap\n        | generarMap iniciarMap : variable IGUAL NEW MAP OPEN_PARENTHESIS CLOSE_PARENTHESIS SEMICOLONescribirMap : variable IGUAL OPEN_BRACE claveValor CLOSE_BRACEclaveValor : clave COLON valor\n    | clave COLON valor COMMA claveValorclave : datatypevalor : datatype\n        | dataStructgenerarMap : variable IGUAL OPEN_BRACE tuplas CLOSE_BRACEtuplas : tupla\n        | tupla COMMA tuplas  tupla : OPEN_BRACKET datatype CLOSE_BRACKET SEMICOLON\n        | OPEN_BRACKET datatype COMMA datatype CLOSE_BRACKET SEMICOLONmapFunctions : NAME POINT CLEAR OPEN_PARENTHESIS CLOSE_PARENTHESIS SEMICOLON\n        | NAME POINT GET OPEN_PARENTHESIS clave CLOSE_PARENTHESIS SEMICOLON\n        | NAME POINT HAS OPEN_PARENTHESIS clave CLOSE_PARENTHESIS SEMICOLONarrayFn : NAME POINT POP OPEN_PARENTHESIS CLOSE_PARENTHESIS SEMICOLON\n    | NAME POINT PUSH OPEN_PARENTHESIS element CLOSE_PARENTHESIS SEMICOLON\n    | NAME POINT UNSHIFT OPEN_PARENTHESIS element CLOSE_PARENTHESIS SEMICOLONset : type NAME IGUAL NEW SET OPEN_PARENTHESIS CLOSE_PARENTHESIS SEMICOLON\n    | type NAME IGUAL NEW SET OPEN_PARENTHESIS OPEN_BRACKET items CLOSE_BRACKET CLOSE_PARENTHESIS SEMICOLON\n    | type NAME IGUAL NEW SET OPEN_PARENTHESIS element CLOSE_PARENTHESIS SEMICOLON\n    | NAME IGUAL NEW SET OPEN_PARENTHESIS CLOSE_PARENTHESIS SEMICOLON\n    | NAME IGUAL NEW SET OPEN_PARENTHESIS OPEN_BRACKET items CLOSE_BRACKET CLOSE_PARENTHESIS SEMICOLON\n    | NAME IGUAL NEW SET OPEN_PARENTHESIS element CLOSE_PARENTHESIS SEMICOLONmethodsSet : NAME POINT ADD OPEN_PARENTHESIS element CLOSE_PARENTHESIS SEMICOLON\n    | NAME POINT DELETE OPEN_PARENTHESIS element CLOSE_PARENTHESIS SEMICOLON\n    | NAME POINT CLEAR OPEN_PARENTHESIS CLOSE_PARENTHESIS SEMICOLON items : numeros\n    | cadenanumeros : NUMBER\n    | NUMBER COMMA numeroscadena : STRING \n    | STRING COMMA cadenaelement : STRING\n    | NUMBER\n    | NAMEdeclaration : NAME IGUAL element'
    
_lr_action_items = {'NAME':([0,2,3,4,9,11,12,13,14,15,16,17,18,19,20,21,22,25,32,34,35,36,37,40,43,67,69,70,71,88,90,91,96,97,100,101,102,103,104,105,106,107,114,115,116,119,120,121,122,123,124,125,133,134,143,144,150,151,156,162,163,168,170,184,186,188,197,205,214,215,218,220,223,227,229,231,233,235,236,238,240,241,],[10,10,10,10,31,-17,-18,-19,-14,-15,-16,-51,-52,-53,-64,-65,-66,-22,44,44,68,-23,-25,44,82,108,-24,44,10,-13,44,44,44,44,44,-54,-55,-56,-57,-58,-59,44,-68,-74,157,162,-45,-46,-47,-48,-11,-12,170,44,10,10,-29,10,190,82,82,44,82,82,10,-67,-62,-88,-20,-21,-26,82,-85,-90,-27,-63,-87,10,-28,-89,-86,-31,]),'CONST':([0,2,3,4,11,12,13,14,15,16,20,21,22,25,35,36,37,69,71,88,114,115,116,124,125,143,144,150,151,186,188,197,205,214,215,218,223,227,229,231,233,235,236,238,240,241,],[17,17,17,17,-17,-18,-19,-14,-15,-16,-64,-65,-66,-22,17,-23,-25,-24,17,-13,-68,-74,17,-11,-12,17,17,-29,17,17,-67,-62,-88,-20,-21,-26,-85,-90,-27,-63,-87,17,-28,-89,-86,-31,]),'LET':([0,2,3,4,11,12,13,14,15,16,20,21,22,25,35,36,37,69,71,88,114,115,116,124,125,143,144,150,151,186,188,197,205,214,215,218,223,227,229,231,233,235,236,238,240,241,],[18,18,18,18,-17,-18,-19,-14,-15,-16,-64,-65,-66,-22,18,-23,-25,-24,18,-13,-68,-74,18,-11,-12,18,18,-29,18,18,-67,-62,-88,-20,-21,-26,-85,-90,-27,-63,-87,18,-28,-89,-86,-31,]),'VAR':([0,2,3,4,11,12,13,14,15,16,20,21,22,25,35,36,37,69,71,88,114,115,116,124,125,143,144,150,151,186,188,197,205,214,215,218,223,227,229,231,233,235,236,238,240,241,],[19,19,19,19,-17,-18,-19,-14,-15,-16,-64,-65,-66,-22,19,-23,-25,-24,19,-13,-68,-74,19,-11,-12,19,19,-29,19,19,-67,-62,-88,-20,-21,-26,-85,-90,-27,-63,-87,19,-28,-89,-86,-31,]),'WHILE':([0,2,3,4,11,12,13,14,15,16,20,21,22,25,36,37,69,71,88,114,115,124,125,143,144,150,151,186,188,197,205,214,215,218,223,227,229,231,233,235,236,238,240,241,],[23,23,23,23,-17,-18,-19,-14,-15,-16,-64,-65,-66,-22,-23,-25,-24,23,-13,-68,-74,-11,-12,23,23,-29,23,23,-67,-62,-88,-20,-21,-26,-85,-90,-27,-63,-87,23,-28,-89,-86,-31,]),'FOR':([0,2,3,4,11,12,13,14,15,16,20,21,22,25,36,37,69,71,88,114,115,124,125,143,144,150,151,186,188,197,205,214,215,218,223,227,229,231,233,235,236,238,240,241,],[24,24,24,24,-17,-18,-19,-14,-15,-16,-64,-65,-66,-22,-23,-25,-24,24,-13,-68,-74,-11,-12,24,24,-29,24,24,-67,-62,-88,-20,-21,-26,-85,-90,-27,-63,-87,24,-28,-89,-86,-31,]),'IF':([0,2,3,4,11,12,13,14,15,16,20,21,22,25,36,37,69,71,88,114,115,124,125,143,144,150,151,186,188,197,205,214,215,218,223,227,229,231,233,235,236,238,240,241,],[26,26,26,26,-17,-18,-19,-14,-15,-16,-64,-65,-66,-22,-23,-25,-24,26,-13,-68,-74,-11,-12,26,26,-29,26,26,-67,-62,-88,-20,-21,-26,-85,-90,26,-63,-87,26,-28,-89,-86,-31,]),'$end':([1,2,3,4,5,6,7,8,11,12,13,14,15,16,20,21,22,25,27,29,30,36,37,44,46,48,49,69,88,114,115,124,125,150,176,179,188,197,205,208,209,210,211,212,213,214,215,218,223,227,229,231,233,236,238,240,241,],[0,-1,-3,-5,-7,-8,-9,-10,-17,-18,-19,-14,-15,-16,-64,-65,-66,-22,-2,-4,-6,-23,-25,-102,-103,-101,-100,-24,-13,-68,-74,-11,-12,-29,-79,-82,-67,-62,-88,-91,-92,-80,-81,-83,-84,-20,-21,-26,-85,-90,-27,-63,-87,-28,-89,-86,-31,]),'CLOSE_BRACE':([2,3,4,5,6,7,8,11,12,13,14,15,16,20,21,22,25,27,29,30,36,37,44,46,48,49,50,69,74,75,77,80,81,88,111,114,115,124,125,150,153,154,155,159,176,179,182,183,187,188,192,197,205,208,209,210,211,212,213,214,215,217,218,219,223,227,229,230,231,233,236,238,239,240,241,],[-1,-3,-5,-7,-8,-9,-10,-17,-18,-19,-14,-15,-16,-64,-65,-66,-22,-2,-4,-6,-23,-25,-102,-103,-101,-100,-44,-24,114,115,-75,-42,-43,-13,150,-68,-74,-11,-12,-29,-69,-72,-73,-76,-79,-82,214,215,218,-67,-77,-62,-88,-91,-92,-80,-81,-83,-84,-20,-21,229,-26,-70,-85,-90,-27,-78,-63,-87,-28,-89,241,-86,-31,]),'IGUAL':([2,10,31,68,88,108,124,125,157,158,190,],[28,32,43,109,-13,147,-11,-12,191,28,220,]),'POINT':([10,],[33,]),'COMMA':([11,12,13,20,21,22,50,77,80,81,114,115,118,129,130,153,154,155,188,192,197,205,223,227,230,231,233,238,240,],[-17,-18,-19,-64,-65,-66,-44,117,-42,-43,-68,-74,161,165,166,189,-72,-73,-67,-77,-62,-88,-85,-90,-78,-63,-87,-89,-86,]),'OPEN_PARENTHESIS':([23,24,26,38,51,52,53,54,55,56,57,58,73,89,131,132,],[34,35,40,70,90,91,92,93,94,95,96,97,113,134,167,168,]),'ELSEIF':([25,218,],[38,-26,]),'ELSE':([25,36,218,229,236,],[39,39,-26,-27,-28,]),'NEW':([28,32,43,191,220,],[41,47,86,47,86,]),'OPEN_BRACE':([28,39,98,99,112,149,228,],[42,71,143,144,151,186,235,]),'NUMBER':([32,34,40,42,43,70,79,85,90,91,93,94,96,97,100,101,102,103,104,105,106,107,109,116,119,120,121,122,123,133,134,147,161,162,163,165,167,168,170,172,184,189,191,202,220,],[48,65,65,80,87,65,80,129,65,65,80,80,65,65,65,-54,-55,-56,-57,-58,-59,65,148,80,163,-45,-46,-47,-48,169,65,185,80,195,195,129,129,65,195,129,195,80,80,129,87,]),'STRING':([32,34,40,42,43,70,79,85,90,91,93,94,96,97,100,101,102,103,104,105,106,107,116,134,161,166,167,168,172,189,191,202,220,],[49,64,64,81,81,64,81,130,64,64,81,81,64,64,64,-54,-55,-56,-57,-58,-59,64,81,64,81,130,130,64,130,81,81,130,81,]),'CHAR':([32,42,43,79,93,94,116,161,189,191,220,],[50,50,50,50,50,50,50,50,50,50,50,]),'ADD':([33,],[51,]),'DELETE':([33,],[52,]),'CLEAR':([33,],[53,]),'GET':([33,],[54,]),'HAS':([33,],[55,]),'POP':([33,],[56,]),'PUSH':([33,],[57,]),'UNSHIFT':([33,],[58,]),'TRUE':([34,],[62,]),'FALSE':([34,],[63,]),'MAP':([41,],[73,]),'OPEN_BRACKET':([42,43,117,134,168,220,],[79,85,79,172,202,85,]),'IGUALIGUAL':([44,61,64,65,],[-102,101,-100,-101,]),'DIFERENTE':([44,61,64,65,],[-102,102,-100,-101,]),'MAYORQUE':([44,61,64,65,],[-102,103,-100,-101,]),'MAYORIGUALQUE':([44,61,64,65,],[-102,104,-100,-101,]),'MENORQUE':([44,61,64,65,],[-102,105,-100,-101,]),'MENORIGUALQUE':([44,61,64,65,],[-102,106,-100,-101,]),'CLOSE_PARENTHESIS':([44,50,59,60,62,63,64,65,72,78,80,81,82,92,95,110,113,127,128,129,130,134,135,136,138,139,141,142,145,163,168,169,170,173,194,195,196,198,199,200,203,204,216,226,232,],[-102,-44,98,99,-49,-50,-100,-101,112,-71,-42,-43,-35,137,140,149,152,-94,-95,-96,-98,171,174,175,177,178,180,181,-30,-40,201,-34,-39,207,-41,-36,-38,-97,-99,222,225,-37,228,234,237,]),'SEMICOLON':([44,45,48,49,50,64,65,66,80,81,82,83,84,87,137,140,145,146,148,152,160,163,164,169,170,171,174,175,177,178,180,181,185,194,195,196,201,204,207,221,222,225,234,237,],[-102,88,-42,-43,-44,-100,-101,107,-42,-43,-35,124,125,-36,176,179,-30,184,-33,188,192,-40,197,-34,-39,205,208,209,210,211,212,213,-32,-41,-36,-38,223,-37,227,230,231,233,238,240,]),'SET':([47,86,],[89,132,]),'COLON':([50,76,78,80,81,],[-44,116,-71,-42,-43,]),'CLOSE_BRACKET':([50,80,81,118,126,127,128,129,130,193,198,199,206,224,],[-44,-42,-43,160,164,-94,-95,-96,-98,221,-97,-99,226,232,]),'SUMA':([82,87,195,],[120,120,120,]),'RESTA':([82,87,195,],[121,121,121,]),'MULTIPLICACION':([82,87,195,],[122,122,122,]),'DIVISION':([82,87,195,],[123,123,123,]),'ARRAY':([86,],[131,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'expression':([0,2,3,4,71,143,144,151,186,235,],[1,27,29,30,111,182,183,187,217,239,]),'variable':([0,2,3,4,71,116,143,144,151,186,235,],[2,2,2,2,2,158,2,2,2,2,2,]),'dataStruct':([0,2,3,4,71,116,143,144,151,186,235,],[3,3,3,3,3,155,3,3,3,3,3,]),'controlStruct':([0,2,3,4,71,143,144,151,186,235,],[4,4,4,4,4,4,4,4,4,4,]),'methodsSet':([0,2,3,4,71,143,144,151,186,235,],[5,5,5,5,5,5,5,5,5,5,]),'mapFunctions':([0,2,3,4,71,143,144,151,186,235,],[6,6,6,6,6,6,6,6,6,6,]),'arrayFn':([0,2,3,4,71,143,144,151,186,235,],[7,7,7,7,7,7,7,7,7,7,]),'declaration':([0,2,3,4,71,143,144,151,186,235,],[8,8,8,8,8,8,8,8,8,8,]),'type':([0,2,3,4,35,71,116,143,144,151,186,235,],[9,9,9,9,67,9,156,9,9,9,9,9,]),'array':([0,2,3,4,71,116,143,144,151,186,235,],[11,11,11,11,11,11,11,11,11,11,11,]),'set':([0,2,3,4,71,116,143,144,151,186,235,],[12,12,12,12,12,12,12,12,12,12,12,]),'map':([0,2,3,4,71,116,143,144,151,186,235,],[13,13,13,13,13,13,13,13,13,13,13,]),'while':([0,2,3,4,71,143,144,151,186,235,],[14,14,14,14,14,14,14,14,14,14,]),'for':([0,2,3,4,71,143,144,151,186,235,],[15,15,15,15,15,15,15,15,15,15,]),'if':([0,2,3,4,71,143,144,151,186,235,],[16,16,16,16,16,16,16,16,16,16,]),'iniciarMap':([0,2,3,4,71,116,143,144,151,186,235,],[20,20,20,20,20,20,20,20,20,20,20,]),'escribirMap':([0,2,3,4,71,116,143,144,151,186,235,],[21,21,21,21,21,21,21,21,21,21,21,]),'generarMap':([0,2,3,4,71,116,143,144,151,186,235,],[22,22,22,22,22,22,22,22,22,22,22,]),'soloIf':([0,2,3,4,71,143,144,151,186,229,235,],[25,25,25,25,25,25,25,25,25,236,25,]),'elseIf':([25,],[36,]),'else':([25,36,],[37,69,]),'datatype':([32,42,43,79,93,94,116,161,189,191,220,],[45,78,83,118,78,78,154,193,78,45,83,]),'element':([32,34,40,70,90,91,96,97,100,107,134,168,],[46,61,61,61,135,136,141,142,145,61,173,203,]),'controlArg':([34,40,70,107,],[59,72,110,146,]),'bool':([34,],[60,]),'inicialization':([35,],[66,]),'claveValor':([42,189,],[74,219,]),'tuplas':([42,117,],[75,159,]),'clave':([42,93,94,189,],[76,138,139,76,]),'tupla':([42,117,],[77,77,]),'operations':([43,162,163,170,184,220,],[84,194,196,204,216,84,]),'clause':([61,],[100,]),'operand':([82,87,195,],[119,133,133,]),'items':([85,167,172,202,],[126,200,206,224,]),'numeros':([85,165,167,172,202,],[127,198,127,127,127,]),'cadena':([85,166,167,172,202,],[128,199,128,128,128,]),'valor':([116,],[153,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> expression","S'",1,None,None,None),
  ('expression -> variable','expression',1,'p_expression_expr','sintactical.py',12),
  ('expression -> variable expression','expression',2,'p_expression_expr','sintactical.py',13),
  ('expression -> dataStruct','expression',1,'p_expression_expr','sintactical.py',14),
  ('expression -> dataStruct expression','expression',2,'p_expression_expr','sintactical.py',15),
  ('expression -> controlStruct','expression',1,'p_expression_expr','sintactical.py',16),
  ('expression -> controlStruct expression','expression',2,'p_expression_expr','sintactical.py',17),
  ('expression -> methodsSet','expression',1,'p_expression_expr','sintactical.py',18),
  ('expression -> mapFunctions','expression',1,'p_expression_expr','sintactical.py',19),
  ('expression -> arrayFn','expression',1,'p_expression_expr','sintactical.py',20),
  ('expression -> declaration','expression',1,'p_expression_expr','sintactical.py',21),
  ('variable -> type NAME IGUAL datatype SEMICOLON','variable',5,'p_variable_expr','sintactical.py',24),
  ('variable -> type NAME IGUAL operations SEMICOLON','variable',5,'p_variable_expr','sintactical.py',25),
  ('variable -> NAME IGUAL datatype SEMICOLON','variable',4,'p_variable_expr','sintactical.py',26),
  ('controlStruct -> while','controlStruct',1,'p_controlStruct_expr','sintactical.py',29),
  ('controlStruct -> for','controlStruct',1,'p_controlStruct_expr','sintactical.py',30),
  ('controlStruct -> if','controlStruct',1,'p_controlStruct_expr','sintactical.py',31),
  ('dataStruct -> array','dataStruct',1,'p_dataStruct_expr','sintactical.py',34),
  ('dataStruct -> set','dataStruct',1,'p_dataStruct_expr','sintactical.py',35),
  ('dataStruct -> map','dataStruct',1,'p_dataStruct_expr','sintactical.py',36),
  ('while -> WHILE OPEN_PARENTHESIS controlArg CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE','while',7,'p_while_expr','sintactical.py',39),
  ('while -> WHILE OPEN_PARENTHESIS bool CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE','while',7,'p_while_expr','sintactical.py',40),
  ('if -> soloIf','if',1,'p_if_expr','sintactical.py',43),
  ('if -> soloIf elseIf','if',2,'p_if_expr','sintactical.py',44),
  ('if -> soloIf elseIf else','if',3,'p_if_expr','sintactical.py',45),
  ('if -> soloIf else','if',2,'p_if_expr','sintactical.py',46),
  ('soloIf -> IF OPEN_PARENTHESIS controlArg CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE','soloIf',7,'p_soloIf_expr','sintactical.py',49),
  ('elseIf -> ELSEIF OPEN_PARENTHESIS controlArg CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE','elseIf',7,'p_elseIf_expr','sintactical.py',52),
  ('elseIf -> ELSEIF OPEN_PARENTHESIS controlArg CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE soloIf','elseIf',8,'p_elseIf_expr','sintactical.py',53),
  ('else -> ELSE OPEN_BRACE expression CLOSE_BRACE','else',4,'p_else_expr','sintactical.py',56),
  ('controlArg -> element clause element','controlArg',3,'p_controlArg_expr','sintactical.py',67),
  ('for -> FOR OPEN_PARENTHESIS inicialization SEMICOLON controlArg SEMICOLON operations CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE','for',11,'p_for_expr','sintactical.py',70),
  ('inicialization -> type NAME IGUAL NUMBER','inicialization',4,'p_inicialization','sintactical.py',73),
  ('inicialization -> NAME IGUAL NUMBER','inicialization',3,'p_inicialization','sintactical.py',74),
  ('operations -> NUMBER operand NUMBER','operations',3,'p_operations','sintactical.py',80),
  ('operations -> NAME','operations',1,'p_operations','sintactical.py',81),
  ('operations -> NUMBER','operations',1,'p_operations','sintactical.py',82),
  ('operations -> NUMBER operand NAME operations','operations',4,'p_operations','sintactical.py',83),
  ('operations -> NAME operand NUMBER operations','operations',4,'p_operations','sintactical.py',84),
  ('operations -> NUMBER operand NAME','operations',3,'p_operations','sintactical.py',85),
  ('operations -> NAME operand NUMBER','operations',3,'p_operations','sintactical.py',86),
  ('operations -> NAME operand NAME operations','operations',4,'p_operations','sintactical.py',87),
  ('datatype -> NUMBER','datatype',1,'p_datatype_expr','sintactical.py',90),
  ('datatype -> STRING','datatype',1,'p_datatype_expr','sintactical.py',91),
  ('datatype -> CHAR','datatype',1,'p_datatype_expr','sintactical.py',92),
  ('operand -> SUMA','operand',1,'p_operand_expr','sintactical.py',95),
  ('operand -> RESTA','operand',1,'p_operand_expr','sintactical.py',96),
  ('operand -> MULTIPLICACION','operand',1,'p_operand_expr','sintactical.py',97),
  ('operand -> DIVISION','operand',1,'p_operand_expr','sintactical.py',98),
  ('bool -> TRUE','bool',1,'p_bool_expr','sintactical.py',101),
  ('bool -> FALSE','bool',1,'p_bool_expr','sintactical.py',102),
  ('type -> CONST','type',1,'p_type_expr','sintactical.py',105),
  ('type -> LET','type',1,'p_type_expr','sintactical.py',106),
  ('type -> VAR','type',1,'p_type_expr','sintactical.py',107),
  ('clause -> IGUALIGUAL','clause',1,'p_clause_expr','sintactical.py',110),
  ('clause -> DIFERENTE','clause',1,'p_clause_expr','sintactical.py',111),
  ('clause -> MAYORQUE','clause',1,'p_clause_expr','sintactical.py',112),
  ('clause -> MAYORIGUALQUE','clause',1,'p_clause_expr','sintactical.py',113),
  ('clause -> MENORQUE','clause',1,'p_clause_expr','sintactical.py',114),
  ('clause -> MENORIGUALQUE','clause',1,'p_clause_expr','sintactical.py',115),
  ('value -> NAME','value',1,'p_value_expr','sintactical.py',118),
  ('value -> NUMBER','value',1,'p_value_expr','sintactical.py',119),
  ('array -> type NAME IGUAL OPEN_BRACKET items CLOSE_BRACKET SEMICOLON','array',7,'p_array_expr','sintactical.py',122),
  ('array -> type NAME IGUAL NEW ARRAY OPEN_PARENTHESIS items CLOSE_PARENTHESIS SEMICOLON','array',9,'p_array_expr','sintactical.py',123),
  ('map -> iniciarMap','map',1,'p_map_expr','sintactical.py',126),
  ('map -> escribirMap','map',1,'p_map_expr','sintactical.py',127),
  ('map -> generarMap','map',1,'p_map_expr','sintactical.py',128),
  ('iniciarMap -> variable IGUAL NEW MAP OPEN_PARENTHESIS CLOSE_PARENTHESIS SEMICOLON','iniciarMap',7,'p_iniciarMap_expr','sintactical.py',131),
  ('escribirMap -> variable IGUAL OPEN_BRACE claveValor CLOSE_BRACE','escribirMap',5,'p_escribirMap_expr','sintactical.py',134),
  ('claveValor -> clave COLON valor','claveValor',3,'p_claveValor_expr','sintactical.py',137),
  ('claveValor -> clave COLON valor COMMA claveValor','claveValor',5,'p_claveValor_expr','sintactical.py',138),
  ('clave -> datatype','clave',1,'p_clave_expr','sintactical.py',141),
  ('valor -> datatype','valor',1,'p_valor_expr','sintactical.py',144),
  ('valor -> dataStruct','valor',1,'p_valor_expr','sintactical.py',145),
  ('generarMap -> variable IGUAL OPEN_BRACE tuplas CLOSE_BRACE','generarMap',5,'p_generarMap_expr','sintactical.py',148),
  ('tuplas -> tupla','tuplas',1,'p_tuplas_expr','sintactical.py',151),
  ('tuplas -> tupla COMMA tuplas','tuplas',3,'p_tuplas_expr','sintactical.py',152),
  ('tupla -> OPEN_BRACKET datatype CLOSE_BRACKET SEMICOLON','tupla',4,'p_tupla_expr','sintactical.py',155),
  ('tupla -> OPEN_BRACKET datatype COMMA datatype CLOSE_BRACKET SEMICOLON','tupla',6,'p_tupla_expr','sintactical.py',156),
  ('mapFunctions -> NAME POINT CLEAR OPEN_PARENTHESIS CLOSE_PARENTHESIS SEMICOLON','mapFunctions',6,'p_mapFunctions_expr','sintactical.py',159),
  ('mapFunctions -> NAME POINT GET OPEN_PARENTHESIS clave CLOSE_PARENTHESIS SEMICOLON','mapFunctions',7,'p_mapFunctions_expr','sintactical.py',160),
  ('mapFunctions -> NAME POINT HAS OPEN_PARENTHESIS clave CLOSE_PARENTHESIS SEMICOLON','mapFunctions',7,'p_mapFunctions_expr','sintactical.py',161),
  ('arrayFn -> NAME POINT POP OPEN_PARENTHESIS CLOSE_PARENTHESIS SEMICOLON','arrayFn',6,'p_arrayFn_expr','sintactical.py',164),
  ('arrayFn -> NAME POINT PUSH OPEN_PARENTHESIS element CLOSE_PARENTHESIS SEMICOLON','arrayFn',7,'p_arrayFn_expr','sintactical.py',165),
  ('arrayFn -> NAME POINT UNSHIFT OPEN_PARENTHESIS element CLOSE_PARENTHESIS SEMICOLON','arrayFn',7,'p_arrayFn_expr','sintactical.py',166),
  ('set -> type NAME IGUAL NEW SET OPEN_PARENTHESIS CLOSE_PARENTHESIS SEMICOLON','set',8,'p_set_expr','sintactical.py',174),
  ('set -> type NAME IGUAL NEW SET OPEN_PARENTHESIS OPEN_BRACKET items CLOSE_BRACKET CLOSE_PARENTHESIS SEMICOLON','set',11,'p_set_expr','sintactical.py',175),
  ('set -> type NAME IGUAL NEW SET OPEN_PARENTHESIS element CLOSE_PARENTHESIS SEMICOLON','set',9,'p_set_expr','sintactical.py',176),
  ('set -> NAME IGUAL NEW SET OPEN_PARENTHESIS CLOSE_PARENTHESIS SEMICOLON','set',7,'p_set_expr','sintactical.py',177),
  ('set -> NAME IGUAL NEW SET OPEN_PARENTHESIS OPEN_BRACKET items CLOSE_BRACKET CLOSE_PARENTHESIS SEMICOLON','set',10,'p_set_expr','sintactical.py',178),
  ('set -> NAME IGUAL NEW SET OPEN_PARENTHESIS element CLOSE_PARENTHESIS SEMICOLON','set',8,'p_set_expr','sintactical.py',179),
  ('methodsSet -> NAME POINT ADD OPEN_PARENTHESIS element CLOSE_PARENTHESIS SEMICOLON','methodsSet',7,'p_methodsSet_expr','sintactical.py',182),
  ('methodsSet -> NAME POINT DELETE OPEN_PARENTHESIS element CLOSE_PARENTHESIS SEMICOLON','methodsSet',7,'p_methodsSet_expr','sintactical.py',183),
  ('methodsSet -> NAME POINT CLEAR OPEN_PARENTHESIS CLOSE_PARENTHESIS SEMICOLON','methodsSet',6,'p_methodsSet_expr','sintactical.py',184),
  ('items -> numeros','items',1,'p_items_expr','sintactical.py',187),
  ('items -> cadena','items',1,'p_items_expr','sintactical.py',188),
  ('numeros -> NUMBER','numeros',1,'p_numeros_expr','sintactical.py',191),
  ('numeros -> NUMBER COMMA numeros','numeros',3,'p_numeros_expr','sintactical.py',192),
  ('cadena -> STRING','cadena',1,'p_cadena_expr','sintactical.py',195),
  ('cadena -> STRING COMMA cadena','cadena',3,'p_cadena_expr','sintactical.py',196),
  ('element -> STRING','element',1,'p_element_expr','sintactical.py',199),
  ('element -> NUMBER','element',1,'p_element_expr','sintactical.py',200),
  ('element -> NAME','element',1,'p_element_expr','sintactical.py',201),
  ('declaration -> NAME IGUAL element','declaration',3,'p_declaration_expr','sintactical.py',204),
]

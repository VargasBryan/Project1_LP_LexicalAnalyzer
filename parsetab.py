
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'ADD AND ARRAY BACKSLASH BOOLEAN BREAK CASE CHAR CLASS CLEAR CLOSE_BRACE CLOSE_BRACKET CLOSE_PARENTHESIS COLON COMMA COMMENTS CONST DEFAULT DELETE DIFERENTE DIVIGUAL DIVISION DOUBLE_QUOTES ELSE ELSEIF FALSE FLOAT FOR FUNCTION GET HAS IF IGUAL IGUALIGUAL INT LENGTH LET LINE_BREAK LONGCOMMENT MAP MASIGUAL MAYORIGUALQUE MAYORQUE MENORIGUALQUE MENORQUE MENOSIGUAL MODIGUAL MULTIPLICACION NAME NEW NOT NULL NUMBER OPEN_BRACE OPEN_BRACKET OPEN_PARENTHESIS OR POINT POP PORIGUAL POTIGUAL PUSH RESTA RETURN SEMICOLON SET SINGLE_QUOTE STATIC STRING SUMA SWITCH THEN TOSTRING TRUE TYPEOF UNDEFINED UNSHIFT VAR WHILEexpression : variable\n    | variable expression\n    | dataStruct\n    | dataStruct expression\n    | controlStruct\n    | controlStruct expression\n    | methodsSet\n    | mapFunctions\n    | arrayFn\n    | declaration variable : type NAME IGUAL datatype SEMICOLON\n        | type NAME IGUAL operations SEMICOLON\n        | NAME IGUAL datatype SEMICOLONcontrolStruct : while\n    | for\n    | ifdataStruct : array\n    | set\n    | map while : WHILE OPEN_PARENTHESIS controlArg CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE\n    | WHILE OPEN_PARENTHESIS bool CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACEif : soloIf \n    | soloIf elseIf\n    | soloIf elseIf else\n    | soloIf else soloIf : IF OPEN_PARENTHESIS controlArg CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE elseIf : ELSEIF OPEN_PARENTHESIS controlArg CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE\n        | ELSEIF OPEN_PARENTHESIS controlArg CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE soloIf else : ELSE OPEN_BRACE expression CLOSE_BRACEcontrolArg : element clause elementfor : FOR OPEN_PARENTHESIS inicialization SEMICOLON controlArg SEMICOLON operations CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE inicialization : type NAME IGUAL NUMBER\n    | NAME IGUAL NUMBERoperations : NUMBER operand NUMBER\n    | NAME SUMA SUMA\n    | NAME RESTA RESTA datatype : NUMBER\n    | STRING\n    | CHARoperand : SUMA \n    | RESTA \n    | MULTIPLICACION \n    | DIVISIONbool : TRUE\n    | FALSEtype : CONST\n    | LET\n    | VARclause :  IGUALIGUAL\n    | DIFERENTE\n    | MAYORQUE\n    | MAYORIGUALQUE\n    | MENORQUE\n    | MENORIGUALQUE value : NAME\n    | NUMBERarray : type NAME IGUAL OPEN_BRACKET items CLOSE_BRACKET SEMICOLON\n    | type NAME IGUAL NEW ARRAY OPEN_PARENTHESIS items CLOSE_PARENTHESIS SEMICOLONmap : iniciarMap\n        | escribirMap\n        | generarMap iniciarMap : variable IGUAL NEW MAP OPEN_PARENTHESIS CLOSE_PARENTHESIS SEMICOLONescribirMap : variable IGUAL OPEN_BRACE claveValor CLOSE_BRACEclaveValor : clave COLON valor\n    | clave COLON valor COMMA claveValorclave : datatypevalor : datatype\n        | dataStructgenerarMap : variable IGUAL OPEN_BRACE tuplas CLOSE_BRACEtuplas : tupla\n        | tupla COMMA tuplas  tupla : OPEN_BRACKET datatype CLOSE_BRACKET\n        | OPEN_BRACKET datatype COMMA datatype CLOSE_BRACKETmapFunctions : NAME POINT CLEAR OPEN_PARENTHESIS CLOSE_PARENTHESIS SEMICOLON\n        | NAME POINT GET OPEN_PARENTHESIS clave CLOSE_PARENTHESIS SEMICOLON\n        | NAME POINT HAS OPEN_PARENTHESIS clave CLOSE_PARENTHESIS SEMICOLONarrayFn : NAME POINT POP OPEN_PARENTHESIS CLOSE_PARENTHESIS\n    | NAME POINT PUSH OPEN_PARENTHESIS element CLOSE_PARENTHESIS\n    | NAME POINT UNSHIFT OPEN_PARENTHESIS element CLOSE_PARENTHESISset : type NAME IGUAL NEW SET OPEN_PARENTHESIS CLOSE_PARENTHESIS SEMICOLON\n    | type NAME IGUAL NEW SET OPEN_PARENTHESIS OPEN_BRACKET items CLOSE_BRACKET CLOSE_PARENTHESIS SEMICOLON\n    | type NAME IGUAL NEW SET OPEN_PARENTHESIS element CLOSE_PARENTHESIS SEMICOLON\n    | NAME IGUAL NEW SET OPEN_PARENTHESIS CLOSE_PARENTHESIS SEMICOLON\n    | NAME IGUAL NEW SET OPEN_PARENTHESIS OPEN_BRACKET items CLOSE_BRACKET CLOSE_PARENTHESIS SEMICOLON\n    | NAME IGUAL NEW SET OPEN_PARENTHESIS element CLOSE_PARENTHESIS SEMICOLONmethodsSet : NAME POINT ADD OPEN_PARENTHESIS element CLOSE_PARENTHESIS SEMICOLON\n    | NAME POINT DELETE OPEN_PARENTHESIS element CLOSE_PARENTHESIS SEMICOLON\n    | NAME POINT CLEAR OPEN_PARENTHESIS CLOSE_PARENTHESIS SEMICOLON items : numeros\n    | cadenanumeros : NUMBER\n    | NUMBER COMMA numeroscadena : STRING \n    | STRING COMMA cadenaelement : STRING\n    | NUMBER\n    | NAMEdeclaration : NAME IGUAL element'
    
_lr_action_items = {'NAME':([0,2,3,4,9,11,12,13,14,15,16,17,18,19,20,21,22,25,32,34,35,36,37,40,43,67,69,70,71,88,90,91,96,97,100,101,102,103,104,105,106,107,114,115,116,121,122,135,144,145,151,152,157,169,183,185,187,192,199,206,207,211,213,216,220,222,223,225,227,228,230,232,233,],[10,10,10,10,31,-17,-18,-19,-14,-15,-16,-46,-47,-48,-59,-60,-61,-22,44,44,68,-23,-25,44,82,108,-24,44,10,-13,44,44,44,44,44,-49,-50,-51,-52,-53,-54,44,-63,-69,158,-11,-12,44,10,10,-29,10,189,44,82,10,-62,-57,-83,-20,-21,-26,82,-80,-85,-27,-58,-82,10,-28,-84,-81,-31,]),'CONST':([0,2,3,4,11,12,13,14,15,16,20,21,22,25,35,36,37,69,71,88,114,115,116,121,122,144,145,151,152,185,187,192,199,206,207,211,216,220,222,223,225,227,228,230,232,233,],[17,17,17,17,-17,-18,-19,-14,-15,-16,-59,-60,-61,-22,17,-23,-25,-24,17,-13,-63,-69,17,-11,-12,17,17,-29,17,17,-62,-57,-83,-20,-21,-26,-80,-85,-27,-58,-82,17,-28,-84,-81,-31,]),'LET':([0,2,3,4,11,12,13,14,15,16,20,21,22,25,35,36,37,69,71,88,114,115,116,121,122,144,145,151,152,185,187,192,199,206,207,211,216,220,222,223,225,227,228,230,232,233,],[18,18,18,18,-17,-18,-19,-14,-15,-16,-59,-60,-61,-22,18,-23,-25,-24,18,-13,-63,-69,18,-11,-12,18,18,-29,18,18,-62,-57,-83,-20,-21,-26,-80,-85,-27,-58,-82,18,-28,-84,-81,-31,]),'VAR':([0,2,3,4,11,12,13,14,15,16,20,21,22,25,35,36,37,69,71,88,114,115,116,121,122,144,145,151,152,185,187,192,199,206,207,211,216,220,222,223,225,227,228,230,232,233,],[19,19,19,19,-17,-18,-19,-14,-15,-16,-59,-60,-61,-22,19,-23,-25,-24,19,-13,-63,-69,19,-11,-12,19,19,-29,19,19,-62,-57,-83,-20,-21,-26,-80,-85,-27,-58,-82,19,-28,-84,-81,-31,]),'WHILE':([0,2,3,4,11,12,13,14,15,16,20,21,22,25,36,37,69,71,88,114,115,121,122,144,145,151,152,185,187,192,199,206,207,211,216,220,222,223,225,227,228,230,232,233,],[23,23,23,23,-17,-18,-19,-14,-15,-16,-59,-60,-61,-22,-23,-25,-24,23,-13,-63,-69,-11,-12,23,23,-29,23,23,-62,-57,-83,-20,-21,-26,-80,-85,-27,-58,-82,23,-28,-84,-81,-31,]),'FOR':([0,2,3,4,11,12,13,14,15,16,20,21,22,25,36,37,69,71,88,114,115,121,122,144,145,151,152,185,187,192,199,206,207,211,216,220,222,223,225,227,228,230,232,233,],[24,24,24,24,-17,-18,-19,-14,-15,-16,-59,-60,-61,-22,-23,-25,-24,24,-13,-63,-69,-11,-12,24,24,-29,24,24,-62,-57,-83,-20,-21,-26,-80,-85,-27,-58,-82,24,-28,-84,-81,-31,]),'IF':([0,2,3,4,11,12,13,14,15,16,20,21,22,25,36,37,69,71,88,114,115,121,122,144,145,151,152,185,187,192,199,206,207,211,216,220,222,223,225,227,228,230,232,233,],[26,26,26,26,-17,-18,-19,-14,-15,-16,-59,-60,-61,-22,-23,-25,-24,26,-13,-63,-69,-11,-12,26,26,-29,26,26,-62,-57,-83,-20,-21,-26,-80,-85,26,-58,-82,26,-28,-84,-81,-31,]),'$end':([1,2,3,4,5,6,7,8,11,12,13,14,15,16,20,21,22,25,27,29,30,36,37,44,46,48,49,69,88,114,115,121,122,141,151,176,179,180,187,192,199,202,203,204,205,206,207,211,216,220,222,223,225,228,230,232,233,],[0,-1,-3,-5,-7,-8,-9,-10,-17,-18,-19,-14,-15,-16,-59,-60,-61,-22,-2,-4,-6,-23,-25,-97,-98,-96,-95,-24,-13,-63,-69,-11,-12,-77,-29,-74,-78,-79,-62,-57,-83,-86,-87,-75,-76,-20,-21,-26,-80,-85,-27,-58,-82,-28,-84,-81,-31,]),'CLOSE_BRACE':([2,3,4,5,6,7,8,11,12,13,14,15,16,20,21,22,25,27,29,30,36,37,44,46,48,49,50,69,74,75,77,80,81,88,111,114,115,121,122,141,151,154,155,156,160,161,176,179,180,181,182,186,187,192,199,202,203,204,205,206,207,210,211,212,214,216,220,222,223,225,228,230,231,232,233,],[-1,-3,-5,-7,-8,-9,-10,-17,-18,-19,-14,-15,-16,-59,-60,-61,-22,-2,-4,-6,-23,-25,-97,-98,-96,-95,-39,-24,114,115,-70,-37,-38,-13,151,-63,-69,-11,-12,-77,-29,-64,-67,-68,-71,-72,-74,-78,-79,206,207,211,-62,-57,-83,-86,-87,-75,-76,-20,-21,222,-26,-65,-73,-80,-85,-27,-58,-82,-28,-84,233,-81,-31,]),'IGUAL':([2,10,31,68,88,108,121,122,158,159,189,],[28,32,43,109,-13,148,-11,-12,190,28,213,]),'POINT':([10,],[33,]),'COMMA':([11,12,13,20,21,22,50,77,80,81,114,115,118,126,127,154,155,156,161,187,192,199,214,216,220,223,225,230,232,],[-17,-18,-19,-59,-60,-61,-39,117,-37,-38,-63,-69,162,166,167,188,-67,-68,-72,-62,-57,-83,-73,-80,-85,-58,-82,-84,-81,]),'OPEN_PARENTHESIS':([23,24,26,38,51,52,53,54,55,56,57,58,73,89,128,129,],[34,35,40,70,90,91,92,93,94,95,96,97,113,135,168,169,]),'ELSEIF':([25,211,],[38,-26,]),'ELSE':([25,36,211,222,228,],[39,39,-26,-27,-28,]),'NEW':([28,32,43,190,213,],[41,47,86,47,86,]),'OPEN_BRACE':([28,39,98,99,112,150,221,],[42,71,144,145,152,185,227,]),'NUMBER':([32,34,40,42,43,70,79,85,90,91,93,94,96,97,100,101,102,103,104,105,106,107,109,116,130,131,132,133,134,135,148,162,166,168,169,172,183,188,190,197,213,],[48,65,65,80,87,65,80,126,65,65,80,80,65,65,65,-49,-50,-51,-52,-53,-54,65,149,80,170,-40,-41,-42,-43,65,184,80,126,126,65,126,209,80,80,126,87,]),'STRING':([32,34,40,42,43,70,79,85,90,91,93,94,96,97,100,101,102,103,104,105,106,107,116,135,162,167,168,169,172,188,190,197,213,],[49,64,64,81,81,64,81,127,64,64,81,81,64,64,64,-49,-50,-51,-52,-53,-54,64,81,64,81,127,127,64,127,81,81,127,81,]),'CHAR':([32,42,43,79,93,94,116,162,188,190,213,],[50,50,50,50,50,50,50,50,50,50,50,]),'ADD':([33,],[51,]),'DELETE':([33,],[52,]),'CLEAR':([33,],[53,]),'GET':([33,],[54,]),'HAS':([33,],[55,]),'POP':([33,],[56,]),'PUSH':([33,],[57,]),'UNSHIFT':([33,],[58,]),'TRUE':([34,],[62,]),'FALSE':([34,],[63,]),'MAP':([41,],[73,]),'OPEN_BRACKET':([42,43,117,135,169,213,],[79,85,79,172,197,85,]),'IGUALIGUAL':([44,61,64,65,],[-97,101,-95,-96,]),'DIFERENTE':([44,61,64,65,],[-97,102,-95,-96,]),'MAYORQUE':([44,61,64,65,],[-97,103,-95,-96,]),'MAYORIGUALQUE':([44,61,64,65,],[-97,104,-95,-96,]),'MENORQUE':([44,61,64,65,],[-97,105,-95,-96,]),'MENORIGUALQUE':([44,61,64,65,],[-97,106,-95,-96,]),'CLOSE_PARENTHESIS':([44,50,59,60,62,63,64,65,72,78,80,81,92,95,110,113,124,125,126,127,135,136,137,139,140,142,143,146,163,164,169,170,173,193,194,195,198,208,219,224,],[-97,-39,98,99,-44,-45,-95,-96,112,-66,-37,-38,138,141,150,153,-89,-90,-91,-93,171,174,175,177,178,179,180,-30,-35,-36,196,-34,201,-92,-94,215,218,221,226,229,]),'SEMICOLON':([44,45,48,49,50,64,65,66,80,81,83,84,87,138,146,147,149,153,163,164,165,170,171,174,175,177,178,184,196,201,215,218,226,229,],[-97,88,-37,-38,-39,-95,-96,107,-37,-38,121,122,-37,176,-30,183,-33,187,-35,-36,192,-34,199,202,203,204,205,-32,216,220,223,225,230,232,]),'SET':([47,86,],[89,129,]),'COLON':([50,76,78,80,81,],[-39,116,-66,-37,-38,]),'CLOSE_BRACKET':([50,80,81,118,123,124,125,126,127,191,193,194,200,217,],[-39,-37,-38,161,165,-89,-90,-91,-93,214,-92,-94,219,224,]),'SUMA':([82,87,119,209,],[119,131,163,131,]),'RESTA':([82,87,120,209,],[120,132,164,132,]),'ARRAY':([86,],[128,]),'MULTIPLICACION':([87,209,],[133,133,]),'DIVISION':([87,209,],[134,134,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'expression':([0,2,3,4,71,144,145,152,185,227,],[1,27,29,30,111,181,182,186,210,231,]),'variable':([0,2,3,4,71,116,144,145,152,185,227,],[2,2,2,2,2,159,2,2,2,2,2,]),'dataStruct':([0,2,3,4,71,116,144,145,152,185,227,],[3,3,3,3,3,156,3,3,3,3,3,]),'controlStruct':([0,2,3,4,71,144,145,152,185,227,],[4,4,4,4,4,4,4,4,4,4,]),'methodsSet':([0,2,3,4,71,144,145,152,185,227,],[5,5,5,5,5,5,5,5,5,5,]),'mapFunctions':([0,2,3,4,71,144,145,152,185,227,],[6,6,6,6,6,6,6,6,6,6,]),'arrayFn':([0,2,3,4,71,144,145,152,185,227,],[7,7,7,7,7,7,7,7,7,7,]),'declaration':([0,2,3,4,71,144,145,152,185,227,],[8,8,8,8,8,8,8,8,8,8,]),'type':([0,2,3,4,35,71,116,144,145,152,185,227,],[9,9,9,9,67,9,157,9,9,9,9,9,]),'array':([0,2,3,4,71,116,144,145,152,185,227,],[11,11,11,11,11,11,11,11,11,11,11,]),'set':([0,2,3,4,71,116,144,145,152,185,227,],[12,12,12,12,12,12,12,12,12,12,12,]),'map':([0,2,3,4,71,116,144,145,152,185,227,],[13,13,13,13,13,13,13,13,13,13,13,]),'while':([0,2,3,4,71,144,145,152,185,227,],[14,14,14,14,14,14,14,14,14,14,]),'for':([0,2,3,4,71,144,145,152,185,227,],[15,15,15,15,15,15,15,15,15,15,]),'if':([0,2,3,4,71,144,145,152,185,227,],[16,16,16,16,16,16,16,16,16,16,]),'iniciarMap':([0,2,3,4,71,116,144,145,152,185,227,],[20,20,20,20,20,20,20,20,20,20,20,]),'escribirMap':([0,2,3,4,71,116,144,145,152,185,227,],[21,21,21,21,21,21,21,21,21,21,21,]),'generarMap':([0,2,3,4,71,116,144,145,152,185,227,],[22,22,22,22,22,22,22,22,22,22,22,]),'soloIf':([0,2,3,4,71,144,145,152,185,222,227,],[25,25,25,25,25,25,25,25,25,228,25,]),'elseIf':([25,],[36,]),'else':([25,36,],[37,69,]),'datatype':([32,42,43,79,93,94,116,162,188,190,213,],[45,78,83,118,78,78,155,191,78,45,83,]),'element':([32,34,40,70,90,91,96,97,100,107,135,169,],[46,61,61,61,136,137,142,143,146,61,173,198,]),'controlArg':([34,40,70,107,],[59,72,110,147,]),'bool':([34,],[60,]),'inicialization':([35,],[66,]),'claveValor':([42,188,],[74,212,]),'tuplas':([42,117,],[75,160,]),'clave':([42,93,94,188,],[76,139,140,76,]),'tupla':([42,117,],[77,77,]),'operations':([43,183,213,],[84,208,84,]),'clause':([61,],[100,]),'items':([85,168,172,197,],[123,195,200,217,]),'numeros':([85,166,168,172,197,],[124,193,124,124,124,]),'cadena':([85,167,168,172,197,],[125,194,125,125,125,]),'operand':([87,209,],[130,130,]),'valor':([116,],[154,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> expression","S'",1,None,None,None),
  ('expression -> variable','expression',1,'p_expression_expr','sintactical.py',9),
  ('expression -> variable expression','expression',2,'p_expression_expr','sintactical.py',10),
  ('expression -> dataStruct','expression',1,'p_expression_expr','sintactical.py',11),
  ('expression -> dataStruct expression','expression',2,'p_expression_expr','sintactical.py',12),
  ('expression -> controlStruct','expression',1,'p_expression_expr','sintactical.py',13),
  ('expression -> controlStruct expression','expression',2,'p_expression_expr','sintactical.py',14),
  ('expression -> methodsSet','expression',1,'p_expression_expr','sintactical.py',15),
  ('expression -> mapFunctions','expression',1,'p_expression_expr','sintactical.py',16),
  ('expression -> arrayFn','expression',1,'p_expression_expr','sintactical.py',17),
  ('expression -> declaration','expression',1,'p_expression_expr','sintactical.py',18),
  ('variable -> type NAME IGUAL datatype SEMICOLON','variable',5,'p_variable_expr','sintactical.py',21),
  ('variable -> type NAME IGUAL operations SEMICOLON','variable',5,'p_variable_expr','sintactical.py',22),
  ('variable -> NAME IGUAL datatype SEMICOLON','variable',4,'p_variable_expr','sintactical.py',23),
  ('controlStruct -> while','controlStruct',1,'p_controlStruct_expr','sintactical.py',26),
  ('controlStruct -> for','controlStruct',1,'p_controlStruct_expr','sintactical.py',27),
  ('controlStruct -> if','controlStruct',1,'p_controlStruct_expr','sintactical.py',28),
  ('dataStruct -> array','dataStruct',1,'p_dataStruct_expr','sintactical.py',31),
  ('dataStruct -> set','dataStruct',1,'p_dataStruct_expr','sintactical.py',32),
  ('dataStruct -> map','dataStruct',1,'p_dataStruct_expr','sintactical.py',33),
  ('while -> WHILE OPEN_PARENTHESIS controlArg CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE','while',7,'p_while_expr','sintactical.py',36),
  ('while -> WHILE OPEN_PARENTHESIS bool CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE','while',7,'p_while_expr','sintactical.py',37),
  ('if -> soloIf','if',1,'p_if_expr','sintactical.py',40),
  ('if -> soloIf elseIf','if',2,'p_if_expr','sintactical.py',41),
  ('if -> soloIf elseIf else','if',3,'p_if_expr','sintactical.py',42),
  ('if -> soloIf else','if',2,'p_if_expr','sintactical.py',43),
  ('soloIf -> IF OPEN_PARENTHESIS controlArg CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE','soloIf',7,'p_soloIf_expr','sintactical.py',46),
  ('elseIf -> ELSEIF OPEN_PARENTHESIS controlArg CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE','elseIf',7,'p_elseIf_expr','sintactical.py',49),
  ('elseIf -> ELSEIF OPEN_PARENTHESIS controlArg CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE soloIf','elseIf',8,'p_elseIf_expr','sintactical.py',50),
  ('else -> ELSE OPEN_BRACE expression CLOSE_BRACE','else',4,'p_else_expr','sintactical.py',53),
  ('controlArg -> element clause element','controlArg',3,'p_controlArg_expr','sintactical.py',64),
  ('for -> FOR OPEN_PARENTHESIS inicialization SEMICOLON controlArg SEMICOLON operations CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE','for',11,'p_for_expr','sintactical.py',67),
  ('inicialization -> type NAME IGUAL NUMBER','inicialization',4,'p_inicialization','sintactical.py',70),
  ('inicialization -> NAME IGUAL NUMBER','inicialization',3,'p_inicialization','sintactical.py',71),
  ('operations -> NUMBER operand NUMBER','operations',3,'p_operations','sintactical.py',77),
  ('operations -> NAME SUMA SUMA','operations',3,'p_operations','sintactical.py',78),
  ('operations -> NAME RESTA RESTA','operations',3,'p_operations','sintactical.py',79),
  ('datatype -> NUMBER','datatype',1,'p_datatype_expr','sintactical.py',82),
  ('datatype -> STRING','datatype',1,'p_datatype_expr','sintactical.py',83),
  ('datatype -> CHAR','datatype',1,'p_datatype_expr','sintactical.py',84),
  ('operand -> SUMA','operand',1,'p_operand_expr','sintactical.py',87),
  ('operand -> RESTA','operand',1,'p_operand_expr','sintactical.py',88),
  ('operand -> MULTIPLICACION','operand',1,'p_operand_expr','sintactical.py',89),
  ('operand -> DIVISION','operand',1,'p_operand_expr','sintactical.py',90),
  ('bool -> TRUE','bool',1,'p_bool_expr','sintactical.py',93),
  ('bool -> FALSE','bool',1,'p_bool_expr','sintactical.py',94),
  ('type -> CONST','type',1,'p_type_expr','sintactical.py',97),
  ('type -> LET','type',1,'p_type_expr','sintactical.py',98),
  ('type -> VAR','type',1,'p_type_expr','sintactical.py',99),
  ('clause -> IGUALIGUAL','clause',1,'p_clause_expr','sintactical.py',102),
  ('clause -> DIFERENTE','clause',1,'p_clause_expr','sintactical.py',103),
  ('clause -> MAYORQUE','clause',1,'p_clause_expr','sintactical.py',104),
  ('clause -> MAYORIGUALQUE','clause',1,'p_clause_expr','sintactical.py',105),
  ('clause -> MENORQUE','clause',1,'p_clause_expr','sintactical.py',106),
  ('clause -> MENORIGUALQUE','clause',1,'p_clause_expr','sintactical.py',107),
  ('value -> NAME','value',1,'p_value_expr','sintactical.py',110),
  ('value -> NUMBER','value',1,'p_value_expr','sintactical.py',111),
  ('array -> type NAME IGUAL OPEN_BRACKET items CLOSE_BRACKET SEMICOLON','array',7,'p_array_expr','sintactical.py',114),
  ('array -> type NAME IGUAL NEW ARRAY OPEN_PARENTHESIS items CLOSE_PARENTHESIS SEMICOLON','array',9,'p_array_expr','sintactical.py',115),
  ('map -> iniciarMap','map',1,'p_map_expr','sintactical.py',118),
  ('map -> escribirMap','map',1,'p_map_expr','sintactical.py',119),
  ('map -> generarMap','map',1,'p_map_expr','sintactical.py',120),
  ('iniciarMap -> variable IGUAL NEW MAP OPEN_PARENTHESIS CLOSE_PARENTHESIS SEMICOLON','iniciarMap',7,'p_iniciarMap_expr','sintactical.py',123),
  ('escribirMap -> variable IGUAL OPEN_BRACE claveValor CLOSE_BRACE','escribirMap',5,'p_escribirMap_expr','sintactical.py',126),
  ('claveValor -> clave COLON valor','claveValor',3,'p_claveValor_expr','sintactical.py',129),
  ('claveValor -> clave COLON valor COMMA claveValor','claveValor',5,'p_claveValor_expr','sintactical.py',130),
  ('clave -> datatype','clave',1,'p_clave_expr','sintactical.py',133),
  ('valor -> datatype','valor',1,'p_valor_expr','sintactical.py',136),
  ('valor -> dataStruct','valor',1,'p_valor_expr','sintactical.py',137),
  ('generarMap -> variable IGUAL OPEN_BRACE tuplas CLOSE_BRACE','generarMap',5,'p_generarMap_expr','sintactical.py',140),
  ('tuplas -> tupla','tuplas',1,'p_tuplas_expr','sintactical.py',143),
  ('tuplas -> tupla COMMA tuplas','tuplas',3,'p_tuplas_expr','sintactical.py',144),
  ('tupla -> OPEN_BRACKET datatype CLOSE_BRACKET','tupla',3,'p_tupla_expr','sintactical.py',147),
  ('tupla -> OPEN_BRACKET datatype COMMA datatype CLOSE_BRACKET','tupla',5,'p_tupla_expr','sintactical.py',148),
  ('mapFunctions -> NAME POINT CLEAR OPEN_PARENTHESIS CLOSE_PARENTHESIS SEMICOLON','mapFunctions',6,'p_mapFunctions_expr','sintactical.py',151),
  ('mapFunctions -> NAME POINT GET OPEN_PARENTHESIS clave CLOSE_PARENTHESIS SEMICOLON','mapFunctions',7,'p_mapFunctions_expr','sintactical.py',152),
  ('mapFunctions -> NAME POINT HAS OPEN_PARENTHESIS clave CLOSE_PARENTHESIS SEMICOLON','mapFunctions',7,'p_mapFunctions_expr','sintactical.py',153),
  ('arrayFn -> NAME POINT POP OPEN_PARENTHESIS CLOSE_PARENTHESIS','arrayFn',5,'p_arrayFn_expr','sintactical.py',156),
  ('arrayFn -> NAME POINT PUSH OPEN_PARENTHESIS element CLOSE_PARENTHESIS','arrayFn',6,'p_arrayFn_expr','sintactical.py',157),
  ('arrayFn -> NAME POINT UNSHIFT OPEN_PARENTHESIS element CLOSE_PARENTHESIS','arrayFn',6,'p_arrayFn_expr','sintactical.py',158),
  ('set -> type NAME IGUAL NEW SET OPEN_PARENTHESIS CLOSE_PARENTHESIS SEMICOLON','set',8,'p_set_expr','sintactical.py',166),
  ('set -> type NAME IGUAL NEW SET OPEN_PARENTHESIS OPEN_BRACKET items CLOSE_BRACKET CLOSE_PARENTHESIS SEMICOLON','set',11,'p_set_expr','sintactical.py',167),
  ('set -> type NAME IGUAL NEW SET OPEN_PARENTHESIS element CLOSE_PARENTHESIS SEMICOLON','set',9,'p_set_expr','sintactical.py',168),
  ('set -> NAME IGUAL NEW SET OPEN_PARENTHESIS CLOSE_PARENTHESIS SEMICOLON','set',7,'p_set_expr','sintactical.py',169),
  ('set -> NAME IGUAL NEW SET OPEN_PARENTHESIS OPEN_BRACKET items CLOSE_BRACKET CLOSE_PARENTHESIS SEMICOLON','set',10,'p_set_expr','sintactical.py',170),
  ('set -> NAME IGUAL NEW SET OPEN_PARENTHESIS element CLOSE_PARENTHESIS SEMICOLON','set',8,'p_set_expr','sintactical.py',171),
  ('methodsSet -> NAME POINT ADD OPEN_PARENTHESIS element CLOSE_PARENTHESIS SEMICOLON','methodsSet',7,'p_methodsSet_expr','sintactical.py',174),
  ('methodsSet -> NAME POINT DELETE OPEN_PARENTHESIS element CLOSE_PARENTHESIS SEMICOLON','methodsSet',7,'p_methodsSet_expr','sintactical.py',175),
  ('methodsSet -> NAME POINT CLEAR OPEN_PARENTHESIS CLOSE_PARENTHESIS SEMICOLON','methodsSet',6,'p_methodsSet_expr','sintactical.py',176),
  ('items -> numeros','items',1,'p_items_expr','sintactical.py',179),
  ('items -> cadena','items',1,'p_items_expr','sintactical.py',180),
  ('numeros -> NUMBER','numeros',1,'p_numeros_expr','sintactical.py',183),
  ('numeros -> NUMBER COMMA numeros','numeros',3,'p_numeros_expr','sintactical.py',184),
  ('cadena -> STRING','cadena',1,'p_cadena_expr','sintactical.py',187),
  ('cadena -> STRING COMMA cadena','cadena',3,'p_cadena_expr','sintactical.py',188),
  ('element -> STRING','element',1,'p_element_expr','sintactical.py',191),
  ('element -> NUMBER','element',1,'p_element_expr','sintactical.py',192),
  ('element -> NAME','element',1,'p_element_expr','sintactical.py',193),
  ('declaration -> NAME IGUAL element','declaration',3,'p_declaration_expr','sintactical.py',196),
]

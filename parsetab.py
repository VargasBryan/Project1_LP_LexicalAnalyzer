
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'ADD AND ARRAY BACKSLASH BOOLEAN BREAK CASE CHAR CLASS CLEAR CLOSE_BRACE CLOSE_BRACKET CLOSE_PARENTHESIS COLON COMMA COMMENTS CONST DEFAULT DELETE DIFERENTE DIVIGUAL DIVISION DOUBLE_QUOTES ELSE ELSEIF FALSE FLOAT FOR FUNCTION GET HAS IF IGUAL IGUALIGUAL INT LENGTH LET LINE_BREAK LONGCOMMENT MAP MASIGUAL MAYORIGUALQUE MAYORQUE MENORIGUALQUE MENORQUE MENOSIGUAL MODIGUAL MULTIPLICACION NAME NEW NOT NULL NUMBER OPEN_BRACE OPEN_BRACKET OPEN_PARENTHESIS OR POINT POP PORIGUAL POTIGUAL PUSH RESTA RETURN SEMICOLON SET SINGLE_QUOTE STATIC STRING SUMA SWITCH THEN TOSTRING TRUE TYPEOF UNDEFINED UNSHIFT VAR WHILEexpression : variable\n    | variable expression\n    | dataStruct\n    | dataStruct expression\n    | controlStruct\n    | controlStruct expression\n    | methodsSet\n    | mapFunctions\n    | arrayFn variable : type NAME IGUAL datatype SEMICOLON\n        | type NAME IGUAL operations SEMICOLON\n        | NAME IGUAL datatype SEMICOLONcontrolStruct : while\n    | for\n    | ifdataStruct : array\n    | set\n    | map while : WHILE OPEN_PARENTHESIS controlArg CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE\n    | WHILE OPEN_PARENTHESIS bool CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACEif : soloIf \n    | soloIf elseIf\n    | soloIf elseIf else\n    | soloIf else soloIf : IF OPEN_PARENTHESIS controlArg CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE elseIf : ELSEIF OPEN_PARENTHESIS controlArg CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE\n        | ELSEIF OPEN_PARENTHESIS controlArg CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE soloIf else : ELSE OPEN_BRACE expression CLOSE_BRACEcomparacion : IGUALIGUAL\n    | DIFERENTE\n    | MAYORQUE\n    | MAYORIGUALQUE\n    | MENORQUE\n    | MENORIGUALQUEcontrolArg : argUnico comparacion argUnicofor : FOR OPEN_PARENTHESIS inicialization SEMICOLON condition SEMICOLON operations CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE inicialization : type NAME IGUAL NUMBER\n    | NAME IGUAL NUMBERcondition : NAME clause value operations : NUMBER operand NUMBER\n    | NAME SUMA SUMA\n    | NAME RESTA RESTA datatype : NUMBER\n    | STRING\n    | CHARoperand : SUMA \n    | RESTA \n    | MULTIPLICACION \n    | DIVISIONbool : TRUE\n    | FALSEtype : CONST\n    | LET\n    | VARclause :  IGUALIGUAL\n    | DIFERENTE\n    | MAYORQUE\n    | MAYORIGUALQUE\n    | MENORQUE\n    | MENORIGUALQUE value : NAME\n    | NUMBERarray : type NAME IGUAL OPEN_BRACKET items CLOSE_BRACKET SEMICOLON\n    | type NAME IGUAL NEW ARRAY OPEN_PARENTHESIS items CLOSE_PARENTHESIS SEMICOLONmap : iniciarMap\n        | escribirMap\n        | generarMap iniciarMap : variable IGUAL NEW MAP OPEN_PARENTHESIS CLOSE_PARENTHESIS SEMICOLONescribirMap : variable IGUAL OPEN_BRACE claveValor CLOSE_BRACEclaveValor : clave COLON valor\n    | clave COLON valor COMMA claveValorclave : datatypevalor : datatype\n        | dataStructgenerarMap : variable IGUAL OPEN_BRACE tuplas CLOSE_BRACEtuplas : tupla\n        | tupla COMMA tuplas  tupla : OPEN_BRACKET datatype CLOSE_BRACKET\n        | OPEN_BRACKET datatype COMMA datatype CLOSE_BRACKETmapFunctions : NAME POINT CLEAR OPEN_PARENTHESIS CLOSE_PARENTHESIS SEMICOLON\n        | NAME POINT GET OPEN_PARENTHESIS clave CLOSE_PARENTHESIS SEMICOLON\n        | NAME POINT HAS OPEN_PARENTHESIS clave CLOSE_PARENTHESIS SEMICOLONarrayFn : NAME POINT POP OPEN_PARENTHESIS CLOSE_PARENTHESIS\n    | NAME POINT PUSH OPEN_PARENTHESIS argUnico CLOSE_PARENTHESIS\n    | NAME POINT UNSHIFT OPEN_PARENTHESIS argUnico CLOSE_PARENTHESISargUnico : NUMBER\n    | STRING\n    | NAMEset : type NAME IGUAL NEW SET OPEN_PARENTHESIS CLOSE_PARENTHESIS SEMICOLON\n    | type NAME IGUAL NEW SET OPEN_PARENTHESIS OPEN_BRACKET items CLOSE_BRACKET CLOSE_PARENTHESIS SEMICOLON\n    | type NAME IGUAL NEW SET OPEN_PARENTHESIS element CLOSE_PARENTHESIS SEMICOLON\n    | NAME IGUAL NEW SET OPEN_PARENTHESIS CLOSE_PARENTHESIS SEMICOLON\n    | NAME IGUAL NEW SET OPEN_PARENTHESIS OPEN_BRACKET items CLOSE_BRACKET CLOSE_PARENTHESIS SEMICOLON\n    | NAME IGUAL NEW SET OPEN_PARENTHESIS element CLOSE_PARENTHESIS SEMICOLONmethodsSet : NAME POINT ADD OPEN_PARENTHESIS element CLOSE_PARENTHESIS SEMICOLON\n    | NAME POINT DELETE OPEN_PARENTHESIS element CLOSE_PARENTHESIS SEMICOLON\n    | NAME POINT CLEAR OPEN_PARENTHESIS CLOSE_PARENTHESIS SEMICOLON items : numeros\n    | cadenanumeros : NUMBER\n    | NUMBER COMMA numeroscadena : STRING \n    | STRING COMMA cadenaelement : STRING\n    | NUMBER\n    | NAME'
    
_lr_action_items = {'NAME':([0,2,3,4,8,10,11,12,13,14,15,16,17,18,19,20,21,24,33,34,35,36,39,42,65,67,68,69,84,86,87,92,93,96,97,98,99,100,101,102,103,110,111,112,117,118,131,143,144,151,152,157,169,183,184,185,186,187,188,189,190,192,194,199,206,213,214,221,223,226,230,232,233,235,237,238,240,242,243,],[9,9,9,9,30,-16,-17,-18,-13,-14,-15,-52,-53,-54,-65,-66,-67,-21,63,66,-22,-24,63,78,104,-23,63,9,-12,132,132,63,63,63,-29,-30,-31,-32,-33,-34,147,-69,-75,158,-10,-11,132,9,9,-28,9,196,132,78,217,-55,-56,-57,-58,-59,-60,9,-68,-63,-92,-19,-20,-25,78,-89,-94,-26,-64,-91,9,-27,-93,-90,-36,]),'CONST':([0,2,3,4,10,11,12,13,14,15,19,20,21,24,34,35,36,67,69,84,110,111,112,117,118,143,144,151,152,192,194,199,206,213,214,221,226,230,232,233,235,237,238,240,242,243,],[16,16,16,16,-16,-17,-18,-13,-14,-15,-65,-66,-67,-21,16,-22,-24,-23,16,-12,-69,-75,16,-10,-11,16,16,-28,16,16,-68,-63,-92,-19,-20,-25,-89,-94,-26,-64,-91,16,-27,-93,-90,-36,]),'LET':([0,2,3,4,10,11,12,13,14,15,19,20,21,24,34,35,36,67,69,84,110,111,112,117,118,143,144,151,152,192,194,199,206,213,214,221,226,230,232,233,235,237,238,240,242,243,],[17,17,17,17,-16,-17,-18,-13,-14,-15,-65,-66,-67,-21,17,-22,-24,-23,17,-12,-69,-75,17,-10,-11,17,17,-28,17,17,-68,-63,-92,-19,-20,-25,-89,-94,-26,-64,-91,17,-27,-93,-90,-36,]),'VAR':([0,2,3,4,10,11,12,13,14,15,19,20,21,24,34,35,36,67,69,84,110,111,112,117,118,143,144,151,152,192,194,199,206,213,214,221,226,230,232,233,235,237,238,240,242,243,],[18,18,18,18,-16,-17,-18,-13,-14,-15,-65,-66,-67,-21,18,-22,-24,-23,18,-12,-69,-75,18,-10,-11,18,18,-28,18,18,-68,-63,-92,-19,-20,-25,-89,-94,-26,-64,-91,18,-27,-93,-90,-36,]),'WHILE':([0,2,3,4,10,11,12,13,14,15,19,20,21,24,35,36,67,69,84,110,111,117,118,143,144,151,152,192,194,199,206,213,214,221,226,230,232,233,235,237,238,240,242,243,],[22,22,22,22,-16,-17,-18,-13,-14,-15,-65,-66,-67,-21,-22,-24,-23,22,-12,-69,-75,-10,-11,22,22,-28,22,22,-68,-63,-92,-19,-20,-25,-89,-94,-26,-64,-91,22,-27,-93,-90,-36,]),'FOR':([0,2,3,4,10,11,12,13,14,15,19,20,21,24,35,36,67,69,84,110,111,117,118,143,144,151,152,192,194,199,206,213,214,221,226,230,232,233,235,237,238,240,242,243,],[23,23,23,23,-16,-17,-18,-13,-14,-15,-65,-66,-67,-21,-22,-24,-23,23,-12,-69,-75,-10,-11,23,23,-28,23,23,-68,-63,-92,-19,-20,-25,-89,-94,-26,-64,-91,23,-27,-93,-90,-36,]),'IF':([0,2,3,4,10,11,12,13,14,15,19,20,21,24,35,36,67,69,84,110,111,117,118,143,144,151,152,192,194,199,206,213,214,221,226,230,232,233,235,237,238,240,242,243,],[25,25,25,25,-16,-17,-18,-13,-14,-15,-65,-66,-67,-21,-22,-24,-23,25,-12,-69,-75,-10,-11,25,25,-28,25,25,-68,-63,-92,-19,-20,-25,-89,-94,25,-64,-91,25,-27,-93,-90,-36,]),'$end':([1,2,3,4,5,6,7,10,11,12,13,14,15,19,20,21,24,26,28,29,35,36,67,84,110,111,117,118,140,151,176,179,180,194,199,206,209,210,211,212,213,214,221,226,230,232,233,235,238,240,242,243,],[0,-1,-3,-5,-7,-8,-9,-16,-17,-18,-13,-14,-15,-65,-66,-67,-21,-2,-4,-6,-22,-24,-23,-12,-69,-75,-10,-11,-83,-28,-80,-84,-85,-68,-63,-92,-95,-96,-81,-82,-19,-20,-25,-89,-94,-26,-64,-91,-27,-93,-90,-36,]),'CLOSE_BRACE':([2,3,4,5,6,7,10,11,12,13,14,15,19,20,21,24,26,28,29,35,36,45,46,47,67,72,73,75,84,107,110,111,117,118,140,151,154,155,156,160,161,176,179,180,181,182,193,194,199,206,209,210,211,212,213,214,220,221,222,224,226,230,232,233,235,238,240,241,242,243,],[-1,-3,-5,-7,-8,-9,-16,-17,-18,-13,-14,-15,-65,-66,-67,-21,-2,-4,-6,-22,-24,-43,-44,-45,-23,110,111,-76,-12,151,-69,-75,-10,-11,-83,-28,-70,-73,-74,-77,-78,-80,-84,-85,213,214,221,-68,-63,-92,-95,-96,-81,-82,-19,-20,232,-25,-71,-79,-89,-94,-26,-64,-91,-27,-93,243,-90,-36,]),'IGUAL':([2,9,30,66,84,104,117,118,158,159,196,],[27,31,42,105,-12,148,-10,-11,197,27,223,]),'POINT':([9,],[32,]),'COMMA':([10,11,12,19,20,21,45,46,47,75,110,111,114,122,123,154,155,156,161,194,199,206,224,226,230,233,235,240,242,],[-16,-17,-18,-65,-66,-67,-43,-44,-45,113,-69,-75,162,166,167,195,-73,-74,-78,-68,-63,-92,-79,-89,-94,-64,-91,-93,-90,]),'OPEN_PARENTHESIS':([22,23,25,37,48,49,50,51,52,53,54,55,71,85,124,125,],[33,34,39,68,86,87,88,89,90,91,92,93,109,131,168,169,]),'ELSEIF':([24,221,],[37,-25,]),'ELSE':([24,35,221,232,238,],[38,38,-25,-26,-27,]),'NEW':([27,31,42,197,223,],[40,44,82,44,82,]),'OPEN_BRACE':([27,38,94,95,108,150,231,],[41,69,143,144,152,192,237,]),'NUMBER':([31,33,39,41,42,68,77,81,86,87,89,90,92,93,96,97,98,99,100,101,102,105,112,126,127,128,129,130,131,148,162,166,168,169,172,183,184,185,186,187,188,189,190,195,197,204,223,],[45,61,61,45,83,61,45,122,135,135,45,45,61,61,61,-29,-30,-31,-32,-33,-34,149,45,170,-46,-47,-48,-49,135,191,45,122,122,135,122,216,219,-55,-56,-57,-58,-59,-60,45,45,122,83,]),'STRING':([31,33,39,41,42,68,77,81,86,87,89,90,92,93,96,97,98,99,100,101,102,112,131,162,167,168,169,172,195,197,204,223,],[46,62,62,46,46,62,46,123,134,134,46,46,62,62,62,-29,-30,-31,-32,-33,-34,46,134,46,123,123,134,123,46,46,123,46,]),'CHAR':([31,41,42,77,89,90,112,162,195,197,223,],[47,47,47,47,47,47,47,47,47,47,47,]),'ADD':([32,],[48,]),'DELETE':([32,],[49,]),'CLEAR':([32,],[50,]),'GET':([32,],[51,]),'HAS':([32,],[52,]),'POP':([32,],[53,]),'PUSH':([32,],[54,]),'UNSHIFT':([32,],[55,]),'TRUE':([33,],[59,]),'FALSE':([33,],[60,]),'MAP':([40,],[71,]),'OPEN_BRACKET':([41,42,113,131,169,223,],[77,81,77,172,204,81,]),'SEMICOLON':([43,45,46,47,64,79,80,83,137,146,149,153,163,164,165,170,171,174,175,177,178,191,203,208,217,218,219,225,228,236,239,],[84,-43,-44,-45,103,117,118,-43,176,183,-38,194,-41,-42,199,-40,206,209,210,211,212,-37,226,230,-61,-39,-62,233,235,240,242,]),'SET':([44,82,],[85,125,]),'COLON':([45,46,47,74,76,],[-43,-44,-45,112,-72,]),'CLOSE_BRACKET':([45,46,47,114,119,120,121,122,123,198,200,201,207,227,],[-43,-44,-45,161,165,-98,-99,-100,-102,224,-101,-103,229,234,]),'CLOSE_PARENTHESIS':([45,46,47,56,57,59,60,61,62,63,70,76,88,91,106,109,120,121,122,123,131,132,133,134,135,136,138,139,141,142,145,163,164,169,170,173,200,201,202,205,215,229,234,],[-43,-44,-45,94,95,-50,-51,-86,-87,-88,108,-72,137,140,150,153,-98,-99,-100,-102,171,-106,174,-104,-105,175,177,178,179,180,-35,-41,-42,203,-40,208,-101,-103,225,228,231,236,239,]),'IGUALIGUAL':([58,61,62,63,147,],[97,-86,-87,-88,185,]),'DIFERENTE':([58,61,62,63,147,],[98,-86,-87,-88,186,]),'MAYORQUE':([58,61,62,63,147,],[99,-86,-87,-88,187,]),'MAYORIGUALQUE':([58,61,62,63,147,],[100,-86,-87,-88,188,]),'MENORQUE':([58,61,62,63,147,],[101,-86,-87,-88,189,]),'MENORIGUALQUE':([58,61,62,63,147,],[102,-86,-87,-88,190,]),'SUMA':([78,83,115,216,],[115,127,163,127,]),'RESTA':([78,83,116,216,],[116,128,164,128,]),'ARRAY':([82,],[124,]),'MULTIPLICACION':([83,216,],[129,129,]),'DIVISION':([83,216,],[130,130,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'expression':([0,2,3,4,69,143,144,152,192,237,],[1,26,28,29,107,181,182,193,220,241,]),'variable':([0,2,3,4,69,112,143,144,152,192,237,],[2,2,2,2,2,159,2,2,2,2,2,]),'dataStruct':([0,2,3,4,69,112,143,144,152,192,237,],[3,3,3,3,3,156,3,3,3,3,3,]),'controlStruct':([0,2,3,4,69,143,144,152,192,237,],[4,4,4,4,4,4,4,4,4,4,]),'methodsSet':([0,2,3,4,69,143,144,152,192,237,],[5,5,5,5,5,5,5,5,5,5,]),'mapFunctions':([0,2,3,4,69,143,144,152,192,237,],[6,6,6,6,6,6,6,6,6,6,]),'arrayFn':([0,2,3,4,69,143,144,152,192,237,],[7,7,7,7,7,7,7,7,7,7,]),'type':([0,2,3,4,34,69,112,143,144,152,192,237,],[8,8,8,8,65,8,157,8,8,8,8,8,]),'array':([0,2,3,4,69,112,143,144,152,192,237,],[10,10,10,10,10,10,10,10,10,10,10,]),'set':([0,2,3,4,69,112,143,144,152,192,237,],[11,11,11,11,11,11,11,11,11,11,11,]),'map':([0,2,3,4,69,112,143,144,152,192,237,],[12,12,12,12,12,12,12,12,12,12,12,]),'while':([0,2,3,4,69,143,144,152,192,237,],[13,13,13,13,13,13,13,13,13,13,]),'for':([0,2,3,4,69,143,144,152,192,237,],[14,14,14,14,14,14,14,14,14,14,]),'if':([0,2,3,4,69,143,144,152,192,237,],[15,15,15,15,15,15,15,15,15,15,]),'iniciarMap':([0,2,3,4,69,112,143,144,152,192,237,],[19,19,19,19,19,19,19,19,19,19,19,]),'escribirMap':([0,2,3,4,69,112,143,144,152,192,237,],[20,20,20,20,20,20,20,20,20,20,20,]),'generarMap':([0,2,3,4,69,112,143,144,152,192,237,],[21,21,21,21,21,21,21,21,21,21,21,]),'soloIf':([0,2,3,4,69,143,144,152,192,232,237,],[24,24,24,24,24,24,24,24,24,238,24,]),'elseIf':([24,],[35,]),'else':([24,35,],[36,67,]),'datatype':([31,41,42,77,89,90,112,162,195,197,223,],[43,76,79,114,76,76,155,198,76,43,79,]),'controlArg':([33,39,68,],[56,70,106,]),'bool':([33,],[57,]),'argUnico':([33,39,68,92,93,96,],[58,58,58,141,142,145,]),'inicialization':([34,],[64,]),'claveValor':([41,195,],[72,222,]),'tuplas':([41,113,],[73,160,]),'clave':([41,89,90,195,],[74,138,139,74,]),'tupla':([41,113,],[75,75,]),'operations':([42,183,223,],[80,215,80,]),'comparacion':([58,],[96,]),'items':([81,168,172,204,],[119,202,207,227,]),'numeros':([81,166,168,172,204,],[120,200,120,120,120,]),'cadena':([81,167,168,172,204,],[121,201,121,121,121,]),'operand':([83,216,],[126,126,]),'element':([86,87,131,169,],[133,136,173,205,]),'condition':([103,],[146,]),'valor':([112,],[154,]),'clause':([147,],[184,]),'value':([184,],[218,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> expression","S'",1,None,None,None),
  ('expression -> variable','expression',1,'p_expression_expr','sintactical.py',9),
  ('expression -> variable expression','expression',2,'p_expression_expr','sintactical.py',10),
  ('expression -> dataStruct','expression',1,'p_expression_expr','sintactical.py',11),
  ('expression -> dataStruct expression','expression',2,'p_expression_expr','sintactical.py',12),
  ('expression -> controlStruct','expression',1,'p_expression_expr','sintactical.py',13),
  ('expression -> controlStruct expression','expression',2,'p_expression_expr','sintactical.py',14),
  ('expression -> methodsSet','expression',1,'p_expression_expr','sintactical.py',15),
  ('expression -> mapFunctions','expression',1,'p_expression_expr','sintactical.py',16),
  ('expression -> arrayFn','expression',1,'p_expression_expr','sintactical.py',17),
  ('variable -> type NAME IGUAL datatype SEMICOLON','variable',5,'p_variable_expr','sintactical.py',20),
  ('variable -> type NAME IGUAL operations SEMICOLON','variable',5,'p_variable_expr','sintactical.py',21),
  ('variable -> NAME IGUAL datatype SEMICOLON','variable',4,'p_variable_expr','sintactical.py',22),
  ('controlStruct -> while','controlStruct',1,'p_controlStruct_expr','sintactical.py',25),
  ('controlStruct -> for','controlStruct',1,'p_controlStruct_expr','sintactical.py',26),
  ('controlStruct -> if','controlStruct',1,'p_controlStruct_expr','sintactical.py',27),
  ('dataStruct -> array','dataStruct',1,'p_dataStruct_expr','sintactical.py',30),
  ('dataStruct -> set','dataStruct',1,'p_dataStruct_expr','sintactical.py',31),
  ('dataStruct -> map','dataStruct',1,'p_dataStruct_expr','sintactical.py',32),
  ('while -> WHILE OPEN_PARENTHESIS controlArg CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE','while',7,'p_while_expr','sintactical.py',35),
  ('while -> WHILE OPEN_PARENTHESIS bool CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE','while',7,'p_while_expr','sintactical.py',36),
  ('if -> soloIf','if',1,'p_if_expr','sintactical.py',39),
  ('if -> soloIf elseIf','if',2,'p_if_expr','sintactical.py',40),
  ('if -> soloIf elseIf else','if',3,'p_if_expr','sintactical.py',41),
  ('if -> soloIf else','if',2,'p_if_expr','sintactical.py',42),
  ('soloIf -> IF OPEN_PARENTHESIS controlArg CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE','soloIf',7,'p_soloIf_expr','sintactical.py',45),
  ('elseIf -> ELSEIF OPEN_PARENTHESIS controlArg CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE','elseIf',7,'p_elseIf_expr','sintactical.py',48),
  ('elseIf -> ELSEIF OPEN_PARENTHESIS controlArg CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE soloIf','elseIf',8,'p_elseIf_expr','sintactical.py',49),
  ('else -> ELSE OPEN_BRACE expression CLOSE_BRACE','else',4,'p_else_expr','sintactical.py',52),
  ('comparacion -> IGUALIGUAL','comparacion',1,'p_comparacion_expr','sintactical.py',55),
  ('comparacion -> DIFERENTE','comparacion',1,'p_comparacion_expr','sintactical.py',56),
  ('comparacion -> MAYORQUE','comparacion',1,'p_comparacion_expr','sintactical.py',57),
  ('comparacion -> MAYORIGUALQUE','comparacion',1,'p_comparacion_expr','sintactical.py',58),
  ('comparacion -> MENORQUE','comparacion',1,'p_comparacion_expr','sintactical.py',59),
  ('comparacion -> MENORIGUALQUE','comparacion',1,'p_comparacion_expr','sintactical.py',60),
  ('controlArg -> argUnico comparacion argUnico','controlArg',3,'p_controlArg_expr','sintactical.py',63),
  ('for -> FOR OPEN_PARENTHESIS inicialization SEMICOLON condition SEMICOLON operations CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE','for',11,'p_for_expr','sintactical.py',66),
  ('inicialization -> type NAME IGUAL NUMBER','inicialization',4,'p_inicialization','sintactical.py',69),
  ('inicialization -> NAME IGUAL NUMBER','inicialization',3,'p_inicialization','sintactical.py',70),
  ('condition -> NAME clause value','condition',3,'p_condition','sintactical.py',73),
  ('operations -> NUMBER operand NUMBER','operations',3,'p_operations','sintactical.py',76),
  ('operations -> NAME SUMA SUMA','operations',3,'p_operations','sintactical.py',77),
  ('operations -> NAME RESTA RESTA','operations',3,'p_operations','sintactical.py',78),
  ('datatype -> NUMBER','datatype',1,'p_datatype_expr','sintactical.py',81),
  ('datatype -> STRING','datatype',1,'p_datatype_expr','sintactical.py',82),
  ('datatype -> CHAR','datatype',1,'p_datatype_expr','sintactical.py',83),
  ('operand -> SUMA','operand',1,'p_operand_expr','sintactical.py',86),
  ('operand -> RESTA','operand',1,'p_operand_expr','sintactical.py',87),
  ('operand -> MULTIPLICACION','operand',1,'p_operand_expr','sintactical.py',88),
  ('operand -> DIVISION','operand',1,'p_operand_expr','sintactical.py',89),
  ('bool -> TRUE','bool',1,'p_bool_expr','sintactical.py',92),
  ('bool -> FALSE','bool',1,'p_bool_expr','sintactical.py',93),
  ('type -> CONST','type',1,'p_type_expr','sintactical.py',96),
  ('type -> LET','type',1,'p_type_expr','sintactical.py',97),
  ('type -> VAR','type',1,'p_type_expr','sintactical.py',98),
  ('clause -> IGUALIGUAL','clause',1,'p_clause_expr','sintactical.py',101),
  ('clause -> DIFERENTE','clause',1,'p_clause_expr','sintactical.py',102),
  ('clause -> MAYORQUE','clause',1,'p_clause_expr','sintactical.py',103),
  ('clause -> MAYORIGUALQUE','clause',1,'p_clause_expr','sintactical.py',104),
  ('clause -> MENORQUE','clause',1,'p_clause_expr','sintactical.py',105),
  ('clause -> MENORIGUALQUE','clause',1,'p_clause_expr','sintactical.py',106),
  ('value -> NAME','value',1,'p_value_expr','sintactical.py',109),
  ('value -> NUMBER','value',1,'p_value_expr','sintactical.py',110),
  ('array -> type NAME IGUAL OPEN_BRACKET items CLOSE_BRACKET SEMICOLON','array',7,'p_array_expr','sintactical.py',113),
  ('array -> type NAME IGUAL NEW ARRAY OPEN_PARENTHESIS items CLOSE_PARENTHESIS SEMICOLON','array',9,'p_array_expr','sintactical.py',114),
  ('map -> iniciarMap','map',1,'p_map_expr','sintactical.py',117),
  ('map -> escribirMap','map',1,'p_map_expr','sintactical.py',118),
  ('map -> generarMap','map',1,'p_map_expr','sintactical.py',119),
  ('iniciarMap -> variable IGUAL NEW MAP OPEN_PARENTHESIS CLOSE_PARENTHESIS SEMICOLON','iniciarMap',7,'p_iniciarMap_expr','sintactical.py',122),
  ('escribirMap -> variable IGUAL OPEN_BRACE claveValor CLOSE_BRACE','escribirMap',5,'p_escribirMap_expr','sintactical.py',125),
  ('claveValor -> clave COLON valor','claveValor',3,'p_claveValor_expr','sintactical.py',128),
  ('claveValor -> clave COLON valor COMMA claveValor','claveValor',5,'p_claveValor_expr','sintactical.py',129),
  ('clave -> datatype','clave',1,'p_clave_expr','sintactical.py',132),
  ('valor -> datatype','valor',1,'p_valor_expr','sintactical.py',135),
  ('valor -> dataStruct','valor',1,'p_valor_expr','sintactical.py',136),
  ('generarMap -> variable IGUAL OPEN_BRACE tuplas CLOSE_BRACE','generarMap',5,'p_generarMap_expr','sintactical.py',139),
  ('tuplas -> tupla','tuplas',1,'p_tuplas_expr','sintactical.py',142),
  ('tuplas -> tupla COMMA tuplas','tuplas',3,'p_tuplas_expr','sintactical.py',143),
  ('tupla -> OPEN_BRACKET datatype CLOSE_BRACKET','tupla',3,'p_tupla_expr','sintactical.py',146),
  ('tupla -> OPEN_BRACKET datatype COMMA datatype CLOSE_BRACKET','tupla',5,'p_tupla_expr','sintactical.py',147),
  ('mapFunctions -> NAME POINT CLEAR OPEN_PARENTHESIS CLOSE_PARENTHESIS SEMICOLON','mapFunctions',6,'p_mapFunctions_expr','sintactical.py',150),
  ('mapFunctions -> NAME POINT GET OPEN_PARENTHESIS clave CLOSE_PARENTHESIS SEMICOLON','mapFunctions',7,'p_mapFunctions_expr','sintactical.py',151),
  ('mapFunctions -> NAME POINT HAS OPEN_PARENTHESIS clave CLOSE_PARENTHESIS SEMICOLON','mapFunctions',7,'p_mapFunctions_expr','sintactical.py',152),
  ('arrayFn -> NAME POINT POP OPEN_PARENTHESIS CLOSE_PARENTHESIS','arrayFn',5,'p_arrayFn_expr','sintactical.py',155),
  ('arrayFn -> NAME POINT PUSH OPEN_PARENTHESIS argUnico CLOSE_PARENTHESIS','arrayFn',6,'p_arrayFn_expr','sintactical.py',156),
  ('arrayFn -> NAME POINT UNSHIFT OPEN_PARENTHESIS argUnico CLOSE_PARENTHESIS','arrayFn',6,'p_arrayFn_expr','sintactical.py',157),
  ('argUnico -> NUMBER','argUnico',1,'p_argUnico_expr','sintactical.py',160),
  ('argUnico -> STRING','argUnico',1,'p_argUnico_expr','sintactical.py',161),
  ('argUnico -> NAME','argUnico',1,'p_argUnico_expr','sintactical.py',162),
  ('set -> type NAME IGUAL NEW SET OPEN_PARENTHESIS CLOSE_PARENTHESIS SEMICOLON','set',8,'p_set_expr','sintactical.py',165),
  ('set -> type NAME IGUAL NEW SET OPEN_PARENTHESIS OPEN_BRACKET items CLOSE_BRACKET CLOSE_PARENTHESIS SEMICOLON','set',11,'p_set_expr','sintactical.py',166),
  ('set -> type NAME IGUAL NEW SET OPEN_PARENTHESIS element CLOSE_PARENTHESIS SEMICOLON','set',9,'p_set_expr','sintactical.py',167),
  ('set -> NAME IGUAL NEW SET OPEN_PARENTHESIS CLOSE_PARENTHESIS SEMICOLON','set',7,'p_set_expr','sintactical.py',168),
  ('set -> NAME IGUAL NEW SET OPEN_PARENTHESIS OPEN_BRACKET items CLOSE_BRACKET CLOSE_PARENTHESIS SEMICOLON','set',10,'p_set_expr','sintactical.py',169),
  ('set -> NAME IGUAL NEW SET OPEN_PARENTHESIS element CLOSE_PARENTHESIS SEMICOLON','set',8,'p_set_expr','sintactical.py',170),
  ('methodsSet -> NAME POINT ADD OPEN_PARENTHESIS element CLOSE_PARENTHESIS SEMICOLON','methodsSet',7,'p_methodsSet_expr','sintactical.py',173),
  ('methodsSet -> NAME POINT DELETE OPEN_PARENTHESIS element CLOSE_PARENTHESIS SEMICOLON','methodsSet',7,'p_methodsSet_expr','sintactical.py',174),
  ('methodsSet -> NAME POINT CLEAR OPEN_PARENTHESIS CLOSE_PARENTHESIS SEMICOLON','methodsSet',6,'p_methodsSet_expr','sintactical.py',175),
  ('items -> numeros','items',1,'p_items_expr','sintactical.py',178),
  ('items -> cadena','items',1,'p_items_expr','sintactical.py',179),
  ('numeros -> NUMBER','numeros',1,'p_numeros_expr','sintactical.py',182),
  ('numeros -> NUMBER COMMA numeros','numeros',3,'p_numeros_expr','sintactical.py',183),
  ('cadena -> STRING','cadena',1,'p_cadena_expr','sintactical.py',186),
  ('cadena -> STRING COMMA cadena','cadena',3,'p_cadena_expr','sintactical.py',187),
  ('element -> STRING','element',1,'p_element_expr','sintactical.py',190),
  ('element -> NUMBER','element',1,'p_element_expr','sintactical.py',191),
  ('element -> NAME','element',1,'p_element_expr','sintactical.py',192),
]

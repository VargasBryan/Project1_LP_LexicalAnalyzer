
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'ADD AND ARRAY BACKSLASH BOOLEAN CHAR CLEAR CLOSE_BRACE CLOSE_BRACKET CLOSE_PARENTHESIS COLON COMMA COMMENTS CONST DELETE DIFERENTE DIVIGUAL DIVISION DOUBLE_QUOTES ELSE ELSEIF FALSE FLOAT FOR FUNCTION GET HAS IF IGUAL IGUALIGUAL INT LET LINE_BREAK LONGCOMMENT MAP MASIGUAL MAYORIGUALQUE MAYORQUE MENORIGUALQUE MENORQUE MENOSIGUAL MODIGUAL MULTIPLICACION NAME NEW NOT NULL NUMBER OPEN_BRACE OPEN_BRACKET OPEN_PARENTHESIS OR POINT POP PORIGUAL POTIGUAL PRINT PUSH RESTA RETURN SEMICOLON SET SINGLE_QUOTE STRING SUMA TRUE UNDEFINED UNSHIFT VAR WHILEexpression : variable\n    | variable expression\n    | dataStruct\n    | dataStruct expression\n    | controlStruct\n    | controlStruct expression\n    | methodsSet\n    | mapFunctions\n    | arrayFn\n    | declaration\n    | return\n    | functionvariable : type NAME IGUAL datatype SEMICOLON\n        | type NAME IGUAL operations SEMICOLON\n        | NAME IGUAL datatype SEMICOLONcontrolStruct : while\n    | for\n    | ifdataStruct : array\n    | set\n    | map while : WHILE OPEN_PARENTHESIS controlArg CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE\n    | WHILE OPEN_PARENTHESIS bool CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACEif : soloIf \n    | soloIf elseIf\n    | soloIf elseIf else\n    | soloIf else soloIf : IF OPEN_PARENTHESIS controlArg CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE elseIf : ELSEIF OPEN_PARENTHESIS controlArg CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE\n        | ELSEIF OPEN_PARENTHESIS controlArg CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE soloIf else : ELSE OPEN_BRACE expression CLOSE_BRACEcontrolArg : element clause elementfor : FOR OPEN_PARENTHESIS inicialization SEMICOLON expBoolean SEMICOLON operations CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE inicialization : type NAME IGUAL NUMBER\n    | NAME IGUAL NUMBERoperations : NUMBER operand NUMBER\n    | NAME\n    | NUMBER\n    | NUMBER operand NAME operations\n    | NAME operand NUMBER operations\n    | NUMBER operand NAME \n    | NAME operand NUMBER \n    | NAME operand NAME operations\n    | NUMBER operand NUMBER operand operationsdatatype : NUMBER\n    | STRING\n    | CHARoperand : SUMA \n    | RESTA \n    | MULTIPLICACION \n    | DIVISIONbool : TRUE\n    | FALSEtype : CONST\n    | LET\n    | VARclause :  IGUALIGUAL\n    | DIFERENTE\n    | MAYORQUE\n    | MAYORIGUALQUE\n    | MENORQUE\n    | MENORIGUALQUE value : NAME\n    | NUMBERarray : type NAME IGUAL OPEN_BRACKET items CLOSE_BRACKET SEMICOLON\n    | type NAME IGUAL NEW ARRAY OPEN_PARENTHESIS items CLOSE_PARENTHESIS SEMICOLONmap : iniciarMap\n        | escribirMap\n        | generarMap iniciarMap : variable IGUAL NEW MAP OPEN_PARENTHESIS CLOSE_PARENTHESIS SEMICOLONescribirMap : variable IGUAL OPEN_BRACE claveValor CLOSE_BRACEclaveValor : clave COLON valor\n    | clave COLON valor COMMA claveValorclave : datatypevalor : datatype\n        | dataStructgenerarMap : variable IGUAL OPEN_BRACE tuplas CLOSE_BRACEtuplas : tupla\n        | tupla COMMA tuplas  tupla : OPEN_BRACKET datatype CLOSE_BRACKET SEMICOLON\n        | OPEN_BRACKET datatype COMMA datatype CLOSE_BRACKET SEMICOLONmapFunctions : NAME POINT CLEAR OPEN_PARENTHESIS CLOSE_PARENTHESIS SEMICOLON\n        | NAME POINT GET OPEN_PARENTHESIS clave CLOSE_PARENTHESIS SEMICOLON\n        | NAME POINT HAS OPEN_PARENTHESIS clave CLOSE_PARENTHESIS SEMICOLONarrayFn : NAME POINT POP OPEN_PARENTHESIS CLOSE_PARENTHESIS SEMICOLON\n    | NAME POINT PUSH OPEN_PARENTHESIS element CLOSE_PARENTHESIS SEMICOLON\n    | NAME POINT UNSHIFT OPEN_PARENTHESIS element CLOSE_PARENTHESIS SEMICOLONset : type NAME IGUAL NEW SET OPEN_PARENTHESIS CLOSE_PARENTHESIS SEMICOLON\n    | type NAME IGUAL NEW SET OPEN_PARENTHESIS OPEN_BRACKET items CLOSE_BRACKET CLOSE_PARENTHESIS SEMICOLON\n    | type NAME IGUAL NEW SET OPEN_PARENTHESIS element CLOSE_PARENTHESIS SEMICOLON\n    | NAME IGUAL NEW SET OPEN_PARENTHESIS CLOSE_PARENTHESIS SEMICOLON\n    | NAME IGUAL NEW SET OPEN_PARENTHESIS OPEN_BRACKET items CLOSE_BRACKET CLOSE_PARENTHESIS SEMICOLON\n    | NAME IGUAL NEW SET OPEN_PARENTHESIS element CLOSE_PARENTHESIS SEMICOLONmethodsSet : NAME POINT ADD OPEN_PARENTHESIS element CLOSE_PARENTHESIS SEMICOLON\n    | NAME POINT DELETE OPEN_PARENTHESIS element CLOSE_PARENTHESIS SEMICOLON\n    | NAME POINT CLEAR OPEN_PARENTHESIS CLOSE_PARENTHESIS SEMICOLON items : numeros\n    | cadenanumeros : NUMBER\n    | NUMBER COMMA numeroscadena : STRING \n    | STRING COMMA cadenaelement : STRING\n    | NUMBER\n    | NAMEdeclaration : NAME IGUAL element SEMICOLONlogicalOperator : AND\n    | ORexpBoolean : controlArg\n    | bool\n    | NOT expBoolean\n    | expBoolean logicalOperator expBooleanfunction : FUNCTION NAME OPEN_PARENTHESIS CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE\n    | FUNCTION NAME OPEN_PARENTHESIS parameter CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE parameter : element\n    | element parameter\n    return : RETURN element SEMICOLON'
    
_lr_action_items = {'NAME':([0,2,3,4,11,13,14,15,16,17,18,19,20,21,22,23,24,25,26,29,36,39,40,41,43,44,45,46,49,52,68,75,77,78,79,96,99,100,105,106,109,112,113,114,115,116,117,118,119,126,127,128,131,132,133,134,135,136,137,145,146,155,158,159,164,168,169,174,180,181,186,188,201,204,205,206,207,210,212,221,228,230,241,242,246,248,251,256,259,261,263,265,266,268,270,271,],[12,12,12,12,35,-19,-20,-21,-16,-17,-18,41,42,-54,-55,-56,-67,-68,-69,-24,41,-103,-104,-105,41,76,-25,-27,41,90,41,120,-26,41,12,-15,41,41,41,41,41,41,-57,-58,-59,-60,-61,-62,41,-71,-77,175,180,-48,-49,-50,-51,-13,-14,188,41,12,12,12,41,-31,12,214,90,90,41,90,12,90,41,-107,-108,12,-70,-65,90,-91,-22,-23,-28,90,-88,-93,-29,-66,-90,12,-30,-92,-89,-33,]),'RETURN':([0,2,3,4,13,14,15,16,17,18,24,25,26,29,45,46,77,79,96,126,127,136,137,155,158,159,168,169,201,210,212,221,230,241,242,246,251,256,259,261,263,265,266,268,270,271,],[19,19,19,19,-19,-20,-21,-16,-17,-18,-67,-68,-69,-24,-25,-27,-26,19,-15,-71,-77,-13,-14,19,19,19,-31,19,19,19,-70,-65,-91,-22,-23,-28,-88,-93,-29,-66,-90,19,-30,-92,-89,-33,]),'FUNCTION':([0,2,3,4,13,14,15,16,17,18,24,25,26,29,45,46,77,79,96,126,127,136,137,155,158,159,168,169,201,210,212,221,230,241,242,246,251,256,259,261,263,265,266,268,270,271,],[20,20,20,20,-19,-20,-21,-16,-17,-18,-67,-68,-69,-24,-25,-27,-26,20,-15,-71,-77,-13,-14,20,20,20,-31,20,20,20,-70,-65,-91,-22,-23,-28,-88,-93,-29,-66,-90,20,-30,-92,-89,-33,]),'CONST':([0,2,3,4,13,14,15,16,17,18,24,25,26,29,44,45,46,77,79,96,126,127,128,136,137,155,158,159,168,169,201,210,212,221,230,241,242,246,251,256,259,261,263,265,266,268,270,271,],[21,21,21,21,-19,-20,-21,-16,-17,-18,-67,-68,-69,-24,21,-25,-27,-26,21,-15,-71,-77,21,-13,-14,21,21,21,-31,21,21,21,-70,-65,-91,-22,-23,-28,-88,-93,-29,-66,-90,21,-30,-92,-89,-33,]),'LET':([0,2,3,4,13,14,15,16,17,18,24,25,26,29,44,45,46,77,79,96,126,127,128,136,137,155,158,159,168,169,201,210,212,221,230,241,242,246,251,256,259,261,263,265,266,268,270,271,],[22,22,22,22,-19,-20,-21,-16,-17,-18,-67,-68,-69,-24,22,-25,-27,-26,22,-15,-71,-77,22,-13,-14,22,22,22,-31,22,22,22,-70,-65,-91,-22,-23,-28,-88,-93,-29,-66,-90,22,-30,-92,-89,-33,]),'VAR':([0,2,3,4,13,14,15,16,17,18,24,25,26,29,44,45,46,77,79,96,126,127,128,136,137,155,158,159,168,169,201,210,212,221,230,241,242,246,251,256,259,261,263,265,266,268,270,271,],[23,23,23,23,-19,-20,-21,-16,-17,-18,-67,-68,-69,-24,23,-25,-27,-26,23,-15,-71,-77,23,-13,-14,23,23,23,-31,23,23,23,-70,-65,-91,-22,-23,-28,-88,-93,-29,-66,-90,23,-30,-92,-89,-33,]),'WHILE':([0,2,3,4,13,14,15,16,17,18,24,25,26,29,45,46,77,79,96,126,127,136,137,155,158,159,168,169,201,210,212,221,230,241,242,246,251,256,259,261,263,265,266,268,270,271,],[27,27,27,27,-19,-20,-21,-16,-17,-18,-67,-68,-69,-24,-25,-27,-26,27,-15,-71,-77,-13,-14,27,27,27,-31,27,27,27,-70,-65,-91,-22,-23,-28,-88,-93,-29,-66,-90,27,-30,-92,-89,-33,]),'FOR':([0,2,3,4,13,14,15,16,17,18,24,25,26,29,45,46,77,79,96,126,127,136,137,155,158,159,168,169,201,210,212,221,230,241,242,246,251,256,259,261,263,265,266,268,270,271,],[28,28,28,28,-19,-20,-21,-16,-17,-18,-67,-68,-69,-24,-25,-27,-26,28,-15,-71,-77,-13,-14,28,28,28,-31,28,28,28,-70,-65,-91,-22,-23,-28,-88,-93,-29,-66,-90,28,-30,-92,-89,-33,]),'IF':([0,2,3,4,13,14,15,16,17,18,24,25,26,29,45,46,77,79,96,126,127,136,137,155,158,159,168,169,201,210,212,221,230,241,242,246,251,256,259,261,263,265,266,268,270,271,],[30,30,30,30,-19,-20,-21,-16,-17,-18,-67,-68,-69,-24,-25,-27,-26,30,-15,-71,-77,-13,-14,30,30,30,-31,30,30,30,-70,-65,-91,-22,-23,-28,-88,-93,30,-66,-90,30,-30,-92,-89,-33,]),'$end':([1,2,3,4,5,6,7,8,9,10,13,14,15,16,17,18,24,25,26,29,31,33,34,45,46,67,77,96,97,126,127,136,137,168,194,197,212,221,230,233,234,235,236,237,238,239,241,242,246,251,256,257,259,261,263,266,268,270,271,],[0,-1,-3,-5,-7,-8,-9,-10,-11,-12,-19,-20,-21,-16,-17,-18,-67,-68,-69,-24,-2,-4,-6,-25,-27,-117,-26,-15,-106,-71,-77,-13,-14,-31,-82,-85,-70,-65,-91,-94,-95,-83,-84,-86,-87,-113,-22,-23,-28,-88,-93,-114,-29,-66,-90,-30,-92,-89,-33,]),'CLOSE_BRACE':([2,3,4,5,6,7,8,9,10,13,14,15,16,17,18,24,25,26,29,31,33,34,45,46,58,67,77,82,83,85,88,89,96,97,123,126,127,136,137,168,171,172,173,177,194,197,200,202,203,211,212,216,221,230,233,234,235,236,237,238,239,240,241,242,245,246,247,251,256,257,259,260,261,263,266,268,269,270,271,],[-1,-3,-5,-7,-8,-9,-10,-11,-12,-19,-20,-21,-16,-17,-18,-67,-68,-69,-24,-2,-4,-6,-25,-27,-47,-117,-26,126,127,-78,-45,-46,-15,-106,168,-71,-77,-13,-14,-31,-72,-75,-76,-79,-82,-85,239,241,242,246,-70,-80,-65,-91,-94,-95,-83,-84,-86,-87,-113,257,-22,-23,259,-28,-73,-88,-93,-114,-29,-81,-66,-90,-30,-92,271,-89,-33,]),'IGUAL':([2,12,35,76,96,120,136,137,175,176,214,],[32,36,52,121,-15,165,-13,-14,215,32,248,]),'POINT':([12,],[37,]),'COMMA':([13,14,15,24,25,26,58,85,88,89,126,127,130,141,142,171,172,173,212,216,221,230,251,256,260,261,263,268,270,],[-19,-20,-21,-67,-68,-69,-47,129,-45,-46,-71,-77,179,183,184,213,-75,-76,-70,-80,-65,-91,-88,-93,-81,-66,-90,-92,-89,]),'STRING':([19,36,39,40,41,43,49,51,52,68,78,87,93,99,100,102,103,105,106,109,112,113,114,115,116,117,118,119,128,146,164,179,184,185,186,190,205,206,207,213,215,226,248,],[39,57,-103,-104,-105,39,39,89,89,39,39,89,142,39,39,89,89,39,39,39,39,-57,-58,-59,-60,-61,-62,39,89,39,39,89,142,142,39,142,39,-107,-108,89,89,142,89,]),'NUMBER':([19,36,39,40,41,43,49,51,52,68,78,87,93,99,100,102,103,105,106,109,112,113,114,115,116,117,118,119,121,128,131,132,133,134,135,145,146,164,165,179,180,181,183,185,186,188,190,204,205,206,207,213,215,226,228,248,],[40,56,-103,-104,-105,40,40,88,95,40,40,88,141,40,40,88,88,40,40,40,40,-57,-58,-59,-60,-61,-62,40,166,88,181,-48,-49,-50,-51,187,40,40,209,88,219,219,141,141,40,219,141,219,40,-107,-108,88,88,141,219,95,]),'OPEN_PARENTHESIS':([27,28,30,42,47,59,60,61,62,63,64,65,66,81,98,143,144,],[43,44,49,68,78,99,100,101,102,103,104,105,106,125,146,185,186,]),'ELSEIF':([29,246,],[47,-28,]),'ELSE':([29,45,246,259,266,],[48,48,-28,-29,-30,]),'NEW':([32,36,52,215,248,],[50,55,94,55,94,]),'OPEN_BRACE':([32,48,107,110,111,124,156,167,258,],[51,79,155,158,159,169,201,210,265,]),'CHAR':([36,51,52,87,102,103,128,179,213,215,248,],[58,58,58,58,58,58,58,58,58,58,58,]),'ADD':([37,],[59,]),'DELETE':([37,],[60,]),'CLEAR':([37,],[61,]),'GET':([37,],[62,]),'HAS':([37,],[63,]),'POP':([37,],[64,]),'PUSH':([37,],[65,]),'UNSHIFT':([37,],[66,]),'SEMICOLON':([38,39,40,41,53,54,56,57,58,72,73,74,88,89,90,91,92,95,149,152,160,161,162,163,166,170,178,181,182,187,188,189,192,193,195,196,198,199,208,209,218,219,220,225,229,232,244,249,250,253,254,264,267,],[67,-103,-104,-105,96,97,-45,-46,-47,-52,-53,119,-45,-46,-37,136,137,-38,194,197,-32,204,-109,-110,-35,212,216,-42,221,-36,-41,230,233,234,235,236,237,238,-111,-34,-43,-38,-40,251,-39,256,-112,260,261,263,-44,268,270,]),'IGUALIGUAL':([39,40,41,71,],[-103,-104,-105,113,]),'DIFERENTE':([39,40,41,71,],[-103,-104,-105,114,]),'MAYORQUE':([39,40,41,71,],[-103,-104,-105,115,]),'MAYORIGUALQUE':([39,40,41,71,],[-103,-104,-105,116,]),'MENORQUE':([39,40,41,71,],[-103,-104,-105,117,]),'MENORIGUALQUE':([39,40,41,71,],[-103,-104,-105,118,]),'CLOSE_PARENTHESIS':([39,40,41,58,68,69,70,72,73,80,86,88,89,90,101,104,108,109,122,125,139,140,141,142,146,147,148,150,151,153,154,157,160,181,186,187,188,191,218,219,220,222,223,224,227,229,243,254,255,262,],[-103,-104,-105,-47,107,110,111,-52,-53,124,-74,-45,-46,-37,149,152,156,-115,167,170,-97,-98,-99,-101,189,192,193,195,196,198,199,-116,-32,-42,225,-36,-41,232,-43,-38,-40,-100,-102,250,253,-39,258,-44,264,267,]),'AND':([39,40,41,72,73,160,161,162,163,208,244,],[-103,-104,-105,-52,-53,-32,206,-109,-110,206,206,]),'OR':([39,40,41,72,73,160,161,162,163,208,244,],[-103,-104,-105,-52,-53,-32,207,-109,-110,207,207,]),'TRUE':([43,119,164,205,206,207,],[72,72,72,72,-107,-108,]),'FALSE':([43,119,164,205,206,207,],[73,73,73,73,-107,-108,]),'MAP':([50,],[81,]),'OPEN_BRACKET':([51,52,129,146,186,248,],[87,93,87,190,226,93,]),'SET':([55,94,],[98,144,]),'COLON':([58,84,86,88,89,],[-47,128,-74,-45,-46,]),'CLOSE_BRACKET':([58,88,89,130,138,139,140,141,142,217,222,223,231,252,],[-47,-45,-46,178,182,-97,-98,-99,-101,249,-100,-102,255,262,]),'SUMA':([90,95,187,219,],[132,132,132,132,]),'RESTA':([90,95,187,219,],[133,133,133,133,]),'MULTIPLICACION':([90,95,187,219,],[134,134,134,134,]),'DIVISION':([90,95,187,219,],[135,135,135,135,]),'ARRAY':([94,],[143,]),'NOT':([119,164,205,206,207,],[164,164,164,-107,-108,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'expression':([0,2,3,4,79,155,158,159,169,201,210,265,],[1,31,33,34,123,200,202,203,211,240,245,269,]),'variable':([0,2,3,4,79,128,155,158,159,169,201,210,265,],[2,2,2,2,2,176,2,2,2,2,2,2,2,]),'dataStruct':([0,2,3,4,79,128,155,158,159,169,201,210,265,],[3,3,3,3,3,173,3,3,3,3,3,3,3,]),'controlStruct':([0,2,3,4,79,155,158,159,169,201,210,265,],[4,4,4,4,4,4,4,4,4,4,4,4,]),'methodsSet':([0,2,3,4,79,155,158,159,169,201,210,265,],[5,5,5,5,5,5,5,5,5,5,5,5,]),'mapFunctions':([0,2,3,4,79,155,158,159,169,201,210,265,],[6,6,6,6,6,6,6,6,6,6,6,6,]),'arrayFn':([0,2,3,4,79,155,158,159,169,201,210,265,],[7,7,7,7,7,7,7,7,7,7,7,7,]),'declaration':([0,2,3,4,79,155,158,159,169,201,210,265,],[8,8,8,8,8,8,8,8,8,8,8,8,]),'return':([0,2,3,4,79,155,158,159,169,201,210,265,],[9,9,9,9,9,9,9,9,9,9,9,9,]),'function':([0,2,3,4,79,155,158,159,169,201,210,265,],[10,10,10,10,10,10,10,10,10,10,10,10,]),'type':([0,2,3,4,44,79,128,155,158,159,169,201,210,265,],[11,11,11,11,75,11,174,11,11,11,11,11,11,11,]),'array':([0,2,3,4,79,128,155,158,159,169,201,210,265,],[13,13,13,13,13,13,13,13,13,13,13,13,13,]),'set':([0,2,3,4,79,128,155,158,159,169,201,210,265,],[14,14,14,14,14,14,14,14,14,14,14,14,14,]),'map':([0,2,3,4,79,128,155,158,159,169,201,210,265,],[15,15,15,15,15,15,15,15,15,15,15,15,15,]),'while':([0,2,3,4,79,155,158,159,169,201,210,265,],[16,16,16,16,16,16,16,16,16,16,16,16,]),'for':([0,2,3,4,79,155,158,159,169,201,210,265,],[17,17,17,17,17,17,17,17,17,17,17,17,]),'if':([0,2,3,4,79,155,158,159,169,201,210,265,],[18,18,18,18,18,18,18,18,18,18,18,18,]),'iniciarMap':([0,2,3,4,79,128,155,158,159,169,201,210,265,],[24,24,24,24,24,24,24,24,24,24,24,24,24,]),'escribirMap':([0,2,3,4,79,128,155,158,159,169,201,210,265,],[25,25,25,25,25,25,25,25,25,25,25,25,25,]),'generarMap':([0,2,3,4,79,128,155,158,159,169,201,210,265,],[26,26,26,26,26,26,26,26,26,26,26,26,26,]),'soloIf':([0,2,3,4,79,155,158,159,169,201,210,259,265,],[29,29,29,29,29,29,29,29,29,29,29,266,29,]),'element':([19,36,43,49,68,78,99,100,105,106,109,112,119,146,164,186,205,],[38,54,71,71,109,71,147,148,153,154,109,160,71,191,71,227,71,]),'elseIf':([29,],[45,]),'else':([29,45,],[46,77,]),'datatype':([36,51,52,87,102,103,128,179,213,215,248,],[53,86,91,130,86,86,172,217,86,53,91,]),'controlArg':([43,49,78,119,164,205,],[69,80,122,162,162,162,]),'bool':([43,119,164,205,],[70,163,163,163,]),'inicialization':([44,],[74,]),'claveValor':([51,213,],[82,247,]),'tuplas':([51,129,],[83,177,]),'clave':([51,102,103,213,],[84,150,151,84,]),'tupla':([51,129,],[85,85,]),'operations':([52,180,181,188,204,228,248,],[92,218,220,229,243,254,92,]),'parameter':([68,109,],[108,157,]),'clause':([71,],[112,]),'operand':([90,95,187,219,],[131,145,228,145,]),'items':([93,185,190,226,],[138,224,231,252,]),'numeros':([93,183,185,190,226,],[139,222,139,139,139,]),'cadena':([93,184,185,190,226,],[140,223,140,140,140,]),'expBoolean':([119,164,205,],[161,208,244,]),'valor':([128,],[171,]),'logicalOperator':([161,208,244,],[205,205,205,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> expression","S'",1,None,None,None),
  ('expression -> variable','expression',1,'p_expression_expr','sintactical.py',12),
  ('expression -> variable expression','expression',2,'p_expression_expr','sintactical.py',13),
  ('expression -> dataStruct','expression',1,'p_expression_expr','sintactical.py',14),
  ('expression -> dataStruct expression','expression',2,'p_expression_expr','sintactical.py',15),
  ('expression -> controlStruct','expression',1,'p_expression_expr','sintactical.py',16),
  ('expression -> controlStruct expression','expression',2,'p_expression_expr','sintactical.py',17),
  ('expression -> methodsSet','expression',1,'p_expression_expr','sintactical.py',18),
  ('expression -> mapFunctions','expression',1,'p_expression_expr','sintactical.py',19),
  ('expression -> arrayFn','expression',1,'p_expression_expr','sintactical.py',20),
  ('expression -> declaration','expression',1,'p_expression_expr','sintactical.py',21),
  ('expression -> return','expression',1,'p_expression_expr','sintactical.py',22),
  ('expression -> function','expression',1,'p_expression_expr','sintactical.py',23),
  ('variable -> type NAME IGUAL datatype SEMICOLON','variable',5,'p_variable_expr','sintactical.py',26),
  ('variable -> type NAME IGUAL operations SEMICOLON','variable',5,'p_variable_expr','sintactical.py',27),
  ('variable -> NAME IGUAL datatype SEMICOLON','variable',4,'p_variable_expr','sintactical.py',28),
  ('controlStruct -> while','controlStruct',1,'p_controlStruct_expr','sintactical.py',31),
  ('controlStruct -> for','controlStruct',1,'p_controlStruct_expr','sintactical.py',32),
  ('controlStruct -> if','controlStruct',1,'p_controlStruct_expr','sintactical.py',33),
  ('dataStruct -> array','dataStruct',1,'p_dataStruct_expr','sintactical.py',36),
  ('dataStruct -> set','dataStruct',1,'p_dataStruct_expr','sintactical.py',37),
  ('dataStruct -> map','dataStruct',1,'p_dataStruct_expr','sintactical.py',38),
  ('while -> WHILE OPEN_PARENTHESIS controlArg CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE','while',7,'p_while_expr','sintactical.py',41),
  ('while -> WHILE OPEN_PARENTHESIS bool CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE','while',7,'p_while_expr','sintactical.py',42),
  ('if -> soloIf','if',1,'p_if_expr','sintactical.py',45),
  ('if -> soloIf elseIf','if',2,'p_if_expr','sintactical.py',46),
  ('if -> soloIf elseIf else','if',3,'p_if_expr','sintactical.py',47),
  ('if -> soloIf else','if',2,'p_if_expr','sintactical.py',48),
  ('soloIf -> IF OPEN_PARENTHESIS controlArg CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE','soloIf',7,'p_soloIf_expr','sintactical.py',51),
  ('elseIf -> ELSEIF OPEN_PARENTHESIS controlArg CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE','elseIf',7,'p_elseIf_expr','sintactical.py',54),
  ('elseIf -> ELSEIF OPEN_PARENTHESIS controlArg CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE soloIf','elseIf',8,'p_elseIf_expr','sintactical.py',55),
  ('else -> ELSE OPEN_BRACE expression CLOSE_BRACE','else',4,'p_else_expr','sintactical.py',58),
  ('controlArg -> element clause element','controlArg',3,'p_controlArg_expr','sintactical.py',61),
  ('for -> FOR OPEN_PARENTHESIS inicialization SEMICOLON expBoolean SEMICOLON operations CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE','for',11,'p_for_expr','sintactical.py',64),
  ('inicialization -> type NAME IGUAL NUMBER','inicialization',4,'p_inicialization','sintactical.py',67),
  ('inicialization -> NAME IGUAL NUMBER','inicialization',3,'p_inicialization','sintactical.py',68),
  ('operations -> NUMBER operand NUMBER','operations',3,'p_operations','sintactical.py',71),
  ('operations -> NAME','operations',1,'p_operations','sintactical.py',72),
  ('operations -> NUMBER','operations',1,'p_operations','sintactical.py',73),
  ('operations -> NUMBER operand NAME operations','operations',4,'p_operations','sintactical.py',74),
  ('operations -> NAME operand NUMBER operations','operations',4,'p_operations','sintactical.py',75),
  ('operations -> NUMBER operand NAME','operations',3,'p_operations','sintactical.py',76),
  ('operations -> NAME operand NUMBER','operations',3,'p_operations','sintactical.py',77),
  ('operations -> NAME operand NAME operations','operations',4,'p_operations','sintactical.py',78),
  ('operations -> NUMBER operand NUMBER operand operations','operations',5,'p_operations','sintactical.py',79),
  ('datatype -> NUMBER','datatype',1,'p_datatype_expr','sintactical.py',82),
  ('datatype -> STRING','datatype',1,'p_datatype_expr','sintactical.py',83),
  ('datatype -> CHAR','datatype',1,'p_datatype_expr','sintactical.py',84),
  ('operand -> SUMA','operand',1,'p_operand_expr','sintactical.py',87),
  ('operand -> RESTA','operand',1,'p_operand_expr','sintactical.py',88),
  ('operand -> MULTIPLICACION','operand',1,'p_operand_expr','sintactical.py',89),
  ('operand -> DIVISION','operand',1,'p_operand_expr','sintactical.py',90),
  ('bool -> TRUE','bool',1,'p_bool_expr','sintactical.py',93),
  ('bool -> FALSE','bool',1,'p_bool_expr','sintactical.py',94),
  ('type -> CONST','type',1,'p_type_expr','sintactical.py',97),
  ('type -> LET','type',1,'p_type_expr','sintactical.py',98),
  ('type -> VAR','type',1,'p_type_expr','sintactical.py',99),
  ('clause -> IGUALIGUAL','clause',1,'p_clause_expr','sintactical.py',102),
  ('clause -> DIFERENTE','clause',1,'p_clause_expr','sintactical.py',103),
  ('clause -> MAYORQUE','clause',1,'p_clause_expr','sintactical.py',104),
  ('clause -> MAYORIGUALQUE','clause',1,'p_clause_expr','sintactical.py',105),
  ('clause -> MENORQUE','clause',1,'p_clause_expr','sintactical.py',106),
  ('clause -> MENORIGUALQUE','clause',1,'p_clause_expr','sintactical.py',107),
  ('value -> NAME','value',1,'p_value_expr','sintactical.py',110),
  ('value -> NUMBER','value',1,'p_value_expr','sintactical.py',111),
  ('array -> type NAME IGUAL OPEN_BRACKET items CLOSE_BRACKET SEMICOLON','array',7,'p_array_expr','sintactical.py',114),
  ('array -> type NAME IGUAL NEW ARRAY OPEN_PARENTHESIS items CLOSE_PARENTHESIS SEMICOLON','array',9,'p_array_expr','sintactical.py',115),
  ('map -> iniciarMap','map',1,'p_map_expr','sintactical.py',118),
  ('map -> escribirMap','map',1,'p_map_expr','sintactical.py',119),
  ('map -> generarMap','map',1,'p_map_expr','sintactical.py',120),
  ('iniciarMap -> variable IGUAL NEW MAP OPEN_PARENTHESIS CLOSE_PARENTHESIS SEMICOLON','iniciarMap',7,'p_iniciarMap_expr','sintactical.py',123),
  ('escribirMap -> variable IGUAL OPEN_BRACE claveValor CLOSE_BRACE','escribirMap',5,'p_escribirMap_expr','sintactical.py',126),
  ('claveValor -> clave COLON valor','claveValor',3,'p_claveValor_expr','sintactical.py',129),
  ('claveValor -> clave COLON valor COMMA claveValor','claveValor',5,'p_claveValor_expr','sintactical.py',130),
  ('clave -> datatype','clave',1,'p_clave_expr','sintactical.py',133),
  ('valor -> datatype','valor',1,'p_valor_expr','sintactical.py',136),
  ('valor -> dataStruct','valor',1,'p_valor_expr','sintactical.py',137),
  ('generarMap -> variable IGUAL OPEN_BRACE tuplas CLOSE_BRACE','generarMap',5,'p_generarMap_expr','sintactical.py',140),
  ('tuplas -> tupla','tuplas',1,'p_tuplas_expr','sintactical.py',143),
  ('tuplas -> tupla COMMA tuplas','tuplas',3,'p_tuplas_expr','sintactical.py',144),
  ('tupla -> OPEN_BRACKET datatype CLOSE_BRACKET SEMICOLON','tupla',4,'p_tupla_expr','sintactical.py',147),
  ('tupla -> OPEN_BRACKET datatype COMMA datatype CLOSE_BRACKET SEMICOLON','tupla',6,'p_tupla_expr','sintactical.py',148),
  ('mapFunctions -> NAME POINT CLEAR OPEN_PARENTHESIS CLOSE_PARENTHESIS SEMICOLON','mapFunctions',6,'p_mapFunctions_expr','sintactical.py',151),
  ('mapFunctions -> NAME POINT GET OPEN_PARENTHESIS clave CLOSE_PARENTHESIS SEMICOLON','mapFunctions',7,'p_mapFunctions_expr','sintactical.py',152),
  ('mapFunctions -> NAME POINT HAS OPEN_PARENTHESIS clave CLOSE_PARENTHESIS SEMICOLON','mapFunctions',7,'p_mapFunctions_expr','sintactical.py',153),
  ('arrayFn -> NAME POINT POP OPEN_PARENTHESIS CLOSE_PARENTHESIS SEMICOLON','arrayFn',6,'p_arrayFn_expr','sintactical.py',156),
  ('arrayFn -> NAME POINT PUSH OPEN_PARENTHESIS element CLOSE_PARENTHESIS SEMICOLON','arrayFn',7,'p_arrayFn_expr','sintactical.py',157),
  ('arrayFn -> NAME POINT UNSHIFT OPEN_PARENTHESIS element CLOSE_PARENTHESIS SEMICOLON','arrayFn',7,'p_arrayFn_expr','sintactical.py',158),
  ('set -> type NAME IGUAL NEW SET OPEN_PARENTHESIS CLOSE_PARENTHESIS SEMICOLON','set',8,'p_set_expr','sintactical.py',161),
  ('set -> type NAME IGUAL NEW SET OPEN_PARENTHESIS OPEN_BRACKET items CLOSE_BRACKET CLOSE_PARENTHESIS SEMICOLON','set',11,'p_set_expr','sintactical.py',162),
  ('set -> type NAME IGUAL NEW SET OPEN_PARENTHESIS element CLOSE_PARENTHESIS SEMICOLON','set',9,'p_set_expr','sintactical.py',163),
  ('set -> NAME IGUAL NEW SET OPEN_PARENTHESIS CLOSE_PARENTHESIS SEMICOLON','set',7,'p_set_expr','sintactical.py',164),
  ('set -> NAME IGUAL NEW SET OPEN_PARENTHESIS OPEN_BRACKET items CLOSE_BRACKET CLOSE_PARENTHESIS SEMICOLON','set',10,'p_set_expr','sintactical.py',165),
  ('set -> NAME IGUAL NEW SET OPEN_PARENTHESIS element CLOSE_PARENTHESIS SEMICOLON','set',8,'p_set_expr','sintactical.py',166),
  ('methodsSet -> NAME POINT ADD OPEN_PARENTHESIS element CLOSE_PARENTHESIS SEMICOLON','methodsSet',7,'p_methodsSet_expr','sintactical.py',169),
  ('methodsSet -> NAME POINT DELETE OPEN_PARENTHESIS element CLOSE_PARENTHESIS SEMICOLON','methodsSet',7,'p_methodsSet_expr','sintactical.py',170),
  ('methodsSet -> NAME POINT CLEAR OPEN_PARENTHESIS CLOSE_PARENTHESIS SEMICOLON','methodsSet',6,'p_methodsSet_expr','sintactical.py',171),
  ('items -> numeros','items',1,'p_items_expr','sintactical.py',174),
  ('items -> cadena','items',1,'p_items_expr','sintactical.py',175),
  ('numeros -> NUMBER','numeros',1,'p_numeros_expr','sintactical.py',178),
  ('numeros -> NUMBER COMMA numeros','numeros',3,'p_numeros_expr','sintactical.py',179),
  ('cadena -> STRING','cadena',1,'p_cadena_expr','sintactical.py',182),
  ('cadena -> STRING COMMA cadena','cadena',3,'p_cadena_expr','sintactical.py',183),
  ('element -> STRING','element',1,'p_element_expr','sintactical.py',186),
  ('element -> NUMBER','element',1,'p_element_expr','sintactical.py',187),
  ('element -> NAME','element',1,'p_element_expr','sintactical.py',188),
  ('declaration -> NAME IGUAL element SEMICOLON','declaration',4,'p_declaration_expr','sintactical.py',191),
  ('logicalOperator -> AND','logicalOperator',1,'p_logicalOperator_expr','sintactical.py',194),
  ('logicalOperator -> OR','logicalOperator',1,'p_logicalOperator_expr','sintactical.py',195),
  ('expBoolean -> controlArg','expBoolean',1,'p_expBoolean_expr','sintactical.py',198),
  ('expBoolean -> bool','expBoolean',1,'p_expBoolean_expr','sintactical.py',199),
  ('expBoolean -> NOT expBoolean','expBoolean',2,'p_expBoolean_expr','sintactical.py',200),
  ('expBoolean -> expBoolean logicalOperator expBoolean','expBoolean',3,'p_expBoolean_expr','sintactical.py',201),
  ('function -> FUNCTION NAME OPEN_PARENTHESIS CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE','function',7,'p_function_expr','sintactical.py',204),
  ('function -> FUNCTION NAME OPEN_PARENTHESIS parameter CLOSE_PARENTHESIS OPEN_BRACE expression CLOSE_BRACE','function',8,'p_function_expr','sintactical.py',205),
  ('parameter -> element','parameter',1,'p_parameter_expr','sintactical.py',208),
  ('parameter -> element parameter','parameter',2,'p_parameter_expr','sintactical.py',209),
  ('return -> RETURN element SEMICOLON','return',3,'p_return_expr','sintactical.py',213),
]
